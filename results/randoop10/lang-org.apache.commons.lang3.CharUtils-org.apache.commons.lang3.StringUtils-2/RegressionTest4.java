import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        boolean boolean4 = codeSource2.equals((java.lang.Object) 4);
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.LocalTime localTime12 = java.time.LocalTime.now(clock11);
        java.time.LocalTime localTime14 = localTime12.plusHours((long) 16384);
        java.time.LocalTime localTime16 = localTime12.minusNanos(0L);
        boolean boolean17 = codeSource2.equals((java.lang.Object) localTime16);
        java.security.PermissionCollection permissionCollection18 = null;
        java.lang.ClassLoader classLoader19 = null;
        java.net.URL uRL20 = null;
        java.security.CodeSigner[] codeSignerArray21 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource22 = new java.security.CodeSource(uRL20, codeSignerArray21);
        boolean boolean24 = codeSource22.equals((java.lang.Object) 4);
        java.lang.String str25 = codeSource22.toString();
        java.lang.String str26 = codeSource22.toString();
        java.net.URL uRL27 = null;
        java.security.CodeSigner[] codeSignerArray28 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource29 = new java.security.CodeSource(uRL27, codeSignerArray28);
        boolean boolean31 = codeSource29.equals((java.lang.Object) 4);
        java.lang.String str32 = codeSource29.toString();
        java.lang.String str33 = codeSource29.toString();
        boolean boolean34 = codeSource22.implies(codeSource29);
        java.security.PermissionCollection permissionCollection35 = null;
        java.security.ProtectionDomain protectionDomain36 = new java.security.ProtectionDomain(codeSource22, permissionCollection35);
        java.security.Principal[] principalArray37 = protectionDomain36.getPrincipals();
        java.security.ProtectionDomain protectionDomain38 = new java.security.ProtectionDomain(codeSource2, permissionCollection18, classLoader19, principalArray37);
        java.net.URL uRL39 = null;
        java.security.CodeSigner[] codeSignerArray40 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource41 = new java.security.CodeSource(uRL39, codeSignerArray40);
        boolean boolean43 = codeSource41.equals((java.lang.Object) 4);
        java.lang.String str44 = codeSource41.toString();
        java.lang.String str45 = codeSource41.toString();
        java.net.URL uRL46 = null;
        java.security.CodeSigner[] codeSignerArray47 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource48 = new java.security.CodeSource(uRL46, codeSignerArray47);
        boolean boolean50 = codeSource48.equals((java.lang.Object) 4);
        java.lang.String str51 = codeSource48.toString();
        java.lang.String str52 = codeSource48.toString();
        boolean boolean53 = codeSource41.implies(codeSource48);
        java.security.CodeSigner[] codeSignerArray54 = codeSource41.getCodeSigners();
        boolean boolean55 = codeSource2.implies(codeSource41);
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(codeSignerArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(null <no signer certificates>)" + "'", str25, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(null <no signer certificates>)" + "'", str26, "(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(codeSignerArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(null <no signer certificates>)" + "'", str32, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(null <no signer certificates>)" + "'", str33, "(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals(protectionDomain36.toString(), "ProtectionDomain  (null <no signer certificates>)\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(principalArray37);
        org.junit.Assert.assertNotNull(codeSignerArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(null <no signer certificates>)" + "'", str44, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(null <no signer certificates>)" + "'", str45, "(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(codeSignerArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(null <no signer certificates>)" + "'", str51, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(null <no signer certificates>)" + "'", str52, "(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(codeSignerArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        boolean boolean3 = byteBuffer1.hasArray();
        boolean boolean4 = byteBuffer1.hasRemaining();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.plusHours((long) 21);
        int int10 = offsetDateTime7.getSecond();
        java.lang.String str11 = offsetDateTime7.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+277999999-12-31T23:59:59.999999999Z" + "'", str11, "+277999999-12-31T23:59:59.999999999Z");
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 371000000);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE;
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        int int7 = charBuffer2.compareTo(charBuffer5);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (byte) -1);
        java.time.temporal.TemporalAccessor temporalAccessor10 = dateTimeFormatter0.parseUnresolved((java.lang.CharSequence) charBuffer2, parsePosition9);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer13 = charBuffer12.flip();
        java.nio.CharBuffer charBuffer14 = charBuffer12.duplicate();
        char[] charArray22 = new char[] { 'a', '#', '4', '#' };
        boolean boolean23 = org.apache.commons.lang3.StringUtils.containsAny("", charArray22);
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray22);
        boolean boolean25 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray22);
        int int26 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer14, charArray22);
        java.nio.Buffer buffer27 = charBuffer14.clear();
        java.nio.CharBuffer charBuffer29 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer30 = charBuffer29.flip();
        java.nio.CharBuffer charBuffer31 = charBuffer29.duplicate();
        char[] charArray39 = new char[] { 'a', '#', '4', '#' };
        boolean boolean40 = org.apache.commons.lang3.StringUtils.containsAny("", charArray39);
        boolean boolean41 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray39);
        boolean boolean42 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray39);
        int int43 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer31, charArray39);
        java.nio.CharBuffer charBuffer44 = charBuffer14.append((java.lang.CharSequence) charBuffer31);
        java.nio.CharBuffer charBuffer45 = charBuffer2.put(charBuffer31);
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.stripAccents((java.lang.CharSequence) charBuffer2);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(temporalAccessor10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(buffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(buffer27);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(buffer30);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charBuffer44);
        org.junit.Assert.assertNotNull(charBuffer45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        java.time.Period period1 = java.time.Period.ofDays(971000000);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.chrono.ChronoPeriod chronoPeriod5 = period1.multipliedBy((int) (short) 100);
        int int6 = period1.getMonths();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.zone.ZoneRules zoneRules17 = zoneOffset15.getRules();
        java.time.ZonedDateTime zonedDateTime18 = offsetDateTime10.atZoneSameInstant((java.time.ZoneId) zoneOffset15);
        int int19 = zonedDateTime18.getDayOfMonth();
        int int20 = zonedDateTime18.getHour();
        java.time.Instant instant21 = zonedDateTime18.toInstant();
        java.time.temporal.Temporal temporal22 = period1.addTo((java.time.temporal.Temporal) zonedDateTime18);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(chronoPeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(temporal22);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultIfBlank("_MINUTE", "OptionalDouble.empty");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "_MINUTE" + "'", str2, "_MINUTE");
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        org.junit.Assert.assertNotNull(objSet1);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) '4');
        java.nio.LongBuffer longBuffer2 = longBuffer1.slice();
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        java.net.URI uRI1 = java.net.URI.create("PT10S");
        java.lang.Class<?> wildcardClass2 = uRI1.getClass();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        double[] doubleArray5 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.util.OptionalDouble optionalDouble7 = doubleStream6.min();
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfDouble ofDouble8 = doubleStream6.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str7 = localDate1.format(dateTimeFormatter6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        java.text.Format format15 = dateTimeFormatter6.toFormat(periodTemporalQuery13);
        java.time.format.DateTimeFormatter dateTimeFormatter17 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE;
        java.nio.CharBuffer charBuffer19 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer20 = charBuffer19.flip();
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer23 = charBuffer22.flip();
        int int24 = charBuffer19.compareTo(charBuffer22);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (byte) -1);
        java.time.temporal.TemporalAccessor temporalAccessor27 = dateTimeFormatter17.parseUnresolved((java.lang.CharSequence) charBuffer19, parsePosition26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor28 = dateTimeFormatter6.parse((java.lang.CharSequence) "\u4e94", parsePosition26);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-999999999-01-01" + "'", str7, "-999999999-01-01");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(format15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(buffer20);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(temporalAccessor27);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.now(clock6);
        int int9 = offsetDateTime8.getSecond();
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime8.minusSeconds(52177497285L);
        java.util.Set<java.lang.String> strSet12 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month13 = java.time.Month.OCTOBER;
        java.time.Month month15 = month13.plus(0L);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.temporal.Temporal temporal27 = month15.adjustInto((java.time.temporal.Temporal) localDateTime17);
        boolean boolean28 = strSet12.equals((java.lang.Object) month15);
        java.security.ProtectionDomain[] protectionDomainArray29 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext30 = new java.security.AccessControlContext(protectionDomainArray29);
        java.time.LocalDate localDate31 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery32 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period33 = localDate31.query(periodTemporalQuery32);
        boolean boolean34 = accessControlContext30.equals((java.lang.Object) periodTemporalQuery32);
        java.time.Period period35 = month15.query(periodTemporalQuery32);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        int int41 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime37.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime48 = localDateTime42.withHour(4);
        java.util.stream.DoubleStream doubleStream49 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream50 = doubleStream49.distinct();
        java.util.stream.DoubleStream doubleStream51 = doubleStream50.parallel();
        boolean boolean52 = localDateTime48.equals((java.lang.Object) doubleStream50);
        java.time.Period period53 = periodTemporalQuery32.queryFrom((java.time.temporal.TemporalAccessor) localDateTime48);
        java.time.Period period54 = offsetDateTime11.query(periodTemporalQuery32);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + month13 + "' != '" + java.time.Month.OCTOBER + "'", month13.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.OCTOBER + "'", month15.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(temporal27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(periodTemporalQuery32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(doubleStream49);
        org.junit.Assert.assertNotNull(doubleStream50);
        org.junit.Assert.assertNotNull(doubleStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        java.time.Month month0 = java.time.Month.OCTOBER;
        java.time.Month month2 = month0.plus(0L);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        int int8 = localDateTime3.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        int int13 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.temporal.Temporal temporal14 = month2.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        java.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks(0L);
        boolean boolean19 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime21 = localDateTime15.withDayOfYear(999999999);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 999999999");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.OCTOBER + "'", month0.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.OCTOBER + "'", month2.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.format.TextStyle textStyle2 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getISO3Language();
        java.time.format.DecimalStyle decimalStyle5 = java.time.format.DecimalStyle.of(locale3);
        java.lang.String str6 = chronology1.getDisplayName(textStyle2, locale3);
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime9 = offsetTime7.withSecond(16);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int11 = offsetTime9.get((java.time.temporal.TemporalField) chronoField10);
        java.time.temporal.ValueRange valueRange12 = chronology1.range(chronoField10);
        long long13 = valueRange12.getSmallestMaximum();
        long long14 = valueRange12.getLargestMinimum();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + textStyle2 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle2.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISO" + "'", str6, "ISO");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField10.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(valueRange12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 59L + "'", long13 == 59L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        int int2 = byteBuffer1.position();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer4 = byteBuffer3.asDoubleBuffer();
        java.nio.DoubleBuffer doubleBuffer5 = doubleBuffer4.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer6 = doubleBuffer4.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(doubleBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        float float6 = floatBuffer3.get();
        float[] floatArray9 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.ByteOrder byteOrder11 = floatBuffer10.order();
        int int12 = floatBuffer3.compareTo(floatBuffer10);
        java.nio.FloatBuffer floatBuffer13 = floatBuffer10.duplicate();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 16.0f + "'", float6 == 16.0f);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(byteOrder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(floatBuffer13);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        char[] charArray21 = new char[] { 'a', '#', '4', '#' };
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsAny("", charArray21);
        boolean boolean23 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray21);
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray21);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap26 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap26.getOrDefault((java.lang.Object) 1.0d, zoneRules32);
        java.lang.String str34 = zoneRules32.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = zoneRules32.getTransitions();
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap1.getOrDefault((java.lang.Object) charArray21, zoneRules32);
        java.util.Enumeration<java.time.zone.ZoneRules> zoneRulesEnumeration37 = zoneIdMap1.elements();
        zoneIdMap1.clear();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str34, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneRulesEnumeration37);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        org.junit.Assert.assertNotNull(attribute0);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str1, "\u4e2d\u6587\u4e2d\u56fd)");
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.ZonedDateTime zonedDateTime24 = offsetDateTime16.atZoneSameInstant((java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime24.withLaterOffsetAtOverlap();
        boolean boolean26 = zonedDateTime11.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime25);
        java.time.LocalDate localDate27 = java.time.LocalDate.now();
        java.time.LocalDate localDate28 = java.time.LocalDate.MIN;
        boolean boolean29 = localDate27.isEqual((java.time.chrono.ChronoLocalDate) localDate28);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.OffsetDateTime offsetDateTime35 = offsetDateTime33.withSecond((int) (byte) 0);
        java.time.LocalDate localDate36 = offsetDateTime33.toLocalDate();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean38 = offsetDateTime33.isSupported((java.time.temporal.TemporalField) chronoField37);
        boolean boolean39 = localDate27.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.lang.String str40 = chronoField37.toString();
        int int41 = zonedDateTime11.get((java.time.temporal.TemporalField) chronoField37);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.zone.ZoneRules zoneRules52 = zoneOffset50.getRules();
        java.time.ZonedDateTime zonedDateTime53 = offsetDateTime45.atZoneSameInstant((java.time.ZoneId) zoneOffset50);
        int int54 = zonedDateTime53.getDayOfMonth();
        int int55 = zonedDateTime53.getHour();
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.OffsetDateTime offsetDateTime61 = offsetDateTime59.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.zone.ZoneRules zoneRules66 = zoneOffset64.getRules();
        java.time.ZonedDateTime zonedDateTime67 = offsetDateTime59.atZoneSameInstant((java.time.ZoneId) zoneOffset64);
        java.time.ZoneId zoneId68 = zonedDateTime67.getZone();
        boolean boolean69 = zonedDateTime53.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime67);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime67.plusMonths((long) (-3));
        boolean boolean72 = zonedDateTime11.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime71);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField37.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "MicroOfSecond" + "'", str40, "MicroOfSecond");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 999999 + "'", int41 == 999999);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(zoneRules52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalTime localTime36 = localDateTime17.toLocalTime();
        java.time.LocalTime localTime37 = localDateTime17.toLocalTime();
        java.time.LocalDateTime localDateTime39 = localDateTime17.minusMonths((long) '-');
        java.time.Instant instant41 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant43 = instant41.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        java.time.zone.ZoneRules zoneRules48 = zoneOffset46.getRules();
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.ofInstant(instant41, (java.time.ZoneId) zoneOffset46);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap51 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap55 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.zone.ZoneRules zoneRules61 = zoneOffset59.getRules();
        java.time.zone.ZoneRules zoneRules62 = zoneIdMap55.getOrDefault((java.lang.Object) 1.0d, zoneRules61);
        java.time.zone.ZoneRules zoneRules63 = zoneIdMap51.put((java.time.ZoneId) zoneOffset53, zoneRules61);
        java.time.ZonedDateTime zonedDateTime64 = zonedDateTime49.withZoneSameLocal((java.time.ZoneId) zoneOffset53);
        long long65 = localDateTime39.toEpochSecond(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(zoneRules61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNull(zoneRules63);
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 31556889714412799L + "'", long65 == 31556889714412799L);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        int int10 = charBuffer9.capacity();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(charBuffer11);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        char[] charArray15 = new char[] { 'a', '#', '4', '#' };
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsAny("", charArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray15);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray15);
        int int19 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer7, charArray15);
        boolean boolean20 = charBuffer7.isDirect();
        java.nio.CharBuffer charBuffer21 = charBuffer2.append((java.lang.CharSequence) charBuffer7);
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer24 = charBuffer23.flip();
        java.nio.CharBuffer charBuffer26 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer27 = charBuffer26.flip();
        java.nio.CharBuffer charBuffer28 = charBuffer26.duplicate();
        char[] charArray36 = new char[] { 'a', '#', '4', '#' };
        boolean boolean37 = org.apache.commons.lang3.StringUtils.containsAny("", charArray36);
        boolean boolean38 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray36);
        boolean boolean39 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray36);
        int int40 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer28, charArray36);
        boolean boolean41 = charBuffer28.isDirect();
        java.nio.CharBuffer charBuffer42 = charBuffer23.append((java.lang.CharSequence) charBuffer28);
        java.nio.CharBuffer charBuffer43 = org.apache.commons.lang3.StringUtils.defaultIfEmpty(charBuffer7, charBuffer42);
        boolean boolean44 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) charBuffer42);
        int int45 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "java.security.cert.CertificateEncodingException", (java.lang.CharSequence) charBuffer42);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(buffer24);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(buffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("", "+999999998-12-31T23:59:59.999999999");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        java.time.LocalDate localDate3 = java.time.LocalDate.of((-7), 3, (int) (short) 1);
        int int4 = localDate3.lengthOfMonth();
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt7 = intStream6.min();
        java.lang.String str8 = optionalInt7.toString();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate10 = localDateTime9.toLocalDate();
        boolean boolean11 = optionalInt7.equals((java.lang.Object) localDate10);
        java.time.LocalDate localDate13 = localDate10.minusDays(14L);
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.time.chrono.Chronology chronology16 = java.time.chrono.Chronology.ofLocale(locale14);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = offsetDateTime20.atZoneSameInstant((java.time.ZoneId) zoneOffset25);
        java.time.ZoneId zoneId29 = zonedDateTime28.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime30 = zonedDateTime28.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime34.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.zone.ZoneRules zoneRules41 = zoneOffset39.getRules();
        java.time.ZonedDateTime zonedDateTime42 = offsetDateTime34.atZoneSameInstant((java.time.ZoneId) zoneOffset39);
        java.time.ZonedDateTime zonedDateTime43 = zonedDateTime42.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long45 = zonedDateTime42.getLong((java.time.temporal.TemporalField) chronoField44);
        long long46 = zonedDateTime28.getLong((java.time.temporal.TemporalField) chronoField44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime28.minusSeconds((long) 999999999);
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime49 = chronology16.zonedDateTime((java.time.temporal.TemporalAccessor) zonedDateTime48);
        boolean boolean50 = localDate10.equals((java.lang.Object) zonedDateTime48);
        boolean boolean51 = localDate3.isEqual((java.time.chrono.ChronoLocalDate) localDate10);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(optionalInt7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalInt[10]" + "'", str8, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField44.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 999999999L + "'", long45 == 999999999L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 999999999L + "'", long46 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream5 = intStream3.limit((long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.plusDays((long) (-7));
        java.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(364740218880L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = localDateTime4.withSecond(399000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 399000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.chrono.ChronoPeriod chronoPeriod5 = period1.multipliedBy((int) (short) 100);
        java.time.Period period7 = period1.minusDays((long) 413000000);
        boolean boolean8 = period7.isNegative();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(chronoPeriod5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.function.LongBinaryOperator longBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong5 = longStream2.reduce(longBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer1.asReadOnlyBuffer();
        int int4 = shortBuffer1.arrayOffset();
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("Eng");
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = chronoField9.getDisplayName(locale10);
        java.lang.String str13 = locale5.getDisplayCountry(locale10);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale5);
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder14.clear();
        java.util.Locale locale17 = builder14.build();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GBR" + "'", str11, "GBR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Minute" + "'", str12, "Minute");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United Kingdom" + "'", str13, "United Kingdom");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.ZonedDateTime zonedDateTime24 = offsetDateTime16.atZoneSameInstant((java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime24.withLaterOffsetAtOverlap();
        boolean boolean26 = zonedDateTime11.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime25);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.UTC;
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime25.withZoneSameInstant((java.time.ZoneId) zoneOffset27);
        java.time.LocalDate localDate29 = java.time.LocalDate.MIN;
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate32 = localDateTime31.toLocalDate();
        java.time.LocalDateTime localDateTime34 = localDateTime31.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange35 = chronoField30.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime31);
        boolean boolean36 = localDate29.equals((java.lang.Object) valueRange35);
        java.time.LocalDate localDate37 = java.time.LocalDate.now();
        java.time.LocalDate localDate38 = java.time.LocalDate.MIN;
        boolean boolean39 = localDate37.isEqual((java.time.chrono.ChronoLocalDate) localDate38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean41 = localDate38.isSupported((java.time.temporal.TemporalField) chronoField40);
        int int42 = localDate38.getDayOfYear();
        java.time.Period period43 = java.time.Period.between(localDate29, localDate38);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str45 = dateTimeFormatter44.toString();
        java.lang.String str46 = localDate29.format(dateTimeFormatter44);
        java.util.Locale locale47 = java.util.Locale.UK;
        java.lang.String str48 = locale47.getISO3Country();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.lang.String str50 = locale47.getDisplayScript(locale49);
        java.util.Locale.setDefault(locale49);
        java.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter44.withLocale(locale49);
        java.lang.String str53 = zonedDateTime25.format(dateTimeFormatter44);
        java.time.ZoneId zoneId54 = dateTimeFormatter44.getZone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField30.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(valueRange35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField40.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str45, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-999999999-01-01" + "'", str46, "-999999999-01-01");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GBR" + "'", str48, "GBR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+999999999-12-31" + "'", str53, "+999999999-12-31");
        org.junit.Assert.assertNull(zoneId54);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        long long12 = period10.toTotalMonths();
        java.time.Period period14 = period10.minusMonths((long) 256);
        java.time.LocalDateTime localDateTime15 = localDateTime8.plus((java.time.temporal.TemporalAmount) period10);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate17 = localDateTime16.toLocalDate();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset22);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset22.getRules();
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset30);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition33 = zoneRules25.getTransition(localDateTime32);
        int int34 = localDateTime32.getSecond();
        java.time.Duration duration37 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int38 = duration37.getNano();
        java.time.Duration duration39 = duration37.abs();
        java.time.LocalDateTime localDateTime40 = localDateTime32.minus((java.time.temporal.TemporalAmount) duration39);
        java.time.LocalDate localDate41 = java.time.LocalDate.now();
        java.time.LocalDate localDate42 = java.time.LocalDate.MIN;
        boolean boolean43 = localDate41.isEqual((java.time.chrono.ChronoLocalDate) localDate42);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime48.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime48.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset58);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField62.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime64 = localDateTime60.minus((long) (-999999999), temporalUnit63);
        java.lang.String str65 = temporalUnit63.toString();
        java.time.OffsetDateTime offsetDateTime66 = offsetDateTime52.plus((long) (byte) 100, temporalUnit63);
        java.time.LocalDate localDate67 = localDate41.minus((long) (-1), temporalUnit63);
        long long68 = localDateTime16.until((java.time.temporal.Temporal) localDateTime32, temporalUnit63);
        long long69 = localDate7.until((java.time.temporal.Temporal) localDateTime15, temporalUnit63);
        java.time.LocalDate localDate71 = java.time.LocalDate.now();
        java.time.LocalDate localDate72 = java.time.LocalDate.MIN;
        boolean boolean73 = localDate71.isEqual((java.time.chrono.ChronoLocalDate) localDate72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean75 = localDate72.isSupported((java.time.temporal.TemporalField) chronoField74);
        int int76 = localDate72.getDayOfYear();
        java.time.LocalDate localDate78 = localDate72.withYear((int) '4');
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime85 = localDateTime82.atOffset(zoneOffset84);
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset84);
        java.time.temporal.ChronoField chronoField88 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit89 = chronoField88.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime90 = localDateTime86.minus((long) (-999999999), temporalUnit89);
        java.lang.String str91 = temporalUnit89.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate92 = localDate78.plus((long) 125000000, temporalUnit89);
        java.time.chrono.ChronoLocalDate chronoLocalDate93 = localDate7.minus((long) 227000000, temporalUnit89);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNull(zoneOffsetTransition33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField62.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Weeks" + "'", str65, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-52177397210L) + "'", long68 == (-52177397210L));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 52177497285L + "'", long69 == 52177497285L);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField74.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(offsetDateTime85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + chronoField88 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField88.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit89 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit89.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Weeks" + "'", str91, "Weeks");
        org.junit.Assert.assertNotNull(chronoLocalDate92);
        org.junit.Assert.assertNotNull(chronoLocalDate93);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.time.format.TextStyle textStyle4 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Language();
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale5);
        java.lang.String str8 = chronology3.getDisplayName(textStyle4, locale5);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology3);
        java.time.format.DateTimeFormatter dateTimeFormatter10 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology11 = dateTimeFormatter10.getChronology();
        java.time.format.TextStyle textStyle12 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale13.getISO3Language();
        java.time.format.DecimalStyle decimalStyle15 = java.time.format.DecimalStyle.of(locale13);
        java.lang.String str16 = chronology11.getDisplayName(textStyle12, locale13);
        java.time.OffsetTime offsetTime17 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime19 = offsetTime17.withSecond(16);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int21 = offsetTime19.get((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.ValueRange valueRange22 = chronology11.range(chronoField20);
        java.time.Instant instant24 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.Clock clock29 = java.time.Clock.fixed(instant24, (java.time.ZoneId) zoneOffset27);
        java.time.chrono.ChronoLocalDate chronoLocalDate30 = chronology11.dateNow(clock29);
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = chronology3.date((java.time.temporal.TemporalAccessor) chronoLocalDate30);
        long long32 = chronoLocalDate30.toEpochDay();
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + textStyle4 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle4.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + textStyle12 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle12.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(decimalStyle15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISO" + "'", str16, "ISO");
        org.junit.Assert.assertNotNull(offsetTime17);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField20.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(valueRange22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(chronoLocalDate30);
        org.junit.Assert.assertNotNull(chronoLocalDate31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        java.lang.CharSequence charSequence0 = null;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.LocalDateTime localDateTime6 = localDateTime1.plusYears((long) (short) -1);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        int int12 = localDateTime7.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime8);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        int int17 = localDateTime8.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        int int23 = localDateTime18.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime19.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        boolean boolean29 = localDateTime8.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        boolean boolean40 = localDateTime30.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        boolean boolean41 = localDateTime24.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDate localDate42 = localDateTime24.toLocalDate();
        java.time.LocalDate localDate43 = java.time.LocalDate.now();
        java.time.LocalDate localDate44 = java.time.LocalDate.MIN;
        boolean boolean45 = localDate43.isEqual((java.time.chrono.ChronoLocalDate) localDate44);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean47 = localDate44.isSupported((java.time.temporal.TemporalField) chronoField46);
        int int48 = localDate44.getDayOfYear();
        int int49 = localDate42.compareTo((java.time.chrono.ChronoLocalDate) localDate44);
        java.time.Instant instant51 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.Clock clock56 = java.time.Clock.fixed(instant51, (java.time.ZoneId) zoneOffset54);
        java.time.LocalTime localTime57 = java.time.LocalTime.now(clock56);
        java.time.LocalTime localTime59 = localTime57.plusHours((long) 16384);
        java.time.LocalTime localTime61 = localTime57.minusNanos(0L);
        java.time.LocalDate localDate62 = java.time.LocalDate.now();
        java.time.LocalDate localDate63 = java.time.LocalDate.MIN;
        boolean boolean64 = localDate62.isEqual((java.time.chrono.ChronoLocalDate) localDate63);
        int int65 = localDate63.getYear();
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        java.time.temporal.Temporal temporal70 = localDate63.adjustInto((java.time.temporal.Temporal) localDateTime66);
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime74 = localDateTime71.atOffset(zoneOffset73);
        java.time.Clock clock75 = java.time.Clock.systemUTC();
        java.time.Instant instant76 = clock75.instant();
        java.time.ZoneId zoneId77 = clock75.getZone();
        java.time.ZonedDateTime zonedDateTime78 = java.time.ZonedDateTime.ofInstant(localDateTime66, zoneOffset73, zoneId77);
        java.time.OffsetDateTime offsetDateTime79 = java.time.OffsetDateTime.of(localDate44, localTime61, zoneOffset73);
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime82 = java.time.ZonedDateTime.ofLocal(localDateTime1, (java.time.ZoneId) zoneOffset73, zoneOffset81);
        java.time.Period period84 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period85 = java.time.Period.from((java.time.temporal.TemporalAmount) period84);
        java.time.format.DateTimeFormatter dateTimeFormatter86 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str87 = dateTimeFormatter86.toString();
        boolean boolean88 = period85.equals((java.lang.Object) dateTimeFormatter86);
        java.lang.String str89 = localDateTime1.format(dateTimeFormatter86);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime90 = java.time.LocalDateTime.parse(charSequence0, dateTimeFormatter86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: text");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField46.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1999999998 + "'", int49 == 1999999998);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(clock56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-999999999) + "'", int65 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(temporal70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(clock75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(zoneId77);
        org.junit.Assert.assertNotNull(zonedDateTime78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(zonedDateTime82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str87, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+999999999-12-31" + "'", str89, "+999999999-12-31");
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.lang.String str11 = byteOrder9.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LITTLE_ENDIAN" + "'", str11, "LITTLE_ENDIAN");
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        java.time.LocalTime localTime1 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime3 = localTime1.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.LocalDateTime localDateTime9 = localDateTime4.plusYears((long) (short) -1);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        int int20 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        boolean boolean32 = localDateTime11.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        boolean boolean43 = localDateTime33.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        boolean boolean44 = localDateTime27.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDate localDate45 = localDateTime27.toLocalDate();
        java.time.LocalDate localDate46 = java.time.LocalDate.now();
        java.time.LocalDate localDate47 = java.time.LocalDate.MIN;
        boolean boolean48 = localDate46.isEqual((java.time.chrono.ChronoLocalDate) localDate47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean50 = localDate47.isSupported((java.time.temporal.TemporalField) chronoField49);
        int int51 = localDate47.getDayOfYear();
        int int52 = localDate45.compareTo((java.time.chrono.ChronoLocalDate) localDate47);
        java.time.Instant instant54 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.Clock clock59 = java.time.Clock.fixed(instant54, (java.time.ZoneId) zoneOffset57);
        java.time.LocalTime localTime60 = java.time.LocalTime.now(clock59);
        java.time.LocalTime localTime62 = localTime60.plusHours((long) 16384);
        java.time.LocalTime localTime64 = localTime60.minusNanos(0L);
        java.time.LocalDate localDate65 = java.time.LocalDate.now();
        java.time.LocalDate localDate66 = java.time.LocalDate.MIN;
        boolean boolean67 = localDate65.isEqual((java.time.chrono.ChronoLocalDate) localDate66);
        int int68 = localDate66.getYear();
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime72 = localDateTime69.atOffset(zoneOffset71);
        java.time.temporal.Temporal temporal73 = localDate66.adjustInto((java.time.temporal.Temporal) localDateTime69);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        java.time.Clock clock78 = java.time.Clock.systemUTC();
        java.time.Instant instant79 = clock78.instant();
        java.time.ZoneId zoneId80 = clock78.getZone();
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.ofInstant(localDateTime69, zoneOffset76, zoneId80);
        java.time.OffsetDateTime offsetDateTime82 = java.time.OffsetDateTime.of(localDate47, localTime64, zoneOffset76);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime85 = java.time.ZonedDateTime.ofLocal(localDateTime4, (java.time.ZoneId) zoneOffset76, zoneOffset84);
        java.time.OffsetTime offsetTime86 = java.time.OffsetTime.of(localTime3, zoneOffset76);
        java.time.format.DateTimeFormatter dateTimeFormatter87 = java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;
        java.lang.String str88 = localTime3.format(dateTimeFormatter87);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime89 = java.time.OffsetTime.parse((java.lang.CharSequence) "Z", dateTimeFormatter87);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Z' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField49.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1999999998 + "'", int52 == 1999999998);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(clock59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-999999999) + "'", int68 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(temporal73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(clock78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(zoneId80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(zonedDateTime85);
        org.junit.Assert.assertNotNull(offsetTime86);
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "16:00:00" + "'", str88, "16:00:00");
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.function.DoublePredicate doublePredicate3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = doubleStream2.noneMatch(doublePredicate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime0.plusNanos((long) '\n');
        java.time.Duration duration45 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList46 = duration45.getUnits();
        java.time.Duration duration48 = duration45.plusDays((-1L));
        java.time.Duration duration50 = duration45.withSeconds(0L);
        java.time.Duration duration51 = duration50.abs();
        java.time.OffsetTime offsetTime52 = offsetTime42.plus((java.time.temporal.TemporalAmount) duration51);
        java.time.OffsetTime offsetTime54 = offsetTime42.minusHours((long) 33237);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.OffsetDateTime offsetDateTime60 = offsetDateTime58.withSecond((int) (byte) 0);
        java.time.LocalTime localTime61 = java.time.LocalTime.now();
        java.time.LocalTime localTime63 = localTime61.plusHours(0L);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        java.time.temporal.ValueRange valueRange66 = localTime63.range((java.time.temporal.TemporalField) chronoField64);
        boolean boolean67 = offsetDateTime58.isSupported((java.time.temporal.TemporalField) chronoField64);
        int int68 = offsetTime42.get((java.time.temporal.TemporalField) chronoField64);
        java.time.temporal.TemporalAccessor temporalAccessor69 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = chronoField64.isSupportedBy(temporalAccessor69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(temporalUnitList46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(offsetTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField64.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 987000 + "'", int68 == 987000);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        boolean boolean3 = zoneIdMap1.equals((java.lang.Object) 0);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration4 = zoneIdMap1.keys();
        boolean boolean5 = zoneIdMap1.isEmpty();
        java.time.ZoneId zoneId6 = null;
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap8 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        boolean boolean10 = zoneIdMap8.equals((java.lang.Object) 0);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration11 = zoneIdMap8.keys();
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet12 = zoneIdMap8.entrySet();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.ZonedDateTime zonedDateTime24 = offsetDateTime16.atZoneSameInstant((java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime24.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId26 = zonedDateTime24.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset40);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap44 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.zone.ZoneRules zoneRules50 = zoneOffset48.getRules();
        java.time.zone.ZoneRules zoneRules51 = zoneIdMap44.getOrDefault((java.lang.Object) 1.0d, zoneRules50);
        java.lang.String str52 = zoneRules50.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList53 = zoneRules50.getTransitions();
        java.time.zone.ZoneRules zoneRules54 = zoneIdMap28.putIfAbsent((java.time.ZoneId) zoneOffset40, zoneRules50);
        java.time.zone.ZoneRules zoneRules55 = zoneIdMap8.put(zoneId26, zoneRules50);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.OffsetDateTime offsetDateTime61 = offsetDateTime59.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.zone.ZoneRules zoneRules66 = zoneOffset64.getRules();
        java.time.ZonedDateTime zonedDateTime67 = offsetDateTime59.atZoneSameInstant((java.time.ZoneId) zoneOffset64);
        java.time.ZonedDateTime zonedDateTime68 = zonedDateTime67.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long70 = zonedDateTime67.getLong((java.time.temporal.TemporalField) chronoField69);
        java.time.ZoneId zoneId71 = zonedDateTime67.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap73 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime78 = localDateTime75.atOffset(zoneOffset77);
        java.time.zone.ZoneRules zoneRules79 = zoneOffset77.getRules();
        java.time.zone.ZoneRules zoneRules80 = zoneIdMap73.getOrDefault((java.lang.Object) 1.0d, zoneRules79);
        java.lang.String str81 = zoneRules79.toString();
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime85 = localDateTime82.atOffset(zoneOffset84);
        java.time.Instant instant87 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant89 = instant87.minusNanos((long) 'a');
        int int90 = instant87.getNano();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime85.with((java.time.temporal.TemporalAdjuster) instant87);
        java.time.Duration duration92 = zoneRules79.getDaylightSavings(instant87);
        java.time.zone.ZoneRules zoneRules93 = zoneIdMap8.putIfAbsent(zoneId71, zoneRules79);
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneRules zoneRules94 = zoneIdMap1.putIfAbsent(zoneId6, zoneRules79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneIdEnumeration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneIdEnumeration11);
        org.junit.Assert.assertNotNull(zoneIdEntrySet12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(zoneRules50);
        org.junit.Assert.assertNotNull(zoneRules51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str52, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList53);
        org.junit.Assert.assertNull(zoneRules54);
        org.junit.Assert.assertNull(zoneRules55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField69.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 999999999L + "'", long70 == 999999999L);
        org.junit.Assert.assertNotNull(zoneId71);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertNotNull(zoneRules79);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str81, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(offsetDateTime85);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(zoneRules93);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        java.time.LocalTime localTime11 = localTime7.minusNanos(0L);
        java.time.LocalTime localTime13 = localTime7.withSecond(14);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.LongBuffer longBuffer18 = longBuffer16.put(0L);
        java.time.LocalTime localTime19 = java.time.LocalTime.now();
        int int20 = localTime19.getNano();
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long22 = localTime19.getLong((java.time.temporal.TemporalField) chronoField21);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.OffsetDateTime offsetDateTime28 = offsetDateTime26.withSecond((int) (byte) 0);
        boolean boolean29 = chronoField21.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime26);
        boolean boolean30 = longBuffer18.equals((java.lang.Object) chronoField21);
        java.lang.String str31 = chronoField21.toString();
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField21.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime34 = localTime7.with((java.time.temporal.TemporalField) chronoField21, (long) 999999999);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 999999999");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(longBuffer18);
        org.junit.Assert.assertNotNull(localTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 24000000 + "'", int20 == 24000000);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField21.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 16L + "'", long22 == 16L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MinuteOfHour" + "'", str31, "MinuteOfHour");
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.HOURS));
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "\u4e2d\u6587\u4e2d\u56fd)", 794000000, 234000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.OptionalDouble optionalDouble3 = doubleStream2.average();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = doubleStream2.sum();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.limit((long) '\n');
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble5 = doubleStream2.average();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.with((java.time.temporal.TemporalField) chronoField6, (long) 31);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getISO3Language();
        java.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale10);
        java.lang.String str13 = offsetDateTime3.format(dateTimeFormatter9);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime15 = offsetDateTime3.withSecond(794000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 794000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+999999999-365Z" + "'", str13, "+999999999-365Z");
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime12.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long15 = zonedDateTime12.getLong((java.time.temporal.TemporalField) chronoField14);
        int int16 = offsetTime0.get((java.time.temporal.TemporalField) chronoField14);
        java.lang.String str17 = offsetTime0.toString();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 999999999L + "'", long15 == 999999999L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 999999999 + "'", int16 == 999999999);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "23:59:59.999999999-18:00" + "'", str17, "23:59:59.999999999-18:00");
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        strItor5.add("");
        strItor5.add("x-windows-iso2022jp");
        int int10 = strItor5.nextIndex();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("", (int) (byte) 1, "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "f" + "'", str3, "f");
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.io.InputStream inputStream11 = uRL7.openStream();
        inputStream11.mark(781000000);
        inputStream11.mark(32);
        int int16 = inputStream11.available();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom2761924385537417736aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom2761924385537417736aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom6726351589504562049aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom6726351589504562049aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        java.io.File file1 = new java.io.File("GBR");
        java.io.File file3 = new java.io.File(file1, "5");
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.WatchService watchService5 = null;
        java.nio.file.WatchEvent.Kind[] kindArray7 = new java.nio.file.WatchEvent.Kind[0];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray8 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray7;
        java.nio.file.WatchEvent.Modifier modifier9 = null;
        java.nio.file.WatchEvent.Modifier[] modifierArray10 = new java.nio.file.WatchEvent.Modifier[] { modifier9 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey11 = path4.register(watchService5, wildcardKindArray8, modifierArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertEquals(file3.getParent(), "GBR");
        org.junit.Assert.assertEquals(file3.toString(), "GBR/5");
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(kindArray7);
        org.junit.Assert.assertNotNull(wildcardKindArray8);
        org.junit.Assert.assertNotNull(modifierArray10);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.Month month7 = localDate6.getMonth();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = offsetDateTime11.atZoneSameInstant((java.time.ZoneId) zoneOffset16);
        int int20 = zonedDateTime19.getDayOfMonth();
        int int21 = zonedDateTime19.getHour();
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime19.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.ZonedDateTime zonedDateTime35 = offsetDateTime27.atZoneSameInstant((java.time.ZoneId) zoneOffset32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime35.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long38 = zonedDateTime35.getLong((java.time.temporal.TemporalField) chronoField37);
        long long39 = zonedDateTime23.getLong((java.time.temporal.TemporalField) chronoField37);
        boolean boolean40 = month7.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField37.getRangeUnit();
        boolean boolean42 = temporalUnit41.isDateBased();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.DECEMBER + "'", month7.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField37.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 999999999L + "'", long38 == 999999999L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 999999999L + "'", long39 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getHour();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusDays((long) 385000000);
        java.time.chrono.Chronology chronology16 = zonedDateTime11.getChronology();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = offsetDateTime20.atZoneSameInstant((java.time.ZoneId) zoneOffset25);
        int int29 = zonedDateTime28.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime28.withDayOfYear(10);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.ZonedDateTime zonedDateTime43 = offsetDateTime35.atZoneSameInstant((java.time.ZoneId) zoneOffset40);
        java.time.ZoneId zoneId44 = zonedDateTime43.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime45 = zonedDateTime43.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime49.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset54.getRules();
        java.time.ZonedDateTime zonedDateTime57 = offsetDateTime49.atZoneSameInstant((java.time.ZoneId) zoneOffset54);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime57.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long60 = zonedDateTime57.getLong((java.time.temporal.TemporalField) chronoField59);
        long long61 = zonedDateTime43.getLong((java.time.temporal.TemporalField) chronoField59);
        int int62 = zonedDateTime31.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime43);
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.OffsetDateTime offsetDateTime68 = offsetDateTime66.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime72 = localDateTime69.atOffset(zoneOffset71);
        java.time.zone.ZoneRules zoneRules73 = zoneOffset71.getRules();
        java.time.ZonedDateTime zonedDateTime74 = offsetDateTime66.atZoneSameInstant((java.time.ZoneId) zoneOffset71);
        java.time.ZonedDateTime zonedDateTime75 = zonedDateTime74.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime76 = zonedDateTime74.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime77 = zonedDateTime74.withEarlierOffsetAtOverlap();
        int int78 = zonedDateTime43.compareTo(localDateChronoZonedDateTime77);
        java.time.chrono.ChronoLocalDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoLocalDateTime79 = chronology16.localDateTime((java.time.temporal.TemporalAccessor) localDateChronoZonedDateTime77);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField59.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 999999999L + "'", long60 == 999999999L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 999999999L + "'", long61 == 999999999L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(zoneRules73);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(zonedDateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime79);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        java.time.Duration duration8 = duration1.plusHours((long) 17488);
        long long9 = duration1.toMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 6650L + "'", long9 == 6650L);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("java.text.ParsePosition[index=29,errorIndex=-1]", "ZoneRules[currentStandardOffset=Z]", (int) '4', "java.nio.HeapIntBuffer[pos=0 lim=6 cap=6]", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: java.text.parseposition[index=29,errorindex=-1]");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CodingErrorAction codingErrorAction8 = charsetEncoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder9 = charsetEncoder7.reset();
        float float10 = charsetEncoder7.maxBytesPerChar();
        boolean boolean12 = charsetEncoder7.canEncode('+');
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 1.0f + "'", float10 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.lang.String str18 = isoChronology0.toString();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.withSecond((int) (byte) 0);
        java.time.LocalDate localDate25 = offsetDateTime22.toLocalDate();
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        boolean boolean28 = offsetDateTime22.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime22.minusMinutes((long) 100);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.Clock clock37 = java.time.Clock.fixed(instant32, (java.time.ZoneId) zoneOffset35);
        java.time.ZonedDateTime zonedDateTime38 = offsetDateTime30.atZoneSameInstant((java.time.ZoneId) zoneOffset35);
        java.time.LocalDate localDate39 = isoChronology0.dateNow((java.time.ZoneId) zoneOffset35);
        boolean boolean41 = isoChronology0.isLeapYear((long) (-3));
        java.time.LocalDate localDate42 = isoChronology0.dateNow();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate46 = isoChronology0.date((int) (short) -1, 920000000, 234000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 920000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(clock37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate42);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime4 = offsetTime2.plusNanos(1434414441700000L);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        boolean boolean17 = instant9.isSupported(temporalUnit16);
        boolean boolean18 = offsetTime5.isSupported(temporalUnit16);
        boolean boolean19 = offsetTime4.isEqual(offsetTime5);
        int int20 = offsetTime4.getSecond();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField15.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.ZoneId zoneId22 = zonedDateTime21.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap24 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap24.put((java.time.ZoneId) zoneOffset26, zoneRules34);
        java.time.ZoneId[] zoneIdArray37 = new java.time.ZoneId[] { zoneOffset6, zoneId22, zoneOffset26 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet38 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet38, zoneIdArray37);
        java.lang.String[] strArray43 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray45 = org.apache.commons.lang3.StringUtils.stripAll(strArray43, "GBR");
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray45);
        boolean boolean47 = zoneIdSet38.remove((java.lang.Object) strArray45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList59);
        boolean boolean62 = zoneIdSet38.removeAll((java.util.Collection<java.lang.String>) strList61);
        strList61.clear();
        java.io.File file65 = new java.io.File("GBR");
        boolean boolean66 = file65.mkdirs();
        java.nio.file.Path path67 = file65.toPath();
        boolean boolean68 = strList61.contains((java.lang.Object) path67);
        boolean boolean70 = strList61.add("+999999999-12-24");
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneIdArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Minute(null <no signer certificates>)" + "'", str46, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull("file65.getParent() == null", file65.getParent());
        org.junit.Assert.assertEquals(file65.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(path67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        double[] doubleArray5 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.util.OptionalDouble optionalDouble7 = doubleStream6.min();
        java.util.stream.DoubleStream doubleStream8 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream9 = doubleStream8.distinct();
        java.util.stream.DoubleStream doubleStream10 = doubleStream9.parallel();
        java.util.Spliterator.OfDouble ofDouble11 = doubleStream9.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.concat(doubleStream6, doubleStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(ofDouble11);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        java.time.Instant instant14 = zonedDateTime11.toInstant();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(instant14);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("AlignedWeekOfYear");
            org.junit.Assert.fail("Expected exception of type java.time.zone.ZoneRulesException; message: Unknown time-zone ID: AlignedWeekOfYear");
        } catch (java.time.zone.ZoneRulesException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream5 = intStream1.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        java.nio.IntBuffer intBuffer14 = intBuffer11.put(3, 41);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap16 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.zone.ZoneRules zoneRules22 = zoneOffset20.getRules();
        java.time.zone.ZoneRules zoneRules23 = zoneIdMap16.getOrDefault((java.lang.Object) 1.0d, zoneRules22);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration24 = zoneIdMap16.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration25 = zoneIdMap16.keys();
        java.time.Instant instant27 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant29 = instant27.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.ZonedDateTime zonedDateTime35 = java.time.ZonedDateTime.ofInstant(instant27, (java.time.ZoneId) zoneOffset32);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime39.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.zone.ZoneRules zoneRules46 = zoneOffset44.getRules();
        java.time.ZonedDateTime zonedDateTime47 = offsetDateTime39.atZoneSameInstant((java.time.ZoneId) zoneOffset44);
        java.time.ZoneId zoneId48 = zonedDateTime47.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap50 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap54 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.zone.ZoneRules zoneRules60 = zoneOffset58.getRules();
        java.time.zone.ZoneRules zoneRules61 = zoneIdMap54.getOrDefault((java.lang.Object) 1.0d, zoneRules60);
        java.time.zone.ZoneRules zoneRules62 = zoneIdMap50.put((java.time.ZoneId) zoneOffset52, zoneRules60);
        java.time.ZoneId[] zoneIdArray63 = new java.time.ZoneId[] { zoneOffset32, zoneId48, zoneOffset52 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet64 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet64, zoneIdArray63);
        java.lang.String[] strArray69 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray71 = org.apache.commons.lang3.StringUtils.stripAll(strArray69, "GBR");
        java.lang.String str72 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray71);
        boolean boolean73 = zoneIdSet64.remove((java.lang.Object) strArray71);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        strList80.add((int) (short) 0, "eng");
        boolean boolean85 = zoneIdSet64.removeAll((java.util.Collection<java.lang.String>) strList80);
        boolean boolean86 = strList80.isEmpty();
        java.net.InetAddress inetAddress87 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean88 = inetAddress87.isMCLinkLocal();
        byte[] byteArray89 = inetAddress87.getAddress();
        boolean boolean90 = zoneIdMap16.remove((java.lang.Object) boolean86, (java.lang.Object) inetAddress87);
        java.net.NetworkInterface networkInterface91 = java.net.NetworkInterface.getByInetAddress(inetAddress87);
        java.net.NetworkInterface networkInterface92 = networkInterface91.getParent();
        boolean boolean93 = networkInterface91.supportsMulticast();
        boolean boolean94 = networkInterface91.supportsMulticast();
        java.lang.String str95 = networkInterface91.getDisplayName();
        boolean boolean96 = intBuffer11.equals((java.lang.Object) str95);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneIdEnumeration24);
        org.junit.Assert.assertNotNull(zoneIdEnumeration25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(zoneId48);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(zoneRules60);
        org.junit.Assert.assertNotNull(zoneRules61);
        org.junit.Assert.assertNull(zoneRules62);
        org.junit.Assert.assertNotNull(zoneIdArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Minute(null <no signer certificates>)" + "'", str72, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(inetAddress87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(networkInterface91);
        org.junit.Assert.assertNull(networkInterface92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "lo" + "'", str95, "lo");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime37 = localDateTime17.withMonth(989000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 989000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalTime localTime36 = localDateTime17.toLocalTime();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        int int42 = localDateTime37.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        int int47 = localDateTime38.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        int int53 = localDateTime48.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime57 = localDateTime54.atOffset(zoneOffset56);
        int int58 = localDateTime49.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        boolean boolean59 = localDateTime38.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        int int65 = localDateTime60.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        boolean boolean70 = localDateTime60.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime66);
        boolean boolean71 = localDateTime54.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime66);
        java.time.LocalDate localDate72 = localDateTime54.toLocalDate();
        java.time.LocalTime localTime73 = localDateTime54.toLocalTime();
        java.time.LocalTime localTime74 = localDateTime54.toLocalTime();
        java.time.LocalDateTime localDateTime76 = localDateTime54.minusMonths((long) '-');
        boolean boolean77 = localDateTime17.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.time.LocalDateTime localDateTime79 = localDateTime54.minusDays(19044L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator3 = ofInt2.trySplit();
        java.util.stream.IntStream.Builder builder4 = java.util.stream.IntStream.builder();
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder4);
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt8 = intStream7.min();
        java.lang.String str9 = optionalInt8.toString();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate11 = localDateTime10.toLocalDate();
        boolean boolean12 = optionalInt8.equals((java.lang.Object) localDate11);
        int int14 = optionalInt8.orElse(59);
        java.util.stream.IntStream intStream16 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt17 = intStream16.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator18 = ofInt17.trySplit();
        java.util.stream.IntStream.Builder builder19 = java.util.stream.IntStream.builder();
        ofInt17.forEachRemaining((java.util.function.IntConsumer) builder19);
        optionalInt8.ifPresent((java.util.function.IntConsumer) builder19);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder19);
        boolean boolean24 = ofInt2.hasCharacteristics(10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.Integer> wildcardComparator25 = ofInt2.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNull(intSpliterator3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(optionalInt8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OptionalInt[10]" + "'", str9, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(ofInt17);
        org.junit.Assert.assertNull(intSpliterator18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator2 = intStream1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream3 = intStream1.asDoubleStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intSpliterator2);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        java.time.temporal.TemporalAccessor temporalAccessor0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime1 = java.time.LocalTime.from(temporalAccessor0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        java.nio.charset.CodingErrorAction codingErrorAction0 = java.nio.charset.CodingErrorAction.REPORT;
        org.junit.Assert.assertNotNull(codingErrorAction0);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.stream.LongStream longStream4 = longStream0.parallel();
        java.util.stream.LongStream longStream5 = longStream4.unordered();
        java.util.stream.LongStream longStream6 = longStream4.unordered();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime3.minusMinutes((long) 100);
        java.time.Instant instant13 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.Clock clock18 = java.time.Clock.fixed(instant13, (java.time.ZoneId) zoneOffset16);
        java.time.ZonedDateTime zonedDateTime19 = offsetDateTime11.atZoneSameInstant((java.time.ZoneId) zoneOffset16);
        java.time.Clock clock20 = java.time.Clock.system((java.time.ZoneId) zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(clock20);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.MINUTES;
        java.nio.file.attribute.FileTime fileTime2 = java.nio.file.attribute.FileTime.from((-365243219162L), timeUnit1);
        long long4 = timeUnit1.toMicros(31556889832780799L);
        java.util.concurrent.TimeUnit timeUnit6 = java.util.concurrent.TimeUnit.MINUTES;
        long long8 = timeUnit6.toHours(19044L);
        long long9 = timeUnit1.convert((long) ' ', timeUnit6);
        long long11 = timeUnit1.toHours((long) 413000000);
        java.util.concurrent.TimeUnit timeUnit13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = timeUnit1.convert((long) 13, timeUnit13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertNotNull(fileTime2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(timeUnit6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 317L + "'", long8 == 317L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 6883333L + "'", long11 == 6883333L);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setVariant("zho");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: zho [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1, (byte) 1, (byte) 10 };
        java.nio.ByteBuffer byteBuffer14 = byteBuffer6.put(byteArray13);
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.wrap(byteArray13);
        boolean boolean17 = byteBuffer15.equals((java.lang.Object) 999999999);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, (-999999999), (int) 'a', 0, 31, 4);
        int int7 = date6.getSeconds();
        date6.setSeconds(277998031);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Oct 27 14:11:31 UTC 83331326");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        boolean boolean7 = file1.exists();
        long long8 = file1.length();
        boolean boolean9 = file1.mkdir();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4096L + "'", long8 == 4096L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.withDayOfYear((int) '+');
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap10 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.zone.ZoneRules zoneRules17 = zoneIdMap10.getOrDefault((java.lang.Object) 1.0d, zoneRules16);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset22);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap26 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap26.getOrDefault((java.lang.Object) 1.0d, zoneRules32);
        java.lang.String str34 = zoneRules32.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = zoneRules32.getTransitions();
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap10.putIfAbsent((java.time.ZoneId) zoneOffset22, zoneRules32);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset41);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit46 = chronoField45.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime47 = localDateTime43.minus((long) (-999999999), temporalUnit46);
        java.util.List<java.time.ZoneOffset> zoneOffsetList48 = zoneRules32.getValidOffsets(localDateTime43);
        java.time.LocalDateTime localDateTime50 = localDateTime43.withYear((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal51 = offsetDateTime8.adjustInto((java.time.temporal.Temporal) localDateTime43);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str34, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList35);
        org.junit.Assert.assertNull(zoneRules36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField45.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit46 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit46.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime47);
        org.junit.Assert.assertNotNull(zoneOffsetList48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder8);
        boolean boolean12 = ofInt2.hasCharacteristics(274);
        long long13 = ofInt2.estimateSize();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress1 = java.net.InetAddress.getByName("\u4e2d\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: ???: Name or service not known");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.chrono.Era era14 = localDate13.getEra();
        java.security.ProtectionDomain[] protectionDomainArray15 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext16 = new java.security.AccessControlContext(protectionDomainArray15);
        java.time.LocalDate localDate17 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery18 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period19 = localDate17.query(periodTemporalQuery18);
        boolean boolean20 = accessControlContext16.equals((java.lang.Object) periodTemporalQuery18);
        java.time.Period period21 = localDate13.query(periodTemporalQuery18);
        java.time.Period period23 = period21.minusDays((long) 'u');
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + era14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", era14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(protectionDomainArray15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(periodTemporalQuery18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        char char1 = org.apache.commons.lang3.CharUtils.toChar((java.lang.Character) '/');
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '/' + "'", char1 == '/');
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        boolean boolean56 = clock6.equals((java.lang.Object) zoneIdSet46);
        java.time.OffsetTime offsetTime57 = java.time.OffsetTime.now(clock6);
        int int58 = offsetTime57.getNano();
        java.time.OffsetTime offsetTime60 = offsetTime57.plusSeconds((long) 446000000);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(offsetTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(offsetTime60);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        java.net.Proxy.Type type0 = java.net.Proxy.Type.DIRECT;
        java.net.SocketAddress socketAddress1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy2 = new java.net.Proxy(type0, socketAddress1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type0.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        int int4 = ofDouble3.characteristics();
        java.util.function.DoubleConsumer doubleConsumer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = ofDouble3.tryAdvance(doubleConsumer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        boolean boolean3 = byteBuffer1.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = byteBuffer1.getLong(4096);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = fileChannel11.lock((long) 533000000, 0L, true);
        java.nio.channels.Channel channel20 = fileLock19.acquiredBy();
        long long21 = fileLock19.position();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertNotNull(channel20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 533000000L + "'", long21 == 533000000L);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime7.withMinute((int) '\000');
        java.time.LocalDate localDate24 = java.time.LocalDate.from((java.time.temporal.TemporalAccessor) offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime49.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset54.getRules();
        java.time.ZonedDateTime zonedDateTime57 = offsetDateTime49.atZoneSameInstant((java.time.ZoneId) zoneOffset54);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime57.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime59 = zonedDateTime57.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime60 = zonedDateTime57.withEarlierOffsetAtOverlap();
        int int61 = zonedDateTime26.compareTo(localDateChronoZonedDateTime60);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.OffsetDateTime offsetDateTime67 = offsetDateTime65.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        java.time.zone.ZoneRules zoneRules72 = zoneOffset70.getRules();
        java.time.ZonedDateTime zonedDateTime73 = offsetDateTime65.atZoneSameInstant((java.time.ZoneId) zoneOffset70);
        int int74 = zonedDateTime73.getDayOfMonth();
        int int75 = zonedDateTime73.getMinute();
        java.time.ZonedDateTime zonedDateTime77 = zonedDateTime73.minusMinutes((long) 31);
        boolean boolean78 = zonedDateTime26.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime73);
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime82 = localDateTime79.atOffset(zoneOffset81);
        java.time.OffsetDateTime offsetDateTime84 = offsetDateTime82.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime85 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset87 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime88 = localDateTime85.atOffset(zoneOffset87);
        java.time.zone.ZoneRules zoneRules89 = zoneOffset87.getRules();
        java.time.ZonedDateTime zonedDateTime90 = offsetDateTime82.atZoneSameInstant((java.time.ZoneId) zoneOffset87);
        java.time.ZonedDateTime zonedDateTime91 = zonedDateTime90.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId92 = zonedDateTime90.getZone();
        int int93 = zonedDateTime90.getHour();
        java.time.Month month94 = zonedDateTime90.getMonth();
        java.time.DayOfWeek dayOfWeek95 = zonedDateTime90.getDayOfWeek();
        boolean boolean96 = zonedDateTime73.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime90);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(zoneRules72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 31 + "'", int74 == 31);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 59 + "'", int75 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(zoneOffset87);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(zoneRules89);
        org.junit.Assert.assertNotNull(zonedDateTime90);
        org.junit.Assert.assertNotNull(zonedDateTime91);
        org.junit.Assert.assertNotNull(zoneId92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 23 + "'", int93 == 23);
        org.junit.Assert.assertTrue("'" + month94 + "' != '" + java.time.Month.DECEMBER + "'", month94.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + dayOfWeek95 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek95.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        java.security.ProtectionDomain[] protectionDomainArray0 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext1 = new java.security.AccessControlContext(protectionDomainArray0);
        java.security.AccessControlContext accessControlContext2 = new java.security.AccessControlContext(protectionDomainArray0);
        org.junit.Assert.assertNotNull(protectionDomainArray0);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant7 = instant5.minusNanos((long) 'a');
        int int8 = instant5.getNano();
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime3.with((java.time.temporal.TemporalAdjuster) instant5);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusYears((long) (byte) 1);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        boolean boolean8 = longBuffer7.isReadOnly();
        long long9 = longBuffer7.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.Permission permission3 = accessControlException2.getPermission();
        java.security.PrivilegedActionException privilegedActionException4 = new java.security.PrivilegedActionException((java.lang.Exception) accessControlException2);
        java.security.GeneralSecurityException generalSecurityException5 = new java.security.GeneralSecurityException("Minute(null <no signer certificates>)", (java.lang.Throwable) accessControlException2);
        java.security.GeneralSecurityException generalSecurityException6 = new java.security.GeneralSecurityException((java.lang.Throwable) generalSecurityException5);
        org.junit.Assert.assertNull(permission3);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset22);
        java.time.LocalTime localTime25 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset22);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime26 = isoChronology0.zonedDateTime((java.time.temporal.TemporalAccessor) zoneOffset22);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: Z of type java.time.ZoneOffset");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        java.util.MissingResourceException missingResourceException3 = new java.util.MissingResourceException("-999999999-01-01", "zonerules[currentstandardoffset=z]", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        java.lang.String str4 = missingResourceException3.getKey();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str4, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.chrono.Era era20 = localDate19.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate22 = localDate19.withDayOfYear(861000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 861000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + era20 + "' != '" + java.time.chrono.IsoEra.CE + "'", era20.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        java.time.Month month0 = java.time.Month.JULY;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JULY + "'", month0.equals(java.time.Month.JULY));
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream4 = intStream1.sequential();
        java.util.stream.IntStream intStream5 = intStream1.sequential();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<java.lang.Integer> intSpliterator6 = intStream1.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("java.security.cert.CertificateEncodingException");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.security.cert.CertificateEncodingException" + "'", str1, "java.security.cert.CertificateEncodingException");
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        double double4 = doubleSummaryStatistics3.getSum();
        double double5 = doubleSummaryStatistics3.getMin();
        double double6 = doubleSummaryStatistics3.getMax();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics7 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics7.accept((double) 0);
        doubleSummaryStatistics3.combine(doubleSummaryStatistics7);
        doubleStream1.forEachOrdered((java.util.function.DoubleConsumer) doubleSummaryStatistics7);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = doubleStream1.sum();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=1, sum=0.000000, min=0.000000, average=0.000000, max=0.000000}");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.NEGATIVE_INFINITY + "'", double6 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertEquals(doubleSummaryStatistics7.toString(), "DoubleSummaryStatistics{count=1, sum=0.000000, min=0.000000, average=0.000000, max=0.000000}");
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.clear();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        long long14 = fileChannel13.size();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer17 = byteBuffer16.asLongBuffer();
        short short18 = byteBuffer16.getShort();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putChar('G');
        // The following exception was thrown during execution in test generation
        try {
            int int21 = fileChannel13.write(byteBuffer16);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4096L + "'", long14 == 4096L);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(longBuffer17);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 0 + "'", short18 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer20);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional4 = java.util.Optional.of((java.lang.RuntimeException) accessControlException2);
        java.security.InvalidKeyException invalidKeyException5 = new java.security.InvalidKeyException((java.lang.Throwable) accessControlException2);
        org.junit.Assert.assertNotNull(runtimeExceptionOptional4);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) '/', (long) 971000000);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime13 = offsetDateTime3.minusMonths(31556889832780799L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -2629739819398400");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        doubleStream0.close();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble2 = doubleStream0.max();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        java.net.URI uRI3 = new java.net.URI("PT10S", "5", "GBR");
        java.lang.String str4 = uRI3.toASCIIString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT10S:5#GBR" + "'", str4, "PT10S:5#GBR");
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        java.time.Month month1 = java.time.Month.JANUARY;
        java.time.Month month3 = month1.minus((long) (short) -1);
        java.time.Month month5 = month3.minus(32000L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.of(861000000, month3, (int) (short) 0, 722000000, 256);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.FEBRUARY + "'", month3.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.JUNE + "'", month5.equals(java.time.Month.JUNE));
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        java.lang.Runnable runnable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = intStream1.onClose(runnable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        boolean boolean6 = floatBuffer3.isDirect();
        float[] floatArray9 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.FloatBuffer floatBuffer11 = floatBuffer3.get(floatArray9);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer11);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int4 = zoneOffset3.getTotalSeconds();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset3);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        java.time.Instant instant17 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant19 = instant17.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.ofInstant(instant17, (java.time.ZoneId) zoneOffset22);
        java.time.ZoneId zoneId26 = zonedDateTime25.getZone();
        java.time.Clock clock27 = java.time.Clock.fixed(instant7, zoneId26);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset32);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset32.getRules();
        java.time.OffsetDateTime offsetDateTime36 = instant7.atOffset(zoneOffset32);
        int int37 = zoneOffset3.compareTo(zoneOffset32);
        int int38 = zoneOffset3.getTotalSeconds();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.Clock clock28 = java.time.Clock.systemUTC();
        java.time.Instant instant29 = clock28.instant();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition30 = zoneRules23.nextTransition(instant29);
        java.util.Locale locale31 = java.util.Locale.US;
        boolean boolean32 = zoneRules23.equals((java.lang.Object) locale31);
        java.time.Instant instant34 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant36 = instant34.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime37 = java.nio.file.attribute.FileTime.from(instant34);
        java.time.ZoneOffset zoneOffset38 = zoneRules23.getOffset(instant34);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset43);
        java.time.zone.ZoneRules zoneRules46 = zoneOffset43.getRules();
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset51);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition54 = zoneRules46.getTransition(localDateTime53);
        int int55 = localDateTime53.getSecond();
        java.time.Duration duration58 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int59 = duration58.getNano();
        java.time.Duration duration60 = duration58.abs();
        java.time.LocalDateTime localDateTime61 = localDateTime53.minus((java.time.temporal.TemporalAmount) duration60);
        java.time.LocalDateTime localDateTime63 = localDateTime61.plusMinutes((long) (short) 0);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition64 = zoneRules23.getTransition(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(clock28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNull(zoneOffsetTransition30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(fileTime37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNull(zoneOffsetTransition54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNull(zoneOffsetTransition64);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.lang.String str49 = valueRange48.toString();
        long long50 = valueRange48.getMinimum();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        int int56 = localDateTime51.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        int int61 = localDateTime52.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime57);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        int int67 = localDateTime62.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        int int72 = localDateTime63.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime68);
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        int int78 = localDateTime73.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime74);
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime82 = localDateTime79.atOffset(zoneOffset81);
        int int83 = localDateTime74.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime79);
        boolean boolean84 = localDateTime63.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime79);
        java.time.temporal.Temporal temporal85 = localDateTime57.adjustInto((java.time.temporal.Temporal) localDateTime63);
        java.time.LocalDateTime localDateTime87 = localDateTime57.minusWeeks((long) (short) 0);
        boolean boolean88 = valueRange48.equals((java.lang.Object) (short) 0);
        boolean boolean90 = valueRange48.isValidValue((long) 6);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1 - 53" + "'", str49, "1 - 53");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(temporal85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime28 = zonedDateTime26.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime29 = zonedDateTime26.withEarlierOffsetAtOverlap();
        boolean boolean30 = zonedDateTime11.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime34.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.zone.ZoneRules zoneRules41 = zoneOffset39.getRules();
        java.time.ZonedDateTime zonedDateTime42 = offsetDateTime34.atZoneSameInstant((java.time.ZoneId) zoneOffset39);
        int int43 = zonedDateTime42.getDayOfMonth();
        boolean boolean44 = zonedDateTime26.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime42);
        java.time.ZoneOffset zoneOffset45 = zonedDateTime26.getOffset();
        java.time.Duration duration47 = java.time.Duration.ofHours((long) 10000);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime26.minus((java.time.temporal.TemporalAmount) duration47);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.sorted();
        java.util.stream.Stream<java.lang.Long> longStream4 = longStream3.boxed();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = longStream3.sum();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        java.util.Collection<java.time.zone.ZoneRules> zoneRulesCollection14 = zoneIdMap1.values();
        zoneIdMap1.clear();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneRulesCollection14);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray9 = new java.nio.file.LinkOption[] { linkOption7, linkOption8 };
        java.nio.file.Path path10 = path4.toRealPath(linkOptionArray9);
        java.nio.file.FileSystem fileSystem11 = path10.getFileSystem();
        java.util.Set<java.lang.String> strSet12 = fileSystem11.supportedFileAttributeViews();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray9);
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(fileSystem11);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("1 - 53");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1 - 53 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.security.PrivilegedActionException privilegedActionException4 = new java.security.PrivilegedActionException((java.lang.Exception) accessControlException2);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.LocalDate localDate44 = localDate35.minusYears(32000L);
        java.time.LocalDate localDate46 = localDate35.minusWeeks((long) (short) 1);
        java.time.LocalDate localDate47 = java.time.LocalDate.now();
        java.time.LocalDate localDate48 = java.time.LocalDate.MIN;
        boolean boolean49 = localDate47.isEqual((java.time.chrono.ChronoLocalDate) localDate48);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean51 = localDate48.isSupported((java.time.temporal.TemporalField) chronoField50);
        int int52 = localDate48.getDayOfYear();
        java.time.LocalDate localDate54 = localDate48.withYear((int) '4');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset60);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime66 = localDateTime62.minus((long) (-999999999), temporalUnit65);
        java.lang.String str67 = temporalUnit65.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate68 = localDate54.plus((long) 125000000, temporalUnit65);
        boolean boolean69 = localDate46.isSupported(temporalUnit65);
        boolean boolean70 = localDate46.isLeapYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField50.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField64.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Weeks" + "'", str67, "Weeks");
        org.junit.Assert.assertNotNull(chronoLocalDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.lang.String str7 = path6.toString();
        java.io.File file8 = path6.toFile();
        boolean boolean10 = file8.setWritable(true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str7, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        double[] doubleArray4 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer5 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double double6 = doubleBuffer5.get();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 7.94E8d + "'", double6 == 7.94E8d);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        long long14 = fileChannel13.size();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer17 = byteBuffer16.asLongBuffer();
        short short18 = byteBuffer16.getShort();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer16.putChar('G');
        java.nio.ByteBuffer byteBuffer22 = byteBuffer16.putChar('\n');
        java.nio.ByteBuffer byteBuffer24 = byteBuffer16.putFloat((float) (short) -1);
        java.nio.Buffer buffer25 = byteBuffer24.flip();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer28 = byteBuffer27.asLongBuffer();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.wrap(byteArray30);
        java.nio.ByteBuffer byteBuffer33 = java.nio.ByteBuffer.allocate((int) ' ');
        int int34 = byteBuffer33.position();
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.asReadOnlyBuffer();
        java.nio.DoubleBuffer doubleBuffer36 = byteBuffer35.asDoubleBuffer();
        int int37 = byteBuffer35.getInt();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer40 = byteBuffer39.asLongBuffer();
        float float42 = byteBuffer39.getFloat(4);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer39.putChar('\r');
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1, (byte) 1, (byte) 10 };
        java.nio.ByteBuffer byteBuffer52 = byteBuffer44.put(byteArray51);
        java.nio.ByteBuffer byteBuffer54 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer55 = byteBuffer54.asLongBuffer();
        float float57 = byteBuffer54.getFloat(4);
        double double59 = byteBuffer54.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder60 = null;
        java.nio.ByteBuffer byteBuffer61 = byteBuffer54.order(byteOrder60);
        java.nio.ByteOrder byteOrder62 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer63 = byteBuffer54.order(byteOrder62);
        java.nio.IntBuffer intBuffer64 = byteBuffer63.asIntBuffer();
        java.net.InetAddress inetAddress66 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str67 = inetAddress66.getHostName();
        byte[] byteArray68 = inetAddress66.getAddress();
        java.net.InetAddress inetAddress69 = java.net.InetAddress.getByAddress("zh_CN", byteArray68);
        java.nio.ByteBuffer byteBuffer70 = byteBuffer63.get(byteArray68);
        java.nio.ByteBuffer[] byteBufferArray71 = new java.nio.ByteBuffer[] { byteBuffer24, byteBuffer27, byteBuffer31, byteBuffer35, byteBuffer52, byteBuffer63 };
        // The following exception was thrown during execution in test generation
        try {
            long long72 = fileChannel13.read(byteBufferArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Read-only buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4096L + "'", long14 == 4096L);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(longBuffer17);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 0 + "'", short18 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(buffer25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(longBuffer28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(doubleBuffer36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(longBuffer40);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(longBuffer55);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(byteOrder62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(intBuffer64);
        org.junit.Assert.assertNotNull(inetAddress66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "localhost" + "'", str67, "localhost");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inetAddress69);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteBufferArray71);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        java.util.concurrent.TimeUnit timeUnit1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.attribute.FileTime fileTime2 = java.nio.file.attribute.FileTime.from(1L, timeUnit1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: unit");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder8);
        java.util.Spliterator.OfInt ofInt11 = ofInt2.trySplit();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(ofInt11);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI5 = new java.net.URI("java.security.cert.CertificateEncodingException", "1 Jan 1970 00:00:32 GMT", "MicroOfSecond", "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]", "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: java.security.cert.CertificateEncodingException://1%20Jan%201970%2000:00:32%20GMTMicroOfSecond?java.nio.ByteBufferAsIntBufferB[pos=0%20lim=7%20cap=7]#LongSummaryStatistics%7Bcount=0,%20sum=0,%20min=9223372036854775807,%20average=0.000000,%20max=-9223372036854775808%7D");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("file:/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (int) ' ');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "file:/tmp/United Kingdom75427..." + "'", str2, "file:/tmp/United Kingdom75427...");
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("+999999999-365");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: +999999999-365");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration5 = duration2.minusNanos((-1L));
        java.time.Duration duration6 = duration2.abs();
        long long7 = duration6.toNanos();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000000000L + "'", long7 == 10000000000L);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate2 = localDateTime1.toLocalDate();
        java.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange5 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime1);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap7 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap11 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.zone.ZoneRules zoneRules17 = zoneOffset15.getRules();
        java.time.zone.ZoneRules zoneRules18 = zoneIdMap11.getOrDefault((java.lang.Object) 1.0d, zoneRules17);
        java.time.zone.ZoneRules zoneRules19 = zoneIdMap7.put((java.time.ZoneId) zoneOffset9, zoneRules17);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap21 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.zone.ZoneRules zoneRules28 = zoneIdMap21.getOrDefault((java.lang.Object) 1.0d, zoneRules27);
        java.lang.String str29 = zoneRules27.toString();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.Instant instant35 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant37 = instant35.minusNanos((long) 'a');
        int int38 = instant35.getNano();
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime33.with((java.time.temporal.TemporalAdjuster) instant35);
        java.time.Duration duration40 = zoneRules27.getDaylightSavings(instant35);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap42 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        java.time.zone.ZoneRules zoneRules48 = zoneOffset46.getRules();
        java.time.zone.ZoneRules zoneRules49 = zoneIdMap42.getOrDefault((java.lang.Object) 1.0d, zoneRules48);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset54);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap58 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime63 = localDateTime60.atOffset(zoneOffset62);
        java.time.zone.ZoneRules zoneRules64 = zoneOffset62.getRules();
        java.time.zone.ZoneRules zoneRules65 = zoneIdMap58.getOrDefault((java.lang.Object) 1.0d, zoneRules64);
        java.lang.String str66 = zoneRules64.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList67 = zoneRules64.getTransitions();
        java.time.zone.ZoneRules zoneRules68 = zoneIdMap42.putIfAbsent((java.time.ZoneId) zoneOffset54, zoneRules64);
        java.lang.String str69 = zoneOffset54.toString();
        java.time.Clock clock70 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset54);
        java.time.ZonedDateTime zonedDateTime71 = instant35.atZone((java.time.ZoneId) zoneOffset54);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray72 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList73 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList73, zoneOffsetTransitionArray72);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap76 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime81 = localDateTime78.atOffset(zoneOffset80);
        java.time.zone.ZoneRules zoneRules82 = zoneOffset80.getRules();
        java.time.zone.ZoneRules zoneRules83 = zoneIdMap76.getOrDefault((java.lang.Object) 1.0d, zoneRules82);
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList84 = zoneRules82.getTransitions();
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray85 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList86 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList86, zoneOffsetTransitionRuleArray85);
        java.time.zone.ZoneRules zoneRules88 = java.time.zone.ZoneRules.of(zoneOffset9, zoneOffset54, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList73, zoneOffsetTransitionList84, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList86);
        java.time.ZonedDateTime zonedDateTime89 = localDateTime1.atZone((java.time.ZoneId) zoneOffset54);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNull(zoneRules19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str29, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(zoneRules64);
        org.junit.Assert.assertNotNull(zoneRules65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str66, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList67);
        org.junit.Assert.assertNull(zoneRules68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Z" + "'", str69, "Z");
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(zoneRules82);
        org.junit.Assert.assertNotNull(zoneRules83);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList84);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(zoneRules88);
        org.junit.Assert.assertNotNull(zonedDateTime89);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("iso8601", "+999999999-12-31T00:00:00.000031Z");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: +999999999-12-31T00:00:00.000031Z");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusYears((long) (short) -1);
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean10 = localDate7.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDate localDate12 = localDate7.plusWeeks((long) 10);
        java.time.format.DateTimeFormatter dateTimeFormatter13 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology14 = dateTimeFormatter13.getChronology();
        java.time.format.TextStyle textStyle15 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String str17 = locale16.getISO3Language();
        java.time.format.DecimalStyle decimalStyle18 = java.time.format.DecimalStyle.of(locale16);
        java.lang.String str19 = chronology14.getDisplayName(textStyle15, locale16);
        java.time.OffsetTime offsetTime20 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime22 = offsetTime20.withSecond(16);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int24 = offsetTime22.get((java.time.temporal.TemporalField) chronoField23);
        java.time.temporal.ValueRange valueRange25 = chronology14.range(chronoField23);
        boolean boolean26 = localDate7.isSupported((java.time.temporal.TemporalField) chronoField23);
        java.time.LocalDate localDate27 = java.time.LocalDate.now();
        java.time.LocalDate localDate28 = java.time.LocalDate.MIN;
        boolean boolean29 = localDate27.isEqual((java.time.chrono.ChronoLocalDate) localDate28);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean31 = localDate28.isSupported((java.time.temporal.TemporalField) chronoField30);
        java.time.OffsetTime offsetTime32 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime34 = offsetTime32.withSecond(16);
        java.time.OffsetDateTime offsetDateTime35 = localDate28.atTime(offsetTime34);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        int int41 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime37.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        int int52 = localDateTime47.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        int int57 = localDateTime48.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        boolean boolean58 = localDateTime37.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime63 = localDateTime60.atOffset(zoneOffset62);
        int int64 = localDateTime59.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime60);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        boolean boolean69 = localDateTime59.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        boolean boolean70 = localDateTime53.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        java.time.LocalDate localDate71 = localDateTime53.toLocalDate();
        java.time.LocalDate localDate72 = java.time.LocalDate.now();
        java.time.LocalDate localDate73 = java.time.LocalDate.MIN;
        boolean boolean74 = localDate72.isEqual((java.time.chrono.ChronoLocalDate) localDate73);
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean76 = localDate73.isSupported((java.time.temporal.TemporalField) chronoField75);
        int int77 = localDate73.getDayOfYear();
        int int78 = localDate71.compareTo((java.time.chrono.ChronoLocalDate) localDate73);
        java.time.Period period79 = localDate28.until((java.time.chrono.ChronoLocalDate) localDate73);
        java.time.temporal.ChronoField chronoField81 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit82 = chronoField81.getBaseUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate83 = localDate28.plus(999999999L, temporalUnit82);
        // The following exception was thrown during execution in test generation
        try {
            long long84 = localDateTime0.until((java.time.temporal.Temporal) localDate7, temporalUnit82);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: -999999999-01-01 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + textStyle15 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle15.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(decimalStyle18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISO" + "'", str19, "ISO");
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField23.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 17 + "'", int24 == 17);
        org.junit.Assert.assertNotNull(valueRange25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField30.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(offsetTime32);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField75.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1999999998 + "'", int78 == 1999999998);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + chronoField81 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField81.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit82 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit82.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(chronoLocalDate83);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer23 = charBuffer22.flip();
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer26 = charBuffer25.flip();
        java.nio.CharBuffer charBuffer27 = charBuffer25.duplicate();
        char[] charArray35 = new char[] { 'a', '#', '4', '#' };
        boolean boolean36 = org.apache.commons.lang3.StringUtils.containsAny("", charArray35);
        boolean boolean37 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray35);
        boolean boolean38 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray35);
        int int39 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer27, charArray35);
        boolean boolean40 = charBuffer27.isDirect();
        java.nio.CharBuffer charBuffer41 = charBuffer22.append((java.lang.CharSequence) charBuffer27);
        java.nio.CharBuffer charBuffer42 = org.apache.commons.lang3.StringUtils.defaultIfEmpty(charBuffer6, charBuffer41);
        int int43 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u56fd" + "'", str1, "\u4e2d\u56fd");
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        java.nio.channels.SeekableByteChannel seekableByteChannel20 = fileChannel18.position((long) 861000000);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileLock fileLock21 = fileChannel18.lock();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(fileChannel18);
        org.junit.Assert.assertNotNull(seekableByteChannel20);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("Thu Jan 01 00:00:32 UTC 1970", "java.nio.HeapShortBuffer[pos=64lim=64cap=64]", 0, "MINUTE", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: thu jan 01 00:00:32 utc 1970");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "", (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str3, "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAscii(' ');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean1 = coderResult0.isMalformed();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        java.nio.CharBuffer charBuffer4 = charBuffer2.duplicate();
        char[] charArray12 = new char[] { 'a', '#', '4', '#' };
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsAny("", charArray12);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray12);
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray12);
        int int16 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer4, charArray12);
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.wrap(charArray12);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsAny("OptionalLong.empty", charArray12);
        java.nio.CharBuffer charBuffer19 = java.nio.CharBuffer.wrap(charArray12);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charBuffer19);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "Eng");
        org.junit.Assert.assertNotNull(charBuffer1);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        boolean boolean9 = path4.startsWith("/experiment/GBR/");
        java.io.File file11 = new java.io.File("GBR");
        boolean boolean13 = file11.setWritable(true);
        java.nio.file.Path path14 = file11.toPath();
        java.nio.file.Path path16 = path14.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption17 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption18 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray19 = new java.nio.file.LinkOption[] { linkOption17, linkOption18 };
        java.nio.file.Path path20 = path14.toRealPath(linkOptionArray19);
        java.nio.file.Path path21 = path4.resolveSibling(path14);
        java.io.File file23 = new java.io.File("GBR");
        boolean boolean25 = file23.setWritable(true);
        java.nio.file.Path path26 = file23.toPath();
        java.nio.file.Path path28 = path26.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI29 = path26.toUri();
        boolean boolean31 = path26.startsWith("/experiment/GBR/");
        java.nio.file.Path path32 = path4.resolveSibling(path26);
        java.util.Spliterator<java.nio.file.Path> pathSpliterator33 = path4.spliterator();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertTrue("'" + linkOption17 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption17.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption18 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption18.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertNotNull(uRI29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertNotNull(pathSpliterator33);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) 794000000);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        boolean boolean6 = doubleBuffer5.isDirect();
        java.nio.DoubleBuffer doubleBuffer7 = doubleBuffer5.compact();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = doubleBuffer5.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleBuffer7);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("Eng");
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = chronoField9.getDisplayName(locale10);
        java.lang.String str13 = locale5.getDisplayCountry(locale10);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder0.setLanguageTag("PT10S:5#GBR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: PT10S:5#GBR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GBR" + "'", str11, "GBR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Minute" + "'", str12, "Minute");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United Kingdom" + "'", str13, "United Kingdom");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        java.util.OptionalInt optionalInt0 = java.util.OptionalInt.empty();
        int int2 = optionalInt0.orElse(31);
        int int4 = optionalInt0.orElse(539000000);
        org.junit.Assert.assertNotNull(optionalInt0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 31 + "'", int2 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 539000000 + "'", int4 == 539000000);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.OffsetDateTime offsetDateTime8 = localDate1.atTime(offsetTime7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        boolean boolean31 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        boolean boolean42 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDate localDate44 = localDateTime26.toLocalDate();
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.MIN;
        boolean boolean47 = localDate45.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean49 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField48);
        int int50 = localDate46.getDayOfYear();
        int int51 = localDate44.compareTo((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.Period period52 = localDate1.until((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime56.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        java.time.zone.ZoneRules zoneRules63 = zoneOffset61.getRules();
        java.time.ZonedDateTime zonedDateTime64 = offsetDateTime56.atZoneSameInstant((java.time.ZoneId) zoneOffset61);
        int int65 = zonedDateTime64.getDayOfMonth();
        boolean boolean66 = period52.equals((java.lang.Object) int65);
        java.time.Period period68 = period52.withYears(186000000);
        java.time.Period period70 = period52.minusMonths((long) 829000000);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1999999998 + "'", int51 == 1999999998);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 31 + "'", int65 == 31);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 916000000);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        boolean boolean4 = codeSource2.equals((java.lang.Object) 4);
        java.lang.String str5 = codeSource2.toString();
        java.lang.String str6 = codeSource2.toString();
        java.net.URL uRL7 = null;
        java.security.CodeSigner[] codeSignerArray8 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource9 = new java.security.CodeSource(uRL7, codeSignerArray8);
        boolean boolean11 = codeSource9.equals((java.lang.Object) 4);
        java.lang.String str12 = codeSource9.toString();
        java.lang.String str13 = codeSource9.toString();
        boolean boolean14 = codeSource2.implies(codeSource9);
        java.security.CodeSource codeSource15 = null;
        boolean boolean16 = codeSource9.implies(codeSource15);
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(null <no signer certificates>)" + "'", str5, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(null <no signer certificates>)" + "'", str6, "(null <no signer certificates>)");
        org.junit.Assert.assertNotNull(codeSignerArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(null <no signer certificates>)" + "'", str12, "(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(null <no signer certificates>)" + "'", str13, "(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        long[] longArray0 = new long[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.wrap(longArray0, 1024, 744000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.MAX;
        java.time.OffsetDateTime offsetDateTime2 = offsetDateTime0.minusDays((long) 10);
        java.time.OffsetDateTime offsetDateTime4 = offsetDateTime0.withYear((int) (short) 10);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(offsetDateTime4);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        long long7 = file1.length();
        java.io.File file8 = file1.getAbsoluteFile();
        boolean boolean10 = file1.setReadable(false);
        java.io.File file12 = new java.io.File("GBR");
        boolean boolean14 = file12.setExecutable(true);
        boolean boolean15 = file1.renameTo(file12);
        boolean boolean18 = file12.setExecutable(false, true);
        java.io.File file19 = file12.getAbsoluteFile();
        java.net.URL uRL20 = file12.toURL();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4096L + "'", long7 == 4096L);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(file19);
// flaky:         org.junit.Assert.assertEquals(file19.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/experiment/GBR");
        org.junit.Assert.assertNotNull(uRL20);
// flaky:         org.junit.Assert.assertEquals(uRL20.toString(), "file:/experiment/GBR/");
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (byte) 10);
        java.lang.String str2 = optionalDouble1.toString();
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.Month month7 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime3);
        boolean boolean8 = optionalDouble1.equals((java.lang.Object) month7);
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalDouble[10.0]" + "'", str2, "OptionalDouble[10.0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.DECEMBER + "'", month7.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        int int4 = offsetDateTime3.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.OffsetTime offsetTime1 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime3 = offsetTime1.withSecond(16);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int5 = offsetTime3.get((java.time.temporal.TemporalField) chronoField4);
        java.time.temporal.ValueRange valueRange6 = isoChronology0.range(chronoField4);
        long long7 = valueRange6.getSmallestMaximum();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(offsetTime1);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField4.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 17 + "'", int5 == 17);
        org.junit.Assert.assertNotNull(valueRange6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 59L + "'", long7 == 59L);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.util.stream.IntStream intStream4 = charBuffer3.codePoints();
        java.util.LongSummaryStatistics longSummaryStatistics5 = new java.util.LongSummaryStatistics();
        long long6 = longSummaryStatistics5.getSum();
        java.util.stream.IntStream intStream8 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt9 = intStream8.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = ofInt9.trySplit();
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt13 = intStream12.spliterator();
        java.util.stream.IntStream.Builder builder14 = java.util.stream.IntStream.builder();
        boolean boolean15 = ofInt13.tryAdvance((java.util.function.IntConsumer) builder14);
        java.util.stream.IntStream intStream17 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt18 = intStream17.spliterator();
        java.util.stream.IntStream.Builder builder19 = java.util.stream.IntStream.builder();
        boolean boolean20 = ofInt18.tryAdvance((java.util.function.IntConsumer) builder19);
        ofInt13.forEachRemaining((java.util.function.IntConsumer) builder19);
        boolean boolean22 = ofInt9.tryAdvance((java.util.function.IntConsumer) builder19);
        java.util.function.IntConsumer intConsumer23 = longSummaryStatistics5.andThen((java.util.function.IntConsumer) builder19);
        java.util.LongSummaryStatistics longSummaryStatistics24 = new java.util.LongSummaryStatistics();
        longSummaryStatistics5.combine(longSummaryStatistics24);
        java.util.stream.IntStream intStream26 = intStream4.peek((java.util.function.IntConsumer) longSummaryStatistics24);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertEquals(longSummaryStatistics5.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(ofInt9);
        org.junit.Assert.assertNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(ofInt13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertNotNull(ofInt18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intConsumer23);
        org.junit.Assert.assertEquals(longSummaryStatistics24.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertNotNull(intStream26);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str24 = localDateTime17.format(dateTimeFormatter23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.time.chrono.Chronology chronology27 = java.time.chrono.Chronology.ofLocale(locale25);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.OffsetDateTime offsetDateTime33 = offsetDateTime31.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.zone.ZoneRules zoneRules38 = zoneOffset36.getRules();
        java.time.ZonedDateTime zonedDateTime39 = offsetDateTime31.atZoneSameInstant((java.time.ZoneId) zoneOffset36);
        java.time.ZoneId zoneId40 = zonedDateTime39.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime41 = zonedDateTime39.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.zone.ZoneRules zoneRules52 = zoneOffset50.getRules();
        java.time.ZonedDateTime zonedDateTime53 = offsetDateTime45.atZoneSameInstant((java.time.ZoneId) zoneOffset50);
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime53.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long56 = zonedDateTime53.getLong((java.time.temporal.TemporalField) chronoField55);
        long long57 = zonedDateTime39.getLong((java.time.temporal.TemporalField) chronoField55);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime39.minusSeconds((long) 999999999);
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime60 = chronology27.zonedDateTime((java.time.temporal.TemporalAccessor) zonedDateTime59);
        boolean boolean62 = chronology27.isLeapYear((long) 'G');
        java.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter23.withChronology(chronology27);
        java.time.chrono.Chronology chronology64 = dateTimeFormatter63.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str24, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(zoneRules38);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(zoneId40);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(zoneRules52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 999999999L + "'", long56 == 999999999L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 999999999L + "'", long57 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        long long6 = java.util.Date.UTC((int) '\000', (-999999999), 0, 916000000, 744000000, 744000000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-2626459221446400000L) + "'", long6 == (-2626459221446400000L));
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.LocalTime localTime12 = java.time.LocalTime.now(clock11);
        java.time.Instant instant14 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant16 = instant14.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.ofInstant(instant14, (java.time.ZoneId) zoneOffset19);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.OffsetDateTime offsetDateTime28 = offsetDateTime26.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.zone.ZoneRules zoneRules33 = zoneOffset31.getRules();
        java.time.ZonedDateTime zonedDateTime34 = offsetDateTime26.atZoneSameInstant((java.time.ZoneId) zoneOffset31);
        java.time.ZoneId zoneId35 = zonedDateTime34.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap37 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap41 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.zone.ZoneRules zoneRules48 = zoneIdMap41.getOrDefault((java.lang.Object) 1.0d, zoneRules47);
        java.time.zone.ZoneRules zoneRules49 = zoneIdMap37.put((java.time.ZoneId) zoneOffset39, zoneRules47);
        java.time.ZoneId[] zoneIdArray50 = new java.time.ZoneId[] { zoneOffset19, zoneId35, zoneOffset39 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet51 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet51, zoneIdArray50);
        java.lang.String[] strArray56 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray58 = org.apache.commons.lang3.StringUtils.stripAll(strArray56, "GBR");
        java.lang.String str59 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray58);
        boolean boolean60 = zoneIdSet51.remove((java.lang.Object) strArray58);
        boolean boolean61 = clock11.equals((java.lang.Object) zoneIdSet51);
        java.time.OffsetTime offsetTime62 = java.time.OffsetTime.now(clock11);
        int int63 = offsetTime62.getNano();
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer66 = byteBuffer65.asLongBuffer();
        java.nio.LongBuffer longBuffer68 = longBuffer66.put(0L);
        boolean boolean69 = longBuffer66.isDirect();
        long long70 = longBuffer66.get();
        java.nio.ByteOrder byteOrder71 = longBuffer66.order();
        java.nio.LongBuffer longBuffer73 = longBuffer66.put((long) 12);
        boolean boolean74 = offsetTime62.equals((java.lang.Object) longBuffer73);
        boolean boolean75 = strList2.contains((java.lang.Object) longBuffer73);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zoneId35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNull(zoneRules49);
        org.junit.Assert.assertNotNull(zoneIdArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Minute(null <no signer certificates>)" + "'", str59, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(offsetTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(longBuffer66);
        org.junit.Assert.assertNotNull(longBuffer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(byteOrder71);
        org.junit.Assert.assertNotNull(longBuffer73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        int[] intArray18 = new int[] { 4, 399000000, 437000000, 653000000, 21, 10 };
        java.nio.IntBuffer intBuffer19 = intBuffer11.get(intArray18);
        java.nio.IntBuffer intBuffer20 = intBuffer19.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer23 = byteBuffer22.asLongBuffer();
        float float25 = byteBuffer22.getFloat(4);
        double double27 = byteBuffer22.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder28 = null;
        java.nio.ByteBuffer byteBuffer29 = byteBuffer22.order(byteOrder28);
        java.nio.ByteOrder byteOrder30 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer31 = byteBuffer22.order(byteOrder30);
        java.nio.IntBuffer intBuffer32 = byteBuffer31.asIntBuffer();
        int[] intArray39 = new int[] { 4, 399000000, 437000000, 653000000, 21, 10 };
        java.nio.IntBuffer intBuffer40 = intBuffer32.get(intArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer43 = intBuffer20.get(intArray39, 755000000, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer19);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(longBuffer23);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteOrder30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer40);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        int[] intArray6 = new int[] { 1024, (byte) 1, 125000000, 17488, '4', 829000000 };
        java.nio.IntBuffer intBuffer7 = java.nio.IntBuffer.wrap(intArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer10 = intBuffer7.put(989000000, 284000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1024, 1, 125000000, 17488, 52, 829000000]");
        org.junit.Assert.assertNotNull(intBuffer7);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        java.lang.CharSequence charSequence0 = null;
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase(charSequence0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        java.io.File file9 = new java.io.File("GBR");
        boolean boolean11 = file9.setWritable(true);
        java.nio.file.Path path12 = file9.toPath();
        java.nio.file.Path path14 = path12.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI15 = path12.toUri();
        boolean boolean17 = path12.startsWith("/experiment/GBR/");
        java.io.File file19 = new java.io.File("GBR");
        boolean boolean21 = file19.setWritable(true);
        java.nio.file.Path path22 = file19.toPath();
        java.nio.file.Path path24 = path22.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption25 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption26 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray27 = new java.nio.file.LinkOption[] { linkOption25, linkOption26 };
        java.nio.file.Path path28 = path22.toRealPath(linkOptionArray27);
        java.nio.file.Path path29 = path12.resolveSibling(path22);
        boolean boolean30 = path4.startsWith(path12);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertTrue("'" + linkOption25 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption25.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption26 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption26.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray27);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.zone.ZoneRules zoneRules4 = zoneOffset2.getRules();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap6 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap6.getOrDefault((java.lang.Object) 1.0d, zoneRules12);
        java.lang.String str14 = zoneRules12.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = zoneRules12.getTransitions();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        boolean boolean38 = localDateTime17.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str40 = localDateTime33.format(dateTimeFormatter39);
        java.time.ZoneOffset zoneOffset41 = zoneRules12.getOffset(localDateTime33);
        java.time.LocalDateTime localDateTime43 = localDateTime33.minusMinutes(13L);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition44 = zoneRules4.getTransition(localDateTime33);
        java.time.LocalDateTime localDateTime46 = localDateTime33.plusNanos(0L);
        java.time.LocalDateTime localDateTime48 = localDateTime33.withNano(446000000);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(zoneRules4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str14, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str40, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNull(zoneOffsetTransition44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalField temporalField5 = null;
        boolean boolean6 = instant1.isSupported(temporalField5);
        java.util.Date date7 = java.util.Date.from(instant1);
        java.security.NoSuchProviderException noSuchProviderException9 = new java.security.NoSuchProviderException("Weeks");
        boolean boolean10 = date7.equals((java.lang.Object) "Weeks");
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            builder0.accept((double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset12);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules7.getTransition(localDateTime14);
        int int16 = localDateTime14.getSecond();
        java.time.Duration duration19 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int20 = duration19.getNano();
        java.time.Duration duration21 = duration19.abs();
        java.time.LocalDateTime localDateTime22 = localDateTime14.minus((java.time.temporal.TemporalAmount) duration21);
        java.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes((long) (short) 0);
        java.time.Duration duration27 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList28 = duration27.getUnits();
        java.time.Duration duration30 = duration27.plusDays((-1L));
        java.time.Duration duration32 = duration27.withSeconds(0L);
        boolean boolean33 = localDateTime24.equals((java.lang.Object) duration32);
        java.time.LocalDate localDate34 = java.time.LocalDate.now();
        java.time.LocalDate localDate35 = java.time.LocalDate.MIN;
        boolean boolean36 = localDate34.isEqual((java.time.chrono.ChronoLocalDate) localDate35);
        int int37 = localDate35.getYear();
        java.time.LocalDate localDate38 = java.time.LocalDate.now();
        java.time.LocalDate localDate39 = java.time.LocalDate.MIN;
        boolean boolean40 = localDate38.isEqual((java.time.chrono.ChronoLocalDate) localDate39);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime44.withSecond((int) (byte) 0);
        java.time.LocalDate localDate47 = offsetDateTime44.toLocalDate();
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean49 = offsetDateTime44.isSupported((java.time.temporal.TemporalField) chronoField48);
        boolean boolean50 = localDate38.isSupported((java.time.temporal.TemporalField) chronoField48);
        java.time.Period period51 = java.time.Period.between(localDate35, localDate38);
        long long52 = localDate38.toEpochDay();
        int int53 = localDate38.lengthOfYear();
        java.time.chrono.IsoChronology isoChronology54 = localDate38.getChronology();
        java.time.temporal.Temporal temporal55 = duration32.subtractFrom((java.time.temporal.Temporal) localDate38);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(temporalUnitList28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-999999999) + "'", int37 == (-999999999));
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField48.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 19044L + "'", long52 == 19044L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 365 + "'", int53 == 365);
        org.junit.Assert.assertNotNull(isoChronology54);
        org.junit.Assert.assertNotNull(temporal55);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.OffsetDateTime offsetDateTime8 = localDate1.atTime(offsetTime7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        boolean boolean31 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        boolean boolean42 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDate localDate44 = localDateTime26.toLocalDate();
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.MIN;
        boolean boolean47 = localDate45.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean49 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField48);
        int int50 = localDate46.getDayOfYear();
        int int51 = localDate44.compareTo((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.Period period52 = localDate1.until((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime56.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        java.time.zone.ZoneRules zoneRules63 = zoneOffset61.getRules();
        java.time.ZonedDateTime zonedDateTime64 = offsetDateTime56.atZoneSameInstant((java.time.ZoneId) zoneOffset61);
        int int65 = zonedDateTime64.getDayOfMonth();
        boolean boolean66 = period52.equals((java.lang.Object) int65);
        java.time.Period period68 = period52.withYears(186000000);
        boolean boolean69 = period52.isZero();
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.OffsetDateTime offsetDateTime75 = offsetDateTime73.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime78 = offsetDateTime73.with((java.time.temporal.TemporalField) chronoField76, (long) 31);
        int int79 = offsetDateTime78.getMinute();
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime85 = localDateTime82.atOffset(zoneOffset84);
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset84);
        java.time.temporal.ChronoField chronoField88 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit89 = chronoField88.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime90 = localDateTime86.minus((long) (-999999999), temporalUnit89);
        java.lang.String str91 = temporalUnit89.toString();
        boolean boolean92 = offsetDateTime78.isSupported(temporalUnit89);
        boolean boolean93 = temporalUnit89.isDateBased();
        // The following exception was thrown during execution in test generation
        try {
            long long94 = period52.get(temporalUnit89);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1999999998 + "'", int51 == 1999999998);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 31 + "'", int65 == 31);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField76.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(offsetDateTime85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + chronoField88 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField88.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit89 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit89.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Weeks" + "'", str91, "Weeks");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("1969-12-31T23:59:59.999Z", "23:59:59.999999999");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (byte) -1);
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap11 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.zone.ZoneRules zoneRules17 = zoneOffset15.getRules();
        java.time.zone.ZoneRules zoneRules18 = zoneIdMap11.getOrDefault((java.lang.Object) 1.0d, zoneRules17);
        java.lang.String str19 = zoneRules17.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList20 = zoneRules17.getTransitions();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        int int42 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime22.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str45 = localDateTime38.format(dateTimeFormatter44);
        java.time.ZoneOffset zoneOffset46 = zoneRules17.getOffset(localDateTime38);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime9.withOffsetSameLocal(zoneOffset46);
        boolean boolean48 = fileTime1.equals((java.lang.Object) offsetDateTime9);
        java.lang.String str49 = fileTime1.toString();
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str19, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str45, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str49, "1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        int int3 = offsetTime0.getMinute();
        java.time.OffsetTime offsetTime5 = offsetTime0.minusSeconds(6883333L);
        java.time.OffsetTime offsetTime6 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime8 = offsetTime6.withSecond(16);
        java.time.Instant instant10 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant12 = instant10.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime13 = java.nio.file.attribute.FileTime.from(instant10);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery14 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period15 = instant10.query(periodTemporalQuery14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = instant10.isSupported(temporalUnit17);
        boolean boolean19 = offsetTime6.isSupported(temporalUnit17);
        java.time.OffsetTime offsetTime21 = offsetTime6.minusNanos((long) '\n');
        boolean boolean22 = offsetTime0.isAfter(offsetTime21);
        java.time.Period period23 = java.time.Period.ZERO;
        boolean boolean24 = period23.isNegative();
        java.time.Period period26 = period23.minusMonths((long) 1);
        java.time.OffsetTime offsetTime27 = offsetTime0.plus((java.time.temporal.TemporalAmount) period23);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 17 + "'", int3 == 17);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(offsetTime8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertNotNull(periodTemporalQuery14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(offsetTime27);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getAuthority();
        java.lang.String str10 = uRL7.getHost();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom2871027082625639175aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom2871027082625639175aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom2516522321684159537aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom2516522321684159537aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset12);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules7.getTransition(localDateTime14);
        int int16 = localDateTime14.getSecond();
        java.time.Duration duration19 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int20 = duration19.getNano();
        java.time.Duration duration21 = duration19.abs();
        java.time.LocalDateTime localDateTime22 = localDateTime14.minus((java.time.temporal.TemporalAmount) duration21);
        java.time.Duration duration24 = duration21.plusMillis(0L);
        long long25 = duration21.toNanos();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000000000L + "'", long25 == 10000000000L);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        java.util.Optional<java.time.chrono.AbstractChronology> abstractChronologyOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(abstractChronologyOptional0);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        printWriter1.print((float) 'a');
        boolean boolean6 = printWriter1.checkError();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = locale7.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayLanguage();
        java.lang.String[] strArray16 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("", "16:00:00", (int) (byte) 1);
        java.lang.String[] strArray18 = org.apache.commons.lang3.StringUtils.stripAll(strArray16, "tsohlacol");
        java.io.PrintWriter printWriter19 = printWriter1.printf(locale9, "S-ASCII", (java.lang.Object[]) strArray16);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GBR" + "'", str8, "GBR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587" + "'", str11, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(printWriter19);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.Instant instant21 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.Clock clock26 = java.time.Clock.fixed(instant21, (java.time.ZoneId) zoneOffset24);
        java.time.LocalTime localTime27 = java.time.LocalTime.now(clock26);
        java.time.LocalTime localTime29 = localTime27.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.of(localDate19, localTime29);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        int int36 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        int int41 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        int int47 = localDateTime42.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        int int52 = localDateTime43.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        boolean boolean53 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        int int59 = localDateTime54.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime63 = localDateTime60.atOffset(zoneOffset62);
        boolean boolean64 = localDateTime54.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime60);
        boolean boolean65 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime60);
        java.time.LocalDate localDate66 = localDateTime48.toLocalDate();
        java.time.LocalDate localDate68 = localDate66.minusWeeks((long) (short) 1);
        boolean boolean69 = localDate19.isAfter((java.time.chrono.ChronoLocalDate) localDate68);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(clock26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration3 = duration1.minusMinutes(0L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        java.nio.LongBuffer longBuffer10 = longBuffer7.put((int) (byte) 0, 0L);
        java.nio.LongBuffer longBuffer11 = longBuffer10.asReadOnlyBuffer();
        boolean boolean12 = longBuffer11.isReadOnly();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertNotNull(longBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        int int4 = ofDouble3.characteristics();
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.distinct();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.parallel();
        java.util.Spliterator.OfDouble ofDouble8 = doubleStream6.spliterator();
        int int9 = ofDouble8.characteristics();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics10 = new java.util.DoubleSummaryStatistics();
        boolean boolean11 = ofDouble8.tryAdvance((java.util.function.DoubleConsumer) doubleSummaryStatistics10);
        ofDouble3.forEachRemaining((java.util.function.DoubleConsumer) doubleSummaryStatistics10);
        int int13 = ofDouble3.characteristics();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(ofDouble8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(doubleSummaryStatistics10.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        java.net.URL uRL0 = null;
        java.security.CodeSigner[] codeSignerArray1 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource2 = new java.security.CodeSource(uRL0, codeSignerArray1);
        java.security.PermissionCollection permissionCollection3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.security.Principal principal5 = null;
        java.security.Principal[] principalArray6 = new java.security.Principal[] { principal5 };
        java.security.ProtectionDomain protectionDomain7 = new java.security.ProtectionDomain(codeSource2, permissionCollection3, classLoader4, principalArray6);
        java.security.Principal[] principalArray8 = protectionDomain7.getPrincipals();
        java.security.PermissionCollection permissionCollection9 = protectionDomain7.getPermissions();
        java.security.Permission permission10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = protectionDomain7.implies(permission10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(codeSignerArray1);
        org.junit.Assert.assertNotNull(principalArray6);
        org.junit.Assert.assertNotNull(principalArray8);
        org.junit.Assert.assertNull(permissionCollection9);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset6);
        java.time.zone.ZoneRules zoneRules9 = zoneOffset6.getRules();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset14);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition17 = zoneRules9.getTransition(localDateTime16);
        int int18 = localDateTime16.getSecond();
        java.time.Duration duration21 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int22 = duration21.getNano();
        java.time.Duration duration23 = duration21.abs();
        java.time.LocalDateTime localDateTime24 = localDateTime16.minus((java.time.temporal.TemporalAmount) duration23);
        java.time.LocalDate localDate25 = java.time.LocalDate.now();
        java.time.LocalDate localDate26 = java.time.LocalDate.MIN;
        boolean boolean27 = localDate25.isEqual((java.time.chrono.ChronoLocalDate) localDate26);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime32.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset42);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime48 = localDateTime44.minus((long) (-999999999), temporalUnit47);
        java.lang.String str49 = temporalUnit47.toString();
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime36.plus((long) (byte) 100, temporalUnit47);
        java.time.LocalDate localDate51 = localDate25.minus((long) (-1), temporalUnit47);
        long long52 = localDateTime0.until((java.time.temporal.Temporal) localDateTime16, temporalUnit47);
        java.time.LocalDateTime localDateTime54 = localDateTime0.minusSeconds(284000000L);
        java.time.LocalDate localDate55 = java.time.LocalDate.now();
        java.time.LocalDate localDate56 = java.time.LocalDate.MIN;
        boolean boolean57 = localDate55.isEqual((java.time.chrono.ChronoLocalDate) localDate56);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean59 = localDate56.isSupported((java.time.temporal.TemporalField) chronoField58);
        int int60 = localDate56.getDayOfYear();
        java.time.LocalDate localDate62 = localDate56.withYear((int) '4');
        java.time.LocalTime localTime63 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime65 = localTime63.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime66 = localDate56.atTime(localTime63);
        java.time.LocalTime localTime68 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int69 = localTime63.compareTo(localTime68);
        java.time.Duration duration70 = java.time.Duration.ZERO;
        java.time.Duration duration72 = duration70.minusDays((long) (-1));
        java.time.LocalTime localTime73 = localTime68.minus((java.time.temporal.TemporalAmount) duration72);
        java.time.LocalTime localTime75 = localTime73.plusMinutes(100L);
        java.time.Instant instant77 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant79 = instant77.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime80 = java.nio.file.attribute.FileTime.from(instant77);
        java.time.Instant instant82 = instant77.plusMillis((long) 10);
        java.time.Instant instant84 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant86 = instant84.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime87 = java.nio.file.attribute.FileTime.from(instant84);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery88 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period89 = instant84.query(periodTemporalQuery88);
        java.time.Period period90 = instant82.query(periodTemporalQuery88);
        java.time.Period period91 = localTime75.query(periodTemporalQuery88);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal92 = localDateTime54.adjustInto((java.time.temporal.Temporal) localTime75);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNull(zoneOffsetTransition17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Weeks" + "'", str49, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-52177397210L) + "'", long52 == (-52177397210L));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField58.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(fileTime80);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(fileTime87);
        org.junit.Assert.assertNotNull(periodTemporalQuery88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.OffsetDateTime offsetDateTime3 = java.time.OffsetDateTime.now();
        boolean boolean4 = decimalStyle2.equals((java.lang.Object) offsetDateTime3);
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle2.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle10 = decimalStyle6.withPositiveSign('G');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(decimalStyle10);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException1 = new java.security.NoSuchAlgorithmException("+999999999-365Z");
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.OptionalLong optionalLong1 = longStream0.max();
        long long3 = optionalLong1.orElse(0L);
        long long5 = optionalLong1.orElse((long) '#');
        java.lang.String str6 = optionalLong1.toString();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 35L + "'", long5 == 35L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OptionalLong.empty" + "'", str6, "OptionalLong.empty");
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        boolean boolean10 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) charBuffer8);
        java.time.LocalDate localDate11 = java.time.LocalDate.now();
        java.time.LocalDate localDate12 = java.time.LocalDate.MIN;
        boolean boolean13 = localDate11.isEqual((java.time.chrono.ChronoLocalDate) localDate12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean15 = localDate12.isSupported((java.time.temporal.TemporalField) chronoField14);
        int int16 = localDate12.getDayOfYear();
        java.time.format.DateTimeFormatter dateTimeFormatter17 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str18 = localDate12.format(dateTimeFormatter17);
        java.time.Instant instant20 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant22 = instant20.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime23 = java.nio.file.attribute.FileTime.from(instant20);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery24 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period25 = instant20.query(periodTemporalQuery24);
        java.text.Format format26 = dateTimeFormatter17.toFormat(periodTemporalQuery24);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.parse((java.lang.CharSequence) charBuffer8, dateTimeFormatter17);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField14.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-999999999-01-01" + "'", str18, "-999999999-01-01");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(periodTemporalQuery24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(format26);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getHost();
        java.io.InputStream inputStream11 = uRL7.openStream();
        inputStream11.mark(781000000);
        inputStream11.mark(32);
        java.io.PrintStream printStream17 = new java.io.PrintStream("\ufffd");
        double[] doubleArray22 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer23 = java.nio.DoubleBuffer.wrap(doubleArray22);
        printStream17.print((java.lang.Object) doubleArray22);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream17, true);
        printStream17.println((double) 989000000);
        printStream17.close();
        java.nio.charset.Charset charset30 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset31 = java.nio.charset.Charset.defaultCharset();
        boolean boolean32 = charset30.contains(charset31);
        java.nio.charset.CharsetEncoder charsetEncoder33 = charset30.newEncoder();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.wrap(byteArray35);
        java.nio.charset.CharsetEncoder charsetEncoder37 = charsetEncoder33.replaceWith(byteArray35);
        printStream17.write(byteArray35, 6, (int) '\r');
        // The following exception was thrown during execution in test generation
        try {
            int int43 = inputStream11.read(byteArray35, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom659825151317891399aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom659825151317891399aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom2075828775937340666aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom2075828775937340666aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer23);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(charsetEncoder37);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder1 = java.util.stream.LongStream.builder();
        builder1.accept((long) 6);
        java.util.function.LongConsumer longConsumer4 = builder0.andThen((java.util.function.LongConsumer) builder1);
        builder1.accept((long) 565000000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(longConsumer4);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str1, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e2d\u56fd" + "'", str2, "\u4e2d\u56fd");
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime1 = java.time.OffsetTime.parse((java.lang.CharSequence) "/");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '/' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.time.LocalTime localTime2 = java.time.LocalTime.parse((java.lang.CharSequence) "+999999999-12-31T23:59:59.999999999Z", dateTimeFormatter1);
        java.time.LocalDate localDate3 = java.time.LocalDate.now();
        java.time.LocalDate localDate4 = java.time.LocalDate.MIN;
        boolean boolean5 = localDate3.isEqual((java.time.chrono.ChronoLocalDate) localDate4);
        java.time.Instant instant8 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant10 = instant8.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime11 = java.nio.file.attribute.FileTime.from(instant8);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery12 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period13 = instant8.query(periodTemporalQuery12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField14.getBaseUnit();
        boolean boolean16 = instant8.isSupported(temporalUnit15);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime24 = localDateTime18.minusNanos((long) (short) 100);
        boolean boolean25 = temporalUnit15.isSupportedBy((java.time.temporal.Temporal) localDateTime18);
        boolean boolean26 = temporalUnit15.isTimeBased();
        java.time.chrono.ChronoLocalDate chronoLocalDate27 = localDate4.plus((long) 495000000, temporalUnit15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime28 = localTime2.truncatedTo(temporalUnit15);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNotNull(periodTemporalQuery12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField14.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate27);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        char[] charArray6 = new char[] { 'a', 'M', '4', '\n', 'M' };
        int int7 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) "127.0.0.1", charArray6);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "aM4\nM");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "aM4\nM");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, M, 4, \n, M]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        java.nio.file.FileSystem fileSystem8 = path4.getFileSystem();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.PathMatcher pathMatcher10 = fileSystem8.getPathMatcher("file:/tmp/United Kingdom75427...");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Syntax 'file' not recognized");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(fileSystem8);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long14 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery15 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period16 = zonedDateTime11.query(periodTemporalQuery15);
        java.time.ZoneId zoneId17 = zonedDateTime11.getZone();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime11.plusWeeks((long) (-1));
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusMinutes(43200000000000L);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = offsetDateTime25.atZoneSameInstant((java.time.ZoneId) zoneOffset30);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime33.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit35 = null;
        boolean boolean36 = zonedDateTime34.isSupported(temporalUnit35);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime34.withMonth((int) (short) 1);
        int int39 = zonedDateTime19.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime34);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 999999999L + "'", long14 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_WEEK_DATE;
        java.text.ParsePosition parsePosition3 = new java.text.ParsePosition(29);
        java.lang.String str4 = parsePosition3.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor5 = dateTimeFormatter0.parse((java.lang.CharSequence) "             +999999999-12-31", parsePosition3);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '             +999999999-12-31' could not be parsed at index 29");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.ParsePosition[index=29,errorIndex=-1]" + "'", str4, "java.text.ParsePosition[index=29,errorIndex=-1]");
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getHour();
        long long14 = zonedDateTime11.toEpochSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31556889832780799L + "'", long14 == 31556889832780799L);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        java.net.URISyntaxException uRISyntaxException2 = new java.net.URISyntaxException("P-7D", "\ufffd");
        java.lang.String str3 = uRISyntaxException2.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ufffd: P-7D" + "'", str3, "\ufffd: P-7D");
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        java.util.function.LongConsumer longConsumer4 = null;
        optionalLong3.ifPresent(longConsumer4);
        long long7 = optionalLong3.orElse(316000000L);
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 316000000L + "'", long7 == 316000000L);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        java.time.chrono.Chronology chronology14 = zonedDateTime11.getChronology();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        int int28 = zonedDateTime27.getDayOfMonth();
        int int29 = zonedDateTime27.getHour();
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime27.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.ZonedDateTime zonedDateTime43 = offsetDateTime35.atZoneSameInstant((java.time.ZoneId) zoneOffset40);
        java.time.ZonedDateTime zonedDateTime44 = zonedDateTime43.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long46 = zonedDateTime43.getLong((java.time.temporal.TemporalField) chronoField45);
        long long47 = zonedDateTime31.getLong((java.time.temporal.TemporalField) chronoField45);
        java.time.temporal.TemporalUnit temporalUnit48 = chronoField45.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit49 = chronoField45.getBaseUnit();
        boolean boolean50 = temporalUnit49.isDateBased();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime51 = zonedDateTime11.plus((long) 999999999, temporalUnit49);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField45.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 999999999L + "'", long46 == 999999999L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 999999999L + "'", long47 == 999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit48 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit48.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit49 + "' != '" + java.time.temporal.ChronoUnit.NANOS + "'", temporalUnit49.equals(java.time.temporal.ChronoUnit.NANOS));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        java.util.OptionalLong optionalLong1 = java.util.OptionalLong.of((long) 316000000);
        boolean boolean2 = optionalLong1.isPresent();
        long long4 = optionalLong1.orElse(31556889832780740L);
        java.lang.String str5 = optionalLong1.toString();
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 316000000L + "'", long4 == 316000000L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OptionalLong[316000000]" + "'", str5, "OptionalLong[316000000]");
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.LocalDate localDate15 = localDate13.plusYears((long) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate17 = localDate13.withDayOfMonth(469000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 469000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusNanos((long) 10000);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = localDateTime23.minusNanos((long) (short) 100);
        java.time.LocalDateTime localDateTime31 = localDateTime23.minusYears((long) (short) 1);
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime19.with((java.time.temporal.TemporalAdjuster) localDateTime31);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime45 = localDateTime39.withHour(4);
        java.util.stream.DoubleStream doubleStream46 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream47 = doubleStream46.distinct();
        java.util.stream.DoubleStream doubleStream48 = doubleStream47.parallel();
        boolean boolean49 = localDateTime45.equals((java.lang.Object) doubleStream47);
        java.time.chrono.Chronology chronology50 = localDateTime45.getChronology();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime54.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.zone.ZoneRules zoneRules61 = zoneOffset59.getRules();
        java.time.ZonedDateTime zonedDateTime62 = offsetDateTime54.atZoneSameInstant((java.time.ZoneId) zoneOffset59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime62.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.temporal.ValueRange valueRange65 = zonedDateTime62.range((java.time.temporal.TemporalField) chronoField64);
        long long67 = chronoField64.checkValidValue((long) 539000000);
        boolean boolean68 = localDateTime45.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime69 = localDateTime31.with((java.time.temporal.TemporalAdjuster) localDateTime45);
        java.time.Month month70 = java.time.Month.OCTOBER;
        java.time.Month month72 = month70.plus(0L);
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        int int78 = localDateTime73.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime74);
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime82 = localDateTime79.atOffset(zoneOffset81);
        int int83 = localDateTime74.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime79);
        java.time.temporal.Temporal temporal84 = month72.adjustInto((java.time.temporal.Temporal) localDateTime74);
        java.time.LocalDateTime localDateTime85 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate86 = localDateTime85.toLocalDate();
        java.time.LocalDateTime localDateTime88 = localDateTime85.plusWeeks(0L);
        boolean boolean89 = localDateTime74.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime85);
        java.time.LocalDateTime localDateTime91 = localDateTime74.minusHours((long) '\n');
        java.time.format.DateTimeFormatter dateTimeFormatter92 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str93 = localDateTime74.format(dateTimeFormatter92);
        int int94 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(doubleStream46);
        org.junit.Assert.assertNotNull(doubleStream47);
        org.junit.Assert.assertNotNull(doubleStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(zoneRules61);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField64.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(valueRange65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 539000000L + "'", long67 == 539000000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime69);
        org.junit.Assert.assertTrue("'" + month70 + "' != '" + java.time.Month.OCTOBER + "'", month70.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month72 + "' != '" + java.time.Month.OCTOBER + "'", month72.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(temporal84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+999999999-12-31" + "'", str93, "+999999999-12-31");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder8 = charsetEncoder7.reset();
        byte[] byteArray9 = charsetEncoder7.replacement();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        printWriter1.print((float) 'a');
        java.io.File file7 = new java.io.File("GBR");
        boolean boolean9 = file7.setWritable(true);
        boolean boolean11 = file7.setWritable(true);
        java.net.URI uRI12 = file7.toURI();
        java.io.File file14 = new java.io.File("GBR");
        boolean boolean16 = file14.setWritable(true);
        boolean boolean18 = file14.setWritable(true);
        java.net.URI uRI19 = file14.toURI();
        java.net.URI uRI20 = uRI12.relativize(uRI19);
        java.lang.String str21 = uRI12.getRawSchemeSpecificPart();
        java.io.File file23 = new java.io.File("GBR");
        boolean boolean25 = file23.setWritable(true);
        boolean boolean27 = file23.setWritable(true);
        java.net.URI uRI28 = file23.toURI();
        java.io.File file30 = new java.io.File("GBR");
        boolean boolean32 = file30.setWritable(true);
        boolean boolean34 = file30.setWritable(true);
        java.net.URI uRI35 = file30.toURI();
        java.net.URI uRI36 = uRI28.relativize(uRI35);
        java.net.URI uRI37 = uRI12.relativize(uRI36);
        printWriter1.println((java.lang.Object) uRI37);
        java.lang.String str39 = uRI37.getRawAuthority();
        java.lang.String str40 = uRI37.getRawFragment();
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(uRI19);
        org.junit.Assert.assertNotNull(uRI20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/experiment/GBR/" + "'", str21, "/experiment/GBR/");
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(uRI28);
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(uRI35);
        org.junit.Assert.assertNotNull(uRI36);
        org.junit.Assert.assertNotNull(uRI37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.parallel();
        java.util.stream.LongStream longStream4 = longStream3.parallel();
        long long5 = longStream3.sum();
        java.util.function.LongToDoubleFunction longToDoubleFunction6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream7 = longStream3.mapToDouble(longToDoubleFunction6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        boolean boolean10 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDate localDate11 = java.time.LocalDate.now();
        java.time.LocalDate localDate12 = java.time.LocalDate.MIN;
        boolean boolean13 = localDate11.isEqual((java.time.chrono.ChronoLocalDate) localDate12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal14 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDate11);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.LocalTime localTime46 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime48 = localTime46.plusHours((long) 16384);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime49 = zonedDateTime14.with((java.time.temporal.TemporalAdjuster) localTime48);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.OffsetDateTime offsetDateTime55 = offsetDateTime53.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime57 = offsetDateTime55.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap59 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        java.time.zone.ZoneRules zoneRules65 = zoneOffset63.getRules();
        java.time.zone.ZoneRules zoneRules66 = zoneIdMap59.getOrDefault((java.lang.Object) 1.0d, zoneRules65);
        java.lang.String str67 = zoneRules65.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList68 = zoneRules65.getTransitions();
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        int int74 = localDateTime69.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime70);
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime78 = localDateTime75.atOffset(zoneOffset77);
        int int79 = localDateTime70.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime75);
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime84 = localDateTime81.atOffset(zoneOffset83);
        int int85 = localDateTime80.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime81);
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime89 = localDateTime86.atOffset(zoneOffset88);
        int int90 = localDateTime81.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime86);
        boolean boolean91 = localDateTime70.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime86);
        java.time.format.DateTimeFormatter dateTimeFormatter92 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str93 = localDateTime86.format(dateTimeFormatter92);
        java.time.ZoneOffset zoneOffset94 = zoneRules65.getOffset(localDateTime86);
        java.time.OffsetDateTime offsetDateTime95 = offsetDateTime57.withOffsetSameLocal(zoneOffset94);
        java.lang.String str96 = zoneOffset94.getId();
        java.time.ZonedDateTime zonedDateTime97 = zonedDateTime14.withZoneSameInstant((java.time.ZoneId) zoneOffset94);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(zoneRules65);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str67, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertNotNull(offsetDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str93, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset94);
        org.junit.Assert.assertNotNull(offsetDateTime95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Z" + "'", str96, "Z");
        org.junit.Assert.assertNotNull(zonedDateTime97);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        boolean boolean5 = longBuffer2.isDirect();
        java.nio.Buffer buffer6 = longBuffer2.clear();
        java.nio.ByteOrder byteOrder7 = longBuffer2.order();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer10 = byteBuffer9.asLongBuffer();
        java.nio.LongBuffer longBuffer12 = longBuffer10.put(0L);
        java.time.LocalTime localTime13 = java.time.LocalTime.now();
        int int14 = localTime13.getNano();
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long16 = localTime13.getLong((java.time.temporal.TemporalField) chronoField15);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.withSecond((int) (byte) 0);
        boolean boolean23 = chronoField15.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime20);
        boolean boolean24 = longBuffer12.equals((java.lang.Object) chronoField15);
        boolean boolean25 = longBuffer12.hasArray();
        java.nio.LongBuffer longBuffer27 = java.nio.LongBuffer.allocate(0);
        long[] longArray28 = longBuffer27.array();
        java.nio.LongBuffer longBuffer29 = longBuffer12.get(longArray28);
        java.nio.LongBuffer longBuffer30 = java.nio.LongBuffer.wrap(longArray28);
        java.nio.LongBuffer longBuffer31 = longBuffer2.get(longArray28);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(byteOrder7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertNotNull(longBuffer12);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 95000000 + "'", int14 == 95000000);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField15.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 17L + "'", long16 == 17L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longBuffer27);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(longBuffer29);
        org.junit.Assert.assertNotNull(longBuffer30);
        org.junit.Assert.assertNotNull(longBuffer31);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean1 = coderResult0.isError();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt4 = intStream3.min();
        boolean boolean5 = shortBuffer1.equals((java.lang.Object) optionalInt4);
        java.nio.ByteOrder byteOrder6 = shortBuffer1.order();
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(optionalInt4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteOrder6);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        java.util.stream.Collector.Characteristics characteristics0 = java.util.stream.Collector.Characteristics.CONCURRENT;
        org.junit.Assert.assertTrue("'" + characteristics0 + "' != '" + java.util.stream.Collector.Characteristics.CONCURRENT + "'", characteristics0.equals(java.util.stream.Collector.Characteristics.CONCURRENT));
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.security.KeyException keyException11 = new java.security.KeyException("Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        boolean boolean12 = zoneIdMap1.containsValue((java.lang.Object) keyException11);
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet13 = zoneIdMap1.entrySet();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneIdEntrySet13);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper('\uffff');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        java.net.MalformedURLException malformedURLException0 = new java.net.MalformedURLException();
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = doubleStream1.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        java.time.Instant instant1 = java.time.Instant.ofEpochMilli(100L);
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withDecimalSeparator('\000');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle2.withPositiveSign('+');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle2.withPositiveSign('#');
        java.security.Permission permission10 = null;
        java.security.AccessControlException accessControlException11 = new java.security.AccessControlException("1 Jan 1970 00:00:00 GMT", permission10);
        boolean boolean12 = decimalStyle8.equals((java.lang.Object) "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        java.util.Date date1 = new java.util.Date((long) 234000000);
        int int2 = date1.getTimezoneOffset();
        int int3 = date1.getYear();
        org.junit.Assert.assertEquals(date1.toString(), "Sat Jan 03 17:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant4 = instant2.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        java.time.zone.ZoneRules zoneRules9 = zoneOffset7.getRules();
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.ofInstant(instant2, (java.time.ZoneId) zoneOffset7);
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap22 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap26 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap26.getOrDefault((java.lang.Object) 1.0d, zoneRules32);
        java.time.zone.ZoneRules zoneRules34 = zoneIdMap22.put((java.time.ZoneId) zoneOffset24, zoneRules32);
        java.time.ZonedDateTime zonedDateTime35 = zonedDateTime20.withZoneSameLocal((java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime36 = isoChronology0.zonedDateTime(instant2, (java.time.ZoneId) zoneOffset24);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate40 = isoChronology0.date(794000000, 234000000, (-3));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 234000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertNull(zoneRules34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        java.time.temporal.ValueRange valueRange2 = java.time.temporal.ValueRange.of(1L, (long) (byte) 1);
        java.time.temporal.TemporalField temporalField4 = null;
        long long5 = valueRange2.checkValidValue(1L, temporalField4);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate9 = localDateTime8.toLocalDate();
        java.time.LocalDateTime localDateTime11 = localDateTime8.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange12 = chronoField7.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime8);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = valueRange2.checkValidValue((long) 31, (java.time.temporal.TemporalField) chronoField7);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfAmPm (valid values 1 - 1): 31");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(valueRange2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField7.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(valueRange12);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getISO3Language();
        java.time.format.DecimalStyle decimalStyle3 = java.time.format.DecimalStyle.of(locale1);
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now();
        boolean boolean5 = decimalStyle3.equals((java.lang.Object) offsetDateTime4);
        java.time.format.DecimalStyle decimalStyle7 = decimalStyle3.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle9 = decimalStyle7.withPositiveSign('\uffff');
        java.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withDecimalStyle(decimalStyle9);
        java.text.Format format11 = dateTimeFormatter10.toFormat();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) '0');
        java.lang.Object obj15 = format11.parseObject("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", parsePosition14);
        java.text.ParsePosition parsePosition17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = format11.parseObject("java.nio.ByteBufferAsLongBufferRB[pos=1 lim=4 cap=4]", parsePosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: position");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertNotNull(decimalStyle9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(format11);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.net.NetworkInterface networkInterface77 = networkInterface76.getParent();
        boolean boolean78 = networkInterface76.supportsMulticast();
        java.util.List<java.net.InterfaceAddress> interfaceAddressList79 = networkInterface76.getInterfaceAddresses();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertNull(networkInterface77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(interfaceAddressList79);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusHours((long) '\n');
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime11.minusDays(52177497285L);
        java.time.Instant instant19 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant21 = instant19.minusNanos((long) 'a');
        long long22 = instant19.getEpochSecond();
        java.time.Instant instant24 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.Clock clock29 = java.time.Clock.fixed(instant24, (java.time.ZoneId) zoneOffset27);
        java.time.OffsetDateTime offsetDateTime30 = instant19.atOffset(zoneOffset27);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime30.plusSeconds((long) 371000000);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime30.plusYears((long) 284000000);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime38.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime38.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset48);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit53 = chronoField52.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime54 = localDateTime50.minus((long) (-999999999), temporalUnit53);
        java.lang.String str55 = temporalUnit53.toString();
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime42.plus((long) (byte) 100, temporalUnit53);
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime56.plusDays((long) 31);
        java.time.Instant instant60 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        java.time.Clock clock65 = java.time.Clock.fixed(instant60, (java.time.ZoneId) zoneOffset63);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset70);
        java.time.Clock clock73 = clock65.withZone((java.time.ZoneId) zoneOffset70);
        java.time.OffsetDateTime offsetDateTime74 = offsetDateTime56.withOffsetSameInstant(zoneOffset70);
        java.time.Instant instant76 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset79 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime80 = localDateTime77.atOffset(zoneOffset79);
        java.time.Clock clock81 = java.time.Clock.fixed(instant76, (java.time.ZoneId) zoneOffset79);
        java.time.LocalTime localTime82 = java.time.LocalTime.now(clock81);
        java.time.OffsetDateTime offsetDateTime83 = java.time.OffsetDateTime.now(clock81);
        int int84 = offsetDateTime83.getSecond();
        int int85 = offsetDateTime74.compareTo(offsetDateTime83);
        boolean boolean86 = offsetDateTime30.isBefore(offsetDateTime74);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime87 = zonedDateTime17.with((java.time.temporal.TemporalAdjuster) offsetDateTime74);
        java.time.ZonedDateTime zonedDateTime89 = zonedDateTime17.minusWeeks((long) 16384);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField52.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit53 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit53.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Weeks" + "'", str55, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(clock73);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zoneOffset79);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(clock81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 32 + "'", int84 == 32);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 277998031 + "'", int85 == 277998031);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime87);
        org.junit.Assert.assertNotNull(zonedDateTime89);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        int int1 = localTime0.getNano();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long3 = localTime0.getLong((java.time.temporal.TemporalField) chronoField2);
        boolean boolean4 = chronoField2.isDateBased();
        java.time.temporal.ValueRange valueRange5 = chronoField2.range();
        long long6 = valueRange5.getMinimum();
        org.junit.Assert.assertNotNull(localTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 190000000 + "'", int1 == 190000000);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField2.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 17L + "'", long3 == 17L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("MicroOfSecond", (int) (byte) -1, (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.now(clock6);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap10 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.zone.ZoneRules zoneRules17 = zoneIdMap10.getOrDefault((java.lang.Object) 1.0d, zoneRules16);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration18 = zoneIdMap10.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration19 = zoneIdMap10.keys();
        java.time.Instant instant21 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant23 = instant21.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.ofInstant(instant21, (java.time.ZoneId) zoneOffset26);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.OffsetDateTime offsetDateTime35 = offsetDateTime33.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.zone.ZoneRules zoneRules40 = zoneOffset38.getRules();
        java.time.ZonedDateTime zonedDateTime41 = offsetDateTime33.atZoneSameInstant((java.time.ZoneId) zoneOffset38);
        java.time.ZoneId zoneId42 = zonedDateTime41.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap44 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap48 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.zone.ZoneRules zoneRules54 = zoneOffset52.getRules();
        java.time.zone.ZoneRules zoneRules55 = zoneIdMap48.getOrDefault((java.lang.Object) 1.0d, zoneRules54);
        java.time.zone.ZoneRules zoneRules56 = zoneIdMap44.put((java.time.ZoneId) zoneOffset46, zoneRules54);
        java.time.ZoneId[] zoneIdArray57 = new java.time.ZoneId[] { zoneOffset26, zoneId42, zoneOffset46 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet58 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet58, zoneIdArray57);
        java.lang.String[] strArray63 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray65 = org.apache.commons.lang3.StringUtils.stripAll(strArray63, "GBR");
        java.lang.String str66 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray65);
        boolean boolean67 = zoneIdSet58.remove((java.lang.Object) strArray65);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        strList74.add((int) (short) 0, "eng");
        boolean boolean79 = zoneIdSet58.removeAll((java.util.Collection<java.lang.String>) strList74);
        boolean boolean80 = strList74.isEmpty();
        java.net.InetAddress inetAddress81 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean82 = inetAddress81.isMCLinkLocal();
        byte[] byteArray83 = inetAddress81.getAddress();
        boolean boolean84 = zoneIdMap10.remove((java.lang.Object) boolean80, (java.lang.Object) inetAddress81);
        boolean boolean85 = offsetDateTime8.equals((java.lang.Object) zoneIdMap10);
        java.lang.String str86 = zoneIdMap10.toString();
        java.io.File file88 = new java.io.File("GBR");
        java.io.File file90 = new java.io.File(file88, "5");
        boolean boolean91 = zoneIdMap10.containsKey((java.lang.Object) file88);
        java.util.Enumeration<java.time.zone.ZoneRules> zoneRulesEnumeration92 = zoneIdMap10.elements();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneIdEnumeration18);
        org.junit.Assert.assertNotNull(zoneIdEnumeration19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(zoneRules40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertNotNull(zoneId42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertNotNull(zoneRules55);
        org.junit.Assert.assertNull(zoneRules56);
        org.junit.Assert.assertNotNull(zoneIdArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Minute(null <no signer certificates>)" + "'", str66, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(inetAddress81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "{}" + "'", str86, "{}");
        org.junit.Assert.assertNull("file88.getParent() == null", file88.getParent());
        org.junit.Assert.assertEquals(file88.toString(), "GBR");
        org.junit.Assert.assertEquals(file90.getParent(), "GBR");
        org.junit.Assert.assertEquals(file90.toString(), "GBR/5");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(zoneRulesEnumeration92);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = fileChannel11.lock((long) 533000000, 0L, true);
        fileLock19.release();
        java.nio.channels.FileChannel fileChannel21 = fileLock19.channel();
        long long22 = fileLock19.position();
        long long23 = fileLock19.size();
        long long24 = fileLock19.size();
        long long25 = fileLock19.size();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertNotNull(fileChannel21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 533000000L + "'", long22 == 533000000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.range(10000, (int) (short) 10);
        java.lang.Runnable runnable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = intStream2.onClose(runnable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 1, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray3, 59, (int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 1, 0]");
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        java.nio.channels.ClosedChannelException closedChannelException0 = new java.nio.channels.ClosedChannelException();
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        boolean boolean14 = localDate13.isLeapYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.LocalDate localDate4 = java.time.LocalDate.now();
        java.time.LocalDate localDate5 = java.time.LocalDate.MIN;
        boolean boolean6 = localDate4.isEqual((java.time.chrono.ChronoLocalDate) localDate5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.withSecond((int) (byte) 0);
        java.time.LocalDate localDate13 = offsetDateTime10.toLocalDate();
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean15 = offsetDateTime10.isSupported((java.time.temporal.TemporalField) chronoField14);
        boolean boolean16 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField14);
        java.lang.String str17 = chronoField14.toString();
        boolean boolean18 = period1.equals((java.lang.Object) str17);
        java.time.Period period20 = period1.minusMonths((long) 4);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField14.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MicroOfSecond" + "'", str17, "MicroOfSecond");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) 13);
        java.time.Duration duration3 = duration1.plusMinutes((long) 17);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("DecimalStyle[G+-.]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=decimalstyle[g+-.]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology6 = dateTimeFormatter5.getChronology();
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer9 = charBuffer8.flip();
        int int10 = charBuffer8.capacity();
        boolean boolean11 = charBuffer8.hasArray();
        boolean boolean12 = chronology6.equals((java.lang.Object) charBuffer8);
        char[] charArray16 = new char[] { '#', 'M', '\r' };
        int int17 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) charBuffer8, charArray16);
        java.nio.CharBuffer charBuffer18 = charBuffer1.put(charBuffer8);
        boolean boolean20 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) charBuffer8, (java.lang.CharSequence) "\u4e0a\u5348\u65f6\u5206\u79d2");
        char[] charArray21 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer24 = charBuffer8.get(charArray21, 26, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(buffer9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#M\r");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#M\r");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, M, \r]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        java.time.Period period1 = java.time.Period.ofMonths(722000000);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.time.LocalTime localTime5 = java.time.LocalTime.now();
        int int6 = localTime5.getNano();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long8 = localTime5.getLong((java.time.temporal.TemporalField) chronoField7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.withSecond((int) (byte) 0);
        boolean boolean15 = chronoField7.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime12);
        boolean boolean16 = longBuffer4.equals((java.lang.Object) chronoField7);
        boolean boolean17 = longBuffer4.hasArray();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer20 = byteBuffer19.asLongBuffer();
        java.nio.LongBuffer longBuffer22 = longBuffer20.put(0L);
        boolean boolean23 = longBuffer20.isDirect();
        long long24 = longBuffer20.get();
        boolean boolean25 = longBuffer20.isDirect();
        java.nio.LongBuffer longBuffer26 = longBuffer4.put(longBuffer20);
        boolean boolean27 = longBuffer26.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40000000 + "'", int6 == 40000000);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField7.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 17L + "'", long8 == 17L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(longBuffer20);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        boolean boolean43 = localDate35.isLeapYear();
        java.time.LocalDate localDate44 = java.time.LocalDate.now();
        java.time.LocalDate localDate45 = java.time.LocalDate.MIN;
        boolean boolean46 = localDate44.isEqual((java.time.chrono.ChronoLocalDate) localDate45);
        int int47 = localDate45.getYear();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.temporal.Temporal temporal52 = localDate45.adjustInto((java.time.temporal.Temporal) localDateTime48);
        java.time.Period period54 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period55 = period54.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod56 = period54.negated();
        java.time.LocalDate localDate57 = localDate45.plus((java.time.temporal.TemporalAmount) chronoPeriod56);
        java.time.temporal.TemporalUnit temporalUnit58 = null;
        boolean boolean59 = localDate57.isSupported(temporalUnit58);
        int int60 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate57);
        java.time.OffsetTime offsetTime61 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime63 = offsetTime61.withSecond(16);
        java.time.Instant instant65 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant67 = instant65.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime68 = java.nio.file.attribute.FileTime.from(instant65);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery69 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period70 = instant65.query(periodTemporalQuery69);
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit72 = chronoField71.getBaseUnit();
        boolean boolean73 = instant65.isSupported(temporalUnit72);
        boolean boolean74 = offsetTime61.isSupported(temporalUnit72);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate75 = localDate57.with((java.time.temporal.TemporalAdjuster) offsetTime61);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-999999999) + "'", int47 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(temporal52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1999999998 + "'", int60 == 1999999998);
        org.junit.Assert.assertNotNull(offsetTime61);
        org.junit.Assert.assertNotNull(offsetTime63);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(fileTime68);
        org.junit.Assert.assertNotNull(periodTemporalQuery69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField71.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit72 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit72.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.normalizeSpace("java.nio.HeapShortBuffer[pos=64lim=64cap=64]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.nio.HeapShortBuffer[pos=64lim=64cap=64]" + "'", str1, "java.nio.HeapShortBuffer[pos=64lim=64cap=64]");
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.net.Proxy proxy10 = java.net.Proxy.NO_PROXY;
        java.lang.String str11 = proxy10.toString();
        java.net.Proxy.Type type12 = proxy10.type();
        java.net.URLConnection uRLConnection13 = uRL7.openConnection(proxy10);
        java.io.InputStream inputStream14 = uRLConnection13.getInputStream();
        long long15 = uRLConnection13.getIfModifiedSince();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom8822317890258829584aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom8822317890258829584aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom2369537635867266531aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom2369537635867266531aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(proxy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DIRECT" + "'", str11, "DIRECT");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type12.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(uRLConnection13);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime7.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset17);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime23 = localDateTime19.minus((long) (-999999999), temporalUnit22);
        java.lang.String str24 = temporalUnit22.toString();
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime11.plus((long) (byte) 100, temporalUnit22);
        java.time.LocalDate localDate26 = localDate0.minus((long) (-1), temporalUnit22);
        int int27 = localDate0.getMonthValue();
        java.time.chrono.Chronology chronology28 = localDate0.getChronology();
        java.util.Map<java.time.temporal.TemporalField, java.lang.Long> temporalFieldMap29 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter30 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology31 = dateTimeFormatter30.getChronology();
        java.time.chrono.Chronology chronology32 = dateTimeFormatter30.getChronology();
        java.time.format.ResolverStyle resolverStyle33 = dateTimeFormatter30.getResolverStyle();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate34 = chronology28.resolveDate(temporalFieldMap29, resolverStyle33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Weeks" + "'", str24, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + resolverStyle33 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle33.equals(java.time.format.ResolverStyle.STRICT));
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.LocalDate localDate44 = localDate35.minusYears(32000L);
        java.time.LocalDate localDate46 = localDate35.minusWeeks((long) 186000000);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int3 = byteBuffer1.getInt((int) 'G');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        double double1 = doubleSummaryStatistics0.getAverage();
        doubleSummaryStatistics0.accept((double) 43200000000000L);
        double double4 = doubleSummaryStatistics0.getAverage();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=1, sum=43200000000000.000000, min=43200000000000.000000, average=43200000000000.000000, max=43200000000000.000000}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4.32E13d + "'", double4 == 4.32E13d);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.YEAR;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField0.equals(java.time.temporal.ChronoField.YEAR));
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalTime localTime36 = localDateTime17.toLocalTime();
        java.time.LocalTime localTime37 = localDateTime17.toLocalTime();
        java.time.LocalDateTime localDateTime39 = localDateTime17.minusMonths((long) '-');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.withSecond((int) (byte) 0);
        java.time.LocalDate localDate46 = offsetDateTime43.toLocalDate();
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean48 = offsetDateTime43.isSupported((java.time.temporal.TemporalField) chronoField47);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap50 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset54.getRules();
        java.time.zone.ZoneRules zoneRules57 = zoneIdMap50.getOrDefault((java.lang.Object) 1.0d, zoneRules56);
        java.lang.String str58 = zoneRules56.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList59 = zoneRules56.getTransitions();
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        int int65 = localDateTime60.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        int int70 = localDateTime61.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime66);
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime75 = localDateTime72.atOffset(zoneOffset74);
        int int76 = localDateTime71.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime72);
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset79 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime80 = localDateTime77.atOffset(zoneOffset79);
        int int81 = localDateTime72.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime77);
        boolean boolean82 = localDateTime61.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime77);
        java.time.format.DateTimeFormatter dateTimeFormatter83 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str84 = localDateTime77.format(dateTimeFormatter83);
        java.time.ZoneOffset zoneOffset85 = zoneRules56.getOffset(localDateTime77);
        java.time.LocalDateTime localDateTime87 = localDateTime77.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField89 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit90 = chronoField89.getBaseUnit();
        boolean boolean91 = temporalUnit90.isTimeBased();
        java.time.LocalDateTime localDateTime92 = localDateTime77.minus((long) 829000000, temporalUnit90);
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime43.with((java.time.temporal.TemporalAdjuster) localDateTime92);
        boolean boolean94 = localDateTime39.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime92);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField47.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str58, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zoneOffset79);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str84, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + chronoField89 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField89.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit90 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit90.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        int int3 = org.apache.commons.lang3.StringUtils.indexOf("BIG_ENDIAN", 4, (int) '-');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        java.nio.IntBuffer intBuffer14 = intBuffer11.put(3, 41);
        java.nio.ByteOrder byteOrder15 = intBuffer11.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertNotNull(byteOrder15);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.LocalDate localDate32 = zonedDateTime31.toLocalDate();
        java.time.DayOfWeek dayOfWeek33 = localDate32.getDayOfWeek();
        java.time.Month month34 = java.time.Month.MARCH;
        java.time.format.DateTimeFormatter dateTimeFormatter35 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology36 = dateTimeFormatter35.getChronology();
        java.time.format.TextStyle textStyle37 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale38 = java.util.Locale.UK;
        java.lang.String str39 = locale38.getISO3Language();
        java.time.format.DecimalStyle decimalStyle40 = java.time.format.DecimalStyle.of(locale38);
        java.lang.String str41 = chronology36.getDisplayName(textStyle37, locale38);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale locale43 = java.util.Locale.US;
        java.util.Locale.Builder builder44 = builder42.setLocale(locale43);
        java.util.Locale.Builder builder46 = builder42.addUnicodeLocaleAttribute("Eng");
        java.util.Locale locale47 = java.util.Locale.UK;
        java.lang.String str48 = locale47.getISO3Country();
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.lang.String str50 = locale47.getDisplayScript(locale49);
        java.time.temporal.ChronoField chronoField51 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = chronoField51.getDisplayName(locale52);
        java.lang.String str55 = locale47.getDisplayCountry(locale52);
        java.util.Locale.Builder builder56 = builder42.setLocale(locale47);
        java.util.Locale locale57 = builder56.build();
        java.lang.String str58 = month34.getDisplayName(textStyle37, locale57);
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Locale locale60 = locale59.stripExtensions();
        java.lang.String str61 = locale60.toLanguageTag();
        java.util.Locale locale62 = locale60.stripExtensions();
        java.lang.String str63 = locale60.getDisplayScript();
        java.lang.String str65 = locale60.getExtension('u');
        java.lang.String str66 = dayOfWeek33.getDisplayName(textStyle37, locale60);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + dayOfWeek33 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek33.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.MARCH + "'", month34.equals(java.time.Month.MARCH));
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + textStyle37 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle37.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertNotNull(decimalStyle40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISO" + "'", str41, "ISO");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GBR" + "'", str48, "GBR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + chronoField51 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField51.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GBR" + "'", str53, "GBR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute" + "'", str54, "Minute");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "United Kingdom" + "'", str55, "United Kingdom");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "3" + "'", str58, "3");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh-CN" + "'", str61, "zh-CN");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u4e8c" + "'", str66, "\u4e8c");
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        boolean boolean56 = clock6.equals((java.lang.Object) zoneIdSet46);
        long long57 = clock6.millis();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32000L + "'", long57 == 32000L);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        boolean boolean10 = charBuffer9.hasArray();
        boolean boolean11 = charBuffer9.isDirect();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strList11.removeAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList11.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList32 = strList11.subList(16, 395000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 395000000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSpliterator29);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.NANO_OF_DAY;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime2 = localTime0.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.LocalDateTime localDateTime8 = localDateTime3.plusYears((long) (short) -1);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime9.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        boolean boolean31 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        boolean boolean42 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime26.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDate localDate44 = localDateTime26.toLocalDate();
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.MIN;
        boolean boolean47 = localDate45.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean49 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField48);
        int int50 = localDate46.getDayOfYear();
        int int51 = localDate44.compareTo((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.Instant instant53 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime57 = localDateTime54.atOffset(zoneOffset56);
        java.time.Clock clock58 = java.time.Clock.fixed(instant53, (java.time.ZoneId) zoneOffset56);
        java.time.LocalTime localTime59 = java.time.LocalTime.now(clock58);
        java.time.LocalTime localTime61 = localTime59.plusHours((long) 16384);
        java.time.LocalTime localTime63 = localTime59.minusNanos(0L);
        java.time.LocalDate localDate64 = java.time.LocalDate.now();
        java.time.LocalDate localDate65 = java.time.LocalDate.MIN;
        boolean boolean66 = localDate64.isEqual((java.time.chrono.ChronoLocalDate) localDate65);
        int int67 = localDate65.getYear();
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        java.time.temporal.Temporal temporal72 = localDate65.adjustInto((java.time.temporal.Temporal) localDateTime68);
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime76 = localDateTime73.atOffset(zoneOffset75);
        java.time.Clock clock77 = java.time.Clock.systemUTC();
        java.time.Instant instant78 = clock77.instant();
        java.time.ZoneId zoneId79 = clock77.getZone();
        java.time.ZonedDateTime zonedDateTime80 = java.time.ZonedDateTime.ofInstant(localDateTime68, zoneOffset75, zoneId79);
        java.time.OffsetDateTime offsetDateTime81 = java.time.OffsetDateTime.of(localDate46, localTime63, zoneOffset75);
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime84 = java.time.ZonedDateTime.ofLocal(localDateTime3, (java.time.ZoneId) zoneOffset75, zoneOffset83);
        java.time.OffsetTime offsetTime85 = java.time.OffsetTime.of(localTime2, zoneOffset75);
        java.time.format.DateTimeFormatter dateTimeFormatter86 = java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;
        java.lang.String str87 = localTime2.format(dateTimeFormatter86);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime89 = localTime2.withHour(16384);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 16384");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1999999998 + "'", int51 == 1999999998);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(clock58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-999999999) + "'", int67 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(temporal72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertNotNull(clock77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(zoneId79);
        org.junit.Assert.assertNotNull(zonedDateTime80);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(zonedDateTime84);
        org.junit.Assert.assertNotNull(offsetTime85);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "16:00:00" + "'", str87, "16:00:00");
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.OffsetDateTime offsetDateTime3 = java.time.OffsetDateTime.now();
        boolean boolean4 = decimalStyle2.equals((java.lang.Object) offsetDateTime3);
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle2.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withZeroDigit('G');
        char char9 = decimalStyle8.getDecimalSeparator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + '.' + "'", char9 == '.');
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        java.lang.String str5 = file1.getCanonicalPath();
        boolean boolean8 = file1.setReadable(true, true);
        java.lang.String str9 = file1.getAbsolutePath();
        boolean boolean12 = file1.setReadable(true, true);
        java.io.File file14 = new java.io.File(file1, "ParseCaseSensitive(false)Value(Year,4,10,EXCEEDS_PAD)'-'Value(DayOfYear,3)[Offset(+HH:MM:ss,'Z')]");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter16 = new java.io.PrintWriter(file14, "\u4e0b\u5348\u65f6\u5206\u79d2");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??11?59?59?");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/GBR" + "'", str5, "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/GBR" + "'", str9, "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(file14.getParent(), "GBR");
        org.junit.Assert.assertEquals(file14.toString(), "GBR/ParseCaseSensitive(false)Value(Year,4,10,EXCEEDS_PAD)'-'Value(DayOfYear,3)[Offset(+HH:MM:ss,'Z')]");
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of(636000010, 70, 277998031, 234000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 636000010");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional4 = java.util.Optional.of((java.lang.RuntimeException) accessControlException2);
        boolean boolean5 = runtimeExceptionOptional4.isPresent();
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        boolean boolean8 = charsetDecoder7.isAutoDetecting();
        float float9 = charsetDecoder7.maxCharsPerByte();
        java.nio.charset.Charset charset10 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset11 = java.nio.charset.Charset.defaultCharset();
        boolean boolean12 = charset10.contains(charset11);
        java.nio.charset.CharsetEncoder charsetEncoder13 = charset10.newEncoder();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.wrap(byteArray15);
        java.nio.charset.CharsetEncoder charsetEncoder17 = charsetEncoder13.replaceWith(byteArray15);
        java.nio.charset.CodingErrorAction codingErrorAction18 = charsetEncoder17.unmappableCharacterAction();
        java.nio.charset.CharsetDecoder charsetDecoder19 = charsetDecoder7.onUnmappableCharacter(codingErrorAction18);
        java.nio.charset.Charset charset20 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder21 = charset20.newDecoder();
        boolean boolean22 = charsetDecoder21.isAutoDetecting();
        java.nio.charset.CodingErrorAction codingErrorAction23 = charsetDecoder21.malformedInputAction();
        java.nio.charset.CharsetDecoder charsetDecoder24 = charsetDecoder7.onMalformedInput(codingErrorAction23);
        boolean boolean25 = runtimeExceptionOptional4.equals((java.lang.Object) charsetDecoder24);
        org.junit.Assert.assertNotNull(runtimeExceptionOptional4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(charsetEncoder13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(codingErrorAction18);
        org.junit.Assert.assertNotNull(charsetDecoder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetDecoder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(codingErrorAction23);
        org.junit.Assert.assertNotNull(charsetDecoder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset27.getRules();
        java.time.ZonedDateTime zonedDateTime30 = offsetDateTime22.atZoneSameInstant((java.time.ZoneId) zoneOffset27);
        int int31 = zonedDateTime30.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime30.withDayOfYear(10);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset38);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField42.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime44 = localDateTime40.minus((long) (-999999999), temporalUnit43);
        boolean boolean45 = zonedDateTime30.isSupported(temporalUnit43);
        java.time.Instant instant47 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant49 = instant47.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime50 = java.nio.file.attribute.FileTime.from(instant47);
        java.time.Instant instant52 = instant47.plusMillis((long) 10);
        boolean boolean53 = temporalUnit43.isSupportedBy((java.time.temporal.Temporal) instant47);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime54 = localDateTime0.truncatedTo(temporalUnit43);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(fileTime50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getISO3Language();
        java.time.format.DecimalStyle decimalStyle3 = java.time.format.DecimalStyle.of(locale1);
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now();
        boolean boolean5 = decimalStyle3.equals((java.lang.Object) offsetDateTime4);
        java.time.format.DecimalStyle decimalStyle7 = decimalStyle3.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle9 = decimalStyle7.withPositiveSign('\uffff');
        java.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withDecimalStyle(decimalStyle9);
        java.text.Format format11 = dateTimeFormatter10.toFormat();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) '0');
        java.lang.Object obj15 = format11.parseObject("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", parsePosition14);
        java.time.Instant instant16 = java.time.Instant.EPOCH;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = format11.format((java.lang.Object) instant16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unsupported field: Year");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertNotNull(decimalStyle9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(format11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = java.time.Period.from((java.time.temporal.TemporalAmount) period1);
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str4 = dateTimeFormatter3.toString();
        boolean boolean5 = period2.equals((java.lang.Object) dateTimeFormatter3);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.plusNanos((long) (-7));
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime18 = java.nio.file.attribute.FileTime.from(instant15);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery19 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period20 = instant15.query(periodTemporalQuery19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        boolean boolean23 = instant15.isSupported(temporalUnit22);
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant27 = instant25.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.ofInstant(instant25, (java.time.ZoneId) zoneOffset30);
        java.time.ZoneId zoneId34 = zonedDateTime33.getZone();
        java.time.Clock clock35 = java.time.Clock.fixed(instant15, zoneId34);
        java.time.ZonedDateTime zonedDateTime36 = offsetDateTime11.atZoneSimilarLocal(zoneId34);
        java.time.temporal.Temporal temporal37 = period2.addTo((java.time.temporal.Temporal) zonedDateTime36);
        java.time.chrono.IsoChronology isoChronology38 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.zone.ZoneRules zoneRules49 = zoneOffset47.getRules();
        java.time.ZonedDateTime zonedDateTime50 = offsetDateTime42.atZoneSameInstant((java.time.ZoneId) zoneOffset47);
        int int51 = zonedDateTime50.getDayOfMonth();
        int int52 = zonedDateTime50.getMinute();
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime50.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime55 = isoChronology38.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime50);
        java.lang.String str56 = isoChronology38.toString();
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.OffsetDateTime offsetDateTime62 = offsetDateTime60.withSecond((int) (byte) 0);
        java.time.LocalDate localDate63 = offsetDateTime60.toLocalDate();
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        boolean boolean66 = offsetDateTime60.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.OffsetDateTime offsetDateTime68 = offsetDateTime60.minusMinutes((long) 100);
        java.time.Instant instant70 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime74 = localDateTime71.atOffset(zoneOffset73);
        java.time.Clock clock75 = java.time.Clock.fixed(instant70, (java.time.ZoneId) zoneOffset73);
        java.time.ZonedDateTime zonedDateTime76 = offsetDateTime68.atZoneSameInstant((java.time.ZoneId) zoneOffset73);
        java.time.LocalDate localDate77 = isoChronology38.dateNow((java.time.ZoneId) zoneOffset73);
        java.time.ZonedDateTime zonedDateTime78 = java.time.ZonedDateTime.now((java.time.ZoneId) zoneOffset73);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime79 = zonedDateTime36.withZoneSameLocal((java.time.ZoneId) zoneOffset73);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str4, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(fileTime18);
        org.junit.Assert.assertNotNull(periodTemporalQuery19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(clock35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(isoChronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISO" + "'", str56, "ISO");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField64.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(clock75);
        org.junit.Assert.assertNotNull(zonedDateTime76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(zonedDateTime78);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime79);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 495000000, (long) 277998031);
        long[] longArray3 = longStream2.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream4 = longStream2.asDoubleStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        java.nio.LongBuffer longBuffer10 = longBuffer7.put((int) (byte) 0, 0L);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer13 = byteBuffer12.asLongBuffer();
        java.nio.LongBuffer longBuffer15 = longBuffer13.put(0L);
        java.time.LocalTime localTime16 = java.time.LocalTime.now();
        int int17 = localTime16.getNano();
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long19 = localTime16.getLong((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.withSecond((int) (byte) 0);
        boolean boolean26 = chronoField18.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime23);
        boolean boolean27 = longBuffer15.equals((java.lang.Object) chronoField18);
        boolean boolean28 = longBuffer15.isReadOnly();
        java.nio.LongBuffer longBuffer29 = longBuffer10.put(longBuffer15);
        java.lang.String str30 = longBuffer15.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertNotNull(localTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8000000 + "'", int17 == 8000000);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField18.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 17L + "'", long19 == 17L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longBuffer29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]" + "'", str30, "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.ZoneId zoneId22 = zonedDateTime21.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap24 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap24.put((java.time.ZoneId) zoneOffset26, zoneRules34);
        java.time.ZoneId[] zoneIdArray37 = new java.time.ZoneId[] { zoneOffset6, zoneId22, zoneOffset26 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet38 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet38, zoneIdArray37);
        java.lang.String[] strArray43 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray45 = org.apache.commons.lang3.StringUtils.stripAll(strArray43, "GBR");
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray45);
        boolean boolean47 = zoneIdSet38.remove((java.lang.Object) strArray45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList59);
        boolean boolean62 = zoneIdSet38.removeAll((java.util.Collection<java.lang.String>) strList61);
        strList61.clear();
        java.io.File file65 = new java.io.File("GBR");
        boolean boolean66 = file65.mkdirs();
        java.nio.file.Path path67 = file65.toPath();
        boolean boolean68 = strList61.contains((java.lang.Object) path67);
        boolean boolean69 = strList61.isEmpty();
        java.util.Iterator<java.lang.String> strItor70 = strList61.iterator();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneIdArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Minute(null <no signer certificates>)" + "'", str46, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull("file65.getParent() == null", file65.getParent());
        org.junit.Assert.assertEquals(file65.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(path67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strItor70);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.LocalDate localDate44 = localDate35.minusYears(32000L);
        java.time.LocalDate localDate46 = localDate35.minusWeeks((long) (short) 1);
        java.time.LocalDate localDate47 = java.time.LocalDate.now();
        java.time.LocalDate localDate48 = java.time.LocalDate.MIN;
        boolean boolean49 = localDate47.isEqual((java.time.chrono.ChronoLocalDate) localDate48);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean51 = localDate48.isSupported((java.time.temporal.TemporalField) chronoField50);
        int int52 = localDate48.getDayOfYear();
        java.time.LocalDate localDate54 = localDate48.withYear((int) '4');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset60);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime66 = localDateTime62.minus((long) (-999999999), temporalUnit65);
        java.lang.String str67 = temporalUnit65.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate68 = localDate54.plus((long) 125000000, temporalUnit65);
        boolean boolean69 = localDate46.isSupported(temporalUnit65);
        java.lang.String str70 = temporalUnit65.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField50.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField64.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Weeks" + "'", str67, "Weeks");
        org.junit.Assert.assertNotNull(chronoLocalDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Weeks" + "'", str70, "Weeks");
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        long long7 = file1.length();
        java.io.File file8 = file1.getAbsoluteFile();
        java.io.File file9 = file1.getCanonicalFile();
        java.io.File file11 = new java.io.File(file1, "java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4096L + "'", long7 == 4096L);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/GBR");
        org.junit.Assert.assertNotNull(file9);
// flaky:         org.junit.Assert.assertEquals(file9.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/experiment/GBR");
        org.junit.Assert.assertEquals(file11.getParent(), "GBR");
        org.junit.Assert.assertEquals(file11.toString(), "GBR/java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]");
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) (-4656358258698319616L));
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        java.nio.Buffer buffer16 = charBuffer3.clear();
        java.lang.String str17 = charBuffer3.toString();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        boolean boolean43 = localDate35.isLeapYear();
        java.time.LocalDate localDate44 = java.time.LocalDate.now();
        java.time.LocalDate localDate45 = java.time.LocalDate.MIN;
        boolean boolean46 = localDate44.isEqual((java.time.chrono.ChronoLocalDate) localDate45);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean48 = localDate45.isSupported((java.time.temporal.TemporalField) chronoField47);
        int int49 = localDate45.getDayOfYear();
        java.time.LocalDate localDate51 = localDate45.withYear((int) '4');
        java.time.LocalTime localTime52 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime54 = localTime52.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime55 = localDate45.atTime(localTime52);
        java.time.LocalTime localTime57 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int58 = localTime52.compareTo(localTime57);
        java.time.Duration duration59 = java.time.Duration.ZERO;
        java.time.Duration duration61 = duration59.minusDays((long) (-1));
        java.time.LocalTime localTime62 = localTime57.minus((java.time.temporal.TemporalAmount) duration61);
        java.time.LocalTime localTime64 = localTime62.plusMinutes(100L);
        java.time.Instant instant66 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant68 = instant66.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime69 = java.nio.file.attribute.FileTime.from(instant66);
        java.time.Instant instant71 = instant66.plusMillis((long) 10);
        java.time.Instant instant73 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant75 = instant73.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime76 = java.nio.file.attribute.FileTime.from(instant73);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery77 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period78 = instant73.query(periodTemporalQuery77);
        java.time.Period period79 = instant71.query(periodTemporalQuery77);
        java.time.Period period80 = localTime64.query(periodTemporalQuery77);
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.of(localDate35, localTime64);
        java.time.LocalDate localDate83 = localDate35.minusMonths(0L);
        int int84 = localDate35.getMonthValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField47.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(fileTime69);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(fileTime76);
        org.junit.Assert.assertNotNull(periodTemporalQuery77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        java.lang.String str3 = charsetDecoder1.replacement();
        boolean boolean4 = charsetDecoder1.isAutoDetecting();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ufffd" + "'", str3, "\ufffd");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        java.net.SocketException socketException1 = new java.net.SocketException("f");
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate3 = localDateTime2.toLocalDate();
        java.time.LocalDateTime localDateTime5 = localDateTime2.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange6 = chronoField1.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime2);
        boolean boolean7 = localDate0.equals((java.lang.Object) valueRange6);
        java.time.LocalDate localDate8 = java.time.LocalDate.now();
        java.time.LocalDate localDate9 = java.time.LocalDate.MIN;
        boolean boolean10 = localDate8.isEqual((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean12 = localDate9.isSupported((java.time.temporal.TemporalField) chronoField11);
        int int13 = localDate9.getDayOfYear();
        java.time.Period period14 = java.time.Period.between(localDate0, localDate9);
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str16 = dateTimeFormatter15.toString();
        java.lang.String str17 = localDate0.format(dateTimeFormatter15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate19 = localDate0.minusMonths((long) 413000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -1034416666");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(valueRange6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField11.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str16, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-999999999-01-01" + "'", str17, "-999999999-01-01");
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((int) '#', (int) '4');
        long long3 = intStream2.count();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<java.lang.Integer> intSpliterator4 = intStream2.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 18L + "'", long3 == 18L);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        strItor5.add("");
        strItor5.add("x-windows-iso2022jp");
        boolean boolean10 = strItor5.hasNext();
        boolean boolean11 = strItor5.hasNext();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet76 = zoneIdMap1.entrySet();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration77 = zoneIdMap1.keys();
        java.util.Collection<java.time.zone.ZoneRules> zoneRulesCollection78 = zoneIdMap1.values();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneIdEntrySet76);
        org.junit.Assert.assertNotNull(zoneIdEnumeration77);
        org.junit.Assert.assertNotNull(zoneRulesCollection78);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator3 = ofInt2.trySplit();
        java.util.stream.IntStream.Builder builder4 = java.util.stream.IntStream.builder();
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder4);
        java.util.Spliterator<java.lang.Integer> intSpliterator6 = ofInt2.trySplit();
        java.util.stream.IntStream intStream8 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt9 = intStream8.spliterator();
        java.util.stream.IntStream intStream11 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt12 = intStream11.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = ofInt12.trySplit();
        java.util.stream.IntStream.Builder builder14 = java.util.stream.IntStream.builder();
        ofInt12.forEachRemaining((java.util.function.IntConsumer) builder14);
        boolean boolean17 = ofInt12.hasCharacteristics(829000000);
        java.util.stream.IntStream intStream19 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt20 = intStream19.spliterator();
        java.util.stream.IntStream.Builder builder21 = java.util.stream.IntStream.builder();
        boolean boolean22 = ofInt20.tryAdvance((java.util.function.IntConsumer) builder21);
        java.util.stream.IntStream intStream24 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt25 = intStream24.spliterator();
        java.util.stream.IntStream.Builder builder26 = java.util.stream.IntStream.builder();
        boolean boolean27 = ofInt25.tryAdvance((java.util.function.IntConsumer) builder26);
        ofInt20.forEachRemaining((java.util.function.IntConsumer) builder26);
        java.util.stream.IntStream intStream30 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt31 = intStream30.min();
        java.lang.String str32 = optionalInt31.toString();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate34 = localDateTime33.toLocalDate();
        boolean boolean35 = optionalInt31.equals((java.lang.Object) localDate34);
        int int37 = optionalInt31.orElse(59);
        java.util.stream.IntStream intStream39 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt40 = intStream39.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator41 = ofInt40.trySplit();
        java.util.stream.IntStream.Builder builder42 = java.util.stream.IntStream.builder();
        ofInt40.forEachRemaining((java.util.function.IntConsumer) builder42);
        optionalInt31.ifPresent((java.util.function.IntConsumer) builder42);
        boolean boolean45 = ofInt20.tryAdvance((java.util.function.IntConsumer) builder42);
        java.util.stream.IntStream.Builder builder47 = builder42.add(12);
        java.util.stream.IntStream.Builder builder49 = builder47.add(371000000);
        boolean boolean50 = ofInt12.tryAdvance((java.util.function.IntConsumer) builder49);
        java.util.Spliterator.OfPrimitive[] ofPrimitiveArray52 = new java.util.Spliterator.OfPrimitive[3];
        @SuppressWarnings("unchecked")
        java.util.Spliterator.OfPrimitive<java.lang.Integer, java.util.function.IntConsumer, java.util.Spliterator.OfInt>[] intOfPrimitiveArray53 = (java.util.Spliterator.OfPrimitive<java.lang.Integer, java.util.function.IntConsumer, java.util.Spliterator.OfInt>[]) ofPrimitiveArray52;
        intOfPrimitiveArray53[0] = ofInt2;
        intOfPrimitiveArray53[1] = ofInt9;
        intOfPrimitiveArray53[2] = ofInt12;
        java.util.stream.Stream<java.util.Spliterator.OfPrimitive<java.lang.Integer, java.util.function.IntConsumer, java.util.Spliterator.OfInt>> intOfPrimitiveStream60 = java.util.stream.Stream.of(intOfPrimitiveArray53);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNull(intSpliterator3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(intSpliterator6);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(ofInt9);
        org.junit.Assert.assertNotNull(intStream11);
        org.junit.Assert.assertNotNull(ofInt12);
        org.junit.Assert.assertNull(intSpliterator13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertNotNull(ofInt20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intStream24);
        org.junit.Assert.assertNotNull(ofInt25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(intStream30);
        org.junit.Assert.assertNotNull(optionalInt31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OptionalInt[10]" + "'", str32, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intStream39);
        org.junit.Assert.assertNotNull(ofInt40);
        org.junit.Assert.assertNull(intSpliterator41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(ofPrimitiveArray52);
        org.junit.Assert.assertNotNull(intOfPrimitiveArray53);
        org.junit.Assert.assertNotNull(intOfPrimitiveStream60);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = instant1.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.plusSeconds((long) 371000000);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime12.plusYears((long) 284000000);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime20.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset30);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit35 = chronoField34.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime36 = localDateTime32.minus((long) (-999999999), temporalUnit35);
        java.lang.String str37 = temporalUnit35.toString();
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime24.plus((long) (byte) 100, temporalUnit35);
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime38.plusDays((long) 31);
        java.time.Instant instant42 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.Clock clock47 = java.time.Clock.fixed(instant42, (java.time.ZoneId) zoneOffset45);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset52);
        java.time.Clock clock55 = clock47.withZone((java.time.ZoneId) zoneOffset52);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime38.withOffsetSameInstant(zoneOffset52);
        java.time.Instant instant58 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        java.time.Clock clock63 = java.time.Clock.fixed(instant58, (java.time.ZoneId) zoneOffset61);
        java.time.LocalTime localTime64 = java.time.LocalTime.now(clock63);
        java.time.OffsetDateTime offsetDateTime65 = java.time.OffsetDateTime.now(clock63);
        int int66 = offsetDateTime65.getSecond();
        int int67 = offsetDateTime56.compareTo(offsetDateTime65);
        boolean boolean68 = offsetDateTime12.isBefore(offsetDateTime56);
        int int69 = offsetDateTime12.getHour();
        java.time.OffsetDateTime offsetDateTime71 = offsetDateTime12.minusNanos((long) 16);
        java.time.OffsetDateTime offsetDateTime73 = offsetDateTime71.plusMinutes((long) 6);
        java.time.Instant instant75 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime79 = localDateTime76.atOffset(zoneOffset78);
        java.time.Clock clock80 = java.time.Clock.fixed(instant75, (java.time.ZoneId) zoneOffset78);
        java.time.LocalTime localTime81 = java.time.LocalTime.now(clock80);
        java.time.LocalTime localTime83 = localTime81.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean85 = localTime83.isSupported((java.time.temporal.TemporalField) chronoField84);
        java.time.temporal.TemporalUnit temporalUnit86 = chronoField84.getBaseUnit();
        java.time.OffsetDateTime offsetDateTime87 = offsetDateTime73.truncatedTo(temporalUnit86);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField34.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit35 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit35.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Weeks" + "'", str37, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(clock47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(clock63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 32 + "'", int66 == 32);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 277998031 + "'", int67 == 277998031);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(clock80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField84.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit86 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit86.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(offsetDateTime87);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        int int6 = offsetDateTime3.getMonthValue();
        long long7 = offsetDateTime3.toEpochSecond();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer14 = byteBuffer13.asLongBuffer();
        java.nio.LongBuffer longBuffer16 = longBuffer14.put(0L);
        java.time.LocalTime localTime17 = java.time.LocalTime.now();
        int int18 = localTime17.getNano();
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long20 = localTime17.getLong((java.time.temporal.TemporalField) chronoField19);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.withSecond((int) (byte) 0);
        boolean boolean27 = chronoField19.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime24);
        boolean boolean28 = longBuffer16.equals((java.lang.Object) chronoField19);
        java.lang.String str29 = chronoField19.toString();
        java.time.temporal.TemporalUnit temporalUnit30 = chronoField19.getRangeUnit();
        java.time.temporal.ValueRange valueRange31 = offsetDateTime11.range((java.time.temporal.TemporalField) chronoField19);
        boolean boolean32 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField19);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31556889832780799L + "'", long7 == 31556889832780799L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 574000000 + "'", int18 == 574000000);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField19.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 17L + "'", long20 == 17L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "MinuteOfHour" + "'", str29, "MinuteOfHour");
        org.junit.Assert.assertTrue("'" + temporalUnit30 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit30.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(valueRange31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap2 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.zone.ZoneRules zoneRules9 = zoneIdMap2.getOrDefault((java.lang.Object) 1.0d, zoneRules8);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap2.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration11 = zoneIdMap2.keys();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.util.Locale.setDefault(locale14);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset21);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules25 = zoneIdMap2.getOrDefault((java.lang.Object) locale14, zoneRules24);
        float[] floatArray28 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer29 = java.nio.FloatBuffer.wrap(floatArray28);
        java.nio.FloatBuffer floatBuffer30 = floatBuffer29.compact();
        boolean boolean31 = zoneRules25.equals((java.lang.Object) floatBuffer29);
        java.time.Month month32 = java.time.Month.FEBRUARY;
        boolean boolean33 = floatBuffer29.equals((java.lang.Object) month32);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.of((int) 'M', month32, (-1000002021), 971000000, 11);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): -1000002021");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(zoneIdEnumeration11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GBR" + "'", str13, "GBR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer29);
        org.junit.Assert.assertNotNull(floatBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + month32 + "' != '" + java.time.Month.FEBRUARY + "'", month32.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = fileChannel11.read(byteBuffer15);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) '0', (long) 97);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        boolean boolean56 = clock6.equals((java.lang.Object) zoneIdSet46);
        java.time.OffsetTime offsetTime57 = java.time.OffsetTime.now(clock6);
        int int58 = offsetTime57.getNano();
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer61 = byteBuffer60.asLongBuffer();
        java.nio.LongBuffer longBuffer63 = longBuffer61.put(0L);
        boolean boolean64 = longBuffer61.isDirect();
        long long65 = longBuffer61.get();
        java.nio.ByteOrder byteOrder66 = longBuffer61.order();
        java.nio.LongBuffer longBuffer68 = longBuffer61.put((long) 12);
        boolean boolean69 = offsetTime57.equals((java.lang.Object) longBuffer68);
        java.time.OffsetTime offsetTime71 = offsetTime57.minusNanos((long) 'a');
        java.time.OffsetTime offsetTime73 = offsetTime57.plusHours((long) 256);
        java.time.Instant instant75 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant77 = instant75.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime78 = java.nio.file.attribute.FileTime.from(instant75);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery79 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period80 = instant75.query(periodTemporalQuery79);
        java.time.temporal.ChronoField chronoField81 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit82 = chronoField81.getBaseUnit();
        boolean boolean83 = instant75.isSupported(temporalUnit82);
        java.time.LocalDateTime localDateTime84 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime85 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset87 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime88 = localDateTime85.atOffset(zoneOffset87);
        int int89 = localDateTime84.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime85);
        java.time.LocalDateTime localDateTime91 = localDateTime85.minusNanos((long) (short) 100);
        boolean boolean92 = temporalUnit82.isSupportedBy((java.time.temporal.Temporal) localDateTime85);
        boolean boolean93 = temporalUnit82.isTimeBased();
        boolean boolean94 = offsetTime57.isSupported(temporalUnit82);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(offsetTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(longBuffer61);
        org.junit.Assert.assertNotNull(longBuffer63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(byteOrder66);
        org.junit.Assert.assertNotNull(longBuffer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(offsetTime71);
        org.junit.Assert.assertNotNull(offsetTime73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(fileTime78);
        org.junit.Assert.assertNotNull(periodTemporalQuery79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + chronoField81 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField81.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit82 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit82.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(zoneOffset87);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        char char1 = org.apache.commons.lang3.CharUtils.toChar("Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'M' + "'", char1 == 'M');
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        java.io.File file1 = new java.io.File("GBR");
        java.io.File file3 = new java.io.File(file1, "5");
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path5 = path4.normalize();
        java.nio.file.WatchService watchService6 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind7 = null;
        java.nio.file.WatchEvent.Kind[] kindArray9 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray10 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray9;
        wildcardKindArray10[0] = wildcardKind7;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey13 = path5.register(watchService6, wildcardKindArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertEquals(file3.getParent(), "GBR");
        org.junit.Assert.assertEquals(file3.toString(), "GBR/5");
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(kindArray9);
        org.junit.Assert.assertNotNull(wildcardKindArray10);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHoursMinutesSeconds((int) (byte) 100, 7, 277998031);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 100 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId13 = zonedDateTime11.getZone();
        int int14 = zonedDateTime11.getHour();
        java.time.Month month15 = zonedDateTime11.getMonth();
        java.time.Duration duration18 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration21 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList22 = duration21.getUnits();
        java.time.Duration duration23 = duration18.minus(duration21);
        java.time.Duration duration25 = duration18.plusNanos((long) 722000000);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.Duration duration29 = duration25.minus((long) (byte) 100, temporalUnit28);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime30 = zonedDateTime11.minus((long) (-15888074), temporalUnit28);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.DECEMBER + "'", month15.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(temporalUnitList22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(duration29);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("23:59:59.999999999");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.stripAll(strArray1);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        java.nio.LongBuffer longBuffer10 = longBuffer7.put((int) (byte) 0, 0L);
        java.nio.LongBuffer longBuffer11 = longBuffer10.asReadOnlyBuffer();
        long long12 = longBuffer10.get();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertNotNull(longBuffer11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("file:/tmp/United Kingdom1963057651618353278aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        boolean boolean50 = valueRange48.isValidValue((long) 1);
        boolean boolean51 = valueRange48.isFixed();
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime56.withSecond((int) (byte) 0);
        java.time.LocalDate localDate59 = offsetDateTime56.toLocalDate();
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit61 = chronoField60.getBaseUnit();
        boolean boolean62 = offsetDateTime56.isSupported((java.time.temporal.TemporalField) chronoField60);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = valueRange48.checkValidIntValue(9223372036854775807L, (java.time.temporal.TemporalField) chronoField60);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AlignedWeekOfYear (valid values 1 - 53): 9223372036854775807");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField60.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit61 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit61.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = fileChannel11.lock((long) 533000000, 0L, true);
        fileLock19.release();
        java.nio.channels.FileChannel fileChannel21 = fileLock19.channel();
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer24 = byteBuffer23.asLongBuffer();
        short short25 = byteBuffer23.getShort();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.putChar('G');
        java.nio.ByteBuffer byteBuffer29 = byteBuffer23.putChar('\n');
        java.nio.ByteBuffer byteBuffer32 = byteBuffer29.putLong(4, (-365243219162L));
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer35 = byteBuffer34.asLongBuffer();
        float float37 = byteBuffer34.getFloat(4);
        double double39 = byteBuffer34.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder40 = null;
        java.nio.ByteBuffer byteBuffer41 = byteBuffer34.order(byteOrder40);
        java.nio.charset.Charset charset42 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset43 = java.nio.charset.Charset.defaultCharset();
        boolean boolean44 = charset42.contains(charset43);
        java.nio.charset.CharsetEncoder charsetEncoder45 = charset42.newEncoder();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.wrap(byteArray47);
        java.nio.charset.CharsetEncoder charsetEncoder49 = charsetEncoder45.replaceWith(byteArray47);
        java.nio.CharBuffer charBuffer51 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer52 = charBuffer51.flip();
        java.nio.CharBuffer charBuffer53 = charBuffer51.duplicate();
        char[] charArray61 = new char[] { 'a', '#', '4', '#' };
        boolean boolean62 = org.apache.commons.lang3.StringUtils.containsAny("", charArray61);
        boolean boolean63 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray61);
        boolean boolean64 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray61);
        int int65 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer53, charArray61);
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer68 = byteBuffer67.asLongBuffer();
        java.nio.charset.CoderResult coderResult70 = charsetEncoder49.encode(charBuffer53, byteBuffer67, false);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer67.putShort((short) 10);
        java.nio.ByteBuffer byteBuffer74 = byteBuffer72.putInt((int) (byte) 0);
        java.nio.ByteBuffer[] byteBufferArray75 = new java.nio.ByteBuffer[] { byteBuffer29, byteBuffer34, byteBuffer74 };
        // The following exception was thrown during execution in test generation
        try {
            long long76 = fileChannel21.write(byteBufferArray75);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertNotNull(fileChannel21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(longBuffer24);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(longBuffer35);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(charsetEncoder49);
        org.junit.Assert.assertNotNull(charBuffer51);
        org.junit.Assert.assertNotNull(buffer52);
        org.junit.Assert.assertNotNull(charBuffer53);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(longBuffer68);
        org.junit.Assert.assertNotNull(coderResult70);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteBufferArray75);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Collection<java.time.zone.ZoneRules> zoneRulesCollection9 = zoneIdMap1.values();
        java.util.stream.LongStream longStream10 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream11 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream12 = java.util.stream.LongStream.concat(longStream10, longStream11);
        java.util.stream.LongStream longStream13 = longStream10.unordered();
        java.util.stream.LongStream longStream14 = longStream10.parallel();
        boolean boolean15 = zoneIdMap1.equals((java.lang.Object) longStream14);
        java.time.Instant instant17 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant19 = instant17.minusNanos((long) 'a');
        long long20 = instant17.toEpochMilli();
        java.util.Date date21 = java.util.Date.from(instant17);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset26);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset26.getRules();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset34);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition37 = zoneRules29.getTransition(localDateTime36);
        java.time.zone.ZoneRules zoneRules38 = zoneIdMap1.getOrDefault((java.lang.Object) instant17, zoneRules29);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneRulesCollection9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32000L + "'", long20 == 32000L);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNull(zoneOffsetTransition37);
        org.junit.Assert.assertNotNull(zoneRules38);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.minusWeeks((long) 834000000);
        int int9 = localDate6.getDayOfYear();
        java.time.OffsetTime offsetTime11 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime13 = offsetTime11.withSecond(16);
        java.time.OffsetTime offsetTime15 = offsetTime13.plusNanos(1434414441700000L);
        java.time.OffsetTime offsetTime16 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime18 = offsetTime16.withSecond(16);
        java.time.Instant instant20 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant22 = instant20.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime23 = java.nio.file.attribute.FileTime.from(instant20);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery24 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period25 = instant20.query(periodTemporalQuery24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        boolean boolean28 = instant20.isSupported(temporalUnit27);
        boolean boolean29 = offsetTime16.isSupported(temporalUnit27);
        boolean boolean30 = offsetTime15.isEqual(offsetTime16);
        int int31 = offsetTime16.getNano();
        java.time.OffsetTime offsetTime33 = offsetTime16.withNano((int) '\000');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.ZonedDateTime zonedDateTime45 = offsetDateTime37.atZoneSameInstant((java.time.ZoneId) zoneOffset42);
        int int46 = zonedDateTime45.getDayOfMonth();
        int int47 = zonedDateTime45.getHour();
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime45.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.OffsetDateTime offsetDateTime55 = offsetDateTime53.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.zone.ZoneRules zoneRules60 = zoneOffset58.getRules();
        java.time.ZonedDateTime zonedDateTime61 = offsetDateTime53.atZoneSameInstant((java.time.ZoneId) zoneOffset58);
        java.time.ZonedDateTime zonedDateTime62 = zonedDateTime61.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long64 = zonedDateTime61.getLong((java.time.temporal.TemporalField) chronoField63);
        long long65 = zonedDateTime49.getLong((java.time.temporal.TemporalField) chronoField63);
        java.time.temporal.TemporalUnit temporalUnit66 = chronoField63.getRangeUnit();
        boolean boolean67 = temporalUnit66.isDateBased();
        boolean boolean68 = offsetTime16.isSupported(temporalUnit66);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate69 = localDate6.plus((long) 469000000, temporalUnit66);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Seconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 365 + "'", int9 == 365);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(fileTime23);
        org.junit.Assert.assertNotNull(periodTemporalQuery24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 25000000 + "'", int31 == 25000000);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 23 + "'", int47 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(zoneRules60);
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField63.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 999999999L + "'", long64 == 999999999L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 999999999L + "'", long65 == 999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit66 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit66.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.DayOfWeek dayOfWeek23 = localDateTime17.getDayOfWeek();
        java.time.format.TextStyle textStyle24 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        java.lang.String str29 = dayOfWeek23.getDisplayName(textStyle24, locale25);
        java.util.Set<java.lang.String> strSet30 = locale25.getUnicodeLocaleAttributes();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.zone.ZoneRules zoneRules38 = zoneOffset36.getRules();
        java.time.zone.ZoneRules zoneRules39 = zoneIdMap32.getOrDefault((java.lang.Object) 1.0d, zoneRules38);
        java.util.Set<java.time.ZoneId> zoneIdSet40 = zoneIdMap32.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList52);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList66);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.lang.String>) strList80);
        boolean boolean83 = strList66.removeAll((java.util.Collection<java.lang.String>) strList82);
        boolean boolean84 = strList54.retainAll((java.util.Collection<java.lang.String>) strList82);
        boolean boolean85 = zoneIdSet40.removeAll((java.util.Collection<java.lang.String>) strList54);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strList54.spliterator();
        boolean boolean88 = strList54.add("+999999999-12-31T23:59:59.999999999");
        int int89 = strList54.size();
        boolean boolean90 = strSet30.retainAll((java.util.Collection<java.lang.String>) strList54);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle24 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle24.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GBR" + "'", str26, "GBR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5" + "'", str29, "5");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(zoneRules38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zoneIdSet40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit1 = chronoField0.getBaseUnit();
        boolean boolean2 = temporalUnit1.isDurationEstimated();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit1 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit1.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = java.time.Period.from((java.time.temporal.TemporalAmount) period1);
        boolean boolean3 = period2.isZero();
        java.time.Period period5 = period2.minusMonths((long) (short) 10);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble1 = doubleStream0.max();
        java.util.function.DoubleToLongFunction doubleToLongFunction2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream3 = doubleStream0.mapToLong(doubleToLongFunction2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        boolean boolean3 = byteBuffer1.hasArray();
        java.lang.Object obj4 = byteBuffer1.array();
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.put((byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteBuffer6);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        char[] charArray21 = new char[] { 'a', '#', '4', '#' };
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsAny("", charArray21);
        boolean boolean23 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray21);
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray21);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap26 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap26.getOrDefault((java.lang.Object) 1.0d, zoneRules32);
        java.lang.String str34 = zoneRules32.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = zoneRules32.getTransitions();
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap1.getOrDefault((java.lang.Object) charArray21, zoneRules32);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.ZonedDateTime zonedDateTime48 = offsetDateTime40.atZoneSameInstant((java.time.ZoneId) zoneOffset45);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime48.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long51 = zonedDateTime48.getLong((java.time.temporal.TemporalField) chronoField50);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery52 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period53 = zonedDateTime48.query(periodTemporalQuery52);
        java.time.ZoneId zoneId54 = zonedDateTime48.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap56 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.zone.ZoneRules zoneRules62 = zoneOffset60.getRules();
        java.time.zone.ZoneRules zoneRules63 = zoneIdMap56.getOrDefault((java.lang.Object) 1.0d, zoneRules62);
        java.time.zone.ZoneRules zoneRules64 = zoneIdMap1.put(zoneId54, zoneRules63);
        java.time.LocalDateTime localDateTime65 = null;
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition66 = zoneRules64.getTransition(localDateTime65);
        java.lang.Object obj67 = null;
        boolean boolean68 = zoneRules64.equals(obj67);
        java.util.List<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList69 = zoneRules64.getTransitionRules();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str34, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField50.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 999999999L + "'", long51 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(zoneId54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(zoneRules64);
        org.junit.Assert.assertNull(zoneOffsetTransition66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleList69);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap2 = strMap0.tailMap("java.security.cert.CertificateEncodingException");
        java.util.Collection<java.nio.charset.Charset> charsetCollection3 = strMap2.values();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(charsetCollection3);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        java.util.MissingResourceException missingResourceException4 = new java.util.MissingResourceException("-999999999-01-01", "zonerules[currentstandardoffset=z]", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        java.lang.String str5 = missingResourceException4.getClassName();
        java.security.KeyException keyException6 = new java.security.KeyException("java.nio.HeapShortBufferR[pos=64 lim=64 cap=64]", (java.lang.Throwable) missingResourceException4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zonerules[currentstandardoffset=z]" + "'", str5, "zonerules[currentstandardoffset=z]");
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalTime localTime36 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime38 = localTime36.plusHours((long) 16384);
        java.time.LocalTime localTime40 = localTime36.plusMinutes(0L);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap42 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        java.time.zone.ZoneRules zoneRules48 = zoneOffset46.getRules();
        java.time.zone.ZoneRules zoneRules49 = zoneIdMap42.getOrDefault((java.lang.Object) 1.0d, zoneRules48);
        java.lang.String str50 = zoneRules48.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList51 = zoneRules48.getTransitions();
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        int int57 = localDateTime52.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        int int62 = localDateTime53.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        int int68 = localDateTime63.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime64);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime72 = localDateTime69.atOffset(zoneOffset71);
        int int73 = localDateTime64.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime69);
        boolean boolean74 = localDateTime53.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime69);
        java.time.format.DateTimeFormatter dateTimeFormatter75 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str76 = localDateTime69.format(dateTimeFormatter75);
        java.time.ZoneOffset zoneOffset77 = zoneRules48.getOffset(localDateTime69);
        java.time.LocalDateTime localDateTime79 = localDateTime69.minusMinutes(13L);
        java.time.Instant instant81 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime85 = localDateTime82.atOffset(zoneOffset84);
        java.time.Clock clock86 = java.time.Clock.fixed(instant81, (java.time.ZoneId) zoneOffset84);
        java.time.LocalDateTime localDateTime89 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset91 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime92 = localDateTime89.atOffset(zoneOffset91);
        java.time.LocalDateTime localDateTime93 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset91);
        java.time.Clock clock94 = clock86.withZone((java.time.ZoneId) zoneOffset91);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime95 = localDateTime69.atZone((java.time.ZoneId) zoneOffset91);
        java.time.OffsetDateTime offsetDateTime96 = java.time.OffsetDateTime.of(localDate35, localTime40, zoneOffset91);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str50, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str76, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(offsetDateTime85);
        org.junit.Assert.assertNotNull(clock86);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(zoneOffset91);
        org.junit.Assert.assertNotNull(offsetDateTime92);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(clock94);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime95);
        org.junit.Assert.assertNotNull(offsetDateTime96);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        int int3 = org.apache.commons.lang3.StringUtils.indexOf("DoubleSummaryStatistics{count=2, sum=100.000000, min=0.000000, average=50.000000, max=100.000000}", "file:/tmp/United Kingdom75427...", (-15888074));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime12 = localDateTime6.withHour(4);
        int int13 = localDateTime6.getDayOfMonth();
        java.time.LocalDateTime localDateTime15 = localDateTime6.minusSeconds(14L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime17 = localDateTime6.plusNanos(59L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.lang.String str18 = isoChronology0.toString();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.withSecond((int) (byte) 0);
        java.time.LocalDate localDate25 = offsetDateTime22.toLocalDate();
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        boolean boolean28 = offsetDateTime22.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime22.minusMinutes((long) 100);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.Clock clock37 = java.time.Clock.fixed(instant32, (java.time.ZoneId) zoneOffset35);
        java.time.ZonedDateTime zonedDateTime38 = offsetDateTime30.atZoneSameInstant((java.time.ZoneId) zoneOffset35);
        java.time.LocalDate localDate39 = isoChronology0.dateNow((java.time.ZoneId) zoneOffset35);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.withSecond((int) (byte) 0);
        java.time.LocalDate localDate46 = offsetDateTime43.toLocalDate();
        java.time.LocalDate localDate48 = localDate46.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        java.time.OffsetDateTime offsetDateTime54 = offsetDateTime52.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.zone.ZoneRules zoneRules59 = zoneOffset57.getRules();
        java.time.ZonedDateTime zonedDateTime60 = offsetDateTime52.atZoneSameInstant((java.time.ZoneId) zoneOffset57);
        java.time.LocalTime localTime61 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset57);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.zone.ZoneRules zoneRules66 = zoneOffset64.getRules();
        java.time.ZonedDateTime zonedDateTime67 = java.time.ZonedDateTime.of(localDate46, localTime61, (java.time.ZoneId) zoneOffset64);
        java.time.OffsetTime offsetTime68 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime70 = offsetTime68.withSecond(16);
        java.time.Instant instant72 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant74 = instant72.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime75 = java.nio.file.attribute.FileTime.from(instant72);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery76 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period77 = instant72.query(periodTemporalQuery76);
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit79 = chronoField78.getBaseUnit();
        boolean boolean80 = instant72.isSupported(temporalUnit79);
        boolean boolean81 = offsetTime68.isSupported(temporalUnit79);
        java.time.OffsetDateTime offsetDateTime82 = localDate46.atTime(offsetTime68);
        java.time.LocalDate localDate83 = isoChronology0.date((java.time.temporal.TemporalAccessor) offsetDateTime82);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(clock37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(zoneRules59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(offsetTime68);
        org.junit.Assert.assertNotNull(offsetTime70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(fileTime75);
        org.junit.Assert.assertNotNull(periodTemporalQuery76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField78.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit79 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit79.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertNotNull(localDate83);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        long long5 = byteBuffer1.getLong();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of((int) 'u', 834000000, 284000000, 437000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 117");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CodingErrorAction codingErrorAction8 = charsetEncoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder9 = charsetEncoder7.reset();
        java.nio.charset.CodingErrorAction codingErrorAction10 = java.nio.charset.CodingErrorAction.REPLACE;
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder9.onUnmappableCharacter(codingErrorAction10);
        java.nio.CharBuffer charBuffer13 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer14 = charBuffer13.flip();
        java.nio.CharBuffer charBuffer15 = charBuffer13.duplicate();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer18 = byteBuffer17.asLongBuffer();
        short short19 = byteBuffer17.getShort();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putChar('G');
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer24 = byteBuffer23.asLongBuffer();
        short short25 = byteBuffer23.getShort();
        boolean boolean26 = byteBuffer17.equals((java.lang.Object) byteBuffer23);
        java.nio.charset.CoderResult coderResult28 = charsetEncoder9.encode(charBuffer15, byteBuffer17, true);
        boolean boolean29 = coderResult28.isError();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(longBuffer18);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(longBuffer24);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(coderResult28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long14 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery15 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period16 = zonedDateTime11.query(periodTemporalQuery15);
        java.time.ZoneId zoneId17 = zonedDateTime11.getZone();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime11.plusWeeks((long) (-1));
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusMinutes(43200000000000L);
        int int22 = zonedDateTime19.getMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 999999999L + "'", long14 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        java.util.Optional<org.apache.commons.lang3.CharUtils> charUtilsOptional0 = java.util.Optional.empty();
        org.junit.Assert.assertNotNull(charUtilsOptional0);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        java.time.Period period3 = java.time.Period.of((int) '#', (int) '\uffff', 4);
        java.time.Period period5 = period3.minusMonths((long) 227000000);
        long long6 = period3.toTotalMonths();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 65955L + "'", long6 == 65955L);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        java.time.Month month1 = java.time.Month.MARCH;
        java.time.Month month3 = month1.plus((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.of(257000000, month1, (int) (byte) 10, 999999998, (int) '0');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 999999998");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.MARCH + "'", month1.equals(java.time.Month.MARCH));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.APRIL + "'", month3.equals(java.time.Month.APRIL));
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.Period period5 = period1.minusMonths((long) 256);
        java.time.Period period7 = java.time.Period.ofWeeks((int) (byte) -1);
        boolean boolean8 = period5.equals((java.lang.Object) period7);
        java.time.Period period10 = period5.withMonths(64);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime28 = zonedDateTime26.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime29 = zonedDateTime26.withEarlierOffsetAtOverlap();
        boolean boolean30 = zonedDateTime11.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime34.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.zone.ZoneRules zoneRules41 = zoneOffset39.getRules();
        java.time.ZonedDateTime zonedDateTime42 = offsetDateTime34.atZoneSameInstant((java.time.ZoneId) zoneOffset39);
        int int43 = zonedDateTime42.getDayOfMonth();
        boolean boolean44 = zonedDateTime26.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime42);
        int int45 = zonedDateTime26.getMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.lang.String str35 = localDateTime6.toString();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate37 = localDateTime36.toLocalDate();
        java.time.LocalDateTime localDateTime39 = localDateTime36.plusWeeks(0L);
        int int40 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime41.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime42.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        int int57 = localDateTime52.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        int int62 = localDateTime53.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        boolean boolean63 = localDateTime42.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        int int69 = localDateTime64.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        boolean boolean74 = localDateTime64.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime70);
        boolean boolean75 = localDateTime58.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime70);
        java.time.LocalDate localDate76 = localDateTime58.toLocalDate();
        java.time.LocalTime localTime77 = localDateTime58.toLocalTime();
        java.time.LocalTime localTime78 = localDateTime58.toLocalTime();
        java.time.LocalDateTime localDateTime80 = localDateTime58.minusMonths((long) '-');
        int int81 = localDateTime39.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        java.time.DayOfWeek dayOfWeek82 = localDateTime58.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + dayOfWeek82 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek82.equals(java.time.DayOfWeek.FRIDAY));
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getISO3Language();
        java.time.format.DecimalStyle decimalStyle3 = java.time.format.DecimalStyle.of(locale1);
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now();
        boolean boolean5 = decimalStyle3.equals((java.lang.Object) offsetDateTime4);
        java.time.format.DecimalStyle decimalStyle7 = decimalStyle3.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle9 = decimalStyle7.withPositiveSign('\uffff');
        java.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withDecimalStyle(decimalStyle9);
        java.util.Locale locale11 = dateTimeFormatter0.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertNotNull(decimalStyle9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit13 = null;
        boolean boolean14 = zonedDateTime12.isSupported(temporalUnit13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.withSecond((int) (byte) 0);
        java.time.LocalDate localDate21 = offsetDateTime18.toLocalDate();
        java.time.LocalDate localDate23 = localDate21.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.ZonedDateTime zonedDateTime35 = offsetDateTime27.atZoneSameInstant((java.time.ZoneId) zoneOffset32);
        java.time.LocalTime localTime36 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset32);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.zone.ZoneRules zoneRules41 = zoneOffset39.getRules();
        java.time.ZonedDateTime zonedDateTime42 = java.time.ZonedDateTime.of(localDate21, localTime36, (java.time.ZoneId) zoneOffset39);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime43 = zonedDateTime12.withZoneSameInstant((java.time.ZoneId) zoneOffset39);
        java.time.LocalDate localDate44 = java.time.LocalDate.now();
        java.time.LocalDate localDate45 = java.time.LocalDate.MIN;
        boolean boolean46 = localDate44.isEqual((java.time.chrono.ChronoLocalDate) localDate45);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean48 = localDate45.isSupported((java.time.temporal.TemporalField) chronoField47);
        java.time.LocalDate localDate50 = localDate45.plusWeeks((long) 10);
        java.time.format.DateTimeFormatter dateTimeFormatter51 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology52 = dateTimeFormatter51.getChronology();
        java.time.format.TextStyle textStyle53 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String str55 = locale54.getISO3Language();
        java.time.format.DecimalStyle decimalStyle56 = java.time.format.DecimalStyle.of(locale54);
        java.lang.String str57 = chronology52.getDisplayName(textStyle53, locale54);
        java.time.OffsetTime offsetTime58 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime60 = offsetTime58.withSecond(16);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int62 = offsetTime60.get((java.time.temporal.TemporalField) chronoField61);
        java.time.temporal.ValueRange valueRange63 = chronology52.range(chronoField61);
        boolean boolean64 = localDate45.isSupported((java.time.temporal.TemporalField) chronoField61);
        boolean boolean65 = zonedDateTime12.isSupported((java.time.temporal.TemporalField) chronoField61);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField47.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + textStyle53 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle53.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "eng" + "'", str55, "eng");
        org.junit.Assert.assertNotNull(decimalStyle56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISO" + "'", str57, "ISO");
        org.junit.Assert.assertNotNull(offsetTime58);
        org.junit.Assert.assertNotNull(offsetTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField61.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 17 + "'", int62 == 17);
        org.junit.Assert.assertNotNull(valueRange63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        boolean boolean50 = valueRange48.isValidValue((long) 1);
        boolean boolean52 = valueRange48.isValidValue(0L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) charBuffer3);
        java.nio.CharBuffer charBuffer17 = charBuffer3.asReadOnlyBuffer();
        boolean boolean18 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        boolean boolean77 = inetAddress72.isMulticastAddress();
        boolean boolean78 = inetAddress72.isAnyLocalAddress();
        java.lang.String str79 = inetAddress72.getHostName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "localhost" + "'", str79, "localhost");
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        java.security.cert.CertificateEncodingException certificateEncodingException1 = new java.security.cert.CertificateEncodingException();
        java.security.InvalidKeyException invalidKeyException2 = new java.security.InvalidKeyException("1 Jan 1970 00:00:32 GMT", (java.lang.Throwable) certificateEncodingException1);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        java.security.KeyException keyException0 = new java.security.KeyException();
        java.security.SignatureException signatureException1 = new java.security.SignatureException((java.lang.Throwable) keyException0);
        java.security.cert.CertificateEncodingException certificateEncodingException2 = new java.security.cert.CertificateEncodingException((java.lang.Throwable) signatureException1);
        java.security.NoSuchAlgorithmException noSuchAlgorithmException3 = new java.security.NoSuchAlgorithmException((java.lang.Throwable) certificateEncodingException2);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        float float9 = byteBuffer6.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer6.putChar('\r');
        java.nio.LongBuffer longBuffer12 = byteBuffer11.asLongBuffer();
        java.nio.LongBuffer longBuffer13 = longBuffer2.put(longBuffer12);
        java.lang.String str14 = longBuffer2.toString();
        java.nio.LongBuffer longBuffer15 = longBuffer2.duplicate();
        java.lang.String str16 = longBuffer2.toString();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(longBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]" + "'", str14, "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]" + "'", str16, "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        java.net.SocketException socketException0 = new java.net.SocketException();
        java.security.GeneralSecurityException generalSecurityException1 = new java.security.GeneralSecurityException((java.lang.Throwable) socketException0);
        java.lang.String str2 = socketException0.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.net.SocketException" + "'", str2, "java.net.SocketException");
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        java.net.URL uRL0 = null;
        java.net.URL uRL1 = null;
        java.security.cert.Certificate[] certificateArray2 = new java.security.cert.Certificate[] {};
        java.security.CodeSource codeSource3 = new java.security.CodeSource(uRL1, certificateArray2);
        java.security.CodeSource codeSource4 = new java.security.CodeSource(uRL0, certificateArray2);
        org.junit.Assert.assertNotNull(certificateArray2);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        boolean boolean4 = locale2.hasExtensions();
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GBR" + "'", str1, "GBR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery5 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period6 = instant1.query(periodTemporalQuery5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = instant1.isSupported(temporalUnit8);
        java.time.Instant instant11 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant13 = instant11.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.ZoneId zoneId20 = zonedDateTime19.getZone();
        java.time.Clock clock21 = java.time.Clock.fixed(instant1, zoneId20);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset26);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset26.getRules();
        java.time.OffsetDateTime offsetDateTime30 = instant1.atOffset(zoneOffset26);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant34 = instant32.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime35 = java.nio.file.attribute.FileTime.from(instant32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = instant32.query(periodTemporalQuery36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        boolean boolean40 = instant32.isSupported(temporalUnit39);
        java.time.Instant instant42 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant44 = instant42.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.zone.ZoneRules zoneRules49 = zoneOffset47.getRules();
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.ofInstant(instant42, (java.time.ZoneId) zoneOffset47);
        java.time.ZoneId zoneId51 = zonedDateTime50.getZone();
        java.time.Clock clock52 = java.time.Clock.fixed(instant32, zoneId51);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset57);
        java.time.zone.ZoneRules zoneRules60 = zoneOffset57.getRules();
        java.time.OffsetDateTime offsetDateTime61 = instant32.atOffset(zoneOffset57);
        java.time.Instant instant63 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant65 = instant63.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime66 = java.nio.file.attribute.FileTime.from(instant63);
        java.time.Instant instant68 = instant63.plusMillis((long) 10);
        boolean boolean69 = instant32.isAfter(instant63);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.OffsetDateTime offsetDateTime75 = offsetDateTime73.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime79 = localDateTime76.atOffset(zoneOffset78);
        java.time.zone.ZoneRules zoneRules80 = zoneOffset78.getRules();
        java.time.ZonedDateTime zonedDateTime81 = offsetDateTime73.atZoneSameInstant((java.time.ZoneId) zoneOffset78);
        java.time.ZonedDateTime zonedDateTime82 = zonedDateTime81.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId83 = zonedDateTime81.getZone();
        java.time.Clock clock84 = java.time.Clock.fixed(instant32, zoneId83);
        java.time.LocalDateTime localDateTime85 = java.time.LocalDateTime.ofInstant(instant1, zoneId83);
        java.time.LocalDateTime localDateTime87 = localDateTime85.minusSeconds((long) 10000);
        int int88 = localDateTime85.getMonthValue();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(periodTemporalQuery5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField38.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(zoneId51);
        org.junit.Assert.assertNotNull(clock52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneRules60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(fileTime66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(zonedDateTime82);
        org.junit.Assert.assertNotNull(zoneId83);
        org.junit.Assert.assertNotNull(clock84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.temporal.ValueRange valueRange14 = zonedDateTime11.range((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = temporalUnit17.isTimeBased();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime11.minus(0L, temporalUnit17);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime11.withYear((int) '\n');
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime11.minusDays((long) 'a');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer30 = byteBuffer29.asLongBuffer();
        java.nio.LongBuffer longBuffer32 = longBuffer30.put(0L);
        java.time.LocalTime localTime33 = java.time.LocalTime.now();
        int int34 = localTime33.getNano();
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long36 = localTime33.getLong((java.time.temporal.TemporalField) chronoField35);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.withSecond((int) (byte) 0);
        boolean boolean43 = chronoField35.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime40);
        boolean boolean44 = longBuffer32.equals((java.lang.Object) chronoField35);
        java.lang.String str45 = chronoField35.toString();
        java.time.temporal.TemporalUnit temporalUnit46 = chronoField35.getRangeUnit();
        java.time.temporal.ValueRange valueRange47 = offsetDateTime27.range((java.time.temporal.TemporalField) chronoField35);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal49 = zonedDateTime23.with((java.time.temporal.TemporalField) chronoField35, (long) (-3));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): -3");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(valueRange14);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(longBuffer30);
        org.junit.Assert.assertNotNull(longBuffer32);
        org.junit.Assert.assertNotNull(localTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 544000000 + "'", int34 == 544000000);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField35.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 17L + "'", long36 == 17L);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "MinuteOfHour" + "'", str45, "MinuteOfHour");
        org.junit.Assert.assertTrue("'" + temporalUnit46 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit46.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(valueRange47);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        int int6 = charBuffer1.compareTo(charBuffer4);
        // The following exception was thrown during execution in test generation
        try {
            char char7 = charBuffer4.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusNanos((long) 10000);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = localDateTime23.minusNanos((long) (short) 100);
        java.time.LocalDateTime localDateTime31 = localDateTime23.minusYears((long) (short) 1);
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime19.with((java.time.temporal.TemporalAdjuster) localDateTime31);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime45 = localDateTime39.withHour(4);
        java.util.stream.DoubleStream doubleStream46 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream47 = doubleStream46.distinct();
        java.util.stream.DoubleStream doubleStream48 = doubleStream47.parallel();
        boolean boolean49 = localDateTime45.equals((java.lang.Object) doubleStream47);
        java.time.chrono.Chronology chronology50 = localDateTime45.getChronology();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime54.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.zone.ZoneRules zoneRules61 = zoneOffset59.getRules();
        java.time.ZonedDateTime zonedDateTime62 = offsetDateTime54.atZoneSameInstant((java.time.ZoneId) zoneOffset59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime62.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.temporal.ValueRange valueRange65 = zonedDateTime62.range((java.time.temporal.TemporalField) chronoField64);
        long long67 = chronoField64.checkValidValue((long) 539000000);
        boolean boolean68 = localDateTime45.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime69 = localDateTime31.with((java.time.temporal.TemporalAdjuster) localDateTime45);
        java.time.LocalDateTime localDateTime71 = localDateTime31.minusNanos(57632000000000L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(doubleStream46);
        org.junit.Assert.assertNotNull(doubleStream47);
        org.junit.Assert.assertNotNull(doubleStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(zoneRules61);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField64.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(valueRange65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 539000000L + "'", long67 == 539000000L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        java.security.Provider provider0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = java.time.ZoneId.SHORT_IDS;
        // The following exception was thrown during execution in test generation
        try {
            java.security.Provider.Service service19 = new java.security.Provider.Service(provider0, "\u5206\u949f", "Weeks", "Z", strList17, strMap18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.lang.String str1 = chronoField0.toString();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "EpochDay" + "'", str1, "EpochDay");
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long14 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField13);
        java.time.ZoneId zoneId15 = zonedDateTime11.getZone();
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime11.plusHours((long) (short) 0);
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime11.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime20 = zonedDateTime11.plusWeeks((long) 11);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 999999999L + "'", long14 == 999999999L);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        java.security.SignatureException signatureException1 = new java.security.SignatureException("java.nio.ByteBufferAsLongBufferRB[pos=1 lim=4 cap=4]");
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        int int4 = ofDouble3.characteristics();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics5 = new java.util.DoubleSummaryStatistics();
        boolean boolean6 = ofDouble3.tryAdvance((java.util.function.DoubleConsumer) doubleSummaryStatistics5);
        double double7 = doubleSummaryStatistics5.getMin();
        double double8 = doubleSummaryStatistics5.getAverage();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(doubleSummaryStatistics5.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime7 = localDateTime1.minusNanos((long) (short) 100);
        java.time.LocalDateTime localDateTime9 = localDateTime1.minusYears((long) (short) 1);
        java.time.format.DateTimeFormatter dateTimeFormatter10 = java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;
        java.lang.String str11 = localDateTime9.format(dateTimeFormatter10);
        java.time.format.FormatStyle formatStyle12 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter13 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle12);
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology15 = dateTimeFormatter14.getChronology();
        java.time.format.TextStyle textStyle16 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getISO3Language();
        java.time.format.DecimalStyle decimalStyle19 = java.time.format.DecimalStyle.of(locale17);
        java.lang.String str20 = chronology15.getDisplayName(textStyle16, locale17);
        java.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter13.withChronology(chronology15);
        java.lang.String str22 = localDateTime9.format(dateTimeFormatter13);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology24 = dateTimeFormatter23.getChronology();
        java.time.chrono.Chronology chronology25 = dateTimeFormatter23.getChronology();
        java.time.format.ResolverStyle resolverStyle26 = dateTimeFormatter23.getResolverStyle();
        java.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter13.withResolverStyle(resolverStyle26);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "23:59:59.999999999" + "'", str11, "23:59:59.999999999");
        org.junit.Assert.assertTrue("'" + formatStyle12 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle12.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + textStyle16 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle16.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eng" + "'", str18, "eng");
        org.junit.Assert.assertNotNull(decimalStyle19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISO" + "'", str20, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e0b\u5348\u65f6\u5206\u79d2" + "'", str22, "\u4e0b\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + resolverStyle26 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle26.equals(java.time.format.ResolverStyle.STRICT));
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("localhost");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: localhost");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.stream.LongStream longStream4 = longStream0.parallel();
        boolean boolean5 = longStream4.isParallel();
        java.util.function.LongToDoubleFunction longToDoubleFunction6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream7 = longStream4.mapToDouble(longToDoubleFunction6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalTime localTime6 = java.time.LocalTime.now();
        java.time.LocalTime localTime8 = localTime6.plusHours(0L);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit10 = chronoField9.getBaseUnit();
        java.time.temporal.ValueRange valueRange11 = localTime8.range((java.time.temporal.TemporalField) chronoField9);
        boolean boolean12 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.from((java.time.temporal.TemporalAccessor) offsetDateTime3);
        java.time.LocalTime localTime14 = localDateTime13.toLocalTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField9.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit10 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit10.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        boolean boolean5 = longBuffer2.isDirect();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap7 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = zoneOffset11.getRules();
        java.time.zone.ZoneRules zoneRules14 = zoneIdMap7.getOrDefault((java.lang.Object) 1.0d, zoneRules13);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset19);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap23 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset27.getRules();
        java.time.zone.ZoneRules zoneRules30 = zoneIdMap23.getOrDefault((java.lang.Object) 1.0d, zoneRules29);
        java.lang.String str31 = zoneRules29.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList32 = zoneRules29.getTransitions();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap7.putIfAbsent((java.time.ZoneId) zoneOffset19, zoneRules29);
        java.time.Clock clock34 = java.time.Clock.systemUTC();
        java.time.Instant instant35 = clock34.instant();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition36 = zoneRules29.nextTransition(instant35);
        java.util.Locale locale37 = java.util.Locale.US;
        boolean boolean38 = zoneRules29.equals((java.lang.Object) locale37);
        boolean boolean39 = longBuffer2.equals((java.lang.Object) boolean38);
        java.nio.LongBuffer longBuffer40 = longBuffer2.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneRules14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str31, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList32);
        org.junit.Assert.assertNull(zoneRules33);
        org.junit.Assert.assertNotNull(clock34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNull(zoneOffsetTransition36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longBuffer40);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        boolean boolean8 = file1.setWritable(false, false);
        boolean boolean10 = file1.setWritable(false);
        boolean boolean11 = file1.setReadOnly();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.ZoneId zoneId10 = zonedDateTime9.getZone();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime11 = zonedDateTime9.toLocalDateTime();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime9.minusNanos(31556889832175999L);
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.Clock clock20 = java.time.Clock.fixed(instant15, (java.time.ZoneId) zoneOffset18);
        java.lang.String str21 = zoneOffset18.getId();
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime13.withZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.OffsetDateTime offsetDateTime28 = offsetDateTime26.minusSeconds((long) (byte) 0);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime29 = zonedDateTime22.with((java.time.temporal.TemporalAdjuster) offsetDateTime26);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(clock20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Z" + "'", str21, "Z");
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime29);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalTime localTime6 = java.time.LocalTime.now();
        java.time.LocalTime localTime8 = localTime6.plusHours(0L);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit10 = chronoField9.getBaseUnit();
        java.time.temporal.ValueRange valueRange11 = localTime8.range((java.time.temporal.TemporalField) chronoField9);
        boolean boolean12 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime3.minusNanos((long) 574000000);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField9.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit10 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit10.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(offsetDateTime14);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        // The following exception was thrown during execution in test generation
        try {
            long long6 = byteBuffer4.getLong(64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = java.time.Period.from((java.time.temporal.TemporalAmount) period1);
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str4 = dateTimeFormatter3.toString();
        boolean boolean5 = period2.equals((java.lang.Object) dateTimeFormatter3);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.plusNanos((long) (-7));
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime18 = java.nio.file.attribute.FileTime.from(instant15);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery19 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period20 = instant15.query(periodTemporalQuery19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        boolean boolean23 = instant15.isSupported(temporalUnit22);
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant27 = instant25.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.ofInstant(instant25, (java.time.ZoneId) zoneOffset30);
        java.time.ZoneId zoneId34 = zonedDateTime33.getZone();
        java.time.Clock clock35 = java.time.Clock.fixed(instant15, zoneId34);
        java.time.ZonedDateTime zonedDateTime36 = offsetDateTime11.atZoneSimilarLocal(zoneId34);
        java.time.temporal.Temporal temporal37 = period2.addTo((java.time.temporal.Temporal) zonedDateTime36);
        java.time.chrono.Chronology chronology38 = period2.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod39 = period2.negated();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime43.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset53);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit58 = chronoField57.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime59 = localDateTime55.minus((long) (-999999999), temporalUnit58);
        java.lang.String str60 = temporalUnit58.toString();
        java.time.OffsetDateTime offsetDateTime61 = offsetDateTime47.plus((long) (byte) 100, temporalUnit58);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = chronoPeriod39.get(temporalUnit58);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str4, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(fileTime18);
        org.junit.Assert.assertNotNull(periodTemporalQuery19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(clock35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronoPeriod39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField57.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit58 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit58.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Weeks" + "'", str60, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime61);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Iterator<java.lang.String> strItor14 = strList11.iterator();
        java.util.function.Predicate<java.nio.channels.ByteChannel> byteChannelPredicate15 = java.util.function.Predicate.isEqual((java.lang.Object) strList11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList18 = strList11.subList(95000000, 10000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 10000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(byteChannelPredicate15);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalTime localTime8 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime10 = localTime8.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime11 = localDate1.atTime(localTime8);
        java.time.LocalTime localTime13 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int14 = localTime8.compareTo(localTime13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.Duration duration17 = duration15.minusDays((long) (-1));
        java.time.LocalTime localTime18 = localTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList19 = duration17.getUnits();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(temporalUnitList19);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate2 = localDateTime1.toLocalDate();
        java.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange5 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime1);
        java.time.Period period7 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period8 = java.time.Period.from((java.time.temporal.TemporalAmount) period7);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str10 = dateTimeFormatter9.toString();
        boolean boolean11 = period8.equals((java.lang.Object) dateTimeFormatter9);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime12 = localDateTime1.minus((java.time.temporal.TemporalAmount) period8);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str10, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        boolean boolean20 = localDateTime17.equals((java.lang.Object) charset19);
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer23 = charBuffer22.flip();
        int int24 = charBuffer22.capacity();
        boolean boolean25 = charBuffer22.hasArray();
        java.nio.CharBuffer charBuffer27 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer28 = charBuffer27.flip();
        java.nio.CharBuffer charBuffer29 = charBuffer27.duplicate();
        java.nio.CharBuffer charBuffer30 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer22, charBuffer29);
        java.nio.ByteBuffer byteBuffer31 = charset19.encode(charBuffer30);
        java.nio.Buffer buffer32 = byteBuffer31.rewind();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(buffer28);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(buffer32);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.withSecond((int) (byte) 0);
        int int20 = offsetDateTime19.getNano();
        java.time.Month month21 = offsetDateTime19.getMonth();
        boolean boolean22 = zonedDateTime11.equals((java.lang.Object) month21);
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime11.withFixedOffsetZone();
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime23.minusYears((long) 334);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 999999999 + "'", int20 == 999999999);
        org.junit.Assert.assertTrue("'" + month21 + "' != '" + java.time.Month.DECEMBER + "'", month21.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime25);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strList41.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList47 = strList41.subList((int) (short) 10, 722000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 722000000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSpliterator44);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = chronoField10.getDisplayName(locale11);
        java.lang.String str14 = locale11.getISO3Country();
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology16 = dateTimeFormatter15.getChronology();
        java.time.format.TextStyle textStyle17 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale18 = java.util.Locale.UK;
        java.lang.String str19 = locale18.getISO3Language();
        java.time.format.DecimalStyle decimalStyle20 = java.time.format.DecimalStyle.of(locale18);
        java.lang.String str21 = chronology16.getDisplayName(textStyle17, locale18);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset27);
        java.time.zone.ZoneRules zoneRules30 = zoneOffset27.getRules();
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset35);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition38 = zoneRules30.getTransition(localDateTime37);
        int int39 = localDateTime37.getSecond();
        java.time.Duration duration42 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int43 = duration42.getNano();
        java.time.Duration duration44 = duration42.abs();
        java.time.LocalDateTime localDateTime45 = localDateTime37.minus((java.time.temporal.TemporalAmount) duration44);
        java.time.LocalDateTime localDateTime47 = localDateTime45.plusMinutes((long) (short) 0);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale49 = java.util.Locale.UK;
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = chronoField48.getDisplayName(locale49);
        boolean boolean52 = localDateTime47.isSupported((java.time.temporal.TemporalField) chronoField48);
        java.util.Locale locale53 = java.util.Locale.PRC;
        java.lang.String str54 = chronoField48.getDisplayName(locale53);
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.lang.String str57 = locale56.getScript();
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.time.chrono.Chronology chronology60 = java.time.chrono.Chronology.ofLocale(locale58);
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale11, locale18, locale22, locale53, locale55, locale56, locale58 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62, filteringMode64);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList65);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField10.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GBR" + "'", str12, "GBR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Minute" + "'", str13, "Minute");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GBR" + "'", str14, "GBR");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + textStyle17 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle17.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertNotNull(decimalStyle20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISO" + "'", str21, "ISO");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNull(zoneOffsetTransition38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GBR" + "'", str50, "GBR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Minute" + "'", str51, "Minute");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u5206\u949f" + "'", str54, "\u5206\u949f");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode64.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(localeList66);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        builder0.accept((long) (short) 100);
        builder0.accept(539000000L);
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap7 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = zoneOffset11.getRules();
        java.time.zone.ZoneRules zoneRules14 = zoneIdMap7.getOrDefault((java.lang.Object) 1.0d, zoneRules13);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration15 = zoneIdMap7.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration16 = zoneIdMap7.keys();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.lang.String str20 = locale17.getDisplayScript(locale19);
        java.util.Locale.setDefault(locale19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset26);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset26.getRules();
        java.time.zone.ZoneRules zoneRules30 = zoneIdMap7.getOrDefault((java.lang.Object) locale19, zoneRules29);
        float[] floatArray33 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer34 = java.nio.FloatBuffer.wrap(floatArray33);
        java.nio.FloatBuffer floatBuffer35 = floatBuffer34.compact();
        boolean boolean36 = zoneRules30.equals((java.lang.Object) floatBuffer34);
        java.nio.FloatBuffer floatBuffer37 = floatBuffer3.put(floatBuffer34);
        int int38 = floatBuffer3.arrayOffset();
        boolean boolean39 = floatBuffer3.hasArray();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneRules14);
        org.junit.Assert.assertNotNull(zoneIdEnumeration15);
        org.junit.Assert.assertNotNull(zoneIdEnumeration16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GBR" + "'", str18, "GBR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertNotNull(floatBuffer35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatBuffer37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        boolean boolean77 = inetAddress72.isMCLinkLocal();
        java.io.File file80 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL81 = file80.toURL();
        java.io.File file84 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL85 = file84.toURL();
        boolean boolean86 = uRL81.sameFile(uRL85);
        java.lang.String str87 = uRL85.getQuery();
        java.lang.String str88 = uRL85.getHost();
        java.io.InputStream inputStream89 = uRL85.openStream();
        boolean boolean90 = inputStream89.markSupported();
        byte[] byteArray92 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer93 = java.nio.ByteBuffer.wrap(byteArray92);
        int int94 = inputStream89.read(byteArray92);
        boolean boolean95 = inetAddress72.equals((java.lang.Object) inputStream89);
        java.util.stream.Stream<java.net.InetAddress> inetAddressStream96 = java.util.stream.Stream.of(inetAddress72);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file80.toString(), "/tmp/United Kingdom3050306105060154084aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL81);
// flaky:         org.junit.Assert.assertEquals(uRL81.toString(), "file:/tmp/United Kingdom3050306105060154084aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file84.toString(), "/tmp/United Kingdom3616349497851585954aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL85);
// flaky:         org.junit.Assert.assertEquals(uRL85.toString(), "file:/tmp/United Kingdom3616349497851585954aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(inputStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(inetAddressStream96);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        java.lang.String[] strArray1 = null;
        int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("zho", strArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("+999999999-12-31", 5);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "12-31" + "'", str2, "12-31");
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime18 = java.nio.file.attribute.FileTime.from(instant15);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery19 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period20 = instant15.query(periodTemporalQuery19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        boolean boolean23 = instant15.isSupported(temporalUnit22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime31 = localDateTime25.minusNanos((long) (short) 100);
        boolean boolean32 = temporalUnit22.isSupportedBy((java.time.temporal.Temporal) localDateTime25);
        boolean boolean33 = temporalUnit22.isTimeBased();
        boolean boolean34 = zonedDateTime11.isSupported(temporalUnit22);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(fileTime18);
        org.junit.Assert.assertNotNull(periodTemporalQuery19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime27.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long30 = zonedDateTime27.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = zonedDateTime27.query(periodTemporalQuery31);
        boolean boolean33 = zonedDateTime11.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime27);
        java.lang.String str34 = zonedDateTime11.toString();
        java.time.LocalTime localTime35 = zonedDateTime11.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime37 = zonedDateTime11.withMonth((int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 65535");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 999999999L + "'", long30 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+999999999-12-31T23:59:59.999999999Z" + "'", str34, "+999999999-12-31T23:59:59.999999999Z");
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration1 = java.time.Duration.parse((java.lang.CharSequence) "java.nio.HeapIntBuffer[pos=0 lim=6 cap=6]");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text cannot be parsed to a Duration");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap31 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap34 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.zone.ZoneRules zoneRules40 = zoneOffset38.getRules();
        java.time.zone.ZoneRules zoneRules41 = zoneIdMap34.getOrDefault((java.lang.Object) 1.0d, zoneRules40);
        java.lang.String str42 = zoneRules40.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList43 = zoneRules40.getTransitions();
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        int int49 = localDateTime44.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime45);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        int int54 = localDateTime45.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime50);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        int int60 = localDateTime55.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime56);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        int int65 = localDateTime56.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        boolean boolean66 = localDateTime45.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        java.time.format.DateTimeFormatter dateTimeFormatter67 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str68 = localDateTime61.format(dateTimeFormatter67);
        java.time.ZoneOffset zoneOffset69 = zoneRules40.getOffset(localDateTime61);
        java.time.zone.ZoneRules zoneRules70 = zoneIdMap31.getOrDefault((java.lang.Object) '\n', zoneRules40);
        java.time.zone.ZoneRules zoneRules71 = zoneIdMap1.put((java.time.ZoneId) zoneOffset29, zoneRules40);
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet72 = zoneIdMap1.entrySet();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(zoneRules40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str42, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str68, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(zoneRules70);
        org.junit.Assert.assertNotNull(zoneRules71);
        org.junit.Assert.assertNotNull(zoneIdEntrySet72);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField0.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.function.LongPredicate longPredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream0.filter(longPredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        java.util.stream.Stream<java.lang.Integer> intStream4 = intStream2.skip(10L);
        java.util.stream.Stream<java.lang.Integer> intStream6 = intStream4.limit(68618241259163000L);
        java.util.function.BinaryOperator<java.lang.Integer> intBinaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.Integer> intOptional8 = intStream4.reduce(intBinaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder8);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt13 = intStream12.min();
        java.lang.String str14 = optionalInt13.toString();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        boolean boolean17 = optionalInt13.equals((java.lang.Object) localDate16);
        int int19 = optionalInt13.orElse(59);
        java.util.stream.IntStream intStream21 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt22 = intStream21.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = ofInt22.trySplit();
        java.util.stream.IntStream.Builder builder24 = java.util.stream.IntStream.builder();
        ofInt22.forEachRemaining((java.util.function.IntConsumer) builder24);
        optionalInt13.ifPresent((java.util.function.IntConsumer) builder24);
        boolean boolean27 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder24);
        java.util.Spliterator<java.lang.Integer> intSpliterator28 = ofInt2.trySplit();
        boolean boolean30 = ofInt2.hasCharacteristics(6);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(optionalInt13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalInt[10]" + "'", str14, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertNotNull(ofInt22);
        org.junit.Assert.assertNull(intSpliterator23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(intSpliterator28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            char char3 = charBuffer1.get(64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 64");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalTime localTime6 = java.time.LocalTime.now();
        java.time.LocalTime localTime8 = localTime6.plusHours(0L);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit10 = chronoField9.getBaseUnit();
        java.time.temporal.ValueRange valueRange11 = localTime8.range((java.time.temporal.TemporalField) chronoField9);
        boolean boolean12 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.from((java.time.temporal.TemporalAccessor) offsetDateTime3);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime3.minusYears((long) '\n');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField9.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit10 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit10.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant7 = instant5.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime8 = java.nio.file.attribute.FileTime.from(instant5);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = instant5.query(periodTemporalQuery9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit12 = chronoField11.getBaseUnit();
        boolean boolean13 = instant5.isSupported(temporalUnit12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime15.minusNanos((long) (short) 100);
        boolean boolean22 = temporalUnit12.isSupportedBy((java.time.temporal.Temporal) localDateTime15);
        boolean boolean23 = temporalUnit12.isTimeBased();
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = localDate1.plus((long) 495000000, temporalUnit12);
        java.time.LocalDate localDate25 = java.time.LocalDate.now();
        java.time.LocalDate localDate26 = java.time.LocalDate.MIN;
        boolean boolean27 = localDate25.isEqual((java.time.chrono.ChronoLocalDate) localDate26);
        int int28 = localDate26.getYear();
        java.time.LocalDate localDate29 = java.time.LocalDate.now();
        java.time.LocalDate localDate30 = java.time.LocalDate.MIN;
        boolean boolean31 = localDate29.isEqual((java.time.chrono.ChronoLocalDate) localDate30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.withSecond((int) (byte) 0);
        java.time.LocalDate localDate38 = offsetDateTime35.toLocalDate();
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean40 = offsetDateTime35.isSupported((java.time.temporal.TemporalField) chronoField39);
        boolean boolean41 = localDate29.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.Period period42 = java.time.Period.between(localDate26, localDate29);
        int int43 = localDate1.compareTo((java.time.chrono.ChronoLocalDate) localDate29);
        java.time.OffsetTime offsetTime44 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime46 = offsetTime44.withSecond(16);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int48 = offsetTime46.get((java.time.temporal.TemporalField) chronoField47);
        boolean boolean49 = localDate29.isSupported((java.time.temporal.TemporalField) chronoField47);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.LocalDate localDate52 = localDate29.with((java.time.temporal.TemporalField) chronoField50, 100L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField11.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit12 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit12.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-999999999) + "'", int28 == (-999999999));
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField39.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1000002021) + "'", int43 == (-1000002021));
        org.junit.Assert.assertNotNull(offsetTime44);
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField47.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 17 + "'", int48 == 17);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField50.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.stream.DoubleStream doubleStream4 = doubleStream1.limit(52177497285L);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = doubleStream1.sum();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strList83);
        boolean boolean86 = strList69.removeAll((java.util.Collection<java.lang.String>) strList85);
        boolean boolean87 = strList57.retainAll((java.util.Collection<java.lang.String>) strList85);
        java.lang.Object[] objArray88 = strList57.toArray();
        boolean boolean89 = strList41.addAll((java.util.Collection<java.lang.String>) strList57);
        java.lang.Object[] objArray90 = strList41.toArray();
        strList41.clear();
        strList41.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId13 = zonedDateTime11.getZone();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.withDayOfYear(131000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 131000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneId13);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        int int1 = isoEra0.getValue();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.ZonedDateTime zonedDateTime13 = offsetDateTime5.atZoneSameInstant((java.time.ZoneId) zoneOffset10);
        java.time.ZoneId zoneId14 = zonedDateTime13.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime15 = zonedDateTime13.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime27.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long30 = zonedDateTime27.getLong((java.time.temporal.TemporalField) chronoField29);
        long long31 = zonedDateTime13.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime13.minusSeconds((long) 999999999);
        java.time.ZonedDateTime zonedDateTime35 = zonedDateTime33.plusHours((-1L));
        java.time.Instant instant36 = zonedDateTime35.toInstant();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        int int38 = zonedDateTime35.get((java.time.temporal.TemporalField) chronoField37);
        java.time.temporal.ValueRange valueRange39 = chronoField37.range();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = isoEra0.get((java.time.temporal.TemporalField) chronoField37);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MicroOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 999999999L + "'", long30 == 999999999L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 999999999L + "'", long31 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField37.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 999999 + "'", int38 == 999999);
        org.junit.Assert.assertNotNull(valueRange39);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        java.time.Period period1 = java.time.Period.ofDays((int) '\000');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        java.util.Comparator<java.net.Proxy.Type> typeComparator0 = java.util.Comparator.reverseOrder();
        org.junit.Assert.assertNotNull(typeComparator0);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime13.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.apache.commons.lang3.CharUtils.toIntValue(':');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The character : is not in the range '0' - '9'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        int int9 = localDate7.getYear();
        java.lang.String str10 = localDate7.toString();
        java.time.chrono.ChronoPeriod chronoPeriod11 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate7);
        int int12 = localDate7.getYear();
        java.time.DayOfWeek dayOfWeek13 = localDate7.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-999999999) + "'", int9 == (-999999999));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-999999999-01-01" + "'", str10, "-999999999-01-01");
        org.junit.Assert.assertNotNull(chronoPeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-999999999) + "'", int12 == (-999999999));
        org.junit.Assert.assertTrue("'" + dayOfWeek13 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek13.equals(java.time.DayOfWeek.MONDAY));
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        java.util.Locale locale1 = new java.util.Locale("_MINUTE");
        org.junit.Assert.assertEquals(locale1.toString(), "_minute");
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        boolean boolean16 = fileChannel11.isOpen();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileChannel fileChannel18 = fileChannel11.truncate((long) 653000000);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\ufffd");
        double[] doubleArray6 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer7 = java.nio.DoubleBuffer.wrap(doubleArray6);
        printStream1.print((java.lang.Object) doubleArray6);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.println((double) 989000000);
        boolean boolean13 = printStream1.checkError();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter("ISO");
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer18 = charBuffer17.flip();
        java.nio.CharBuffer charBuffer19 = charBuffer17.duplicate();
        char[] charArray27 = new char[] { 'a', '#', '4', '#' };
        boolean boolean28 = org.apache.commons.lang3.StringUtils.containsAny("", charArray27);
        boolean boolean29 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray27);
        boolean boolean30 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray27);
        int int31 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer19, charArray27);
        printWriter15.print(charArray27);
        printStream1.println(charArray27);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        int int4 = charBuffer2.capacity();
        boolean boolean5 = charBuffer2.hasArray();
        java.nio.ByteBuffer byteBuffer6 = charset0.encode(charBuffer2);
        java.util.Set<java.lang.String> strSet7 = charset0.aliases();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        java.io.IOException iOException1 = new java.io.IOException(":");
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        java.io.File file1 = new java.io.File("GBR");
        java.io.File file3 = new java.io.File(file1, "5");
        java.nio.file.Path path4 = file1.toPath();
        int int5 = path4.getNameCount();
        java.nio.file.WatchService watchService6 = null;
        java.nio.file.WatchEvent.Kind[] kindArray8 = new java.nio.file.WatchEvent.Kind[0];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray9 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray8;
        java.nio.file.WatchEvent.Modifier modifier10 = null;
        java.nio.file.WatchEvent.Modifier[] modifierArray11 = new java.nio.file.WatchEvent.Modifier[] { modifier10 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey12 = path4.register(watchService6, wildcardKindArray9, modifierArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertEquals(file3.getParent(), "GBR");
        org.junit.Assert.assertEquals(file3.toString(), "GBR/5");
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(kindArray8);
        org.junit.Assert.assertNotNull(wildcardKindArray9);
        org.junit.Assert.assertNotNull(modifierArray11);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.with((java.time.temporal.TemporalField) chronoField6, (long) 31);
        int int9 = offsetDateTime8.getMinute();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset14);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit19 = chronoField18.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime20 = localDateTime16.minus((long) (-999999999), temporalUnit19);
        java.lang.String str21 = temporalUnit19.toString();
        boolean boolean22 = offsetDateTime8.isSupported(temporalUnit19);
        java.lang.String str23 = offsetDateTime8.toString();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime31 = offsetDateTime27.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset37);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit42 = chronoField41.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime43 = localDateTime39.minus((long) (-999999999), temporalUnit42);
        java.lang.String str44 = temporalUnit42.toString();
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime31.plus((long) (byte) 100, temporalUnit42);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.plusDays((long) 31);
        java.time.Instant instant49 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.Clock clock54 = java.time.Clock.fixed(instant49, (java.time.ZoneId) zoneOffset52);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset59);
        java.time.Clock clock62 = clock54.withZone((java.time.ZoneId) zoneOffset59);
        java.time.OffsetDateTime offsetDateTime63 = offsetDateTime45.withOffsetSameInstant(zoneOffset59);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        java.time.temporal.ValueRange valueRange66 = offsetDateTime63.range((java.time.temporal.TemporalField) chronoField64);
        int int67 = offsetDateTime63.getDayOfYear();
        boolean boolean68 = offsetDateTime8.isEqual(offsetDateTime63);
        java.time.LocalDateTime localDateTime69 = offsetDateTime8.toLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField18.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit19 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit19.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Weeks" + "'", str21, "Weeks");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+999999999-12-31T00:00:00.000031Z" + "'", str23, "+999999999-12-31T00:00:00.000031Z");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField41.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit42 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit42.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Weeks" + "'", str44, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(clock54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(clock62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField64.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 334 + "'", int67 == 334);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusYears((long) (short) -1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime7.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime18.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        boolean boolean28 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime29.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        boolean boolean39 = localDateTime29.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        boolean boolean40 = localDateTime23.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDate localDate41 = localDateTime23.toLocalDate();
        java.time.LocalDate localDate42 = java.time.LocalDate.now();
        java.time.LocalDate localDate43 = java.time.LocalDate.MIN;
        boolean boolean44 = localDate42.isEqual((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean46 = localDate43.isSupported((java.time.temporal.TemporalField) chronoField45);
        int int47 = localDate43.getDayOfYear();
        int int48 = localDate41.compareTo((java.time.chrono.ChronoLocalDate) localDate43);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.Clock clock55 = java.time.Clock.fixed(instant50, (java.time.ZoneId) zoneOffset53);
        java.time.LocalTime localTime56 = java.time.LocalTime.now(clock55);
        java.time.LocalTime localTime58 = localTime56.plusHours((long) 16384);
        java.time.LocalTime localTime60 = localTime56.minusNanos(0L);
        java.time.LocalDate localDate61 = java.time.LocalDate.now();
        java.time.LocalDate localDate62 = java.time.LocalDate.MIN;
        boolean boolean63 = localDate61.isEqual((java.time.chrono.ChronoLocalDate) localDate62);
        int int64 = localDate62.getYear();
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        java.time.temporal.Temporal temporal69 = localDate62.adjustInto((java.time.temporal.Temporal) localDateTime65);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.Clock clock74 = java.time.Clock.systemUTC();
        java.time.Instant instant75 = clock74.instant();
        java.time.ZoneId zoneId76 = clock74.getZone();
        java.time.ZonedDateTime zonedDateTime77 = java.time.ZonedDateTime.ofInstant(localDateTime65, zoneOffset72, zoneId76);
        java.time.OffsetDateTime offsetDateTime78 = java.time.OffsetDateTime.of(localDate43, localTime60, zoneOffset72);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.ofLocal(localDateTime0, (java.time.ZoneId) zoneOffset72, zoneOffset80);
        java.time.Instant instant83 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime84 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset86 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime87 = localDateTime84.atOffset(zoneOffset86);
        java.time.Clock clock88 = java.time.Clock.fixed(instant83, (java.time.ZoneId) zoneOffset86);
        java.time.LocalTime localTime89 = java.time.LocalTime.now(clock88);
        java.time.LocalTime localTime91 = localTime89.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField92 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean93 = localTime91.isSupported((java.time.temporal.TemporalField) chronoField92);
        boolean boolean94 = zonedDateTime81.isSupported((java.time.temporal.TemporalField) chronoField92);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField45.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1999999998 + "'", int48 == 1999999998);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-999999999) + "'", int64 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(temporal69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(clock74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(zoneId76);
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(zoneOffset86);
        org.junit.Assert.assertNotNull(offsetDateTime87);
        org.junit.Assert.assertNotNull(clock88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertTrue("'" + chronoField92 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField92.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime32 = localDateTime26.withHour(4);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime36.with((java.time.temporal.TemporalField) chronoField39, (long) 31);
        boolean boolean42 = localDateTime32.isSupported((java.time.temporal.TemporalField) chronoField39);
        long long43 = zonedDateTime17.getLong((java.time.temporal.TemporalField) chronoField39);
        java.time.LocalDate localDate44 = zonedDateTime17.toLocalDate();
        java.time.Duration duration47 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int48 = duration47.getNano();
        java.time.Duration duration49 = duration47.abs();
        java.time.Duration duration50 = duration49.abs();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate51 = localDate44.plus((java.time.temporal.TemporalAmount) duration49);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Seconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 86399999999L + "'", long43 == 86399999999L);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        java.net.InetAddress inetAddress13 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str14 = inetAddress13.getHostName();
        byte[] byteArray15 = inetAddress13.getAddress();
        java.net.InetAddress inetAddress16 = java.net.InetAddress.getByAddress("zh_CN", byteArray15);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.get(byteArray15);
        java.nio.ByteBuffer byteBuffer19 = byteBuffer17.putInt(64);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(inetAddress13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "localhost" + "'", str14, "localhost");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inetAddress16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        boolean boolean9 = path4.startsWith("/experiment/GBR/");
        java.io.File file11 = new java.io.File("GBR");
        boolean boolean13 = file11.setWritable(true);
        java.nio.file.Path path14 = file11.toPath();
        java.nio.file.Path path16 = path14.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption17 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption18 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray19 = new java.nio.file.LinkOption[] { linkOption17, linkOption18 };
        java.nio.file.Path path20 = path14.toRealPath(linkOptionArray19);
        java.nio.file.Path path21 = path4.resolveSibling(path14);
        java.io.File file23 = new java.io.File("GBR");
        boolean boolean25 = file23.setWritable(true);
        java.nio.file.Path path26 = file23.toPath();
        java.nio.file.Path path28 = path26.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI29 = path26.toUri();
        boolean boolean31 = path26.startsWith("/experiment/GBR/");
        java.nio.file.Path path32 = path4.resolveSibling(path26);
        java.nio.file.FileSystem fileSystem33 = path32.getFileSystem();
        java.lang.Iterable<java.nio.file.FileStore> fileStoreIterable34 = fileSystem33.getFileStores();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.PathMatcher pathMatcher36 = fileSystem33.getPathMatcher("+999999999-365");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertTrue("'" + linkOption17 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption17.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption18 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption18.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertNotNull(uRI29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertNotNull(fileSystem33);
        org.junit.Assert.assertNotNull(fileStoreIterable34);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        int int0 = java.util.Spliterator.CONCURRENT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4096 + "'", int0 == 4096);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.lang.String str3 = optionalInt2.toString();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate5 = localDateTime4.toLocalDate();
        boolean boolean6 = optionalInt2.equals((java.lang.Object) localDate5);
        java.time.LocalDate localDate8 = localDate5.minusDays(14L);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.LocalTime localTime16 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset13);
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.BCE;
        java.util.Set<java.lang.String> strSet18 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month19 = java.time.Month.OCTOBER;
        java.time.Month month21 = month19.plus(0L);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal33 = month21.adjustInto((java.time.temporal.Temporal) localDateTime23);
        boolean boolean34 = strSet18.equals((java.lang.Object) month21);
        java.security.ProtectionDomain[] protectionDomainArray35 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext36 = new java.security.AccessControlContext(protectionDomainArray35);
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery38 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period39 = localDate37.query(periodTemporalQuery38);
        boolean boolean40 = accessControlContext36.equals((java.lang.Object) periodTemporalQuery38);
        java.time.Period period41 = month21.query(periodTemporalQuery38);
        java.time.Period period42 = isoEra17.query(periodTemporalQuery38);
        java.time.Period period43 = localTime16.query(periodTemporalQuery38);
        java.time.Period period44 = localDate8.query(periodTemporalQuery38);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OptionalInt[10]" + "'", str3, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra17.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + month19 + "' != '" + java.time.Month.OCTOBER + "'", month19.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month21 + "' != '" + java.time.Month.OCTOBER + "'", month21.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(periodTemporalQuery38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime3 = java.time.LocalTime.of(4, 469000000, 64);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 469000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZoneId zoneId30 = zonedDateTime29.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap32 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap36 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.zone.ZoneRules zoneRules43 = zoneIdMap36.getOrDefault((java.lang.Object) 1.0d, zoneRules42);
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap32.put((java.time.ZoneId) zoneOffset34, zoneRules42);
        java.time.ZoneId[] zoneIdArray45 = new java.time.ZoneId[] { zoneOffset14, zoneId30, zoneOffset34 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet46 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet46, zoneIdArray45);
        java.lang.String[] strArray51 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray53 = org.apache.commons.lang3.StringUtils.stripAll(strArray51, "GBR");
        java.lang.String str54 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray53);
        boolean boolean55 = zoneIdSet46.remove((java.lang.Object) strArray53);
        boolean boolean56 = clock6.equals((java.lang.Object) zoneIdSet46);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strList68);
        java.util.Iterator<java.lang.String> strItor71 = strList68.iterator();
        int int72 = strList68.size();
        boolean boolean73 = zoneIdSet46.retainAll((java.util.Collection<java.lang.String>) strList68);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zoneId30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneIdArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Minute(null <no signer certificates>)" + "'", str54, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.io.File file17 = new java.io.File("GBR");
        boolean boolean19 = file17.setWritable(true);
        java.nio.file.Path path20 = file17.toPath();
        java.nio.file.Path path22 = path20.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption23 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption24 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption25 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray26 = new java.nio.file.OpenOption[] { linkOption23, linkOption24, linkOption25 };
        java.nio.channels.FileChannel fileChannel27 = java.nio.channels.FileChannel.open(path20, openOptionArray26);
        java.nio.channels.FileChannel fileChannel29 = fileChannel27.position((long) 'x');
        // The following exception was thrown during execution in test generation
        try {
            long long30 = fileChannel13.transferTo((long) 284000000, 52177497285L, (java.nio.channels.WritableByteChannel) fileChannel29);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertTrue("'" + linkOption23 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption23.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption24 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption24.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption25 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption25.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray26);
        org.junit.Assert.assertNotNull(fileChannel27);
        org.junit.Assert.assertNotNull(fileChannel29);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int4 = zoneOffset3.getTotalSeconds();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset3);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = offsetDateTime9.atZoneSameInstant((java.time.ZoneId) zoneOffset14);
        int int18 = zonedDateTime17.getDayOfMonth();
        int int19 = zonedDateTime17.getHour();
        java.time.Instant instant20 = zonedDateTime17.toInstant();
        java.time.temporal.Temporal temporal21 = zoneOffset3.adjustInto((java.time.temporal.Temporal) zonedDateTime17);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime22 = zonedDateTime17.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(temporal21);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime22);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.function.DoubleBinaryOperator doubleBinaryOperator2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble3 = doubleStream0.reduce(doubleBinaryOperator2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        java.nio.charset.Charset charset3 = charsetDecoder1.charset();
        java.nio.charset.CodingErrorAction codingErrorAction4 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder5 = charsetDecoder1.onUnmappableCharacter(codingErrorAction4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = charsetDecoder5.isCharsetDetected();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(codingErrorAction4);
        org.junit.Assert.assertNotNull(charsetDecoder5);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("ZoneRules[currentStandardOffset=Z]", (java.lang.Throwable) accessControlException2);
        java.util.Optional<java.lang.RuntimeException> runtimeExceptionOptional4 = java.util.Optional.of((java.lang.RuntimeException) accessControlException2);
        java.net.FileNameMap fileNameMap5 = java.net.URLConnection.getFileNameMap();
        java.net.URLConnection.setFileNameMap(fileNameMap5);
        java.lang.String str8 = fileNameMap5.getContentTypeFor("+999999999-12-31T23:59:59.999999999");
        boolean boolean9 = runtimeExceptionOptional4.equals((java.lang.Object) "+999999999-12-31T23:59:59.999999999");
        java.lang.RuntimeException runtimeException10 = runtimeExceptionOptional4.get();
        org.junit.Assert.assertNotNull(runtimeExceptionOptional4);
        org.junit.Assert.assertNotNull(fileNameMap5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(runtimeException10);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.parallel();
        java.util.stream.LongStream longStream4 = longStream3.parallel();
        boolean boolean5 = longStream3.isParallel();
        java.util.stream.LongStream longStream6 = longStream3.parallel();
        java.util.stream.LongStream longStream7 = longStream3.distinct();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream8 = longStream3.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        float float4 = charsetEncoder3.maxBytesPerChar();
        boolean boolean6 = charsetEncoder3.canEncode((java.lang.CharSequence) "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.nio.charset.CodingErrorAction codingErrorAction7 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetEncoder charsetEncoder8 = charsetEncoder3.onMalformedInput(codingErrorAction7);
        float float9 = charsetEncoder8.averageBytesPerChar();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(codingErrorAction7);
        org.junit.Assert.assertNotNull(charsetEncoder8);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery5 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period6 = instant1.query(periodTemporalQuery5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = instant1.isSupported(temporalUnit8);
        java.time.Instant instant11 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant13 = instant11.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.ZoneId zoneId20 = zonedDateTime19.getZone();
        java.time.Clock clock21 = java.time.Clock.fixed(instant1, zoneId20);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset26);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset26.getRules();
        java.time.OffsetDateTime offsetDateTime30 = instant1.atOffset(zoneOffset26);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant34 = instant32.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime35 = java.nio.file.attribute.FileTime.from(instant32);
        java.time.Instant instant37 = instant32.plusMillis((long) 10);
        boolean boolean38 = instant1.isAfter(instant32);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.zone.ZoneRules zoneRules49 = zoneOffset47.getRules();
        java.time.ZonedDateTime zonedDateTime50 = offsetDateTime42.atZoneSameInstant((java.time.ZoneId) zoneOffset47);
        int int51 = zonedDateTime50.getDayOfMonth();
        int int52 = zonedDateTime50.getHour();
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime50.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.OffsetDateTime offsetDateTime60 = offsetDateTime58.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        java.time.zone.ZoneRules zoneRules65 = zoneOffset63.getRules();
        java.time.ZonedDateTime zonedDateTime66 = offsetDateTime58.atZoneSameInstant((java.time.ZoneId) zoneOffset63);
        java.time.ZonedDateTime zonedDateTime67 = zonedDateTime66.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long69 = zonedDateTime66.getLong((java.time.temporal.TemporalField) chronoField68);
        long long70 = zonedDateTime54.getLong((java.time.temporal.TemporalField) chronoField68);
        int int71 = instant1.get((java.time.temporal.TemporalField) chronoField68);
        boolean boolean72 = chronoField68.isTimeBased();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(periodTemporalQuery5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(zoneRules65);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField68.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 999999999L + "'", long69 == 999999999L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 999999999L + "'", long70 == 999999999L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("1969-12-31T23:59:59.999Z", "zho");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        int int3 = offsetTime0.getMinute();
        java.time.OffsetTime offsetTime5 = offsetTime0.minusSeconds(6883333L);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.Clock clock12 = java.time.Clock.fixed(instant7, (java.time.ZoneId) zoneOffset10);
        java.time.LocalTime localTime13 = java.time.LocalTime.now(clock12);
        java.time.LocalTime localTime15 = localTime13.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean17 = localTime15.isSupported((java.time.temporal.TemporalField) chronoField16);
        long long18 = offsetTime0.getLong((java.time.temporal.TemporalField) chronoField16);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 18 + "'", int3 == 18);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(clock12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField16.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9L + "'", long18 == 9L);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        java.util.function.IntUnaryOperator intUnaryOperator1 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.iterate(23, intUnaryOperator1);
        java.util.function.IntUnaryOperator intUnaryOperator3 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator4 = intUnaryOperator1.andThen(intUnaryOperator3);
        org.junit.Assert.assertNotNull(intUnaryOperator1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intUnaryOperator3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Collection<java.time.zone.ZoneRules> zoneRulesCollection9 = zoneIdMap1.values();
        java.util.stream.LongStream longStream10 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream11 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream12 = java.util.stream.LongStream.concat(longStream10, longStream11);
        java.util.stream.LongStream longStream13 = longStream10.unordered();
        java.util.stream.LongStream longStream14 = longStream10.parallel();
        boolean boolean15 = zoneIdMap1.equals((java.lang.Object) longStream14);
        java.util.stream.LongStream longStream16 = longStream14.unordered();
        java.util.function.LongUnaryOperator longUnaryOperator17 = java.util.function.LongUnaryOperator.identity();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream18 = longStream16.map(longUnaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneRulesCollection9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(longUnaryOperator17);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream doubleStream1 = builder0.build();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sequential();
        java.util.function.DoubleToLongFunction doubleToLongFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = doubleStream2.mapToLong(doubleToLongFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        boolean boolean12 = file8.setWritable(true);
        java.net.URI uRI13 = file8.toURI();
        java.net.URI uRI14 = uRI6.relativize(uRI13);
        java.lang.String str15 = uRI6.getRawSchemeSpecificPart();
        java.io.File file17 = new java.io.File("GBR");
        boolean boolean19 = file17.setWritable(true);
        boolean boolean21 = file17.setWritable(true);
        java.net.URI uRI22 = file17.toURI();
        java.io.File file24 = new java.io.File("GBR");
        boolean boolean26 = file24.setWritable(true);
        java.nio.file.Path path27 = file24.toPath();
        java.nio.file.Path path29 = path27.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI30 = path27.toUri();
        java.net.URI uRI31 = uRI22.relativize(uRI30);
        int int32 = uRI6.compareTo(uRI31);
        java.lang.String str33 = uRI6.getRawUserInfo();
        java.lang.String str34 = uRI6.getSchemeSpecificPart();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(uRI14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/experiment/GBR/" + "'", str15, "/experiment/GBR/");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertNotNull(uRI30);
        org.junit.Assert.assertNotNull(uRI31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(str33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "/experiment/GBR/" + "'", str34, "/experiment/GBR/");
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\ufffd");
        double[] doubleArray6 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer7 = java.nio.DoubleBuffer.wrap(doubleArray6);
        printStream1.print((java.lang.Object) doubleArray6);
        printStream1.println((float) 43200);
        printStream1.write(920000000);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer7);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.time.ZoneId zoneId1 = dateTimeFormatter0.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(zoneId1);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.time.LocalTime localTime49 = java.time.LocalTime.NOON;
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate52 = localDateTime51.toLocalDate();
        java.time.LocalDateTime localDateTime54 = localDateTime51.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange55 = chronoField50.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime51);
        int int56 = localTime49.get((java.time.temporal.TemporalField) chronoField50);
        long long57 = zonedDateTime14.getLong((java.time.temporal.TemporalField) chronoField50);
        boolean boolean58 = chronoField50.isTimeBased();
        long long60 = chronoField50.checkValidValue((long) '\n');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField50.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(valueRange55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 11L + "'", long57 == 11L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.Period period5 = period1.plusYears((long) 33237);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoPeriod chronoPeriod7 = period5.multipliedBy(533000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: integer overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("3");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusNanos((-1L));
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit11 = chronoField10.getBaseUnit();
        java.time.Duration duration12 = temporalUnit11.getDuration();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime13 = localTime9.truncatedTo(temporalUnit11);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField10.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit11 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit11.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        java.util.Date date6 = new java.util.Date(722000000, (int) (byte) 1, 365, 0, 676000000, 399000000);
        java.lang.String str7 = date6.toLocaleString();
        org.junit.Assert.assertEquals(date6.toString(), "Fri Oct 07 21:34:08 UTC 137449149");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "137449149-10-7 21:34:08" + "'", str7, "137449149-10-7 21:34:08");
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.chrono.Chronology chronology20 = localDateTime0.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter21 = java.time.format.DateTimeFormatter.ISO_TIME;
        java.lang.String str22 = localDateTime0.format(dateTimeFormatter21);
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String str25 = locale24.getISO3Language();
        java.time.format.DecimalStyle decimalStyle26 = java.time.format.DecimalStyle.of(locale24);
        java.time.OffsetDateTime offsetDateTime27 = java.time.OffsetDateTime.now();
        boolean boolean28 = decimalStyle26.equals((java.lang.Object) offsetDateTime27);
        java.time.format.DecimalStyle decimalStyle30 = decimalStyle26.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle32 = decimalStyle30.withPositiveSign('\uffff');
        java.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter23.withDecimalStyle(decimalStyle32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.time.LocalDate localDate35 = java.time.LocalDate.now();
        java.time.LocalDate localDate36 = java.time.LocalDate.MIN;
        boolean boolean37 = localDate35.isEqual((java.time.chrono.ChronoLocalDate) localDate36);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.OffsetDateTime offsetDateTime43 = offsetDateTime41.withSecond((int) (byte) 0);
        java.time.LocalDate localDate44 = offsetDateTime41.toLocalDate();
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean46 = offsetDateTime41.isSupported((java.time.temporal.TemporalField) chronoField45);
        boolean boolean47 = localDate35.isSupported((java.time.temporal.TemporalField) chronoField45);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale49 = java.util.Locale.UK;
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = chronoField48.getDisplayName(locale49);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.OffsetDateTime offsetDateTime57 = offsetDateTime55.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.OffsetDateTime offsetDateTime63 = offsetDateTime61.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.zone.ZoneRules zoneRules68 = zoneOffset66.getRules();
        java.time.ZonedDateTime zonedDateTime69 = offsetDateTime61.atZoneSameInstant((java.time.ZoneId) zoneOffset66);
        int int70 = zonedDateTime69.getDayOfMonth();
        int int71 = zonedDateTime69.getHour();
        java.time.ZonedDateTime zonedDateTime73 = zonedDateTime69.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        java.time.OffsetDateTime offsetDateTime79 = offsetDateTime77.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset82 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime83 = localDateTime80.atOffset(zoneOffset82);
        java.time.zone.ZoneRules zoneRules84 = zoneOffset82.getRules();
        java.time.ZonedDateTime zonedDateTime85 = offsetDateTime77.atZoneSameInstant((java.time.ZoneId) zoneOffset82);
        java.time.ZonedDateTime zonedDateTime86 = zonedDateTime85.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField87 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long88 = zonedDateTime85.getLong((java.time.temporal.TemporalField) chronoField87);
        long long89 = zonedDateTime73.getLong((java.time.temporal.TemporalField) chronoField87);
        boolean boolean90 = offsetDateTime55.isSupported((java.time.temporal.TemporalField) chronoField87);
        java.time.temporal.ChronoField chronoField91 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.temporal.TemporalField[] temporalFieldArray92 = new java.time.temporal.TemporalField[] { chronoField34, chronoField45, chronoField48, chronoField87, chronoField91 };
        java.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter33.withResolverFields(temporalFieldArray92);
        java.time.format.DateTimeFormatter dateTimeFormatter94 = dateTimeFormatter21.withResolverFields(temporalFieldArray92);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "23:59:59.999999999" + "'", str22, "23:59:59.999999999");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "eng" + "'", str25, "eng");
        org.junit.Assert.assertNotNull(decimalStyle26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(decimalStyle30);
        org.junit.Assert.assertNotNull(decimalStyle32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField34.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField45.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GBR" + "'", str50, "GBR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Minute" + "'", str51, "Minute");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(zoneRules68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 31 + "'", int70 == 31);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 23 + "'", int71 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(zoneOffset82);
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertNotNull(zoneRules84);
        org.junit.Assert.assertNotNull(zonedDateTime85);
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertTrue("'" + chronoField87 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField87.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 999999999L + "'", long88 == 999999999L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 999999999L + "'", long89 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + chronoField91 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField91.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(temporalFieldArray92);
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
        org.junit.Assert.assertNotNull(dateTimeFormatter94);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalTime localTime8 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime10 = localTime8.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime11 = localDate1.atTime(localTime8);
        int int12 = localTime8.toSecondOfDay();
        java.time.chrono.IsoEra isoEra13 = java.time.chrono.IsoEra.CE;
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.EPOCH_DAY;
        boolean boolean15 = isoEra13.isSupported((java.time.temporal.TemporalField) chronoField14);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime17 = localTime8.with((java.time.temporal.TemporalField) chronoField14, 32052177L);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + isoEra13 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra13.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) charBuffer3);
        java.nio.CharBuffer charBuffer17 = charBuffer3.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray18 = charBuffer17.array();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charBuffer17);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        java.security.NoSuchProviderException noSuchProviderException1 = new java.security.NoSuchProviderException("\u53f0\u6e7e\u5730\u533a");
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.now(clock6);
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(clock6);
        java.time.Instant instant11 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.Clock clock16 = java.time.Clock.fixed(instant11, (java.time.ZoneId) zoneOffset14);
        java.time.LocalTime localTime17 = java.time.LocalTime.now(clock16);
        java.time.LocalTime localTime19 = localTime17.plusHours((long) 16384);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime20 = zonedDateTime9.with((java.time.temporal.TemporalAdjuster) localTime19);
        java.time.LocalDate localDate21 = zonedDateTime9.toLocalDate();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(clock16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate2 = localDateTime1.toLocalDate();
        java.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange5 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((long) (short) -1);
        int int12 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalTime localTime13 = java.time.LocalTime.NOON;
        java.time.LocalTime localTime14 = java.time.LocalTime.now();
        int int15 = localTime14.getNano();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long17 = localTime14.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime19 = localTime13.with((java.time.temporal.TemporalField) chronoField16, 0L);
        boolean boolean20 = localDateTime11.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalDateTime localDateTime22 = localDateTime11.minusDays((long) '\n');
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 677000000 + "'", int15 == 677000000);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField16.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 18L + "'", long17 == 18L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        java.time.LocalDate localDate2 = java.time.LocalDate.ofYearDay((int) (short) -1, (int) (byte) 1);
        java.time.chrono.Era era3 = localDate2.getEra();
        java.time.LocalDate localDate5 = localDate2.minusDays((long) 997000000);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + era3 + "' != '" + java.time.chrono.IsoEra.BCE + "'", era3.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.time.format.TextStyle textStyle4 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Language();
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale5);
        java.lang.String str8 = chronology3.getDisplayName(textStyle4, locale5);
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.BCE;
        int int10 = isoEra9.getValue();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap12 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.zone.ZoneRules zoneRules19 = zoneIdMap12.getOrDefault((java.lang.Object) 1.0d, zoneRules18);
        java.lang.String str20 = zoneRules18.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList21 = zoneRules18.getTransitions();
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        boolean boolean44 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.format.DateTimeFormatter dateTimeFormatter45 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str46 = localDateTime39.format(dateTimeFormatter45);
        java.time.ZoneOffset zoneOffset47 = zoneRules18.getOffset(localDateTime39);
        java.time.LocalDateTime localDateTime49 = localDateTime39.minusMinutes(13L);
        java.time.temporal.Temporal temporal50 = isoEra9.adjustInto((java.time.temporal.Temporal) localDateTime49);
        java.time.format.TextStyle textStyle51 = java.time.format.TextStyle.FULL_STANDALONE;
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = locale52.getISO3Country();
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.lang.String str55 = locale52.getDisplayScript(locale54);
        java.util.Locale.setDefault(locale54);
        java.lang.String str57 = isoEra9.getDisplayName(textStyle51, locale54);
        java.lang.String str58 = locale54.getDisplayScript();
        java.lang.String str59 = chronology1.getDisplayName(textStyle4, locale54);
        boolean boolean60 = textStyle4.isStandalone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + textStyle4 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle4.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra9.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str20, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str46, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(temporal50);
        org.junit.Assert.assertTrue("'" + textStyle51 + "' != '" + java.time.format.TextStyle.FULL_STANDALONE + "'", textStyle51.equals(java.time.format.TextStyle.FULL_STANDALONE));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GBR" + "'", str53, "GBR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISO" + "'", str59, "ISO");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.lang.String str3 = charset0.toString();
        boolean boolean4 = charset0.isRegistered();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate(10);
        java.nio.ByteBuffer byteBuffer7 = charset0.encode(charBuffer6);
        java.lang.String str8 = org.apache.commons.lang3.StringUtils.stripAccents((java.lang.CharSequence) charBuffer6);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer10 = charBuffer6.put("\u7f8e\u56fd");
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US-ASCII" + "'", str3, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        java.nio.Buffer buffer16 = charBuffer3.clear();
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer19 = charBuffer18.flip();
        java.nio.CharBuffer charBuffer20 = charBuffer18.duplicate();
        char[] charArray28 = new char[] { 'a', '#', '4', '#' };
        boolean boolean29 = org.apache.commons.lang3.StringUtils.containsAny("", charArray28);
        boolean boolean30 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray28);
        boolean boolean31 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray28);
        int int32 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer20, charArray28);
        java.nio.CharBuffer charBuffer33 = charBuffer3.append((java.lang.CharSequence) charBuffer20);
        boolean boolean34 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(buffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(buffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "12-31");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime12 = localDateTime6.withHour(4);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime14 = localDateTime12.withHour((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.time.format.TextStyle textStyle4 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Language();
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale5);
        java.lang.String str8 = chronology3.getDisplayName(textStyle4, locale5);
        java.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter1.withChronology(chronology3);
        java.time.chrono.ChronoLocalDate chronoLocalDate11 = chronology3.dateEpochDay(14L);
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + textStyle4 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle4.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(chronoLocalDate11);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        int int1 = localTime0.getNano();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long3 = localTime0.getLong((java.time.temporal.TemporalField) chronoField2);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.withSecond((int) (byte) 0);
        boolean boolean10 = chronoField2.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime14.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.ZonedDateTime zonedDateTime22 = offsetDateTime14.atZoneSameInstant((java.time.ZoneId) zoneOffset19);
        int int23 = zonedDateTime22.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime22.withDayOfYear(10);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.OffsetDateTime offsetDateTime31 = offsetDateTime29.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.zone.ZoneRules zoneRules36 = zoneOffset34.getRules();
        java.time.ZonedDateTime zonedDateTime37 = offsetDateTime29.atZoneSameInstant((java.time.ZoneId) zoneOffset34);
        java.time.ZoneId zoneId38 = zonedDateTime37.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime39 = zonedDateTime37.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.zone.ZoneRules zoneRules50 = zoneOffset48.getRules();
        java.time.ZonedDateTime zonedDateTime51 = offsetDateTime43.atZoneSameInstant((java.time.ZoneId) zoneOffset48);
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime51.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long54 = zonedDateTime51.getLong((java.time.temporal.TemporalField) chronoField53);
        long long55 = zonedDateTime37.getLong((java.time.temporal.TemporalField) chronoField53);
        int int56 = zonedDateTime25.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime37);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit58 = chronoField57.getBaseUnit();
        java.time.temporal.ValueRange valueRange59 = zonedDateTime25.range((java.time.temporal.TemporalField) chronoField57);
        java.time.LocalTime localTime60 = java.time.LocalTime.NOON;
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate63 = localDateTime62.toLocalDate();
        java.time.LocalDateTime localDateTime65 = localDateTime62.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange66 = chronoField61.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime62);
        int int67 = localTime60.get((java.time.temporal.TemporalField) chronoField61);
        long long68 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField61);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime70 = offsetDateTime7.with((java.time.temporal.TemporalField) chronoField61, 999999L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfAmPm (valid values 0 - 11): 999999");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 873000000 + "'", int1 == 873000000);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField2.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 18L + "'", long3 == 18L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertNotNull(zoneId38);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(zoneRules50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField53.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 999999999L + "'", long54 == 999999999L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 999999999L + "'", long55 == 999999999L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField57.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit58 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit58.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField61.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(valueRange66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 11L + "'", long68 == 11L);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", '\r');
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer4 = charBuffer3.flip();
        int int5 = charBuffer3.capacity();
        boolean boolean6 = charBuffer3.hasArray();
        boolean boolean7 = chronology1.equals((java.lang.Object) charBuffer3);
        java.util.List<java.time.chrono.Era> eraList8 = chronology1.eras();
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.BCE;
        int int10 = isoEra9.getValue();
        java.time.chrono.ChronoLocalDate chronoLocalDate13 = chronology1.dateYearDay((java.time.chrono.Era) isoEra9, 794000000, 59);
        java.lang.String str14 = chronology1.getId();
        java.time.chrono.IsoEra isoEra15 = java.time.chrono.IsoEra.BCE;
        int int16 = isoEra15.getValue();
        java.time.chrono.ChronoLocalDate chronoLocalDate19 = chronology1.dateYearDay((java.time.chrono.Era) isoEra15, (int) ':', 91);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(eraList8);
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra9.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISO" + "'", str14, "ISO");
        org.junit.Assert.assertTrue("'" + isoEra15 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra15.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate19);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(31, (-15888074));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 31 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("/experiment/GBR", 59);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("+999999999-12-31T23:59:59.999999999Z");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "+999999999-12-31T23:59:59.999999999Z" + "'", str1, "+999999999-12-31T23:59:59.999999999Z");
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign('a');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle4.withNegativeSign('+');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withDecimalSeparator('a');
        java.time.format.DecimalStyle decimalStyle10 = decimalStyle8.withZeroDigit('M');
        char char11 = decimalStyle8.getDecimalSeparator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(decimalStyle10);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'a' + "'", char11 == 'a');
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        java.time.Period period4 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period5 = period4.normalized();
        long long6 = period4.toTotalMonths();
        java.time.chrono.ChronoPeriod chronoPeriod8 = period4.multipliedBy((int) (short) 100);
        java.time.chrono.ChronoPeriod chronoPeriod9 = period1.plus((java.time.temporal.TemporalAmount) period4);
        java.time.chrono.ChronoPeriod chronoPeriod10 = period1.negated();
        java.time.Period period12 = period1.minusYears((long) 23);
        java.time.Duration duration15 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int16 = duration15.getNano();
        java.time.Duration duration17 = duration15.abs();
        java.time.Duration duration18 = duration17.abs();
        java.time.Duration duration20 = duration17.plusDays((long) 17488);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoPeriod chronoPeriod21 = period12.plus((java.time.temporal.TemporalAmount) duration20);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(chronoPeriod8);
        org.junit.Assert.assertNotNull(chronoPeriod9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.Instant instant5 = instant3.minusMillis((long) 399000000);
        java.util.Set<java.lang.String> strSet6 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month7 = java.time.Month.OCTOBER;
        java.time.Month month9 = month7.plus(0L);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        int int20 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.temporal.Temporal temporal21 = month9.adjustInto((java.time.temporal.Temporal) localDateTime11);
        boolean boolean22 = strSet6.equals((java.lang.Object) month9);
        java.security.ProtectionDomain[] protectionDomainArray23 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext24 = new java.security.AccessControlContext(protectionDomainArray23);
        java.time.LocalDate localDate25 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery26 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period27 = localDate25.query(periodTemporalQuery26);
        boolean boolean28 = accessControlContext24.equals((java.lang.Object) periodTemporalQuery26);
        java.time.Period period29 = month9.query(periodTemporalQuery26);
        java.time.Period period30 = instant5.query(periodTemporalQuery26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate32 = localDateTime31.toLocalDate();
        java.time.temporal.Temporal temporal33 = period30.subtractFrom((java.time.temporal.Temporal) localDateTime31);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int38 = zoneOffset37.getTotalSeconds();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset37);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.zone.ZoneRules zoneRules50 = zoneOffset48.getRules();
        java.time.ZonedDateTime zonedDateTime51 = offsetDateTime43.atZoneSameInstant((java.time.ZoneId) zoneOffset48);
        int int52 = zonedDateTime51.getDayOfMonth();
        int int53 = zonedDateTime51.getHour();
        java.time.Instant instant54 = zonedDateTime51.toInstant();
        java.time.temporal.Temporal temporal55 = zoneOffset37.adjustInto((java.time.temporal.Temporal) zonedDateTime51);
        java.time.OffsetDateTime offsetDateTime56 = java.time.OffsetDateTime.of(localDateTime31, zoneOffset37);
        java.lang.String str57 = zoneOffset37.toString();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.OCTOBER + "'", month7.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month9 + "' != '" + java.time.Month.OCTOBER + "'", month9.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(temporal21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodTemporalQuery26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(zoneRules50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 31 + "'", int52 == 31);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 23 + "'", int53 == 23);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(temporal55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Z" + "'", str57, "Z");
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream2.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream3.limit((-7981810L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: -7981810");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.plusNanos((long) (-7));
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime11.with((java.time.temporal.TemporalField) chronoField14, (long) 31);
        int int17 = offsetDateTime16.getMinute();
        int int18 = offsetDateTime5.compareTo(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        int int1 = isoEra0.getValue();
        int int2 = isoEra0.getValue();
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 495000000, (long) 277998031);
        long[] longArray3 = longStream2.toArray();
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.rangeClosed((int) '4', 997000000);
        java.util.stream.LongStream longStream7 = intStream6.asLongStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream8 = java.util.stream.LongStream.concat(longStream2, longStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        java.time.ZoneId zoneId0 = java.time.ZoneId.systemDefault();
        org.junit.Assert.assertNotNull(zoneId0);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset4.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset4.newEncoder();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder7.replaceWith(byteArray9);
        java.nio.charset.CodingErrorAction codingErrorAction12 = charsetEncoder11.unmappableCharacterAction();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charsetDecoder1.onUnmappableCharacter(codingErrorAction12);
        java.util.function.Predicate<java.util.function.DoubleConsumer> doubleConsumerPredicate14 = java.util.function.Predicate.isEqual((java.lang.Object) charsetDecoder13);
        boolean boolean15 = charsetDecoder13.isAutoDetecting();
        java.nio.charset.Charset charset16 = charsetDecoder13.charset();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset17 = charsetDecoder13.detectedCharset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(codingErrorAction12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(doubleConsumerPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset16);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        java.security.cert.CertificateEncodingException certificateEncodingException1 = new java.security.cert.CertificateEncodingException("java.security.cert.CertificateException: GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR");
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        long long18 = instant15.getEpochSecond();
        java.time.zone.ZoneRules zoneRules19 = zoneIdMap1.remove((java.lang.Object) long18);
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet20 = zoneIdMap1.entrySet();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertNull(zoneRules19);
        org.junit.Assert.assertNotNull(zoneIdEntrySet20);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
        java.time.temporal.TemporalUnit temporalUnit1 = chronoField0.getRangeUnit();
        java.lang.String str2 = chronoField0.toString();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR + "'", chronoField0.equals(java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit1 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit1.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AlignedDayOfWeekInYear" + "'", str2, "AlignedDayOfWeekInYear");
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration77 = networkInterface76.getInetAddresses();
        int int78 = networkInterface76.getIndex();
        boolean boolean79 = networkInterface76.isVirtual();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertNotNull(inetAddressEnumeration77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime21.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.temporal.ValueRange valueRange24 = zonedDateTime21.range((java.time.temporal.TemporalField) chronoField23);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        boolean boolean28 = temporalUnit27.isTimeBased();
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime21.minus(0L, temporalUnit27);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap31 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.zone.ZoneRules zoneRules37 = zoneOffset35.getRules();
        java.time.zone.ZoneRules zoneRules38 = zoneIdMap31.getOrDefault((java.lang.Object) 1.0d, zoneRules37);
        java.lang.String str39 = zoneRules37.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList40 = zoneRules37.getTransitions();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime41.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime42.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        int int57 = localDateTime52.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        int int62 = localDateTime53.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        boolean boolean63 = localDateTime42.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        java.time.format.DateTimeFormatter dateTimeFormatter64 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str65 = localDateTime58.format(dateTimeFormatter64);
        java.time.ZoneOffset zoneOffset66 = zoneRules37.getOffset(localDateTime58);
        java.time.LocalDateTime localDateTime68 = localDateTime58.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit71 = chronoField70.getBaseUnit();
        boolean boolean72 = temporalUnit71.isTimeBased();
        java.time.LocalDateTime localDateTime73 = localDateTime58.minus((long) 829000000, temporalUnit71);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate75 = localDateTime74.toLocalDate();
        java.time.LocalDateTime localDateTime77 = localDateTime74.plusWeeks(0L);
        java.time.Instant instant79 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant81 = instant79.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime82 = java.nio.file.attribute.FileTime.from(instant79);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery83 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period84 = instant79.query(periodTemporalQuery83);
        java.time.Period period85 = localDateTime74.query(periodTemporalQuery83);
        java.time.Period period86 = localDateTime58.query(periodTemporalQuery83);
        java.time.Period period87 = zonedDateTime21.query(periodTemporalQuery83);
        java.time.Period period88 = zoneOffset6.query(periodTemporalQuery83);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField23.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(valueRange24);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(zoneRules37);
        org.junit.Assert.assertNotNull(zoneRules38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str39, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str65, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField70.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit71 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit71.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(fileTime82);
        org.junit.Assert.assertNotNull(periodTemporalQuery83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period88);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant4 = instant2.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        java.time.zone.ZoneRules zoneRules9 = zoneOffset7.getRules();
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.ofInstant(instant2, (java.time.ZoneId) zoneOffset7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime14.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.ZonedDateTime zonedDateTime22 = offsetDateTime14.atZoneSameInstant((java.time.ZoneId) zoneOffset19);
        java.time.ZoneId zoneId23 = zonedDateTime22.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap25 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap29 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap29.getOrDefault((java.lang.Object) 1.0d, zoneRules35);
        java.time.zone.ZoneRules zoneRules37 = zoneIdMap25.put((java.time.ZoneId) zoneOffset27, zoneRules35);
        java.time.ZoneId[] zoneIdArray38 = new java.time.ZoneId[] { zoneOffset7, zoneId23, zoneOffset27 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet39 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet39, zoneIdArray38);
        java.lang.String[] strArray44 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray46 = org.apache.commons.lang3.StringUtils.stripAll(strArray44, "GBR");
        java.lang.String str47 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray46);
        boolean boolean48 = zoneIdSet39.remove((java.lang.Object) strArray46);
        java.lang.String[] strArray49 = org.apache.commons.lang3.StringUtils.stripAll(strArray46);
        java.lang.String[] strArray50 = java.util.Locale.getISOLanguages();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("1970-01-01", strArray49, strArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Search and Replace array lengths don't match: 3 vs 188");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNull(zoneRules37);
        org.junit.Assert.assertNotNull(zoneIdArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Minute(null <no signer certificates>)" + "'", str47, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        java.net.SocketException socketException1 = new java.net.SocketException("1 Jan 1970 00:00:32 GMT");
        java.security.PrivilegedActionException privilegedActionException2 = new java.security.PrivilegedActionException((java.lang.Exception) socketException1);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.OVERFLOW;
        boolean boolean1 = coderResult0.isMalformed();
        java.lang.String str2 = coderResult0.toString();
        boolean boolean3 = coderResult0.isError();
        boolean boolean4 = coderResult0.isError();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OVERFLOW" + "'", str2, "OVERFLOW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer15.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer19 = byteBuffer18.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer22 = byteBuffer21.asLongBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer21.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer25 = byteBuffer24.asDoubleBuffer();
        int int26 = doubleBuffer19.compareTo(doubleBuffer25);
        int int27 = doubleBuffer25.remaining();
        java.nio.DoubleBuffer doubleBuffer28 = doubleBuffer11.put(doubleBuffer25);
        java.nio.ByteOrder byteOrder29 = doubleBuffer28.order();
        double[] doubleArray35 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream36 = java.util.stream.DoubleStream.of(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer39 = doubleBuffer28.put(doubleArray35, 861000000, 227000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(doubleBuffer19);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(doubleBuffer25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(byteOrder29);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream36);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset12);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition15 = zoneRules7.getTransition(localDateTime14);
        int int16 = localDateTime14.getSecond();
        java.time.Duration duration19 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int20 = duration19.getNano();
        java.time.Duration duration21 = duration19.abs();
        java.time.LocalDateTime localDateTime22 = localDateTime14.minus((java.time.temporal.TemporalAmount) duration21);
        java.time.Duration duration24 = duration21.plusMillis(0L);
        boolean boolean25 = duration21.isNegative();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(zoneOffsetTransition15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.lang.Runnable runnable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream4 = doubleStream2.onClose(runnable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        long long7 = file1.length();
        java.io.File file8 = file1.getAbsoluteFile();
        boolean boolean10 = file1.setReadable(false);
        java.io.File file12 = new java.io.File("GBR");
        boolean boolean14 = file12.setExecutable(true);
        boolean boolean15 = file1.renameTo(file12);
        boolean boolean16 = file1.canExecute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4096L + "'", long7 == 4096L);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.Period period5 = period1.plusYears((long) 33237);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList6 = period1.getUnits();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file15 = new java.io.File("GBR");
        boolean boolean17 = file15.setWritable(true);
        java.nio.file.Path path18 = file15.toPath();
        java.nio.file.Path path20 = path18.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption21 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption22 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray23 = new java.nio.file.LinkOption[] { linkOption21, linkOption22 };
        java.nio.file.Path path24 = path18.toRealPath(linkOptionArray23);
        java.nio.channels.FileChannel fileChannel25 = java.nio.channels.FileChannel.open(path11, (java.nio.file.OpenOption[]) linkOptionArray23);
        java.nio.file.Path path26 = path11.getFileName();
        boolean boolean27 = period1.equals((java.lang.Object) path26);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(temporalUnitList6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNull("file15.getParent() == null", file15.getParent());
        org.junit.Assert.assertEquals(file15.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertTrue("'" + linkOption21 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption21.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption22 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption22.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray23);
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(fileChannel25);
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer11 = byteBuffer10.asDoubleBuffer();
        int int12 = doubleBuffer5.compareTo(doubleBuffer11);
        int int13 = doubleBuffer11.remaining();
        java.nio.DoubleBuffer doubleBuffer15 = doubleBuffer11.put((double) 31);
        java.nio.ByteOrder byteOrder16 = doubleBuffer11.order();
        double[] doubleArray21 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer22 = java.nio.DoubleBuffer.wrap(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer25 = doubleBuffer11.get(doubleArray21, 395000000, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(byteOrder16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer22);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime11.withDayOfYear(100);
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime11.withNano(28);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime18.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int4 = offsetTime2.get((java.time.temporal.TemporalField) chronoField3);
        java.time.LocalTime localTime5 = offsetTime2.toLocalTime();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap7 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = zoneOffset11.getRules();
        java.time.zone.ZoneRules zoneRules14 = zoneIdMap7.getOrDefault((java.lang.Object) 1.0d, zoneRules13);
        java.lang.String str15 = zoneRules13.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList16 = zoneRules13.getTransitions();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime18.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        int int33 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime29.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        boolean boolean39 = localDateTime18.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.format.DateTimeFormatter dateTimeFormatter40 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str41 = localDateTime34.format(dateTimeFormatter40);
        java.time.ZoneOffset zoneOffset42 = zoneRules13.getOffset(localDateTime34);
        java.time.Instant instant44 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.Clock clock49 = java.time.Clock.fixed(instant44, (java.time.ZoneId) zoneOffset47);
        java.time.LocalTime localTime50 = java.time.LocalTime.now(clock49);
        java.time.LocalTime localTime52 = localTime50.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean54 = localTime52.isSupported((java.time.temporal.TemporalField) chronoField53);
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField53.getBaseUnit();
        java.time.temporal.ValueRange valueRange56 = localDateTime34.range((java.time.temporal.TemporalField) chronoField53);
        boolean boolean57 = localTime5.isSupported((java.time.temporal.TemporalField) chronoField53);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18 + "'", int4 == 18);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneRules14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str15, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str41, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(clock49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField53.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(valueRange56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        java.lang.String str1 = org.apache.commons.lang3.CharUtils.unicodeEscaped('u');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\\u0075" + "'", str1, "\\u0075");
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        java.util.Optional<java.lang.Integer> intOptional3 = intStream2.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = intStream2.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intOptional3);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        java.io.File file3 = new java.io.File("GBR");
        boolean boolean5 = file3.setWritable(true);
        boolean boolean7 = file3.setWritable(true);
        java.lang.String str8 = file3.getPath();
        long long9 = file3.length();
        java.io.File file10 = file3.getAbsoluteFile();
        boolean boolean12 = file3.setReadable(false);
        java.io.File file13 = java.io.File.createTempFile("Chinese", "OptionalDouble.empty", file3);
        java.io.File file14 = file3.getCanonicalFile();
        java.io.File file15 = file3.getAbsoluteFile();
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GBR" + "'", str8, "GBR");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4096L + "'", long9 == 4096L);
        org.junit.Assert.assertNotNull(file10);
// flaky:         org.junit.Assert.assertEquals(file10.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "GBR");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "GBR/Chinese6831103890447338228OptionalDouble.empty");
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment/GBR");
        org.junit.Assert.assertNotNull(file15);
// flaky:         org.junit.Assert.assertEquals(file15.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/experiment/GBR");
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(399000000);
        long long2 = byteBuffer1.getLong();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.put((byte) -1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(byteBuffer4);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer23 = charBuffer22.flip();
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer26 = charBuffer25.flip();
        java.nio.CharBuffer charBuffer27 = charBuffer25.duplicate();
        char[] charArray35 = new char[] { 'a', '#', '4', '#' };
        boolean boolean36 = org.apache.commons.lang3.StringUtils.containsAny("", charArray35);
        boolean boolean37 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray35);
        boolean boolean38 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray35);
        int int39 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer27, charArray35);
        boolean boolean40 = charBuffer27.isDirect();
        java.nio.CharBuffer charBuffer41 = charBuffer22.append((java.lang.CharSequence) charBuffer27);
        java.nio.CharBuffer charBuffer42 = org.apache.commons.lang3.StringUtils.defaultIfEmpty(charBuffer6, charBuffer41);
        java.lang.CharSequence charSequence44 = null;
        char[] charArray50 = new char[] { '\r', '\r', ' ', 'a', '\uffff' };
        int int51 = org.apache.commons.lang3.StringUtils.indexOfAnyBut(charSequence44, charArray50);
        boolean boolean52 = org.apache.commons.lang3.StringUtils.containsAny("localhostish (United Kingdom)", charArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer53 = charBuffer41.put(charArray50);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertNotNull(charArray50);
// flaky:         org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "\r\r\uffff");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "\r\r\uffff");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[\r, \r\uffff]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        java.lang.String str5 = file1.getCanonicalPath();
        boolean boolean8 = file1.setWritable(false, true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/GBR" + "'", str5, "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        java.util.function.LongConsumer longConsumer4 = null;
        optionalLong3.ifPresent(longConsumer4);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        boolean boolean8 = duration6.equals((java.lang.Object) (short) 0);
        java.time.Duration duration9 = duration6.abs();
        java.time.Duration duration11 = duration9.plusMinutes((long) 'G');
        java.time.Duration duration13 = duration9.plusMinutes(1434414441700000L);
        boolean boolean14 = optionalLong3.equals((java.lang.Object) duration9);
        java.lang.String str15 = optionalLong3.toString();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OptionalLong.empty" + "'", str15, "OptionalLong.empty");
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer10 = charBuffer9.flip();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        char[] charArray19 = new char[] { 'a', '#', '4', '#' };
        boolean boolean20 = org.apache.commons.lang3.StringUtils.containsAny("", charArray19);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray19);
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray19);
        int int23 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer11, charArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer26 = byteBuffer25.asLongBuffer();
        java.nio.charset.CoderResult coderResult28 = charsetEncoder7.encode(charBuffer11, byteBuffer25, false);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = coderResult28.length();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertNotNull(coderResult28);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.time.LocalDateTime localDateTime36 = localDateTime6.minusWeeks((long) (short) 0);
        java.time.DayOfWeek dayOfWeek37 = localDateTime6.getDayOfWeek();
        java.time.LocalTime localTime38 = localDateTime6.toLocalTime();
        java.time.LocalTime localTime39 = localDateTime6.toLocalTime();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        int int45 = localDateTime40.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime41);
        java.time.LocalDate localDate46 = java.time.LocalDate.now();
        java.time.LocalDate localDate47 = java.time.LocalDate.MIN;
        boolean boolean48 = localDate46.isEqual((java.time.chrono.ChronoLocalDate) localDate47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean50 = localDate47.isSupported((java.time.temporal.TemporalField) chronoField49);
        int int51 = localDate47.getDayOfYear();
        java.time.LocalDate localDate52 = java.time.LocalDate.now();
        java.time.LocalDate localDate53 = java.time.LocalDate.MIN;
        boolean boolean54 = localDate52.isEqual((java.time.chrono.ChronoLocalDate) localDate53);
        int int55 = localDate53.getYear();
        java.lang.String str56 = localDate53.toString();
        java.time.chrono.ChronoPeriod chronoPeriod57 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate47, (java.time.chrono.ChronoLocalDate) localDate53);
        java.time.Period period58 = java.time.Period.from((java.time.temporal.TemporalAmount) chronoPeriod57);
        java.time.LocalDateTime localDateTime59 = localDateTime41.minus((java.time.temporal.TemporalAmount) chronoPeriod57);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime60 = localDateTime6.minus((java.time.temporal.TemporalAmount) chronoPeriod57);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + dayOfWeek37 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek37.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField49.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-999999999) + "'", int55 == (-999999999));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-999999999-01-01" + "'", str56, "-999999999-01-01");
        org.junit.Assert.assertNotNull(chronoPeriod57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime60);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit1 = chronoField0.getBaseUnit();
        boolean boolean2 = temporalUnit1.isTimeBased();
        java.time.Duration duration3 = temporalUnit1.getDuration();
        java.time.Duration duration4 = java.time.Duration.from((java.time.temporal.TemporalAmount) duration3);
        long long5 = duration3.toHours();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField0.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit1 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit1.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 168L + "'", long5 == 168L);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = java.time.LocalDate.parse((java.lang.CharSequence) "localhost/127.0.0.1");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'localhost/127.0.0.1' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        float float6 = floatBuffer3.get();
        float[] floatArray9 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.ByteOrder byteOrder11 = floatBuffer10.order();
        int int12 = floatBuffer3.compareTo(floatBuffer10);
        java.nio.ByteOrder byteOrder13 = floatBuffer10.order();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 16.0f + "'", float6 == 16.0f);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(byteOrder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(byteOrder13);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset17);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap21 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.zone.ZoneRules zoneRules28 = zoneIdMap21.getOrDefault((java.lang.Object) 1.0d, zoneRules27);
        java.lang.String str29 = zoneRules27.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList30 = zoneRules27.getTransitions();
        java.time.zone.ZoneRules zoneRules31 = zoneIdMap5.putIfAbsent((java.time.ZoneId) zoneOffset17, zoneRules27);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap38 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.zone.ZoneRules zoneRules45 = zoneIdMap38.getOrDefault((java.lang.Object) 1.0d, zoneRules44);
        java.lang.String str46 = zoneRules44.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList47 = zoneRules44.getTransitions();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        int int53 = localDateTime48.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime49);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime57 = localDateTime54.atOffset(zoneOffset56);
        int int58 = localDateTime49.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime63 = localDateTime60.atOffset(zoneOffset62);
        int int64 = localDateTime59.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime60);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        int int69 = localDateTime60.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        boolean boolean70 = localDateTime49.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        java.time.format.DateTimeFormatter dateTimeFormatter71 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str72 = localDateTime65.format(dateTimeFormatter71);
        java.time.ZoneOffset zoneOffset73 = zoneRules44.getOffset(localDateTime65);
        java.time.zone.ZoneRules zoneRules74 = zoneIdMap35.getOrDefault((java.lang.Object) '\n', zoneRules44);
        java.time.zone.ZoneRules zoneRules75 = zoneIdMap5.put((java.time.ZoneId) zoneOffset33, zoneRules44);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime76 = java.time.OffsetTime.of(4, (int) '\r', (int) (byte) -1, 999999999, zoneOffset33);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): -1");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str29, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList30);
        org.junit.Assert.assertNull(zoneRules31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str46, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str72, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(zoneRules74);
        org.junit.Assert.assertNotNull(zoneRules75);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        long long7 = file1.length();
        java.io.File file8 = file1.getAbsoluteFile();
        boolean boolean10 = file1.setReadable(false);
        java.io.File file12 = new java.io.File("GBR");
        boolean boolean14 = file12.setExecutable(true);
        boolean boolean15 = file1.renameTo(file12);
        boolean boolean16 = file12.setReadOnly();
        boolean boolean17 = file12.setReadOnly();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4096L + "'", long7 == 4096L);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Duration duration8 = java.time.Duration.ZERO;
        boolean boolean10 = duration8.equals((java.lang.Object) (short) 0);
        java.time.Duration duration11 = duration8.abs();
        java.time.LocalTime localTime12 = localTime7.plus((java.time.temporal.TemporalAmount) duration11);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.withSecond((int) (byte) 0);
        java.time.LocalDate localDate19 = offsetDateTime16.toLocalDate();
        java.time.Month month20 = localDate19.getMonth();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        int int33 = zonedDateTime32.getDayOfMonth();
        int int34 = zonedDateTime32.getHour();
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime32.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.ZonedDateTime zonedDateTime48 = offsetDateTime40.atZoneSameInstant((java.time.ZoneId) zoneOffset45);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime48.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long51 = zonedDateTime48.getLong((java.time.temporal.TemporalField) chronoField50);
        long long52 = zonedDateTime36.getLong((java.time.temporal.TemporalField) chronoField50);
        boolean boolean53 = month20.isSupported((java.time.temporal.TemporalField) chronoField50);
        java.time.temporal.TemporalUnit temporalUnit54 = chronoField50.getRangeUnit();
        int int55 = localTime7.get((java.time.temporal.TemporalField) chronoField50);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.DECEMBER + "'", month20.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 23 + "'", int34 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField50.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 999999999L + "'", long51 == 999999999L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 999999999L + "'", long52 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit54 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit54.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        java.util.OptionalInt optionalInt1 = java.util.OptionalInt.of(413000000);
        org.junit.Assert.assertNotNull(optionalInt1);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        java.security.NoSuchProviderException noSuchProviderException1 = new java.security.NoSuchProviderException("CHN");
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.net.Proxy proxy10 = java.net.Proxy.NO_PROXY;
        java.lang.String str11 = proxy10.toString();
        java.net.Proxy.Type type12 = proxy10.type();
        java.net.URLConnection uRLConnection13 = uRL7.openConnection(proxy10);
        java.io.InputStream inputStream14 = uRLConnection13.getInputStream();
        java.lang.String str15 = uRLConnection13.toString();
        uRLConnection13.setDefaultUseCaches(true);
        java.net.URL uRL18 = uRLConnection13.getURL();
        java.lang.String str19 = uRL18.getRef();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom3080087657121801343aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom3080087657121801343aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom3331338104146889714aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom3331338104146889714aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(proxy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DIRECT" + "'", str11, "DIRECT");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type12.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(uRLConnection13);
        org.junit.Assert.assertNotNull(inputStream14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom3331338104146889714aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str15, "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom3331338104146889714aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL18);
// flaky:         org.junit.Assert.assertEquals(uRL18.toString(), "file:/tmp/United Kingdom3331338104146889714aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.Instant instant10 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant12 = instant10.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime13 = java.nio.file.attribute.FileTime.from(instant10);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery14 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period15 = instant10.query(periodTemporalQuery14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = instant10.isSupported(temporalUnit17);
        java.time.Instant instant20 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant22 = instant20.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.ofInstant(instant20, (java.time.ZoneId) zoneOffset25);
        java.time.ZoneId zoneId29 = zonedDateTime28.getZone();
        java.time.Clock clock30 = java.time.Clock.fixed(instant10, zoneId29);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField31.getBaseUnit();
        java.time.Instant instant33 = instant10.truncatedTo(temporalUnit32);
        java.time.Duration duration34 = zoneRules7.getDaylightSavings(instant33);
        java.time.Instant instant36 = instant33.minusSeconds(399000L);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.ZonedDateTime zonedDateTime48 = offsetDateTime40.atZoneSameInstant((java.time.ZoneId) zoneOffset45);
        int int49 = zonedDateTime48.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime51 = zonedDateTime48.withDayOfYear(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap53 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.zone.ZoneRules zoneRules59 = zoneOffset57.getRules();
        java.time.zone.ZoneRules zoneRules60 = zoneIdMap53.getOrDefault((java.lang.Object) 1.0d, zoneRules59);
        java.lang.String str61 = zoneRules59.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList62 = zoneRules59.getTransitions();
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        int int68 = localDateTime63.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime64);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime72 = localDateTime69.atOffset(zoneOffset71);
        int int73 = localDateTime64.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime69);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime78 = localDateTime75.atOffset(zoneOffset77);
        int int79 = localDateTime74.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime75);
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset82 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime83 = localDateTime80.atOffset(zoneOffset82);
        int int84 = localDateTime75.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime80);
        boolean boolean85 = localDateTime64.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime80);
        java.time.format.DateTimeFormatter dateTimeFormatter86 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str87 = localDateTime80.format(dateTimeFormatter86);
        java.time.ZoneOffset zoneOffset88 = zoneRules59.getOffset(localDateTime80);
        java.time.LocalDateTime localDateTime90 = localDateTime80.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField92 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit93 = chronoField92.getBaseUnit();
        boolean boolean94 = temporalUnit93.isTimeBased();
        java.time.LocalDateTime localDateTime95 = localDateTime80.minus((long) 829000000, temporalUnit93);
        java.time.ZonedDateTime zonedDateTime96 = zonedDateTime51.with((java.time.temporal.TemporalAdjuster) localDateTime80);
        java.time.temporal.ChronoField chronoField97 = java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
        java.time.temporal.ValueRange valueRange98 = zonedDateTime51.range((java.time.temporal.TemporalField) chronoField97);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange99 = instant36.range((java.time.temporal.TemporalField) chronoField97);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedDayOfWeekInYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertNotNull(periodTemporalQuery14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField31.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 31 + "'", int49 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(zoneRules59);
        org.junit.Assert.assertNotNull(zoneRules60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str61, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(zoneOffset82);
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str87, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + chronoField92 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField92.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit93 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit93.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(zonedDateTime96);
        org.junit.Assert.assertTrue("'" + chronoField97 + "' != '" + java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR + "'", chronoField97.equals(java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));
        org.junit.Assert.assertNotNull(valueRange98);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = java.nio.charset.Charset.isSupported("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        java.net.URI uRI1 = java.net.URI.create("PT10S");
        java.io.File file3 = new java.io.File("GBR");
        boolean boolean5 = file3.setWritable(true);
        boolean boolean7 = file3.setWritable(true);
        java.net.URI uRI8 = file3.toURI();
        java.io.File file10 = new java.io.File("GBR");
        boolean boolean12 = file10.setWritable(true);
        java.nio.file.Path path13 = file10.toPath();
        java.nio.file.Path path15 = path13.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI16 = path13.toUri();
        java.net.URI uRI17 = uRI8.relativize(uRI16);
        java.net.URI uRI18 = uRI1.resolve(uRI8);
        java.net.URI uRI19 = uRI8.normalize();
        org.junit.Assert.assertNotNull(uRI1);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertNotNull(uRI17);
        org.junit.Assert.assertNotNull(uRI18);
        org.junit.Assert.assertNotNull(uRI19);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        java.io.File file3 = new java.io.File("GBR");
        boolean boolean4 = file3.mkdirs();
        java.nio.file.Path path5 = file3.toPath();
        java.lang.String str6 = file3.getPath();
        boolean boolean7 = file3.createNewFile();
        java.io.File file8 = java.io.File.createTempFile("English (United Kingdom)", "GBR", file3);
        java.io.File file10 = new java.io.File("GBR");
        boolean boolean12 = file10.setWritable(true);
        boolean boolean14 = file10.setWritable(true);
        java.lang.String str15 = file10.getPath();
        boolean boolean16 = file10.exists();
        java.lang.String str17 = file10.getName();
        boolean boolean18 = file10.setReadOnly();
        boolean boolean19 = file8.renameTo(file10);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "GBR");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "GBR/English (United Kingdom)4137889200666058603GBR");
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GBR" + "'", str15, "GBR");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GBR" + "'", str17, "GBR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        java.security.Permission permission2 = null;
        java.security.AccessControlException accessControlException3 = new java.security.AccessControlException("\\u0061", permission2);
        java.io.IOException iOException4 = new java.io.IOException("+277999999-12-31T23:59:59.999999999Z", (java.lang.Throwable) accessControlException3);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str1 = inetAddress0.getHostName();
        byte[] byteArray2 = inetAddress0.getAddress();
        java.lang.String str3 = inetAddress0.getHostName();
        boolean boolean4 = inetAddress0.isMCLinkLocal();
        boolean boolean5 = inetAddress0.isAnyLocalAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "localhost" + "'", str1, "localhost");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[127, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "localhost" + "'", str3, "localhost");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        java.time.OffsetTime offsetTime1 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime3 = offsetTime1.withSecond(16);
        java.time.OffsetTime offsetTime5 = offsetTime3.plusNanos(1434414441700000L);
        java.time.OffsetTime offsetTime6 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime8 = offsetTime6.withSecond(16);
        java.time.Instant instant10 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant12 = instant10.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime13 = java.nio.file.attribute.FileTime.from(instant10);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery14 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period15 = instant10.query(periodTemporalQuery14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = instant10.isSupported(temporalUnit17);
        boolean boolean19 = offsetTime6.isSupported(temporalUnit17);
        boolean boolean20 = offsetTime5.isEqual(offsetTime6);
        int int21 = offsetTime6.getNano();
        java.time.OffsetTime offsetTime23 = offsetTime6.withNano((int) '\000');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.withSecond((int) (byte) 0);
        java.time.LocalDate localDate30 = offsetDateTime27.toLocalDate();
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean32 = offsetDateTime27.isSupported((java.time.temporal.TemporalField) chronoField31);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int34 = offsetDateTime27.get((java.time.temporal.TemporalField) chronoField33);
        boolean boolean35 = offsetTime23.isSupported((java.time.temporal.TemporalField) chronoField33);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = isoEra0.getLong((java.time.temporal.TemporalField) chronoField33);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: ClockHourOfAmPm");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(offsetTime1);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(offsetTime8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertNotNull(periodTemporalQuery14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 925000000 + "'", int21 == 925000000);
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField31.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField33.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Set<java.time.ZoneId> zoneIdSet9 = zoneIdMap1.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList49);
        boolean boolean52 = strList35.removeAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean53 = strList23.retainAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean54 = zoneIdSet9.removeAll((java.util.Collection<java.lang.String>) strList23);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strList23.spliterator();
        java.util.stream.IntStream intStream57 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream58 = intStream57.boxed();
        boolean boolean59 = strList23.equals((java.lang.Object) intStream57);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream60 = intStream57.unordered();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdSet9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertNotNull(intStream57);
        org.junit.Assert.assertNotNull(intStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        java.net.SocketException socketException1 = new java.net.SocketException("\\u0020");
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset4.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset4.newEncoder();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder7.replaceWith(byteArray9);
        java.nio.charset.CodingErrorAction codingErrorAction12 = charsetEncoder11.unmappableCharacterAction();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charsetDecoder1.onUnmappableCharacter(codingErrorAction12);
        java.nio.charset.CodingErrorAction codingErrorAction14 = charsetDecoder13.unmappableCharacterAction();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(codingErrorAction12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(codingErrorAction14);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month1 = java.time.Month.OCTOBER;
        java.time.Month month3 = month1.plus(0L);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime8 = localDateTime5.atOffset(zoneOffset7);
        int int9 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        int int14 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.temporal.Temporal temporal15 = month3.adjustInto((java.time.temporal.Temporal) localDateTime5);
        boolean boolean16 = strSet0.equals((java.lang.Object) month3);
        int int18 = month3.length(true);
        int int20 = month3.length(false);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime32.withLaterOffsetAtOverlap();
        java.time.temporal.TemporalUnit temporalUnit34 = null;
        boolean boolean35 = zonedDateTime33.isSupported(temporalUnit34);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime39.withSecond((int) (byte) 0);
        java.time.LocalDate localDate42 = offsetDateTime39.toLocalDate();
        java.time.LocalDate localDate44 = localDate42.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime48.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.zone.ZoneRules zoneRules55 = zoneOffset53.getRules();
        java.time.ZonedDateTime zonedDateTime56 = offsetDateTime48.atZoneSameInstant((java.time.ZoneId) zoneOffset53);
        java.time.LocalTime localTime57 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset53);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.zone.ZoneRules zoneRules62 = zoneOffset60.getRules();
        java.time.ZonedDateTime zonedDateTime63 = java.time.ZonedDateTime.of(localDate42, localTime57, (java.time.ZoneId) zoneOffset60);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime64 = zonedDateTime33.withZoneSameInstant((java.time.ZoneId) zoneOffset60);
        java.time.LocalTime localTime65 = java.time.LocalTime.now();
        java.time.LocalTime localTime67 = localTime65.plusHours(0L);
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit69 = chronoField68.getBaseUnit();
        java.time.temporal.ValueRange valueRange70 = localTime67.range((java.time.temporal.TemporalField) chronoField68);
        boolean boolean71 = localDateChronoZonedDateTime64.isSupported((java.time.temporal.TemporalField) chronoField68);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange72 = month3.range((java.time.temporal.TemporalField) chronoField68);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MicroOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.OCTOBER + "'", month1.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.OCTOBER + "'", month3.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(temporal15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(zoneRules55);
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField68.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit69 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit69.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        boolean boolean7 = byteBuffer6.isDirect();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putDouble(371000000, (double) (-365243219162L));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime26.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime28 = zonedDateTime26.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime29 = zonedDateTime26.withEarlierOffsetAtOverlap();
        boolean boolean30 = zonedDateTime11.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime34.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.zone.ZoneRules zoneRules41 = zoneOffset39.getRules();
        java.time.ZonedDateTime zonedDateTime42 = offsetDateTime34.atZoneSameInstant((java.time.ZoneId) zoneOffset39);
        int int43 = zonedDateTime42.getDayOfMonth();
        boolean boolean44 = zonedDateTime26.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime42);
        java.time.Month month45 = zonedDateTime26.getMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime47 = zonedDateTime26.plusNanos(317L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(zoneRules41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 31 + "'", int43 == 31);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + month45 + "' != '" + java.time.Month.DECEMBER + "'", month45.equals(java.time.Month.DECEMBER));
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer15 = byteBuffer14.asLongBuffer();
        short short16 = byteBuffer14.getShort();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer14.putChar('G');
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer21 = byteBuffer20.asLongBuffer();
        short short22 = byteBuffer20.getShort();
        boolean boolean23 = byteBuffer14.equals((java.lang.Object) byteBuffer20);
        java.nio.ShortBuffer shortBuffer24 = byteBuffer20.asShortBuffer();
        int int25 = byteBuffer20.limit();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = fileChannel11.read(byteBuffer20, (long) 30);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(longBuffer21);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(shortBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond(32000L, (long) 64);
        java.time.Instant instant4 = instant2.minusNanos((-52177397210L));
        long long5 = instant4.toEpochMilli();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime9.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset19);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit24 = chronoField23.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime25 = localDateTime21.minus((long) (-999999999), temporalUnit24);
        java.lang.String str26 = temporalUnit24.toString();
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime13.plus((long) (byte) 100, temporalUnit24);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.plusDays((long) 31);
        java.time.Instant instant31 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.Clock clock36 = java.time.Clock.fixed(instant31, (java.time.ZoneId) zoneOffset34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset41);
        java.time.Clock clock44 = clock36.withZone((java.time.ZoneId) zoneOffset41);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime27.withOffsetSameInstant(zoneOffset41);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = offsetDateTime45.range((java.time.temporal.TemporalField) chronoField46);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = instant4.get((java.time.temporal.TemporalField) chronoField46);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32052177L + "'", long5 == 32052177L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField23.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit24 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit24.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Weeks" + "'", str26, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(clock36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(clock44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        java.time.Period period0 = java.time.Period.ZERO;
        boolean boolean1 = period0.isNegative();
        java.time.Period period3 = period0.minusMonths((long) 1);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList4 = period3.getUnits();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(temporalUnitList4);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        java.nio.charset.Charset charset3 = charsetDecoder1.charset();
        java.nio.charset.CodingErrorAction codingErrorAction4 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder5 = charsetDecoder1.onUnmappableCharacter(codingErrorAction4);
        java.nio.charset.CharsetDecoder charsetDecoder6 = charsetDecoder5.reset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(codingErrorAction4);
        org.junit.Assert.assertNotNull(charsetDecoder5);
        org.junit.Assert.assertNotNull(charsetDecoder6);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer4 = charBuffer3.flip();
        int int5 = charBuffer3.capacity();
        boolean boolean6 = charBuffer3.hasArray();
        boolean boolean7 = chronology1.equals((java.lang.Object) charBuffer3);
        java.util.List<java.time.chrono.Era> eraList8 = chronology1.eras();
        java.util.List<java.time.chrono.Era> eraList9 = chronology1.eras();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(eraList8);
        org.junit.Assert.assertNotNull(eraList9);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        java.time.LocalDate localDate1 = java.time.LocalDate.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.MIN;
        boolean boolean3 = localDate1.isEqual((java.time.chrono.ChronoLocalDate) localDate2);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean5 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField4);
        int int6 = localDate2.getDayOfYear();
        java.time.LocalDate localDate8 = localDate2.withYear((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset14);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit19 = chronoField18.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime20 = localDateTime16.minus((long) (-999999999), temporalUnit19);
        java.lang.String str21 = temporalUnit19.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate22 = localDate8.plus((long) 125000000, temporalUnit19);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration23 = java.time.Duration.of(2L, temporalUnit19);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField4.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField18.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit19 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit19.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Weeks" + "'", str21, "Weeks");
        org.junit.Assert.assertNotNull(chronoLocalDate22);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        long long6 = java.util.Date.UTC(14, 636000010, 920000000, (int) (short) 100, 365, 999999);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1752004716335499000L + "'", long6 == 1752004716335499000L);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("file:///experiment/GBR/", 0, ':');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "file:///experiment/GBR/" + "'", str3, "file:///experiment/GBR/");
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime3.minusMinutes((long) 100);
        java.time.OffsetTime offsetTime12 = offsetDateTime3.toOffsetTime();
        java.time.Instant instant14 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant16 = instant14.minusNanos((long) 'a');
        long long17 = instant14.getEpochSecond();
        java.time.Instant instant19 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.Clock clock24 = java.time.Clock.fixed(instant19, (java.time.ZoneId) zoneOffset22);
        java.time.OffsetDateTime offsetDateTime25 = instant14.atOffset(zoneOffset22);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.plusSeconds((long) 371000000);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime25.plusYears((long) 284000000);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.OffsetDateTime offsetDateTime35 = offsetDateTime33.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime33.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset43);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit48 = chronoField47.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime49 = localDateTime45.minus((long) (-999999999), temporalUnit48);
        java.lang.String str50 = temporalUnit48.toString();
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime37.plus((long) (byte) 100, temporalUnit48);
        java.time.OffsetDateTime offsetDateTime53 = offsetDateTime51.plusDays((long) 31);
        java.time.Instant instant55 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.Clock clock60 = java.time.Clock.fixed(instant55, (java.time.ZoneId) zoneOffset58);
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset65);
        java.time.Clock clock68 = clock60.withZone((java.time.ZoneId) zoneOffset65);
        java.time.OffsetDateTime offsetDateTime69 = offsetDateTime51.withOffsetSameInstant(zoneOffset65);
        java.time.Instant instant71 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime75 = localDateTime72.atOffset(zoneOffset74);
        java.time.Clock clock76 = java.time.Clock.fixed(instant71, (java.time.ZoneId) zoneOffset74);
        java.time.LocalTime localTime77 = java.time.LocalTime.now(clock76);
        java.time.OffsetDateTime offsetDateTime78 = java.time.OffsetDateTime.now(clock76);
        int int79 = offsetDateTime78.getSecond();
        int int80 = offsetDateTime69.compareTo(offsetDateTime78);
        boolean boolean81 = offsetDateTime25.isBefore(offsetDateTime69);
        int int82 = offsetDateTime25.getHour();
        boolean boolean83 = offsetDateTime3.isAfter(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetTime12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(clock24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField47.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit48 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit48.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Weeks" + "'", str50, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(clock60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(clock68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(clock76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 32 + "'", int79 == 32);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 277998031 + "'", int80 == 277998031);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }
}

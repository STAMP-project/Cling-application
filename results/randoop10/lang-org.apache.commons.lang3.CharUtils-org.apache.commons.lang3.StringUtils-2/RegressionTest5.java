import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        double[] doubleArray4 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer5 = java.nio.DoubleBuffer.wrap(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer7 = doubleBuffer6.asReadOnlyBuffer();
        java.io.PrintStream printStream9 = new java.io.PrintStream("\ufffd");
        double[] doubleArray14 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer15 = java.nio.DoubleBuffer.wrap(doubleArray14);
        printStream9.print((java.lang.Object) doubleArray14);
        java.nio.DoubleBuffer doubleBuffer17 = java.nio.DoubleBuffer.wrap(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer18 = doubleBuffer7.put(doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(doubleBuffer17);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        char[] charArray15 = new char[] { 'a', '#', '4', '#' };
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsAny("", charArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray15);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray15);
        int int19 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer7, charArray15);
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray15);
        printWriter1.println(charArray15);
        char[] charArray29 = new char[] { '#', '\n', '\uffff', '\n', '\uffff', '-' };
        printWriter1.println(charArray29);
        printWriter1.close();
        printWriter1.println((double) (-52177397210L));
        printWriter1.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter("P0D");
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter("ISO");
        printWriter38.print(385000000);
        java.nio.CharBuffer charBuffer42 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer43 = charBuffer42.flip();
        java.nio.CharBuffer charBuffer44 = charBuffer42.duplicate();
        char[] charArray52 = new char[] { 'a', '#', '4', '#' };
        boolean boolean53 = org.apache.commons.lang3.StringUtils.containsAny("", charArray52);
        boolean boolean54 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray52);
        boolean boolean55 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray52);
        int int56 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer44, charArray52);
        java.nio.CharBuffer charBuffer57 = java.nio.CharBuffer.wrap(charArray52);
        java.nio.CharBuffer charBuffer58 = java.nio.CharBuffer.wrap(charArray52);
        printWriter38.println(charArray52);
        char[] charArray66 = new char[] { '#', '\n', '\uffff', '\n', '\uffff', '-' };
        printWriter38.println(charArray66);
        printWriter36.write(charArray66);
        printWriter1.print(charArray66);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#\n\uffff\n\uffff-");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#\n\uffff\n\uffff-");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, \n\uffff, \n\uffff, -]");
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertNotNull(buffer43);
        org.junit.Assert.assertNotNull(charBuffer44);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(charBuffer57);
        org.junit.Assert.assertNotNull(charBuffer58);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "#\n\uffff\n\uffff-");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "#\n\uffff\n\uffff-");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[#, \n\uffff, \n\uffff, -]");
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) -1);
        int int2 = parsePosition1.getErrorIndex();
        java.lang.String str3 = parsePosition1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str3, "java.text.ParsePosition[index=-1,errorIndex=-1]");
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer2.compact();
        java.nio.ShortBuffer shortBuffer5 = shortBuffer3.put((short) (byte) 0);
        java.nio.ShortBuffer shortBuffer6 = shortBuffer5.asReadOnlyBuffer();
        short short8 = shortBuffer5.get(0);
        java.nio.ShortBuffer shortBuffer9 = shortBuffer5.slice();
        boolean boolean10 = shortBuffer5.isDirect();
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(shortBuffer6);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        java.time.Period period1 = java.time.Period.ofMonths((int) 'u');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime5.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset15);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime21 = localDateTime17.minus((long) (-999999999), temporalUnit20);
        java.lang.String str22 = temporalUnit20.toString();
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime9.plus((long) (byte) 100, temporalUnit20);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.plusDays((long) 31);
        java.time.Instant instant27 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.Clock clock32 = java.time.Clock.fixed(instant27, (java.time.ZoneId) zoneOffset30);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset37);
        java.time.Clock clock40 = clock32.withZone((java.time.ZoneId) zoneOffset37);
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime23.withOffsetSameInstant(zoneOffset37);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.ValueRange valueRange43 = offsetDateTime23.range((java.time.temporal.TemporalField) chronoField42);
        java.time.Instant instant46 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant48 = instant46.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime49 = java.nio.file.attribute.FileTime.from(instant46);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery50 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period51 = instant46.query(periodTemporalQuery50);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit53 = chronoField52.getBaseUnit();
        boolean boolean54 = instant46.isSupported(temporalUnit53);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        int int60 = localDateTime55.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime56);
        java.time.LocalDateTime localDateTime62 = localDateTime56.minusNanos((long) (short) 100);
        boolean boolean63 = temporalUnit53.isSupportedBy((java.time.temporal.Temporal) localDateTime56);
        java.time.OffsetDateTime offsetDateTime64 = offsetDateTime23.plus((long) 29, temporalUnit53);
        // The following exception was thrown during execution in test generation
        try {
            long long65 = period1.get(temporalUnit53);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField19.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Weeks" + "'", str22, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(clock32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(clock40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(valueRange43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(periodTemporalQuery50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField52.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit53 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit53.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(offsetDateTime64);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        java.net.URISyntaxException uRISyntaxException2 = new java.net.URISyntaxException("/tmp/United Kingdom1613207169082904107aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "_MINUTE");
        int int3 = uRISyntaxException2.getIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long2 = timeUnit0.toNanos((long) 1024);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1024L + "'", long2 == 1024L);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        java.util.Hashtable<java.nio.channels.AsynchronousCloseException, java.security.InvalidKeyException> asynchronousCloseExceptionMap0 = new java.util.Hashtable<java.nio.channels.AsynchronousCloseException, java.security.InvalidKeyException>();
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        char[] charArray15 = new char[] { 'a', '#', '4', '#' };
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsAny("", charArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray15);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray15);
        int int19 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer7, charArray15);
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray15);
        printWriter1.println(charArray15);
        char[] charArray29 = new char[] { '#', '\n', '\uffff', '\n', '\uffff', '-' };
        printWriter1.println(charArray29);
        printWriter1.println((long) 4096);
        java.util.Locale locale33 = java.util.Locale.UK;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.lang.String str36 = locale33.getDisplayScript(locale35);
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet38 = locale35.getExtensionKeys();
        java.lang.String[] strArray42 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("ZoneRules[currentStandardOffset=Z]", '/');
        java.io.PrintWriter printWriter43 = printWriter1.printf(locale35, "-999999999-01-01", (java.lang.Object[]) strArray42);
        char[] charArray51 = new char[] { 'a', '#', '4', '#' };
        boolean boolean52 = org.apache.commons.lang3.StringUtils.containsAny("", charArray51);
        boolean boolean53 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray51);
        boolean boolean54 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray51);
        printWriter1.write(charArray51);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#\n\uffff\n\uffff-");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#\n\uffff\n\uffff-");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, \n\uffff, \n\uffff, -]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GBR" + "'", str34, "GBR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        java.lang.String str5 = file1.getCanonicalPath();
        boolean boolean8 = file1.setReadable(true, true);
        boolean boolean11 = file1.setReadable(true, true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/GBR" + "'", str5, "/experiment/GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("java.nio.HeapShortBufferR[pos=64 lim=64 cap=64]", "java.nio.HeapShortBufferR[pos=64 lim=64 cap=64]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.Period period24 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period25 = period24.normalized();
        long long26 = period24.toTotalMonths();
        java.time.Period period28 = period24.minusMonths((long) 256);
        java.time.LocalDateTime localDateTime29 = localDateTime22.plus((java.time.temporal.TemporalAmount) period24);
        java.time.OffsetTime offsetTime30 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime32 = offsetTime30.withSecond(16);
        java.time.OffsetTime offsetTime34 = offsetTime32.plusNanos(1434414441700000L);
        java.time.OffsetTime offsetTime35 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime37 = offsetTime35.withSecond(16);
        java.time.Instant instant39 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant41 = instant39.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime42 = java.nio.file.attribute.FileTime.from(instant39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery43 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period44 = instant39.query(periodTemporalQuery43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit46 = chronoField45.getBaseUnit();
        boolean boolean47 = instant39.isSupported(temporalUnit46);
        boolean boolean48 = offsetTime35.isSupported(temporalUnit46);
        boolean boolean49 = offsetTime34.isEqual(offsetTime35);
        int int50 = offsetTime35.getNano();
        java.time.OffsetTime offsetTime52 = offsetTime35.withNano((int) '\000');
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime56.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        java.time.zone.ZoneRules zoneRules63 = zoneOffset61.getRules();
        java.time.ZonedDateTime zonedDateTime64 = offsetDateTime56.atZoneSameInstant((java.time.ZoneId) zoneOffset61);
        int int65 = zonedDateTime64.getDayOfMonth();
        int int66 = zonedDateTime64.getHour();
        java.time.ZonedDateTime zonedDateTime68 = zonedDateTime64.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime72 = localDateTime69.atOffset(zoneOffset71);
        java.time.OffsetDateTime offsetDateTime74 = offsetDateTime72.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime78 = localDateTime75.atOffset(zoneOffset77);
        java.time.zone.ZoneRules zoneRules79 = zoneOffset77.getRules();
        java.time.ZonedDateTime zonedDateTime80 = offsetDateTime72.atZoneSameInstant((java.time.ZoneId) zoneOffset77);
        java.time.ZonedDateTime zonedDateTime81 = zonedDateTime80.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField82 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long83 = zonedDateTime80.getLong((java.time.temporal.TemporalField) chronoField82);
        long long84 = zonedDateTime68.getLong((java.time.temporal.TemporalField) chronoField82);
        java.time.temporal.TemporalUnit temporalUnit85 = chronoField82.getRangeUnit();
        boolean boolean86 = temporalUnit85.isDateBased();
        boolean boolean87 = offsetTime35.isSupported(temporalUnit85);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = offsetDateTime7.until((java.time.temporal.Temporal) localDateTime29, temporalUnit85);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetDateTime from TemporalAccessor: +999999999-12-24T23:59:59.999999999 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(offsetTime32);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertNotNull(offsetTime35);
        org.junit.Assert.assertNotNull(offsetTime37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(fileTime42);
        org.junit.Assert.assertNotNull(periodTemporalQuery43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField45.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit46 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit46.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 425000000 + "'", int50 == 425000000);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 31 + "'", int65 == 31);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 23 + "'", int66 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertNotNull(zoneRules79);
        org.junit.Assert.assertNotNull(zonedDateTime80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertTrue("'" + chronoField82 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField82.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 999999999L + "'", long83 == 999999999L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 999999999L + "'", long84 == 999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit85 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit85.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("Eng");
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = chronoField9.getDisplayName(locale10);
        java.lang.String str13 = locale5.getDisplayCountry(locale10);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale5);
        java.util.Locale locale15 = builder14.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder14.setVariant("file:/tmp/United Kingdom2266976126535835110aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: file:/tmp/United Kingdom2266976126535835110aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GBR" + "'", str11, "GBR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Minute" + "'", str12, "Minute");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United Kingdom" + "'", str13, "United Kingdom");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(10000);
        org.junit.Assert.assertNotNull(longBuffer1);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt5 = intStream4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator6 = ofInt5.trySplit();
        java.util.stream.IntStream.Builder builder7 = java.util.stream.IntStream.builder();
        ofInt5.forEachRemaining((java.util.function.IntConsumer) builder7);
        boolean boolean9 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder7);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(ofInt5);
        org.junit.Assert.assertNull(intSpliterator6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        java.nio.IntBuffer intBuffer12 = intBuffer11.asReadOnlyBuffer();
        java.lang.String str13 = intBuffer12.toString();
        int int14 = intBuffer12.get();
        java.time.OffsetDateTime offsetDateTime15 = java.time.OffsetDateTime.MAX;
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime15.minusDays((long) 10);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.withMinute(10);
        boolean boolean26 = offsetDateTime15.isBefore(offsetDateTime25);
        boolean boolean27 = intBuffer12.equals((java.lang.Object) boolean26);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.nio.ByteBufferAsIntBufferRB[pos=0 lim=7 cap=7]" + "'", str13, "java.nio.ByteBufferAsIntBufferRB[pos=0 lim=7 cap=7]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer2.compact();
        java.nio.ShortBuffer shortBuffer5 = shortBuffer2.put((short) -1);
        java.nio.ShortBuffer shortBuffer6 = shortBuffer2.compact();
        java.nio.ShortBuffer shortBuffer9 = shortBuffer2.put(15, (short) -1);
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(shortBuffer6);
        org.junit.Assert.assertNotNull(shortBuffer9);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer3 = charBuffer1.put("1970-01-01");
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        java.nio.CharBuffer charBuffer11 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer12 = charBuffer11.flip();
        java.nio.CharBuffer charBuffer13 = charBuffer11.duplicate();
        char[] charArray21 = new char[] { 'a', '#', '4', '#' };
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsAny("", charArray21);
        boolean boolean23 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray21);
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray21);
        int int25 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer13, charArray21);
        java.nio.Buffer buffer26 = charBuffer13.clear();
        java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer29 = charBuffer28.flip();
        java.nio.CharBuffer charBuffer30 = charBuffer28.duplicate();
        char[] charArray38 = new char[] { 'a', '#', '4', '#' };
        boolean boolean39 = org.apache.commons.lang3.StringUtils.containsAny("", charArray38);
        boolean boolean40 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray38);
        boolean boolean41 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray38);
        int int42 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer30, charArray38);
        java.nio.CharBuffer charBuffer43 = charBuffer13.append((java.lang.CharSequence) charBuffer30);
        java.nio.CharBuffer charBuffer44 = charBuffer1.put(charBuffer43);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(buffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(buffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertNotNull(charBuffer44);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.Clock clock13 = java.time.Clock.systemUTC();
        java.time.Instant instant14 = clock13.instant();
        java.time.ZoneId zoneId15 = clock13.getZone();
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.ofInstant(localDateTime4, zoneOffset11, zoneId15);
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime16.minusYears((long) 360);
        java.time.DayOfWeek dayOfWeek19 = java.time.DayOfWeek.WEDNESDAY;
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.minusSeconds((long) (byte) 0);
        java.time.temporal.Temporal temporal26 = dayOfWeek19.adjustInto((java.time.temporal.Temporal) offsetDateTime23);
        java.lang.Object obj27 = null;
        boolean boolean28 = offsetDateTime23.equals(obj27);
        java.time.OffsetTime offsetTime29 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime31 = offsetTime29.withSecond(16);
        java.time.OffsetTime offsetTime33 = offsetTime31.plusNanos(1434414441700000L);
        java.time.OffsetTime offsetTime34 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime36 = offsetTime34.withSecond(16);
        java.time.Instant instant38 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant40 = instant38.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime41 = java.nio.file.attribute.FileTime.from(instant38);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery42 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period43 = instant38.query(periodTemporalQuery42);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit45 = chronoField44.getBaseUnit();
        boolean boolean46 = instant38.isSupported(temporalUnit45);
        boolean boolean47 = offsetTime34.isSupported(temporalUnit45);
        boolean boolean48 = offsetTime33.isEqual(offsetTime34);
        int int49 = offsetTime34.getNano();
        java.time.OffsetTime offsetTime51 = offsetTime34.withNano((int) '\000');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.OffsetDateTime offsetDateTime57 = offsetDateTime55.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.zone.ZoneRules zoneRules62 = zoneOffset60.getRules();
        java.time.ZonedDateTime zonedDateTime63 = offsetDateTime55.atZoneSameInstant((java.time.ZoneId) zoneOffset60);
        int int64 = zonedDateTime63.getDayOfMonth();
        int int65 = zonedDateTime63.getHour();
        java.time.ZonedDateTime zonedDateTime67 = zonedDateTime63.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        java.time.OffsetDateTime offsetDateTime73 = offsetDateTime71.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        java.time.zone.ZoneRules zoneRules78 = zoneOffset76.getRules();
        java.time.ZonedDateTime zonedDateTime79 = offsetDateTime71.atZoneSameInstant((java.time.ZoneId) zoneOffset76);
        java.time.ZonedDateTime zonedDateTime80 = zonedDateTime79.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField81 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long82 = zonedDateTime79.getLong((java.time.temporal.TemporalField) chronoField81);
        long long83 = zonedDateTime67.getLong((java.time.temporal.TemporalField) chronoField81);
        java.time.temporal.TemporalUnit temporalUnit84 = chronoField81.getRangeUnit();
        boolean boolean85 = temporalUnit84.isDateBased();
        boolean boolean86 = offsetTime34.isSupported(temporalUnit84);
        long long87 = zonedDateTime18.until((java.time.temporal.Temporal) offsetDateTime23, temporalUnit84);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertTrue("'" + dayOfWeek19 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek19.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(temporal26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(offsetTime29);
        org.junit.Assert.assertNotNull(offsetTime31);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(fileTime41);
        org.junit.Assert.assertNotNull(periodTemporalQuery42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField44.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit45 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit45.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 420000000 + "'", int49 == 420000000);
        org.junit.Assert.assertNotNull(offsetTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(zoneRules62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 31 + "'", int64 == 31);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 23 + "'", int65 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(zoneRules78);
        org.junit.Assert.assertNotNull(zonedDateTime79);
        org.junit.Assert.assertNotNull(zonedDateTime80);
        org.junit.Assert.assertTrue("'" + chronoField81 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField81.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 999999999L + "'", long82 == 999999999L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 999999999L + "'", long83 == 999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit84 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit84.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 11360476800L + "'", long87 == 11360476800L);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        java.net.URLStreamHandler uRLStreamHandler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = new java.net.URL("\u4e0b\u5348\u65f6\u5206\u79d2", "iso8601", 812000000, "0", uRLStreamHandler4);
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ??11?59?59?");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strList11.removeAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList11.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = strList11.set(227000000, "\\u0023");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 227000000, Size: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSpliterator29);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        java.util.Comparator<java.time.OffsetTime> offsetTimeComparator0 = java.util.Comparator.reverseOrder();
        org.junit.Assert.assertNotNull(offsetTimeComparator0);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusDays((long) 5);
        long long8 = offsetDateTime5.toEpochSecond();
        int int9 = offsetDateTime5.getHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 31556889832780740L + "'", long8 == 31556889832780740L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        boolean boolean3 = byteBuffer1.hasArray();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        boolean boolean8 = charBuffer5.hasArray();
        boolean boolean9 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) charBuffer5);
        java.nio.ByteOrder byteOrder10 = charBuffer5.order();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer1.order(byteOrder10);
        java.nio.LongBuffer longBuffer12 = byteBuffer11.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray13 = longBuffer12.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteOrder10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(longBuffer12);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        java.time.LocalTime localTime11 = localTime9.plusHours((long) 4096);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime13 = localTime11.withHour(256);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 256");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        boolean boolean7 = duration1.isNegative();
        java.time.Duration duration9 = duration1.minusMinutes((long) (byte) 100);
        java.time.Duration duration12 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int13 = duration12.getNano();
        java.time.Duration duration14 = duration12.abs();
        java.time.Duration duration16 = duration12.minusMinutes((long) 385000000);
        java.time.Duration duration18 = duration12.minusMinutes((long) 12);
        java.time.Duration duration19 = duration9.plus(duration18);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.plusDays((long) (-7));
        java.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(364740218880L);
        int int5 = localDateTime4.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 33 + "'", int5 == 33);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology6 = dateTimeFormatter5.getChronology();
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer9 = charBuffer8.flip();
        int int10 = charBuffer8.capacity();
        boolean boolean11 = charBuffer8.hasArray();
        boolean boolean12 = chronology6.equals((java.lang.Object) charBuffer8);
        char[] charArray16 = new char[] { '#', 'M', '\r' };
        int int17 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) charBuffer8, charArray16);
        java.nio.CharBuffer charBuffer18 = charBuffer1.put(charBuffer8);
        // The following exception was thrown during execution in test generation
        try {
            char char20 = charBuffer1.charAt(457000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(buffer9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#M\r");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#M\r");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, M, \r]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(charBuffer18);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId13 = zonedDateTime11.getZone();
        int int14 = zonedDateTime11.getHour();
        java.time.Month month15 = zonedDateTime11.getMonth();
        java.time.DayOfWeek dayOfWeek16 = zonedDateTime11.getDayOfWeek();
        java.time.temporal.TemporalField temporalField17 = null;
        boolean boolean18 = dayOfWeek16.isSupported(temporalField17);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.DECEMBER + "'", month15.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + dayOfWeek16 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek16.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.time.LocalDateTime localDateTime36 = localDateTime6.minusWeeks((long) (short) 0);
        java.time.DayOfWeek dayOfWeek37 = localDateTime6.getDayOfWeek();
        java.time.LocalTime localTime38 = localDateTime6.toLocalTime();
        java.time.LocalTime localTime39 = localDateTime6.toLocalTime();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime49.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset54.getRules();
        java.time.ZonedDateTime zonedDateTime57 = offsetDateTime49.atZoneSameInstant((java.time.ZoneId) zoneOffset54);
        int int58 = zonedDateTime57.getDayOfMonth();
        int int59 = zonedDateTime57.getHour();
        java.time.ZonedDateTime zonedDateTime61 = zonedDateTime57.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.OffsetDateTime offsetDateTime67 = offsetDateTime65.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        java.time.zone.ZoneRules zoneRules72 = zoneOffset70.getRules();
        java.time.ZonedDateTime zonedDateTime73 = offsetDateTime65.atZoneSameInstant((java.time.ZoneId) zoneOffset70);
        java.time.ZonedDateTime zonedDateTime74 = zonedDateTime73.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long76 = zonedDateTime73.getLong((java.time.temporal.TemporalField) chronoField75);
        long long77 = zonedDateTime61.getLong((java.time.temporal.TemporalField) chronoField75);
        boolean boolean78 = offsetDateTime43.isSupported((java.time.temporal.TemporalField) chronoField75);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime80 = localDateTime6.with((java.time.temporal.TemporalField) chronoField75, 6199234509587828384L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for NanoOfSecond (valid values 0 - 999999999): 6199234509587828384");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + dayOfWeek37 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek37.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 31 + "'", int58 == 31);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 23 + "'", int59 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(zoneRules72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField75.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 999999999L + "'", long76 == 999999999L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 999999999L + "'", long77 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer1.asReadOnlyBuffer();
        java.nio.ShortBuffer shortBuffer4 = shortBuffer3.duplicate();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap6 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap6.getOrDefault((java.lang.Object) 1.0d, zoneRules12);
        java.lang.String str14 = zoneRules12.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList15 = zoneRules12.getTransitions();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime28.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        boolean boolean38 = localDateTime17.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str40 = localDateTime33.format(dateTimeFormatter39);
        java.time.ZoneOffset zoneOffset41 = zoneRules12.getOffset(localDateTime33);
        java.time.LocalDateTime localDateTime43 = localDateTime33.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit46 = chronoField45.getBaseUnit();
        boolean boolean47 = temporalUnit46.isTimeBased();
        java.time.LocalDateTime localDateTime48 = localDateTime33.minus((long) 829000000, temporalUnit46);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        int int54 = localDateTime49.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime50);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        int int59 = localDateTime50.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        int int65 = localDateTime60.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime61);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        int int70 = localDateTime61.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime66);
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime75 = localDateTime72.atOffset(zoneOffset74);
        int int76 = localDateTime71.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime72);
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset79 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime80 = localDateTime77.atOffset(zoneOffset79);
        int int81 = localDateTime72.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime77);
        boolean boolean82 = localDateTime61.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime77);
        java.time.temporal.Temporal temporal83 = localDateTime55.adjustInto((java.time.temporal.Temporal) localDateTime61);
        java.lang.String str84 = localDateTime55.toString();
        java.time.LocalDateTime localDateTime85 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate86 = localDateTime85.toLocalDate();
        java.time.LocalDateTime localDateTime88 = localDateTime85.plusWeeks(0L);
        int int89 = localDateTime55.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime88);
        int int90 = localDateTime48.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime88);
        boolean boolean91 = shortBuffer4.equals((java.lang.Object) int90);
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str14, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str40, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField45.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit46 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit46.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zoneOffset79);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(temporal83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str84, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-15888074) + "'", int90 == (-15888074));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("OptionalLong[316000000]", "java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        java.util.Date date3 = new java.util.Date(23, 59, 12);
        int int4 = date3.getMonth();
        org.junit.Assert.assertEquals(date3.toString(), "Mon Dec 12 00:00:00 UTC 1927");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap16 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.zone.ZoneRules zoneRules22 = zoneOffset20.getRules();
        java.time.zone.ZoneRules zoneRules23 = zoneIdMap16.getOrDefault((java.lang.Object) 1.0d, zoneRules22);
        java.lang.String str24 = zoneRules22.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList25 = zoneRules22.getTransitions();
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        int int36 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        int int42 = localDateTime37.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        int int47 = localDateTime38.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        boolean boolean48 = localDateTime27.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        java.time.format.DateTimeFormatter dateTimeFormatter49 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str50 = localDateTime43.format(dateTimeFormatter49);
        java.time.ZoneOffset zoneOffset51 = zoneRules22.getOffset(localDateTime43);
        java.time.LocalDateTime localDateTime53 = localDateTime43.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit56 = chronoField55.getBaseUnit();
        boolean boolean57 = temporalUnit56.isTimeBased();
        java.time.LocalDateTime localDateTime58 = localDateTime43.minus((long) 829000000, temporalUnit56);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime14.with((java.time.temporal.TemporalAdjuster) localDateTime43);
        int int60 = zonedDateTime14.getYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str24, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str50, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField55.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit56 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit56.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 999999999 + "'", int60 == 999999999);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.Period period5 = period1.minusMonths((long) 256);
        long long6 = period1.toTotalMonths();
        java.time.Period period8 = period1.plusMonths((long) 1024);
        int int9 = period8.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-7) + "'", int9 == (-7));
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiControl(':');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.withDayOfYear((int) '+');
        java.time.format.DateTimeFormatter dateTimeFormatter9 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology10 = dateTimeFormatter9.getChronology();
        java.time.format.TextStyle textStyle11 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = locale12.getISO3Language();
        java.time.format.DecimalStyle decimalStyle14 = java.time.format.DecimalStyle.of(locale12);
        java.lang.String str15 = chronology10.getDisplayName(textStyle11, locale12);
        java.time.OffsetTime offsetTime16 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime18 = offsetTime16.withSecond(16);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int20 = offsetTime18.get((java.time.temporal.TemporalField) chronoField19);
        java.time.temporal.ValueRange valueRange21 = chronology10.range(chronoField19);
        boolean boolean22 = offsetDateTime8.isSupported((java.time.temporal.TemporalField) chronoField19);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime8.withMinute(0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.plusMinutes((long) 755000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000001434");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + textStyle11 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle11.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(decimalStyle14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISO" + "'", str15, "ISO");
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField19.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 18 + "'", int20 == 18);
        org.junit.Assert.assertNotNull(valueRange21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(offsetDateTime24);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.now(clock6);
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.now(clock6);
        java.time.chrono.Chronology chronology10 = zonedDateTime9.getChronology();
        java.time.chrono.ChronoLocalDate chronoLocalDate12 = chronology10.dateEpochDay((long) 395000000);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronoLocalDate12);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant52 = instant50.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime53 = java.nio.file.attribute.FileTime.from(instant50);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = instant50.query(periodTemporalQuery54);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        boolean boolean58 = instant50.isSupported(temporalUnit57);
        java.time.Instant instant60 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant62 = instant60.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.zone.ZoneRules zoneRules67 = zoneOffset65.getRules();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.ofInstant(instant60, (java.time.ZoneId) zoneOffset65);
        java.time.ZoneId zoneId69 = zonedDateTime68.getZone();
        java.time.Clock clock70 = java.time.Clock.fixed(instant50, zoneId69);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime14.with((java.time.temporal.TemporalAdjuster) instant50);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime75 = localDateTime72.atOffset(zoneOffset74);
        java.time.OffsetDateTime offsetDateTime77 = offsetDateTime75.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime81 = localDateTime78.atOffset(zoneOffset80);
        java.time.zone.ZoneRules zoneRules82 = zoneOffset80.getRules();
        java.time.ZonedDateTime zonedDateTime83 = offsetDateTime75.atZoneSameInstant((java.time.ZoneId) zoneOffset80);
        java.time.ZoneId zoneId84 = zonedDateTime83.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime85 = zonedDateTime14.withZoneSameInstant(zoneId84);
        java.time.ZonedDateTime zonedDateTime87 = zonedDateTime14.minusSeconds(14L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(fileTime53);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(zoneRules82);
        org.junit.Assert.assertNotNull(zonedDateTime83);
        org.junit.Assert.assertNotNull(zoneId84);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime85);
        org.junit.Assert.assertNotNull(zonedDateTime87);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Instant instant1 = clock0.instant();
        java.time.ZoneId zoneId2 = clock0.getZone();
        java.time.LocalDate localDate3 = java.time.LocalDate.now(clock0);
        java.time.LocalDate localDate4 = java.time.LocalDate.now();
        java.time.LocalDate localDate5 = java.time.LocalDate.MIN;
        boolean boolean6 = localDate4.isEqual((java.time.chrono.ChronoLocalDate) localDate5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean8 = localDate5.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.LocalDate localDate10 = localDate5.plusWeeks((long) 10);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        int int39 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        boolean boolean44 = localDateTime34.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        boolean boolean45 = localDateTime28.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.LocalDate localDate46 = localDateTime28.toLocalDate();
        java.time.LocalDate localDate47 = java.time.LocalDate.now();
        java.time.LocalDate localDate48 = java.time.LocalDate.MIN;
        boolean boolean49 = localDate47.isEqual((java.time.chrono.ChronoLocalDate) localDate48);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean51 = localDate48.isSupported((java.time.temporal.TemporalField) chronoField50);
        int int52 = localDate48.getDayOfYear();
        int int53 = localDate46.compareTo((java.time.chrono.ChronoLocalDate) localDate48);
        java.time.LocalDate localDate55 = localDate46.minusYears(32000L);
        java.time.LocalDate localDate57 = localDate46.minusWeeks((long) (short) 1);
        boolean boolean58 = localDate10.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        boolean boolean59 = localDate3.isBefore((java.time.chrono.ChronoLocalDate) localDate10);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField7.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField50.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1999999998 + "'", int53 == 1999999998);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.withMinute(10);
        int int8 = offsetDateTime7.getHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("java.net.SocketException", "+999999999-365Z");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: +999999999-365Z");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign('a');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle4.withNegativeSign('+');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle4.withZeroDigit(':');
        java.time.format.DecimalStyle decimalStyle10 = decimalStyle8.withZeroDigit('a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(decimalStyle10);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("zho");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zho" + "'", str1, "zho");
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        int int3 = period2.getDays();
        java.time.Period period5 = period2.plusMonths((long) 16384);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.withSecond((int) (byte) 0);
        java.time.Duration duration12 = java.time.Duration.ZERO;
        boolean boolean14 = duration12.equals((java.lang.Object) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime11.plus((java.time.temporal.TemporalAmount) duration12);
        java.time.temporal.Temporal temporal16 = period2.addTo((java.time.temporal.Temporal) offsetDateTime11);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-7) + "'", int3 == (-7));
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(temporal16);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        java.time.Month month0 = java.time.Month.JUNE;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JUNE + "'", month0.equals(java.time.Month.JUNE));
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("Eng");
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = chronoField9.getDisplayName(locale10);
        java.lang.String str13 = locale5.getDisplayCountry(locale10);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder0.setVariant("en_GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: en_GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GBR" + "'", str11, "GBR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Minute" + "'", str12, "Minute");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United Kingdom" + "'", str13, "United Kingdom");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.lang.String str9 = zoneRules7.toString();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        int int18 = instant15.getNano();
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime13.with((java.time.temporal.TemporalAdjuster) instant15);
        java.time.Duration duration20 = zoneRules7.getDaylightSavings(instant15);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap22 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.zone.ZoneRules zoneRules29 = zoneIdMap22.getOrDefault((java.lang.Object) 1.0d, zoneRules28);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset34);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap38 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.zone.ZoneRules zoneRules44 = zoneOffset42.getRules();
        java.time.zone.ZoneRules zoneRules45 = zoneIdMap38.getOrDefault((java.lang.Object) 1.0d, zoneRules44);
        java.lang.String str46 = zoneRules44.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList47 = zoneRules44.getTransitions();
        java.time.zone.ZoneRules zoneRules48 = zoneIdMap22.putIfAbsent((java.time.ZoneId) zoneOffset34, zoneRules44);
        java.lang.String str49 = zoneOffset34.toString();
        java.time.Clock clock50 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset34);
        java.time.ZonedDateTime zonedDateTime51 = instant15.atZone((java.time.ZoneId) zoneOffset34);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit54 = chronoField53.getBaseUnit();
        java.time.Duration duration55 = temporalUnit54.getDuration();
        java.time.OffsetTime offsetTime56 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime58 = offsetTime56.withSecond(16);
        java.time.Instant instant60 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant62 = instant60.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime63 = java.nio.file.attribute.FileTime.from(instant60);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery64 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period65 = instant60.query(periodTemporalQuery64);
        java.time.temporal.ChronoField chronoField66 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField66.getBaseUnit();
        boolean boolean68 = instant60.isSupported(temporalUnit67);
        boolean boolean69 = offsetTime56.isSupported(temporalUnit67);
        java.time.OffsetTime offsetTime71 = offsetTime56.minusNanos((long) '\n');
        java.time.OffsetTime offsetTime73 = offsetTime56.plusSeconds((long) (-1000002021));
        java.time.OffsetTime offsetTime75 = offsetTime56.minusMinutes(31556889832780798L);
        boolean boolean76 = temporalUnit54.isSupportedBy((java.time.temporal.Temporal) offsetTime56);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant77 = instant15.plus(18L, temporalUnit54);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str9, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str46, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList47);
        org.junit.Assert.assertNull(zoneRules48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Z" + "'", str49, "Z");
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField53.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit54 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit54.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(offsetTime56);
        org.junit.Assert.assertNotNull(offsetTime58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(fileTime63);
        org.junit.Assert.assertNotNull(periodTemporalQuery64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + chronoField66 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField66.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(offsetTime71);
        org.junit.Assert.assertNotNull(offsetTime73);
        org.junit.Assert.assertNotNull(offsetTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        boolean boolean3 = zoneIdMap1.equals((java.lang.Object) 0);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration4 = zoneIdMap1.keys();
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet5 = zoneIdMap1.entrySet();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = offsetDateTime9.atZoneSameInstant((java.time.ZoneId) zoneOffset14);
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime17.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId19 = zonedDateTime17.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap21 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.zone.ZoneRules zoneRules28 = zoneIdMap21.getOrDefault((java.lang.Object) 1.0d, zoneRules27);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset33);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap37 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.zone.ZoneRules zoneRules43 = zoneOffset41.getRules();
        java.time.zone.ZoneRules zoneRules44 = zoneIdMap37.getOrDefault((java.lang.Object) 1.0d, zoneRules43);
        java.lang.String str45 = zoneRules43.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList46 = zoneRules43.getTransitions();
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap21.putIfAbsent((java.time.ZoneId) zoneOffset33, zoneRules43);
        java.time.zone.ZoneRules zoneRules48 = zoneIdMap1.put(zoneId19, zoneRules43);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant52 = instant50.minusNanos((long) 'a');
        long long53 = instant50.getEpochSecond();
        java.time.Instant instant55 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.Clock clock60 = java.time.Clock.fixed(instant55, (java.time.ZoneId) zoneOffset58);
        java.time.OffsetDateTime offsetDateTime61 = instant50.atOffset(zoneOffset58);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset66);
        java.time.zone.ZoneRules zoneRules69 = zoneOffset66.getRules();
        boolean boolean70 = zoneRules69.isFixedOffset();
        java.time.zone.ZoneRules zoneRules71 = zoneIdMap1.replace((java.time.ZoneId) zoneOffset58, zoneRules69);
        java.time.Instant instant73 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant75 = instant73.minusNanos((long) 'a');
        java.time.ZoneOffset zoneOffset76 = zoneRules71.getOffset(instant75);
        java.lang.String str77 = zoneRules71.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneIdEnumeration4);
        org.junit.Assert.assertNotNull(zoneIdEntrySet5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zoneRules44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str45, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNull(zoneRules48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32L + "'", long53 == 32L);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(clock60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneRules69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(zoneRules71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str77, "ZoneRules[currentStandardOffset=Z]");
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.println(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray10 = org.apache.commons.lang3.StringUtils.stripAll(strArray8, "GBR");
        java.io.PrintWriter printWriter11 = printWriter1.printf("5", (java.lang.Object[]) strArray10);
        printWriter11.println(32);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter11);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setLanguage("5");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 5 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.Duration duration31 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration34 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList35 = duration34.getUnits();
        java.time.Duration duration36 = duration31.minus(duration34);
        int int37 = duration31.getNano();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime38 = zonedDateTime11.minus((java.time.temporal.TemporalAmount) duration31);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.zone.ZoneRules zoneRules49 = zoneOffset47.getRules();
        java.time.ZonedDateTime zonedDateTime50 = offsetDateTime42.atZoneSameInstant((java.time.ZoneId) zoneOffset47);
        int int51 = zonedDateTime50.getDayOfMonth();
        int int52 = zonedDateTime50.getHour();
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime50.minusDays((long) 385000000);
        boolean boolean55 = localDateChronoZonedDateTime38.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime50);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime56 = localDateChronoZonedDateTime38.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(temporalUnitList35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime56);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strList11.removeAll((java.util.Collection<java.lang.String>) strList27);
        boolean boolean29 = strList11.isEmpty();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime41.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime42.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        int int57 = localDateTime52.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        int int62 = localDateTime53.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        boolean boolean63 = localDateTime42.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        java.time.temporal.Temporal temporal64 = localDateTime36.adjustInto((java.time.temporal.Temporal) localDateTime42);
        java.lang.String str65 = localDateTime36.toString();
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate67 = localDateTime66.toLocalDate();
        java.time.LocalDateTime localDateTime69 = localDateTime66.plusWeeks(0L);
        int int70 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime69);
        java.time.LocalDateTime localDateTime72 = localDateTime69.minusHours((long) 999999999);
        boolean boolean73 = strList11.equals((java.lang.Object) localDateTime72);
        java.lang.String str76 = strList11.set(0, "09:16:27.971Z");
        java.util.stream.LongStream.Builder builder77 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream longStream78 = builder77.build();
        boolean boolean79 = strList11.contains((java.lang.Object) longStream78);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(temporal64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str65, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(longStream78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration4 = duration2.abs();
        java.time.Duration duration5 = duration4.abs();
        java.time.Duration duration7 = duration5.dividedBy((long) 533000000);
        long long8 = duration7.toDays();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet76 = zoneIdMap1.entrySet();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration77 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.zone.ZoneRules> zoneRulesEnumeration78 = zoneIdMap1.elements();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneIdEntrySet76);
        org.junit.Assert.assertNotNull(zoneIdEnumeration77);
        org.junit.Assert.assertNotNull(zoneRulesEnumeration78);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime0.plusNanos((long) '\n');
        java.time.OffsetTime offsetTime44 = offsetTime42.minusHours((long) 11);
        int int45 = offsetTime42.getNano();
        java.lang.String str46 = offsetTime42.toString();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(offsetTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 882000010 + "'", int45 == 882000010);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "09:18:41.882000010Z" + "'", str46, "09:18:41.882000010Z");
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet6);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny("PT10S", "Big5");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.ZonedDateTime zonedDateTime24 = offsetDateTime16.atZoneSameInstant((java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime24.withLaterOffsetAtOverlap();
        boolean boolean26 = zonedDateTime11.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime25);
        java.time.LocalDate localDate27 = java.time.LocalDate.now();
        java.time.LocalDate localDate28 = java.time.LocalDate.MIN;
        boolean boolean29 = localDate27.isEqual((java.time.chrono.ChronoLocalDate) localDate28);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean31 = localDate28.isSupported((java.time.temporal.TemporalField) chronoField30);
        java.time.OffsetTime offsetTime32 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime34 = offsetTime32.withSecond(16);
        java.time.OffsetDateTime offsetDateTime35 = localDate28.atTime(offsetTime34);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        int int41 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime37.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        int int52 = localDateTime47.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        int int57 = localDateTime48.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        boolean boolean58 = localDateTime37.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime63 = localDateTime60.atOffset(zoneOffset62);
        int int64 = localDateTime59.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime60);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        boolean boolean69 = localDateTime59.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        boolean boolean70 = localDateTime53.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime65);
        java.time.LocalDate localDate71 = localDateTime53.toLocalDate();
        java.time.LocalDate localDate72 = java.time.LocalDate.now();
        java.time.LocalDate localDate73 = java.time.LocalDate.MIN;
        boolean boolean74 = localDate72.isEqual((java.time.chrono.ChronoLocalDate) localDate73);
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean76 = localDate73.isSupported((java.time.temporal.TemporalField) chronoField75);
        int int77 = localDate73.getDayOfYear();
        int int78 = localDate71.compareTo((java.time.chrono.ChronoLocalDate) localDate73);
        java.time.Period period79 = localDate28.until((java.time.chrono.ChronoLocalDate) localDate73);
        java.time.temporal.ChronoField chronoField81 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit82 = chronoField81.getBaseUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate83 = localDate28.plus(999999999L, temporalUnit82);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime84 = zonedDateTime25.truncatedTo(temporalUnit82);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit is too large to be used for truncation");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField30.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(offsetTime32);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField75.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1999999998 + "'", int78 == 1999999998);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + chronoField81 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField81.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit82 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit82.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(chronoLocalDate83);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = null; // flaky: path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = null; // flaky: java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        java.nio.channels.FileChannel fileChannel20 = null; // flaky: fileChannel18.position((long) '\uffff');
        boolean boolean21 = false; // flaky: fileChannel20.isOpen();
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer24 = byteBuffer23.asLongBuffer();
        float float26 = byteBuffer23.getFloat(4);
        java.nio.ByteBuffer byteBuffer28 = byteBuffer23.putChar('\r');
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1, (byte) 1, (byte) 10 };
        java.nio.ByteBuffer byteBuffer36 = byteBuffer28.put(byteArray35);
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.wrap(byteArray35);
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer40 = byteBuffer39.asLongBuffer();
        java.nio.ByteBuffer byteBuffer41 = byteBuffer39.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer44 = byteBuffer43.asLongBuffer();
        float float46 = byteBuffer43.getFloat(4);
        java.nio.ByteBuffer byteBuffer48 = byteBuffer43.putChar('\r');
        java.nio.DoubleBuffer doubleBuffer49 = byteBuffer43.asDoubleBuffer();
        java.nio.ByteBuffer byteBuffer51 = byteBuffer43.putInt(10);
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] { byteBuffer37, byteBuffer41, byteBuffer51 };
        // The following exception was thrown during execution in test generation
        try {
            long long53 = 0L; // flaky: fileChannel20.read(byteBufferArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Read-only buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(fileChannel18);
        org.junit.Assert.assertNotNull(fileChannel20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(longBuffer24);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(longBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(longBuffer44);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(doubleBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = null; // flaky: java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = null; // flaky: fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null; // flaky: fileChannel11.position((long) 495000000);
        boolean boolean16 = false; // flaky: fileChannel11.isOpen();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileLock fileLock17 = null; // flaky: fileChannel11.lock();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate3 = localDateTime2.toLocalDate();
        java.time.LocalDateTime localDateTime5 = localDateTime2.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange6 = chronoField1.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime2);
        boolean boolean7 = localDate0.equals((java.lang.Object) valueRange6);
        java.time.LocalDate localDate8 = java.time.LocalDate.now();
        java.time.LocalDate localDate9 = java.time.LocalDate.MIN;
        boolean boolean10 = localDate8.isEqual((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean12 = localDate9.isSupported((java.time.temporal.TemporalField) chronoField11);
        int int13 = localDate9.getDayOfYear();
        java.time.Period period14 = java.time.Period.between(localDate0, localDate9);
        java.time.LocalDate localDate15 = java.time.LocalDate.now();
        java.time.LocalDate localDate16 = java.time.LocalDate.MIN;
        boolean boolean17 = localDate15.isEqual((java.time.chrono.ChronoLocalDate) localDate16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean19 = localDate16.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalDate localDate21 = localDate16.plusWeeks((long) 10);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        boolean boolean44 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        int int50 = localDateTime45.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime46);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        boolean boolean55 = localDateTime45.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        boolean boolean56 = localDateTime39.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.LocalDate localDate57 = localDateTime39.toLocalDate();
        java.time.LocalDate localDate58 = java.time.LocalDate.now();
        java.time.LocalDate localDate59 = java.time.LocalDate.MIN;
        boolean boolean60 = localDate58.isEqual((java.time.chrono.ChronoLocalDate) localDate59);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean62 = localDate59.isSupported((java.time.temporal.TemporalField) chronoField61);
        int int63 = localDate59.getDayOfYear();
        int int64 = localDate57.compareTo((java.time.chrono.ChronoLocalDate) localDate59);
        java.time.LocalDate localDate66 = localDate57.minusYears(32000L);
        java.time.LocalDate localDate68 = localDate57.minusWeeks((long) (short) 1);
        boolean boolean69 = localDate21.isEqual((java.time.chrono.ChronoLocalDate) localDate57);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate71 = localDateTime70.toLocalDate();
        java.time.LocalDateTime localDateTime73 = localDateTime70.plusWeeks(0L);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean75 = localDateTime70.isSupported((java.time.temporal.TemporalField) chronoField74);
        java.time.temporal.TemporalUnit temporalUnit76 = chronoField74.getRangeUnit();
        java.time.Duration duration77 = temporalUnit76.getDuration();
        boolean boolean78 = localDate21.isSupported(temporalUnit76);
        java.time.Period period79 = java.time.Period.between(localDate9, localDate21);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(valueRange6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField11.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField18.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField61.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1999999998 + "'", int64 == 1999999998);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField74.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit76 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit76.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period79);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI14 = path11.toUri();
        boolean boolean16 = path11.startsWith("/experiment/GBR/");
        java.io.File file18 = new java.io.File("GBR");
        boolean boolean20 = file18.setWritable(true);
        java.nio.file.Path path21 = file18.toPath();
        java.nio.file.Path path23 = path21.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption24 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption25 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray26 = new java.nio.file.LinkOption[] { linkOption24, linkOption25 };
        java.nio.file.Path path27 = null; // flaky: path21.toRealPath(linkOptionArray26);
        java.nio.file.Path path28 = path11.resolveSibling(path21);
        int int29 = path4.compareTo(path28);
        java.net.URI uRI30 = path28.toUri();
        java.lang.String str31 = uRI30.getSchemeSpecificPart();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNotNull(path23);
        org.junit.Assert.assertTrue("'" + linkOption24 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption24.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption25 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption25.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray26);
// flaky:         org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(uRI30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "///experiment/GBR/" + "'", str31, "///experiment/GBR/");
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("00:00:32", "KOR");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom7279375396923438195aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom7279375396923438195aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str2, "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom7279375396923438195aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.zone.ZoneRules zoneRules4 = zoneOffset2.getRules();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int11 = zoneOffset10.getTotalSeconds();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset10);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 23, (int) (short) 1, zoneOffset10);
        java.util.List<java.time.ZoneOffset> zoneOffsetList14 = zoneRules4.getValidOffsets(localDateTime13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.withSecond((int) (byte) 0);
        int int21 = offsetDateTime20.getMinute();
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime20.plusNanos((long) 227000000);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.withSecond((int) (byte) 0);
        java.time.LocalDate localDate30 = offsetDateTime27.toLocalDate();
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField31.getBaseUnit();
        boolean boolean33 = offsetDateTime27.isSupported((java.time.temporal.TemporalField) chronoField31);
        java.time.temporal.ValueRange valueRange34 = offsetDateTime23.range((java.time.temporal.TemporalField) chronoField31);
        boolean boolean35 = localDateTime13.isSupported((java.time.temporal.TemporalField) chronoField31);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(zoneRules4);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffsetList14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField31.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(valueRange34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.lang.String str5 = locale4.getVariant();
        java.lang.String str6 = locale1.getDisplayScript(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean1 = chronoField0.isDateBased();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.withSecond((int) (byte) 0);
        java.time.LocalDate localDate8 = offsetDateTime5.toLocalDate();
        java.time.LocalDate localDate10 = localDate8.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime14.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.ZonedDateTime zonedDateTime22 = offsetDateTime14.atZoneSameInstant((java.time.ZoneId) zoneOffset19);
        java.time.LocalTime localTime23 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.of(localDate8, localTime23, (java.time.ZoneId) zoneOffset26);
        boolean boolean30 = chronoField0.isSupportedBy((java.time.temporal.TemporalAccessor) localTime23);
        java.time.chrono.ChronoLocalDate chronoLocalDate31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate33 = chronoField0.adjustInto(chronoLocalDate31, (long) 16384);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        java.security.ProtectionDomain[] protectionDomainArray0 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext1 = new java.security.AccessControlContext(protectionDomainArray0);
        java.time.LocalDate localDate2 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery3 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period4 = localDate2.query(periodTemporalQuery3);
        boolean boolean5 = accessControlContext1.equals((java.lang.Object) periodTemporalQuery3);
        javax.security.auth.Subject subject6 = javax.security.auth.Subject.getSubject(accessControlContext1);
        java.security.DomainCombiner domainCombiner7 = accessControlContext1.getDomainCombiner();
        org.junit.Assert.assertNotNull(protectionDomainArray0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(periodTemporalQuery3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(subject6);
        org.junit.Assert.assertNull(domainCombiner7);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.with((java.time.temporal.TemporalField) chronoField6, (long) 31);
        java.time.OffsetTime offsetTime9 = offsetDateTime8.toOffsetTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime11 = offsetDateTime8.minusWeeks(43200000000000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -826943078914");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(offsetTime9);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        int[] intArray6 = new int[] { 1024, (byte) 1, 125000000, 17488, '4', 829000000 };
        java.nio.IntBuffer intBuffer7 = java.nio.IntBuffer.wrap(intArray6);
        java.util.stream.IntStream intStream8 = java.util.stream.IntStream.of(intArray6);
        java.util.stream.IntStream intStream10 = intStream8.skip(32L);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1024, 1, 125000000, 17488, 52, 829000000]");
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(intStream10);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean8 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int10 = offsetDateTime3.get((java.time.temporal.TemporalField) chronoField9);
        java.util.stream.Stream<java.time.temporal.ChronoField> chronoFieldStream11 = java.util.stream.Stream.of(chronoField9);
        boolean boolean12 = chronoField9.isDateBased();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField7.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField9.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(chronoFieldStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("+277999999-12-31T23:59:59.999999999Z", "hi!x(null <no signer certificates>)x(null <no signer certificates>)xMinutexMinutex(null <no signer certificates>)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble1 = doubleStream0.max();
        java.util.function.DoubleBinaryOperator doubleBinaryOperator3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = doubleStream0.reduce((double) '\000', doubleBinaryOperator3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 64);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiPrintable('a');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        boolean boolean3 = zoneIdMap1.equals((java.lang.Object) 0);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration4 = zoneIdMap1.keys();
        int int5 = zoneIdMap1.size();
        boolean boolean6 = zoneIdMap1.isEmpty();
        boolean boolean7 = zoneIdMap1.isEmpty();
        java.util.stream.IntStream intStream9 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt10 = intStream9.min();
        java.lang.String str11 = optionalInt10.toString();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate13 = localDateTime12.toLocalDate();
        boolean boolean14 = optionalInt10.equals((java.lang.Object) localDate13);
        int int16 = optionalInt10.orElse(59);
        java.util.stream.IntStream intStream18 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt19 = intStream18.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = ofInt19.trySplit();
        java.util.stream.IntStream.Builder builder21 = java.util.stream.IntStream.builder();
        ofInt19.forEachRemaining((java.util.function.IntConsumer) builder21);
        optionalInt10.ifPresent((java.util.function.IntConsumer) builder21);
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap1.get((java.lang.Object) optionalInt10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneIdEnumeration4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(optionalInt10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OptionalInt[10]" + "'", str11, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intStream18);
        org.junit.Assert.assertNotNull(ofInt19);
        org.junit.Assert.assertNull(intSpliterator20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(zoneRules24);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.LocalDate localDate6 = localDate1.plusWeeks((long) 10);
        java.net.URISyntaxException uRISyntaxException9 = new java.net.URISyntaxException("Minute", "");
        java.security.cert.CertificateException certificateException10 = new java.security.cert.CertificateException((java.lang.Throwable) uRISyntaxException9);
        boolean boolean11 = localDate6.equals((java.lang.Object) certificateException10);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.from((java.time.temporal.TemporalAccessor) localDate6);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: -999999999-03-12 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.parallel();
        java.util.stream.IntStream intStream4 = intStream1.sequential();
        java.util.stream.IntStream intStream5 = intStream1.sequential();
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.LongSummaryStatistics longSummaryStatistics7 = new java.util.LongSummaryStatistics();
        long long8 = longSummaryStatistics7.getSum();
        java.util.stream.IntStream intStream10 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt11 = intStream10.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = ofInt11.trySplit();
        java.util.stream.IntStream intStream14 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt15 = intStream14.spliterator();
        java.util.stream.IntStream.Builder builder16 = java.util.stream.IntStream.builder();
        boolean boolean17 = ofInt15.tryAdvance((java.util.function.IntConsumer) builder16);
        java.util.stream.IntStream intStream19 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt20 = intStream19.spliterator();
        java.util.stream.IntStream.Builder builder21 = java.util.stream.IntStream.builder();
        boolean boolean22 = ofInt20.tryAdvance((java.util.function.IntConsumer) builder21);
        ofInt15.forEachRemaining((java.util.function.IntConsumer) builder21);
        boolean boolean24 = ofInt11.tryAdvance((java.util.function.IntConsumer) builder21);
        java.util.function.IntConsumer intConsumer25 = longSummaryStatistics7.andThen((java.util.function.IntConsumer) builder21);
        long long26 = longSummaryStatistics7.getCount();
        // The following exception was thrown during execution in test generation
        try {
            intStream6.forEach((java.util.function.IntConsumer) longSummaryStatistics7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertEquals(longSummaryStatistics7.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(ofInt11);
        org.junit.Assert.assertNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertNotNull(ofInt15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertNotNull(ofInt20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(intConsumer25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant4 = instant2.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime5 = java.nio.file.attribute.FileTime.from(instant2);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery6 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period7 = instant2.query(periodTemporalQuery6);
        java.time.Period period8 = isoEra0.query(periodTemporalQuery6);
        int int9 = period8.getDays();
        java.time.Period period11 = period8.minusYears((long) 10000000);
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(fileTime5);
        org.junit.Assert.assertNotNull(periodTemporalQuery6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getExtension('-');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: -");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI4 = new java.net.URI("DoubleSummaryStatistics{count=1, sum=385000000.000000, min=385000000.000000, average=385000000.000000, max=385000000.000000}", "0", "\u4e2d\u56fd\u8a9e", "_MINUTE");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: DoubleSummaryStatistics{count=1, sum=385000000.000000, min=385000000.000000, average=385000000.000000, max=385000000.000000}://0???#_MINUTE");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.lang.String str9 = zoneRules7.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList10 = zoneRules7.getTransitions();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.format.DateTimeFormatter dateTimeFormatter34 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str35 = localDateTime28.format(dateTimeFormatter34);
        java.time.ZoneOffset zoneOffset36 = zoneRules7.getOffset(localDateTime28);
        java.time.LocalDateTime localDateTime38 = localDateTime28.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        boolean boolean42 = temporalUnit41.isTimeBased();
        java.time.LocalDateTime localDateTime43 = localDateTime28.minus((long) 829000000, temporalUnit41);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate45 = localDateTime44.toLocalDate();
        java.time.LocalDateTime localDateTime47 = localDateTime44.plusWeeks(0L);
        java.time.Instant instant49 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant51 = instant49.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime52 = java.nio.file.attribute.FileTime.from(instant49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery53 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period54 = instant49.query(periodTemporalQuery53);
        java.time.Period period55 = localDateTime44.query(periodTemporalQuery53);
        java.time.Period period56 = localDateTime28.query(periodTemporalQuery53);
        java.time.LocalDateTime localDateTime58 = localDateTime28.minusHours((long) 234000000);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str9, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str35, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(fileTime52);
        org.junit.Assert.assertNotNull(periodTemporalQuery53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = java.time.Period.from((java.time.temporal.TemporalAmount) period1);
        java.time.format.DateTimeFormatter dateTimeFormatter3 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str4 = dateTimeFormatter3.toString();
        boolean boolean5 = period2.equals((java.lang.Object) dateTimeFormatter3);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.plusNanos((long) (-7));
        java.time.Instant instant15 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant17 = instant15.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime18 = java.nio.file.attribute.FileTime.from(instant15);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery19 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period20 = instant15.query(periodTemporalQuery19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        boolean boolean23 = instant15.isSupported(temporalUnit22);
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant27 = instant25.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.ofInstant(instant25, (java.time.ZoneId) zoneOffset30);
        java.time.ZoneId zoneId34 = zonedDateTime33.getZone();
        java.time.Clock clock35 = java.time.Clock.fixed(instant15, zoneId34);
        java.time.ZonedDateTime zonedDateTime36 = offsetDateTime11.atZoneSimilarLocal(zoneId34);
        java.time.temporal.Temporal temporal37 = period2.addTo((java.time.temporal.Temporal) zonedDateTime36);
        java.time.ZoneId zoneId38 = java.time.ZoneId.from((java.time.temporal.TemporalAccessor) zonedDateTime36);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str4, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(fileTime18);
        org.junit.Assert.assertNotNull(periodTemporalQuery19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField21.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(clock35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(zoneId38);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet76 = zoneIdMap1.entrySet();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration77 = zoneIdMap1.keys();
        boolean boolean78 = zoneIdMap1.isEmpty();
        java.util.function.LongUnaryOperator longUnaryOperator79 = java.util.function.LongUnaryOperator.identity();
        long long81 = longUnaryOperator79.applyAsLong((long) (-15888074));
        java.time.zone.ZoneRules zoneRules82 = zoneIdMap1.get((java.lang.Object) longUnaryOperator79);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneIdEntrySet76);
        org.junit.Assert.assertNotNull(zoneIdEnumeration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(longUnaryOperator79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-15888074L) + "'", long81 == (-15888074L));
        org.junit.Assert.assertNull(zoneRules82);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        java.lang.String str1 = org.apache.commons.lang3.CharUtils.toString('.');
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "." + "'", str1, ".");
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        builder0.accept((long) 6);
        builder0.accept((long) 457000000);
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        java.time.Duration duration8 = duration1.plusNanos((long) 722000000);
        java.time.Duration duration10 = duration1.withNanos(413000000);
        java.time.Duration duration11 = duration1.abs();
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList12 = duration1.getUnits();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(temporalUnitList12);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset1.contains(charset2);
        java.util.Set<java.lang.String> strSet4 = charset1.aliases();
        boolean boolean5 = charset0.contains(charset1);
        java.lang.String str6 = charset1.displayName();
        java.nio.charset.Charset charset7 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset8 = java.nio.charset.Charset.defaultCharset();
        boolean boolean9 = charset7.contains(charset8);
        java.util.Set<java.lang.String> strSet10 = charset7.aliases();
        java.lang.String str11 = charset7.displayName();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer14 = byteBuffer13.asLongBuffer();
        short short15 = byteBuffer13.getShort();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putChar('G');
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer20 = byteBuffer19.asLongBuffer();
        short short21 = byteBuffer19.getShort();
        boolean boolean22 = byteBuffer13.equals((java.lang.Object) byteBuffer19);
        java.nio.ShortBuffer shortBuffer23 = byteBuffer19.asShortBuffer();
        byte byte24 = byteBuffer19.get();
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer27 = byteBuffer26.asLongBuffer();
        int int28 = byteBuffer19.compareTo(byteBuffer26);
        java.nio.CharBuffer charBuffer29 = charset7.decode(byteBuffer19);
        java.nio.CharBuffer charBuffer30 = charset1.decode(byteBuffer19);
        java.nio.charset.CharsetEncoder charsetEncoder31 = charset1.newEncoder();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "US-ASCII" + "'", str6, "US-ASCII");
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "US-ASCII" + "'", str11, "US-ASCII");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(longBuffer20);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 0 + "'", short21 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(shortBuffer23);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(longBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(charsetEncoder31);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        java.time.LocalTime localTime0 = java.time.LocalTime.NOON;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate3 = localDateTime2.toLocalDate();
        java.time.LocalDateTime localDateTime5 = localDateTime2.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange6 = chronoField1.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime2);
        int int7 = localTime0.get((java.time.temporal.TemporalField) chronoField1);
        java.time.LocalTime localTime8 = java.time.LocalTime.now();
        int int9 = localTime8.getNano();
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long11 = localTime8.getLong((java.time.temporal.TemporalField) chronoField10);
        boolean boolean12 = localTime0.isSupported((java.time.temporal.TemporalField) chronoField10);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(valueRange6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 971000000 + "'", int9 == 971000000);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField10.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 18L + "'", long11 == 18L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset1.contains(charset2);
        java.util.Set<java.lang.String> strSet4 = charset1.aliases();
        boolean boolean5 = charset0.contains(charset1);
        java.lang.String str6 = charset1.displayName();
        java.nio.charset.Charset charset7 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset8 = java.nio.charset.Charset.defaultCharset();
        boolean boolean9 = charset7.contains(charset8);
        java.util.Set<java.lang.String> strSet10 = charset7.aliases();
        java.lang.String str11 = charset7.displayName();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer14 = byteBuffer13.asLongBuffer();
        short short15 = byteBuffer13.getShort();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer13.putChar('G');
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer20 = byteBuffer19.asLongBuffer();
        short short21 = byteBuffer19.getShort();
        boolean boolean22 = byteBuffer13.equals((java.lang.Object) byteBuffer19);
        java.nio.ShortBuffer shortBuffer23 = byteBuffer19.asShortBuffer();
        byte byte24 = byteBuffer19.get();
        java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer27 = byteBuffer26.asLongBuffer();
        int int28 = byteBuffer19.compareTo(byteBuffer26);
        java.nio.CharBuffer charBuffer29 = charset7.decode(byteBuffer19);
        java.nio.CharBuffer charBuffer30 = charset1.decode(byteBuffer19);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer33 = byteBuffer19.putFloat((int) ' ', (float) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "US-ASCII" + "'", str6, "US-ASCII");
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "US-ASCII" + "'", str11, "US-ASCII");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(longBuffer14);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(longBuffer20);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 0 + "'", short21 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(shortBuffer23);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(longBuffer27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean11 = localTime9.isSupported((java.time.temporal.TemporalField) chronoField10);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        int int17 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime13.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        int int33 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        int int39 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        int int44 = localDateTime35.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        boolean boolean45 = localDateTime24.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.temporal.Temporal temporal46 = localDateTime18.adjustInto((java.time.temporal.Temporal) localDateTime24);
        java.lang.String str47 = localDateTime18.toString();
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate49 = localDateTime48.toLocalDate();
        java.time.LocalDateTime localDateTime51 = localDateTime48.plusWeeks(0L);
        int int52 = localDateTime18.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime51);
        java.time.LocalDateTime localDateTime54 = localDateTime51.minusHours((long) 999999999);
        java.time.Instant instant56 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant58 = instant56.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime59 = java.nio.file.attribute.FileTime.from(instant56);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery60 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period61 = instant56.query(periodTemporalQuery60);
        java.time.Period period62 = localDateTime54.query(periodTemporalQuery60);
        java.time.Period period63 = localTime9.query(periodTemporalQuery60);
        java.time.Period period65 = period63.multipliedBy(12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period67 = period65.plusMonths((-4656358258698319616L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: integer overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField10.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(temporal46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str47, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(fileTime59);
        org.junit.Assert.assertNotNull(periodTemporalQuery60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\\u0075", "1 Jan 1970 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 1 Jan 1970 00:00:00 GMT");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        java.time.Period period0 = java.time.Period.ZERO;
        boolean boolean1 = period0.isNegative();
        java.time.Period period3 = period0.minusMonths((long) 1);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.withSecond((int) (byte) 0);
        int int10 = offsetDateTime9.getNano();
        java.time.Month month11 = offsetDateTime9.getMonth();
        java.time.Instant instant13 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant15 = instant13.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime16 = java.nio.file.attribute.FileTime.from(instant13);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery17 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period18 = instant13.query(periodTemporalQuery17);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getBaseUnit();
        boolean boolean21 = instant13.isSupported(temporalUnit20);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = localDateTime23.minusNanos((long) (short) 100);
        boolean boolean30 = temporalUnit20.isSupportedBy((java.time.temporal.Temporal) localDateTime23);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime34.withSecond((int) (byte) 0);
        java.time.LocalDate localDate37 = offsetDateTime34.toLocalDate();
        java.time.Month month38 = localDate37.getMonth();
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.zone.ZoneRules zoneRules49 = zoneOffset47.getRules();
        java.time.ZonedDateTime zonedDateTime50 = offsetDateTime42.atZoneSameInstant((java.time.ZoneId) zoneOffset47);
        int int51 = zonedDateTime50.getDayOfMonth();
        int int52 = zonedDateTime50.getHour();
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime50.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.OffsetDateTime offsetDateTime60 = offsetDateTime58.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        java.time.zone.ZoneRules zoneRules65 = zoneOffset63.getRules();
        java.time.ZonedDateTime zonedDateTime66 = offsetDateTime58.atZoneSameInstant((java.time.ZoneId) zoneOffset63);
        java.time.ZonedDateTime zonedDateTime67 = zonedDateTime66.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long69 = zonedDateTime66.getLong((java.time.temporal.TemporalField) chronoField68);
        long long70 = zonedDateTime54.getLong((java.time.temporal.TemporalField) chronoField68);
        boolean boolean71 = month38.isSupported((java.time.temporal.TemporalField) chronoField68);
        long long72 = localDateTime23.getLong((java.time.temporal.TemporalField) chronoField68);
        boolean boolean73 = chronoField68.isTimeBased();
        boolean boolean74 = month11.isSupported((java.time.temporal.TemporalField) chronoField68);
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField68.getBaseUnit();
        // The following exception was thrown during execution in test generation
        try {
            long long76 = period3.get(temporalUnit75);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Nanos");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 999999999 + "'", int10 == 999999999);
        org.junit.Assert.assertTrue("'" + month11 + "' != '" + java.time.Month.DECEMBER + "'", month11.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(fileTime16);
        org.junit.Assert.assertNotNull(periodTemporalQuery17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField19.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + month38 + "' != '" + java.time.Month.DECEMBER + "'", month38.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(zoneRules65);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField68.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 999999999L + "'", long69 == 999999999L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 999999999L + "'", long70 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 999999999L + "'", long72 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.NANOS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.NANOS));
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset4.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset4.newEncoder();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder7.replaceWith(byteArray9);
        java.nio.charset.CodingErrorAction codingErrorAction12 = charsetEncoder11.unmappableCharacterAction();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charsetDecoder1.onUnmappableCharacter(codingErrorAction12);
        java.util.function.Predicate<java.util.function.DoubleConsumer> doubleConsumerPredicate14 = java.util.function.Predicate.isEqual((java.lang.Object) charsetDecoder13);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetDecoder charsetDecoder16 = charsetDecoder13.replaceWith("OptionalDouble.empty");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(codingErrorAction12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(doubleConsumerPredicate14);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean1 = coderResult0.isUnmappable();
        boolean boolean2 = coderResult0.isUnmappable();
        boolean boolean3 = coderResult0.isError();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(reading)");
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery5 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period6 = instant1.query(periodTemporalQuery5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = instant1.isSupported(temporalUnit8);
        java.time.Instant instant11 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant13 = instant11.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset16);
        java.time.ZoneId zoneId20 = zonedDateTime19.getZone();
        java.time.Clock clock21 = java.time.Clock.fixed(instant1, zoneId20);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset26);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset26.getRules();
        java.time.OffsetDateTime offsetDateTime30 = instant1.atOffset(zoneOffset26);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant34 = instant32.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime35 = java.nio.file.attribute.FileTime.from(instant32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = instant32.query(periodTemporalQuery36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        boolean boolean40 = instant32.isSupported(temporalUnit39);
        java.time.Instant instant42 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant44 = instant42.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.zone.ZoneRules zoneRules49 = zoneOffset47.getRules();
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.ofInstant(instant42, (java.time.ZoneId) zoneOffset47);
        java.time.ZoneId zoneId51 = zonedDateTime50.getZone();
        java.time.Clock clock52 = java.time.Clock.fixed(instant32, zoneId51);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset57);
        java.time.zone.ZoneRules zoneRules60 = zoneOffset57.getRules();
        java.time.OffsetDateTime offsetDateTime61 = instant32.atOffset(zoneOffset57);
        java.time.Instant instant63 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant65 = instant63.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime66 = java.nio.file.attribute.FileTime.from(instant63);
        java.time.Instant instant68 = instant63.plusMillis((long) 10);
        boolean boolean69 = instant32.isAfter(instant63);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.OffsetDateTime offsetDateTime75 = offsetDateTime73.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime79 = localDateTime76.atOffset(zoneOffset78);
        java.time.zone.ZoneRules zoneRules80 = zoneOffset78.getRules();
        java.time.ZonedDateTime zonedDateTime81 = offsetDateTime73.atZoneSameInstant((java.time.ZoneId) zoneOffset78);
        java.time.ZonedDateTime zonedDateTime82 = zonedDateTime81.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId83 = zonedDateTime81.getZone();
        java.time.Clock clock84 = java.time.Clock.fixed(instant32, zoneId83);
        java.time.LocalDateTime localDateTime85 = java.time.LocalDateTime.ofInstant(instant1, zoneId83);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime87 = localDateTime85.withMinute(43200);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 43200");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(periodTemporalQuery5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField38.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(zoneId51);
        org.junit.Assert.assertNotNull(clock52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneRules60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(fileTime66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(zoneRules80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(zonedDateTime82);
        org.junit.Assert.assertNotNull(zoneId83);
        org.junit.Assert.assertNotNull(clock84);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = offsetDateTime12.atZoneSameInstant((java.time.ZoneId) zoneOffset17);
        java.time.LocalTime localTime21 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.of(localDate6, localTime21, (java.time.ZoneId) zoneOffset24);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant28 = java.time.Instant.from((java.time.temporal.TemporalAccessor) localTime21);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain Instant from TemporalAccessor: 09:18:47.357 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime49.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset54.getRules();
        java.time.ZonedDateTime zonedDateTime57 = offsetDateTime49.atZoneSameInstant((java.time.ZoneId) zoneOffset54);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime57.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime59 = zonedDateTime57.toLocalTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime60 = zonedDateTime57.withEarlierOffsetAtOverlap();
        int int61 = zonedDateTime26.compareTo(localDateChronoZonedDateTime60);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime62 = localDateChronoZonedDateTime60.toLocalDateTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime63 = localDateChronoZonedDateTime60.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime62);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime63);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        java.security.AccessControlException accessControlException1 = new java.security.AccessControlException("");
        java.security.Permission permission2 = accessControlException1.getPermission();
        java.security.PrivilegedActionException privilegedActionException3 = new java.security.PrivilegedActionException((java.lang.Exception) accessControlException1);
        java.lang.Exception exception4 = privilegedActionException3.getException();
        java.lang.Exception exception5 = privilegedActionException3.getException();
        java.lang.String str6 = privilegedActionException3.toString();
        org.junit.Assert.assertNull(permission2);
        org.junit.Assert.assertNotNull(exception4);
        org.junit.Assert.assertNotNull(exception5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.security.PrivilegedActionException: java.security.AccessControlException: " + "'", str6, "java.security.PrivilegedActionException: java.security.AccessControlException: ");
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.lang.String str18 = isoChronology0.toString();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.withSecond((int) (byte) 0);
        java.time.LocalDate localDate25 = offsetDateTime22.toLocalDate();
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        boolean boolean28 = offsetDateTime22.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime22.minusMinutes((long) 100);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.Clock clock37 = java.time.Clock.fixed(instant32, (java.time.ZoneId) zoneOffset35);
        java.time.ZonedDateTime zonedDateTime38 = offsetDateTime30.atZoneSameInstant((java.time.ZoneId) zoneOffset35);
        java.time.LocalDate localDate39 = isoChronology0.dateNow((java.time.ZoneId) zoneOffset35);
        boolean boolean41 = isoChronology0.isLeapYear((long) (-3));
        java.time.LocalDate localDate44 = java.time.LocalDate.ofYearDay((int) (short) -1, (int) (byte) 1);
        java.time.chrono.Era era45 = localDate44.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate49 = isoChronology0.date(era45, (int) 'x', 999999998, 40000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 999999998");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(clock37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + era45 + "' != '" + java.time.chrono.IsoEra.BCE + "'", era45.equals(java.time.chrono.IsoEra.BCE));
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime12 = localDateTime6.withHour(4);
        java.util.stream.DoubleStream doubleStream13 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream14 = doubleStream13.distinct();
        java.util.stream.DoubleStream doubleStream15 = doubleStream14.parallel();
        boolean boolean16 = localDateTime12.equals((java.lang.Object) doubleStream14);
        java.util.stream.DoubleStream doubleStream17 = doubleStream14.sequential();
        java.util.stream.DoubleStream doubleStream18 = doubleStream14.sorted();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertNotNull(doubleStream18);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)", "lo////////", 41);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        java.security.GeneralSecurityException generalSecurityException1 = new java.security.GeneralSecurityException("zh-CN");
        java.lang.String str2 = generalSecurityException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.security.GeneralSecurityException: zh-CN" + "'", str2, "java.security.GeneralSecurityException: zh-CN");
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.util.Date date5 = java.util.Date.from(instant1);
        java.lang.String str6 = date5.toGMTString();
        date5.setYear(437000000);
        date5.setHours((-793999999));
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri May 05 02:34:40 UTC 147639698");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str6, "1 Jan 1970 00:00:32 GMT");
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.LocalDate localDate12 = java.time.LocalDate.now();
        java.time.LocalDate localDate13 = java.time.LocalDate.MIN;
        boolean boolean14 = localDate12.isEqual((java.time.chrono.ChronoLocalDate) localDate13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean16 = localDate13.isSupported((java.time.temporal.TemporalField) chronoField15);
        int int17 = localDate13.getDayOfYear();
        java.time.LocalDate localDate19 = localDate13.withYear((int) '4');
        java.time.LocalTime localTime20 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime22 = localTime20.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime23 = localDate13.atTime(localTime20);
        java.time.chrono.Era era24 = localDate13.getEra();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        int int30 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        int int41 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime37.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        boolean boolean47 = localDateTime26.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.DayOfWeek dayOfWeek48 = localDateTime42.getDayOfWeek();
        java.time.format.TextStyle textStyle49 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = locale50.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.CHINA;
        java.lang.String str53 = locale50.getDisplayScript(locale52);
        java.lang.String str54 = dayOfWeek48.getDisplayName(textStyle49, locale50);
        java.time.format.TextStyle textStyle55 = textStyle49.asStandalone();
        boolean boolean56 = textStyle49.isStandalone();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Locale locale58 = locale57.stripExtensions();
        java.lang.String str59 = locale58.toLanguageTag();
        java.lang.String str60 = era24.getDisplayName(textStyle49, locale58);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        int int66 = localDateTime61.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime62);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime70 = localDateTime67.atOffset(zoneOffset69);
        int int71 = localDateTime62.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime67);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime76 = localDateTime73.atOffset(zoneOffset75);
        int int77 = localDateTime72.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime73);
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime81 = localDateTime78.atOffset(zoneOffset80);
        int int82 = localDateTime73.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime78);
        boolean boolean83 = localDateTime62.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime78);
        java.time.DayOfWeek dayOfWeek84 = localDateTime78.getDayOfWeek();
        java.time.format.TextStyle textStyle85 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale86 = java.util.Locale.UK;
        java.lang.String str87 = locale86.getISO3Country();
        java.util.Locale locale88 = java.util.Locale.CHINA;
        java.lang.String str89 = locale86.getDisplayScript(locale88);
        java.lang.String str90 = dayOfWeek84.getDisplayName(textStyle85, locale86);
        java.util.Set<java.lang.String> strSet91 = locale86.getUnicodeLocaleAttributes();
        java.lang.String str92 = zoneOffset8.getDisplayName(textStyle49, locale86);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField15.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + era24 + "' != '" + java.time.chrono.IsoEra.BCE + "'", era24.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek48 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek48.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle49 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle49.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GBR" + "'", str51, "GBR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "5" + "'", str54, "5");
        org.junit.Assert.assertTrue("'" + textStyle55 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle55.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-CN" + "'", str59, "zh-CN");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek84 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek84.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle85 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle85.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "GBR" + "'", str87, "GBR");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "5" + "'", str90, "5");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Z" + "'", str92, "Z");
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.chrono.Era era20 = localDate19.getEra();
        java.lang.String str21 = localDate19.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + era20 + "' != '" + java.time.chrono.IsoEra.CE + "'", era20.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+999999999-12-31" + "'", str21, "+999999999-12-31");
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime4 = localDateTime2.plusDays((long) (-7));
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = zoneIdMap1.remove((java.lang.Object) (-7), (java.lang.Object) locale5);
        boolean boolean7 = zoneIdMap1.isEmpty();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap9 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap13 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.zone.ZoneRules zoneRules20 = zoneIdMap13.getOrDefault((java.lang.Object) 1.0d, zoneRules19);
        java.time.zone.ZoneRules zoneRules21 = zoneIdMap9.put((java.time.ZoneId) zoneOffset11, zoneRules19);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap23 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset27.getRules();
        java.time.zone.ZoneRules zoneRules30 = zoneIdMap23.getOrDefault((java.lang.Object) 1.0d, zoneRules29);
        java.lang.String str31 = zoneRules29.toString();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.Instant instant37 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant39 = instant37.minusNanos((long) 'a');
        int int40 = instant37.getNano();
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime35.with((java.time.temporal.TemporalAdjuster) instant37);
        java.time.Duration duration42 = zoneRules29.getDaylightSavings(instant37);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap44 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.zone.ZoneRules zoneRules50 = zoneOffset48.getRules();
        java.time.zone.ZoneRules zoneRules51 = zoneIdMap44.getOrDefault((java.lang.Object) 1.0d, zoneRules50);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime57 = localDateTime54.atOffset(zoneOffset56);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset56);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap60 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.zone.ZoneRules zoneRules66 = zoneOffset64.getRules();
        java.time.zone.ZoneRules zoneRules67 = zoneIdMap60.getOrDefault((java.lang.Object) 1.0d, zoneRules66);
        java.lang.String str68 = zoneRules66.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList69 = zoneRules66.getTransitions();
        java.time.zone.ZoneRules zoneRules70 = zoneIdMap44.putIfAbsent((java.time.ZoneId) zoneOffset56, zoneRules66);
        java.lang.String str71 = zoneOffset56.toString();
        java.time.Clock clock72 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset56);
        java.time.ZonedDateTime zonedDateTime73 = instant37.atZone((java.time.ZoneId) zoneOffset56);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray74 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList75 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionArray74);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap78 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset82 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime83 = localDateTime80.atOffset(zoneOffset82);
        java.time.zone.ZoneRules zoneRules84 = zoneOffset82.getRules();
        java.time.zone.ZoneRules zoneRules85 = zoneIdMap78.getOrDefault((java.lang.Object) 1.0d, zoneRules84);
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList86 = zoneRules84.getTransitions();
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray87 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList88 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList88, zoneOffsetTransitionRuleArray87);
        java.time.zone.ZoneRules zoneRules90 = java.time.zone.ZoneRules.of(zoneOffset11, zoneOffset56, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList75, zoneOffsetTransitionList86, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList88);
        boolean boolean91 = zoneIdMap1.containsValue((java.lang.Object) zoneOffsetTransitionList75);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNull(zoneRules21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str31, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(zoneRules50);
        org.junit.Assert.assertNotNull(zoneRules51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str68, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList69);
        org.junit.Assert.assertNull(zoneRules70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Z" + "'", str71, "Z");
        org.junit.Assert.assertNotNull(clock72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(zoneOffset82);
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertNotNull(zoneRules84);
        org.junit.Assert.assertNotNull(zoneRules85);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList86);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(zoneRules90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        java.util.function.IntUnaryOperator intUnaryOperator1 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator2 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator3 = intUnaryOperator1.compose(intUnaryOperator2);
        int int5 = intUnaryOperator3.applyAsInt(385000000);
        java.util.function.IntUnaryOperator intUnaryOperator6 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator7 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator8 = intUnaryOperator6.compose(intUnaryOperator7);
        java.util.function.IntUnaryOperator intUnaryOperator9 = intUnaryOperator3.andThen(intUnaryOperator7);
        java.util.function.IntUnaryOperator intUnaryOperator10 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator11 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator12 = intUnaryOperator10.compose(intUnaryOperator11);
        int int14 = intUnaryOperator12.applyAsInt(385000000);
        java.util.function.IntUnaryOperator intUnaryOperator15 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator16 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator17 = intUnaryOperator15.compose(intUnaryOperator16);
        java.util.function.IntUnaryOperator intUnaryOperator18 = intUnaryOperator12.andThen(intUnaryOperator16);
        java.util.function.IntUnaryOperator intUnaryOperator19 = intUnaryOperator9.compose(intUnaryOperator18);
        java.util.stream.IntStream intStream20 = java.util.stream.IntStream.iterate(186000000, intUnaryOperator19);
        org.junit.Assert.assertNotNull(intUnaryOperator1);
        org.junit.Assert.assertNotNull(intUnaryOperator2);
        org.junit.Assert.assertNotNull(intUnaryOperator3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 385000000 + "'", int5 == 385000000);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertNotNull(intUnaryOperator7);
        org.junit.Assert.assertNotNull(intUnaryOperator8);
        org.junit.Assert.assertNotNull(intUnaryOperator9);
        org.junit.Assert.assertNotNull(intUnaryOperator10);
        org.junit.Assert.assertNotNull(intUnaryOperator11);
        org.junit.Assert.assertNotNull(intUnaryOperator12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 385000000 + "'", int14 == 385000000);
        org.junit.Assert.assertNotNull(intUnaryOperator15);
        org.junit.Assert.assertNotNull(intUnaryOperator16);
        org.junit.Assert.assertNotNull(intUnaryOperator17);
        org.junit.Assert.assertNotNull(intUnaryOperator18);
        org.junit.Assert.assertNotNull(intUnaryOperator19);
        org.junit.Assert.assertNotNull(intStream20);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.of("zh_TW");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, non numeric characters found: zh_TW");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.ZoneId zoneId22 = zonedDateTime21.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap24 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap24.put((java.time.ZoneId) zoneOffset26, zoneRules34);
        java.time.ZoneId[] zoneIdArray37 = new java.time.ZoneId[] { zoneOffset6, zoneId22, zoneOffset26 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet38 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet38, zoneIdArray37);
        java.lang.String[] strArray43 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray45 = org.apache.commons.lang3.StringUtils.stripAll(strArray43, "GBR");
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray45);
        boolean boolean47 = zoneIdSet38.remove((java.lang.Object) strArray45);
        java.lang.String[] strArray48 = org.apache.commons.lang3.StringUtils.stripAll(strArray45);
        java.lang.String[] strArray49 = org.apache.commons.lang3.StringUtils.stripAll(strArray45);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneIdArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Minute(null <no signer certificates>)" + "'", str46, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime11.with((java.time.temporal.TemporalField) chronoField14, (long) 31);
        boolean boolean17 = offsetDateTime7.isSupported((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime29.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long32 = zonedDateTime29.getLong((java.time.temporal.TemporalField) chronoField31);
        int int33 = offsetDateTime7.get((java.time.temporal.TemporalField) chronoField31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime35 = offsetDateTime7.withMonth((int) 'M');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 77");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField31.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 999999999L + "'", long32 == 999999999L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 999999999 + "'", int33 == 999999999);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        java.nio.charset.Charset charset3 = charsetDecoder1.charset();
        java.nio.charset.CodingErrorAction codingErrorAction4 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder5 = charsetDecoder1.onUnmappableCharacter(codingErrorAction4);
        java.lang.String str6 = codingErrorAction4.toString();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(codingErrorAction4);
        org.junit.Assert.assertNotNull(charsetDecoder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IGNORE" + "'", str6, "IGNORE");
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 11);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        char[] charArray11 = new char[] { 'a', '#', '4', '#' };
        boolean boolean12 = org.apache.commons.lang3.StringUtils.containsAny("", charArray11);
        boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray11);
        boolean boolean14 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray11);
        int int15 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer3, charArray11);
        boolean boolean16 = charBuffer3.hasArray();
        boolean boolean17 = charBuffer3.isDirect();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        java.net.NetworkInterface networkInterface1 = java.net.NetworkInterface.getByIndex((int) ':');
        org.junit.Assert.assertNull(networkInterface1);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = java.nio.charset.Charset.isSupported("localhostish (United Kingdom)");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: localhostish (United Kingdom)");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\ufffd");
        double[] doubleArray6 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer7 = java.nio.DoubleBuffer.wrap(doubleArray6);
        printStream1.print((java.lang.Object) doubleArray6);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.write((int) '.');
        java.nio.CharBuffer charBuffer14 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer15 = charBuffer14.flip();
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer18 = charBuffer17.flip();
        int int19 = charBuffer14.compareTo(charBuffer17);
        int int20 = charBuffer17.length();
        java.nio.CharBuffer charBuffer21 = charBuffer17.duplicate();
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) charBuffer21);
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocate((int) (byte) 100);
        java.io.File file27 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL28 = file27.toURL();
        java.io.File file31 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL32 = file31.toURL();
        boolean boolean33 = uRL28.sameFile(uRL32);
        java.lang.String str34 = uRL32.getQuery();
        java.lang.String str35 = uRL32.getHost();
        java.io.InputStream inputStream36 = uRL32.openStream();
        boolean boolean37 = inputStream36.markSupported();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.wrap(byteArray39);
        int int41 = inputStream36.read(byteArray39);
        java.nio.ByteBuffer byteBuffer42 = byteBuffer24.get(byteArray39);
        printStream22.write(byteArray39);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/tmp/United Kingdom2726356672497350089aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL28);
// flaky:         org.junit.Assert.assertEquals(uRL28.toString(), "file:/tmp/United Kingdom2726356672497350089aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file31.toString(), "/tmp/United Kingdom2788984016090768806aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL32);
// flaky:         org.junit.Assert.assertEquals(uRL32.toString(), "file:/tmp/United Kingdom2788984016090768806aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0]");
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer42);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        java.io.PrintStream printStream1 = new java.io.PrintStream("+999999999-12-31T00:00:00.000031Z");
        printStream1.println(168L);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond((long) 8000000, (long) 968000000);
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.Instant instant21 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.Clock clock26 = java.time.Clock.fixed(instant21, (java.time.ZoneId) zoneOffset24);
        java.time.LocalTime localTime27 = java.time.LocalTime.now(clock26);
        java.time.LocalTime localTime29 = localTime27.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.of(localDate19, localTime29);
        java.time.LocalTime localTime32 = localTime29.plusNanos(13L);
        int int33 = localTime29.getHour();
        java.time.LocalTime localTime35 = localTime29.minusNanos(1434414441700000L);
        java.time.Duration duration36 = java.time.Duration.ZERO;
        boolean boolean38 = duration36.equals((java.lang.Object) (short) 0);
        java.time.Duration duration39 = duration36.abs();
        java.time.Duration duration41 = duration39.plusMinutes((long) 'G');
        java.time.LocalTime localTime42 = localTime35.plus((java.time.temporal.TemporalAmount) duration39);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(clock26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(localTime42);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.DayOfWeek dayOfWeek23 = localDateTime17.getDayOfWeek();
        java.time.format.TextStyle textStyle24 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        java.lang.String str29 = dayOfWeek23.getDisplayName(textStyle24, locale25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime41.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime42.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        boolean boolean52 = localDateTime31.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.DayOfWeek dayOfWeek53 = localDateTime47.getDayOfWeek();
        java.time.format.TextStyle textStyle54 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale55 = java.util.Locale.UK;
        java.lang.String str56 = locale55.getISO3Country();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.lang.String str58 = locale55.getDisplayScript(locale57);
        java.lang.String str59 = dayOfWeek53.getDisplayName(textStyle54, locale55);
        java.time.format.TextStyle textStyle60 = textStyle54.asStandalone();
        java.util.Locale locale61 = java.util.Locale.CHINA;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = dayOfWeek23.getDisplayName(textStyle54, locale61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = locale61.getExtension('0');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle24 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle24.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GBR" + "'", str26, "GBR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5" + "'", str29, "5");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek53 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek53.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle54 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle54.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GBR" + "'", str56, "GBR");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "5" + "'", str59, "5");
        org.junit.Assert.assertTrue("'" + textStyle60 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle60.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u4e94" + "'", str63, "\u4e94");
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.Duration duration8 = java.time.Duration.ZERO;
        boolean boolean10 = duration8.equals((java.lang.Object) (short) 0);
        java.time.Duration duration11 = duration8.abs();
        java.time.LocalTime localTime12 = localTime7.plus((java.time.temporal.TemporalAmount) duration11);
        java.nio.charset.Charset charset13 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        boolean boolean15 = charset13.contains(charset14);
        boolean boolean16 = duration11.equals((java.lang.Object) charset13);
        java.lang.String str17 = charset13.toString();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "US-ASCII" + "'", str17, "US-ASCII");
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        java.time.LocalTime localTime11 = localTime7.minusNanos(0L);
        int int12 = localTime7.toSecondOfDay();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Iterator<java.lang.String> strItor44 = strList41.iterator();
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.join(strItor44, "MINUTEMINU");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        boolean boolean2 = charsetDecoder1.isAutoDetecting();
        float float3 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset4.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset4.newEncoder();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.wrap(byteArray9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder7.replaceWith(byteArray9);
        java.nio.charset.CodingErrorAction codingErrorAction12 = charsetEncoder11.unmappableCharacterAction();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charsetDecoder1.onUnmappableCharacter(codingErrorAction12);
        java.util.function.Predicate<java.util.function.DoubleConsumer> doubleConsumerPredicate14 = java.util.function.Predicate.isEqual((java.lang.Object) charsetDecoder13);
        boolean boolean15 = charsetDecoder13.isAutoDetecting();
        java.nio.charset.Charset charset16 = charsetDecoder13.charset();
        java.nio.charset.CharsetDecoder charsetDecoder17 = charsetDecoder13.reset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(codingErrorAction12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(doubleConsumerPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charsetDecoder17);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = null; // flaky: java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.file.WatchService watchService12 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind13 = null;
        java.nio.file.WatchEvent.Kind[] kindArray15 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray16 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray15;
        wildcardKindArray16[0] = wildcardKind13;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey19 = path4.register(watchService12, wildcardKindArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
// flaky:         org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(kindArray15);
        org.junit.Assert.assertNotNull(wildcardKindArray16);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        int int2 = org.apache.commons.lang3.StringUtils.indexOf("zonerules[currentstandardoffset=z]", (int) '\uffff');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.net.Proxy proxy10 = java.net.Proxy.NO_PROXY;
        java.lang.String str11 = proxy10.toString();
        java.net.Proxy.Type type12 = proxy10.type();
        java.net.URLConnection uRLConnection13 = uRL7.openConnection(proxy10);
        java.lang.String str15 = uRLConnection13.getRequestProperty("lo////////");
        java.lang.String str17 = uRLConnection13.getRequestProperty("\\u0023");
        java.io.InputStream inputStream18 = uRLConnection13.getInputStream();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom7728175698173148963aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom7728175698173148963aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom7806609978416029576aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom7806609978416029576aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(proxy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DIRECT" + "'", str11, "DIRECT");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type12.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(uRLConnection13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(inputStream18);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        java.nio.file.FileSystem fileSystem8 = path4.getFileSystem();
        java.lang.String[] strArray12 = org.apache.commons.lang3.StringUtils.split("zho", 'x');
        java.nio.file.Path path13 = fileSystem8.getPath("1970-01-01", strArray12);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(fileSystem8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(path13);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.Instant instant5 = instant3.minusMillis((long) 399000000);
        java.util.Date date6 = java.util.Date.from(instant3);
        int int7 = date6.getDay();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:31 UTC 1970");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom176108233208385894aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap7 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = zoneOffset11.getRules();
        java.time.zone.ZoneRules zoneRules14 = zoneIdMap7.getOrDefault((java.lang.Object) 1.0d, zoneRules13);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration15 = zoneIdMap7.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration16 = zoneIdMap7.keys();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.lang.String str20 = locale17.getDisplayScript(locale19);
        java.util.Locale.setDefault(locale19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset26);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset26.getRules();
        java.time.zone.ZoneRules zoneRules30 = zoneIdMap7.getOrDefault((java.lang.Object) locale19, zoneRules29);
        float[] floatArray33 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer34 = java.nio.FloatBuffer.wrap(floatArray33);
        java.nio.FloatBuffer floatBuffer35 = floatBuffer34.compact();
        boolean boolean36 = zoneRules30.equals((java.lang.Object) floatBuffer34);
        java.nio.FloatBuffer floatBuffer37 = floatBuffer3.put(floatBuffer34);
        boolean boolean38 = floatBuffer3.isDirect();
        int int39 = floatBuffer3.arrayOffset();
        int int40 = floatBuffer3.remaining();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap42 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap46 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.zone.ZoneRules zoneRules52 = zoneOffset50.getRules();
        java.time.zone.ZoneRules zoneRules53 = zoneIdMap46.getOrDefault((java.lang.Object) 1.0d, zoneRules52);
        java.time.zone.ZoneRules zoneRules54 = zoneIdMap42.put((java.time.ZoneId) zoneOffset44, zoneRules52);
        float[] floatArray57 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer58 = java.nio.FloatBuffer.wrap(floatArray57);
        boolean boolean59 = zoneIdMap42.contains((java.lang.Object) floatArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer62 = floatBuffer3.put(floatArray57, (-4), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneRules14);
        org.junit.Assert.assertNotNull(zoneIdEnumeration15);
        org.junit.Assert.assertNotNull(zoneIdEnumeration16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GBR" + "'", str18, "GBR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertNotNull(floatBuffer35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(zoneRules52);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertNull(zoneRules54);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.IntStream intStream2 = intStream1.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream3 = intStream1.unordered();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.net.Proxy proxy10 = java.net.Proxy.NO_PROXY;
        java.lang.String str11 = proxy10.toString();
        java.net.Proxy.Type type12 = proxy10.type();
        java.net.URLConnection uRLConnection13 = uRL7.openConnection(proxy10);
        java.lang.String str15 = uRLConnection13.getRequestProperty("lo////////");
        java.lang.String str17 = uRLConnection13.getRequestProperty("\\u0023");
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream18 = uRLConnection13.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.net.UnknownServiceException; message: protocol doesn't support output");
        } catch (java.net.UnknownServiceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom8913611288842938628aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom8913611288842938628aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom8814939930062515697aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom8814939930062515697aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(proxy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DIRECT" + "'", str11, "DIRECT");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type12.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(uRLConnection13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = null; // flaky: java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = null; // flaky: fileChannel11.position((long) 'x');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        float float18 = byteBuffer15.getFloat(4);
        java.nio.ByteBuffer byteBuffer20 = byteBuffer15.putChar('\r');
        boolean boolean21 = byteBuffer20.isDirect();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = 0; // flaky: fileChannel11.write(byteBuffer20);
// flaky:             org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.OptionalLong optionalLong3 = longStream2.findFirst();
        boolean boolean4 = optionalLong3.isPresent();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        java.net.InetAddress inetAddress13 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str14 = inetAddress13.getHostName();
        byte[] byteArray15 = inetAddress13.getAddress();
        java.net.InetAddress inetAddress16 = java.net.InetAddress.getByAddress("zh_CN", byteArray15);
        java.nio.ByteBuffer byteBuffer17 = byteBuffer10.get(byteArray15);
        java.nio.ByteBuffer byteBuffer18 = byteBuffer17.compact();
        java.nio.ByteBuffer byteBuffer20 = byteBuffer18.put((byte) 10);
        java.nio.ShortBuffer shortBuffer21 = byteBuffer20.asShortBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(inetAddress13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "localhost" + "'", str14, "localhost");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inetAddress16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(shortBuffer21);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.HOURS;
        java.lang.Thread thread1 = null;
        timeUnit0.timedJoin(thread1, 0L);
        org.junit.Assert.assertNotNull(timeUnit0);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.LocalDateTime localDateTime14 = zonedDateTime11.toLocalDateTime();
        java.time.LocalTime localTime15 = localDateTime14.toLocalTime();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.withSecond((int) (byte) 0);
        java.time.LocalDate localDate22 = offsetDateTime19.toLocalDate();
        java.time.Month month23 = localDate22.getMonth();
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.ZonedDateTime zonedDateTime35 = offsetDateTime27.atZoneSameInstant((java.time.ZoneId) zoneOffset32);
        int int36 = zonedDateTime35.getDayOfMonth();
        int int37 = zonedDateTime35.getHour();
        java.time.ZonedDateTime zonedDateTime39 = zonedDateTime35.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.zone.ZoneRules zoneRules50 = zoneOffset48.getRules();
        java.time.ZonedDateTime zonedDateTime51 = offsetDateTime43.atZoneSameInstant((java.time.ZoneId) zoneOffset48);
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime51.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long54 = zonedDateTime51.getLong((java.time.temporal.TemporalField) chronoField53);
        long long55 = zonedDateTime39.getLong((java.time.temporal.TemporalField) chronoField53);
        boolean boolean56 = month23.isSupported((java.time.temporal.TemporalField) chronoField53);
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField53.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime59 = localTime15.with((java.time.temporal.TemporalField) chronoField53, 1645434891000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for NanoOfSecond (valid values 0 - 999999999): 1645434891000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + month23 + "' != '" + java.time.Month.DECEMBER + "'", month23.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(zoneRules50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField53.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 999999999L + "'", long54 == 999999999L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 999999999L + "'", long55 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.SECONDS));
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.of((int) (short) -1, 920000000, 256, 539000000, 0, (int) (short) 0, 70);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 920000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        long long3 = period1.toTotalMonths();
        java.time.Period period5 = period1.plusYears((long) 33237);
        java.io.File file7 = new java.io.File("GBR");
        boolean boolean9 = file7.setWritable(true);
        boolean boolean11 = file7.setWritable(true);
        java.lang.String str12 = file7.getPath();
        long long13 = file7.length();
        java.io.File file14 = file7.getAbsoluteFile();
        boolean boolean15 = period5.equals((java.lang.Object) file14);
        int int16 = period5.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GBR" + "'", str12, "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4096L + "'", long13 == 4096L);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-7) + "'", int16 == (-7));
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.PROLEPTIC_MONTH;
        long long9 = offsetDateTime7.getLong((java.time.temporal.TemporalField) chronoField8);
        java.time.LocalDate localDate10 = java.time.LocalDate.now();
        java.time.LocalDate localDate12 = localDate10.withDayOfMonth((int) (byte) 1);
        java.time.LocalDate localDate14 = localDate10.minusWeeks(4096L);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        java.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks(0L);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean20 = localDateTime15.isSupported((java.time.temporal.TemporalField) chronoField19);
        java.time.temporal.TemporalUnit temporalUnit21 = chronoField19.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = offsetDateTime7.until((java.time.temporal.Temporal) localDate10, temporalUnit21);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetDateTime from TemporalAccessor: 2022-02-21 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.PROLEPTIC_MONTH + "'", chronoField8.equals(java.time.temporal.ChronoField.PROLEPTIC_MONTH));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3335999999L + "'", long9 == 3335999999L);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField19.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit21 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit21.equals(java.time.temporal.ChronoUnit.SECONDS));
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setLanguage("DoubleSummaryStatistics{count=2, sum=100.000000, min=0.000000, average=50.000000, max=100.000000}");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: DoubleSummaryStatistics{count=2, sum=100.000000, min=0.000000, average=50.000000, max=100.000000} [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis(43200000000000L);
        java.time.chrono.IsoEra isoEra2 = java.time.chrono.IsoEra.BCE;
        int int3 = isoEra2.getValue();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.lang.String str13 = zoneRules11.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = zoneRules11.getTransitions();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        int int20 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        int int25 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime26.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        int int36 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        boolean boolean37 = localDateTime16.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str39 = localDateTime32.format(dateTimeFormatter38);
        java.time.ZoneOffset zoneOffset40 = zoneRules11.getOffset(localDateTime32);
        java.time.LocalDateTime localDateTime42 = localDateTime32.minusMinutes(13L);
        java.time.temporal.Temporal temporal43 = isoEra2.adjustInto((java.time.temporal.Temporal) localDateTime42);
        java.time.format.TextStyle textStyle44 = java.time.format.TextStyle.FULL_STANDALONE;
        java.util.Locale locale45 = java.util.Locale.UK;
        java.lang.String str46 = locale45.getISO3Country();
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.lang.String str48 = locale45.getDisplayScript(locale47);
        java.util.Locale.setDefault(locale47);
        java.lang.String str50 = isoEra2.getDisplayName(textStyle44, locale47);
        boolean boolean51 = fileTime1.equals((java.lang.Object) locale47);
        java.util.Locale.setDefault(locale47);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertTrue("'" + isoEra2 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra2.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str13, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str39, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(temporal43);
        org.junit.Assert.assertTrue("'" + textStyle44 + "' != '" + java.time.format.TextStyle.FULL_STANDALONE + "'", textStyle44.equals(java.time.format.TextStyle.FULL_STANDALONE));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GBR" + "'", str46, "GBR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0" + "'", str50, "0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.LocalDate localDate15 = localDate13.plusYears((long) 'u');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.Month month20 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime33 = localDateTime27.withHour(4);
        int int34 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDate localDate35 = localDateTime16.toLocalDate();
        java.time.Instant instant37 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.Clock clock42 = java.time.Clock.fixed(instant37, (java.time.ZoneId) zoneOffset40);
        java.time.LocalTime localTime43 = java.time.LocalTime.now(clock42);
        java.time.LocalTime localTime45 = localTime43.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.of(localDate35, localTime45);
        java.time.LocalTime localTime48 = localTime45.plusNanos(13L);
        java.time.LocalDateTime localDateTime49 = localDate13.atTime(localTime48);
        java.time.Instant instant51 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.Clock clock56 = java.time.Clock.fixed(instant51, (java.time.ZoneId) zoneOffset54);
        java.time.LocalTime localTime57 = java.time.LocalTime.now(clock56);
        java.time.LocalTime localTime59 = localTime57.plusHours((long) 16384);
        long long60 = localTime59.toNanoOfDay();
        java.time.LocalTime localTime62 = localTime59.minusHours((long) 'G');
        boolean boolean63 = localTime48.isBefore(localTime59);
        java.time.LocalDate localDate64 = java.time.LocalDate.now();
        java.time.LocalDate localDate65 = java.time.LocalDate.MIN;
        boolean boolean66 = localDate64.isEqual((java.time.chrono.ChronoLocalDate) localDate65);
        int int67 = localDate65.getYear();
        java.time.LocalDate localDate68 = java.time.LocalDate.now();
        java.time.LocalDate localDate69 = java.time.LocalDate.MIN;
        boolean boolean70 = localDate68.isEqual((java.time.chrono.ChronoLocalDate) localDate69);
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime74 = localDateTime71.atOffset(zoneOffset73);
        java.time.OffsetDateTime offsetDateTime76 = offsetDateTime74.withSecond((int) (byte) 0);
        java.time.LocalDate localDate77 = offsetDateTime74.toLocalDate();
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean79 = offsetDateTime74.isSupported((java.time.temporal.TemporalField) chronoField78);
        boolean boolean80 = localDate68.isSupported((java.time.temporal.TemporalField) chronoField78);
        java.time.Period period81 = java.time.Period.between(localDate65, localDate68);
        java.time.LocalDate localDate82 = java.time.LocalDate.now();
        java.time.LocalDate localDate83 = java.time.LocalDate.MIN;
        boolean boolean84 = localDate82.isEqual((java.time.chrono.ChronoLocalDate) localDate83);
        int int85 = localDate83.getYear();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime89 = localDateTime86.atOffset(zoneOffset88);
        java.time.temporal.Temporal temporal90 = localDate83.adjustInto((java.time.temporal.Temporal) localDateTime86);
        java.time.Period period92 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period93 = period92.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod94 = period92.negated();
        java.time.LocalDate localDate95 = localDate83.plus((java.time.temporal.TemporalAmount) chronoPeriod94);
        java.time.temporal.TemporalUnit temporalUnit96 = null;
        boolean boolean97 = localDate95.isSupported(temporalUnit96);
        boolean boolean98 = localDate68.isEqual((java.time.chrono.ChronoLocalDate) localDate95);
        java.time.LocalDateTime localDateTime99 = localTime59.atDate(localDate68);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.DECEMBER + "'", month20.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(clock42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(clock56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 57632000000000L + "'", long60 == 57632000000000L);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-999999999) + "'", int67 == (-999999999));
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField78.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-999999999) + "'", int85 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertNotNull(offsetDateTime89);
        org.junit.Assert.assertNotNull(temporal90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(chronoPeriod94);
        org.junit.Assert.assertNotNull(localDate95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(localDateTime99);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.Instant instant4 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant6 = instant4.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime7 = java.nio.file.attribute.FileTime.from(instant4);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery8 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period9 = instant4.query(periodTemporalQuery8);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit11 = chronoField10.getBaseUnit();
        boolean boolean12 = instant4.isSupported(temporalUnit11);
        boolean boolean13 = offsetTime0.isSupported(temporalUnit11);
        java.time.LocalDate localDate14 = java.time.LocalDate.now();
        java.time.LocalDate localDate16 = localDate14.withDayOfMonth((int) (byte) 1);
        java.time.OffsetDateTime offsetDateTime17 = offsetTime0.atDate(localDate16);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate19 = localDate16.plusYears((long) 999999998);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000002020");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(fileTime7);
        org.junit.Assert.assertNotNull(periodTemporalQuery8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField10.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit11 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit11.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer1.asReadOnlyBuffer();
        short[] shortArray4 = shortBuffer1.array();
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray4, (int) '\000', 0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer10 = java.nio.ShortBuffer.wrap(shortArray4, 10, 186000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(shortBuffer7);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.net.Proxy proxy10 = java.net.Proxy.NO_PROXY;
        java.lang.String str11 = proxy10.toString();
        java.net.Proxy.Type type12 = proxy10.type();
        java.net.URLConnection uRLConnection13 = uRL7.openConnection(proxy10);
        uRLConnection13.connect();
        boolean boolean15 = uRLConnection13.getDefaultUseCaches();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom5500394524120629628aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom5500394524120629628aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom5403250728800025673aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom5403250728800025673aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(proxy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DIRECT" + "'", str11, "DIRECT");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type12.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(uRLConnection13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        char char2 = org.apache.commons.lang3.CharUtils.toChar("\u4e3b\u4f53: \n", 'a');
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\u4e3b' + "'", char2 == '\u4e3b');
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        int int6 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime2);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime2.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        int int17 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime13.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        boolean boolean23 = localDateTime2.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        boolean boolean34 = localDateTime24.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        boolean boolean35 = localDateTime18.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDate localDate36 = localDateTime18.toLocalDate();
        java.time.LocalDate localDate38 = localDate36.minusWeeks((long) (short) 1);
        boolean boolean39 = chronoField0.isSupportedBy((java.time.temporal.TemporalAccessor) localDate38);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        java.nio.channels.FileChannel.MapMode mapMode0 = java.nio.channels.FileChannel.MapMode.READ_ONLY;
        java.lang.String str1 = mapMode0.toString();
        org.junit.Assert.assertNotNull(mapMode0);
        org.junit.Assert.assertEquals(mapMode0.toString(), "READ_ONLY");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "READ_ONLY" + "'", str1, "READ_ONLY");
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer2.compact();
        java.nio.ShortBuffer shortBuffer5 = shortBuffer3.put((short) (byte) 0);
        java.nio.ShortBuffer shortBuffer6 = shortBuffer5.asReadOnlyBuffer();
        short short8 = shortBuffer5.get(0);
        java.nio.ShortBuffer shortBuffer9 = shortBuffer5.slice();
        java.nio.ShortBuffer shortBuffer11 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer12 = shortBuffer11.compact();
        java.nio.ShortBuffer shortBuffer13 = shortBuffer12.compact();
        java.nio.ShortBuffer shortBuffer15 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer16 = shortBuffer15.compact();
        java.nio.ShortBuffer shortBuffer17 = shortBuffer16.compact();
        java.nio.ShortBuffer shortBuffer19 = shortBuffer17.put((short) (byte) 0);
        java.nio.ShortBuffer shortBuffer20 = shortBuffer19.asReadOnlyBuffer();
        short short22 = shortBuffer19.get(0);
        java.nio.ShortBuffer shortBuffer23 = shortBuffer19.slice();
        int int24 = shortBuffer13.compareTo(shortBuffer19);
        java.nio.ShortBuffer shortBuffer25 = shortBuffer5.put(shortBuffer19);
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(shortBuffer6);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer9);
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(shortBuffer13);
        org.junit.Assert.assertNotNull(shortBuffer15);
        org.junit.Assert.assertNotNull(shortBuffer16);
        org.junit.Assert.assertNotNull(shortBuffer17);
        org.junit.Assert.assertNotNull(shortBuffer19);
        org.junit.Assert.assertNotNull(shortBuffer20);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 0 + "'", short22 == (short) 0);
        org.junit.Assert.assertNotNull(shortBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(shortBuffer25);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.CharBuffer charBuffer2 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer3 = charBuffer2.flip();
        int int4 = charBuffer2.capacity();
        boolean boolean5 = charBuffer2.hasArray();
        java.nio.ByteBuffer byteBuffer6 = charset0.encode(charBuffer2);
        boolean boolean7 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) charBuffer2);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder1 = java.util.stream.LongStream.builder();
        builder1.accept((long) 6);
        java.util.function.LongConsumer longConsumer4 = builder0.andThen((java.util.function.LongConsumer) builder1);
        java.util.stream.LongStream longStream5 = builder1.build();
        long[] longArray6 = longStream5.toArray();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(longConsumer4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[6]");
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap9 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.zone.ZoneRules zoneRules15 = zoneOffset13.getRules();
        java.time.zone.ZoneRules zoneRules16 = zoneIdMap9.getOrDefault((java.lang.Object) 1.0d, zoneRules15);
        java.lang.String str17 = zoneRules15.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = zoneRules15.getTransitions();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime19.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        boolean boolean41 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.format.DateTimeFormatter dateTimeFormatter42 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str43 = localDateTime36.format(dateTimeFormatter42);
        java.time.ZoneOffset zoneOffset44 = zoneRules15.getOffset(localDateTime36);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime7.withOffsetSameLocal(zoneOffset44);
        java.time.LocalTime localTime46 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset44);
        java.time.LocalTime localTime47 = java.time.LocalTime.now();
        int int48 = localTime47.toSecondOfDay();
        java.time.LocalTime localTime50 = localTime47.withNano(399000000);
        int int51 = localTime46.compareTo(localTime47);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(zoneRules15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str17, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str43, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 33541 + "'", int48 == 33541);
        org.junit.Assert.assertNotNull(localTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        int[] intArray6 = new int[] { 1024, (byte) 1, 125000000, 17488, '4', 829000000 };
        java.nio.IntBuffer intBuffer7 = java.nio.IntBuffer.wrap(intArray6);
        java.lang.String str8 = intBuffer7.toString();
        boolean boolean9 = intBuffer7.hasArray();
        java.lang.String str10 = intBuffer7.toString();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1024, 1, 125000000, 17488, 52, 829000000]");
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.nio.HeapIntBuffer[pos=0 lim=6 cap=6]" + "'", str8, "java.nio.HeapIntBuffer[pos=0 lim=6 cap=6]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.nio.HeapIntBuffer[pos=0 lim=6 cap=6]" + "'", str10, "java.nio.HeapIntBuffer[pos=0 lim=6 cap=6]");
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        java.util.stream.IntStream intStream5 = intStream4.parallel();
        java.util.stream.IntStream intStream6 = intStream5.sequential();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange2 = java.time.temporal.ValueRange.of((long) 33541, (long) 10000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value must be less than maximum value");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        printWriter1.print((float) 'a');
        java.io.File file7 = new java.io.File("GBR");
        boolean boolean9 = file7.setWritable(true);
        boolean boolean11 = file7.setWritable(true);
        java.net.URI uRI12 = file7.toURI();
        java.io.File file14 = new java.io.File("GBR");
        boolean boolean16 = file14.setWritable(true);
        boolean boolean18 = file14.setWritable(true);
        java.net.URI uRI19 = file14.toURI();
        java.net.URI uRI20 = uRI12.relativize(uRI19);
        java.lang.String str21 = uRI12.getRawSchemeSpecificPart();
        java.io.File file23 = new java.io.File("GBR");
        boolean boolean25 = file23.setWritable(true);
        boolean boolean27 = file23.setWritable(true);
        java.net.URI uRI28 = file23.toURI();
        java.io.File file30 = new java.io.File("GBR");
        boolean boolean32 = file30.setWritable(true);
        boolean boolean34 = file30.setWritable(true);
        java.net.URI uRI35 = file30.toURI();
        java.net.URI uRI36 = uRI28.relativize(uRI35);
        java.net.URI uRI37 = uRI12.relativize(uRI36);
        printWriter1.println((java.lang.Object) uRI37);
        printWriter1.print("+999999999-12-31T23:59:59.999999999");
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write("\u4e3b\u4f53: \n", 30, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 44");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(uRI19);
        org.junit.Assert.assertNotNull(uRI20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/experiment/GBR/" + "'", str21, "/experiment/GBR/");
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(uRI28);
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(uRI35);
        org.junit.Assert.assertNotNull(uRI36);
        org.junit.Assert.assertNotNull(uRI37);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.String str4 = properties1.getProperty("lo////////", "16:00:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "16:00:00" + "'", str4, "16:00:00");
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        java.time.format.ResolverStyle resolverStyle0 = java.time.format.ResolverStyle.LENIENT;
        org.junit.Assert.assertTrue("'" + resolverStyle0 + "' != '" + java.time.format.ResolverStyle.LENIENT + "'", resolverStyle0.equals(java.time.format.ResolverStyle.LENIENT));
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.minusWeeks((long) 834000000);
        int int9 = localDate6.getDayOfYear();
        java.time.LocalDate localDate11 = localDate6.minusWeeks(0L);
        long long12 = localDate11.toEpochDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 365 + "'", int9 == 365);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 365241780471L + "'", long12 == 365241780471L);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("DoubleSummaryStatistics{count=1, sum=385000000.000000, min=385000000.000000, average=385000000.000000, max=385000000.000000}", "+999999999-12-31");
        java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.stripAll(strArray2, "");
        java.lang.String str5 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DoubleSummaryStatistics{count=, sum=85000000.000000, min=85000000.000000, average=85000000.000000, max=85000000.000000}" + "'", str5, "DoubleSummaryStatistics{count=, sum=85000000.000000, min=85000000.000000, average=85000000.000000, max=85000000.000000}");
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("Eng");
        java.util.Locale.Builder builder5 = builder0.clear();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.Duration duration3 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int4 = duration3.getNano();
        java.time.Duration duration5 = duration3.abs();
        java.time.Duration duration6 = duration5.abs();
        java.time.Duration duration8 = duration6.dividedBy((long) 533000000);
        java.time.OffsetTime offsetTime9 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration8);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(offsetTime9);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getHour();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime27.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long30 = zonedDateTime27.getLong((java.time.temporal.TemporalField) chronoField29);
        long long31 = zonedDateTime15.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField29.getRangeUnit();
        boolean boolean33 = temporalUnit32.isDurationEstimated();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 999999999L + "'", long30 == 999999999L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 999999999L + "'", long31 == 999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strList11.removeAll((java.util.Collection<java.lang.String>) strList27);
        boolean boolean29 = strList11.isEmpty();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime41.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime42.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        int int57 = localDateTime52.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        int int62 = localDateTime53.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        boolean boolean63 = localDateTime42.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        java.time.temporal.Temporal temporal64 = localDateTime36.adjustInto((java.time.temporal.Temporal) localDateTime42);
        java.lang.String str65 = localDateTime36.toString();
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate67 = localDateTime66.toLocalDate();
        java.time.LocalDateTime localDateTime69 = localDateTime66.plusWeeks(0L);
        int int70 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime69);
        java.time.LocalDateTime localDateTime72 = localDateTime69.minusHours((long) 999999999);
        boolean boolean73 = strList11.equals((java.lang.Object) localDateTime72);
        strList11.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(temporal64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str65, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration77 = networkInterface76.getInetAddresses();
        int int78 = networkInterface76.getIndex();
        boolean boolean79 = networkInterface76.isLoopback();
        java.net.NetworkInterface networkInterface80 = networkInterface76.getParent();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertNotNull(inetAddressEnumeration77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(networkInterface80);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(316000000);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.Clock clock28 = java.time.Clock.systemUTC();
        java.time.Instant instant29 = clock28.instant();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition30 = zoneRules23.nextTransition(instant29);
        java.util.Locale locale31 = java.util.Locale.US;
        boolean boolean32 = zoneRules23.equals((java.lang.Object) locale31);
        java.time.Instant instant34 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant36 = instant34.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime37 = java.nio.file.attribute.FileTime.from(instant34);
        java.time.ZoneOffset zoneOffset38 = zoneRules23.getOffset(instant34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.withSecond((int) (byte) 0);
        int int45 = offsetDateTime44.getMinute();
        java.time.ZoneOffset zoneOffset46 = offsetDateTime44.getOffset();
        java.time.OffsetDateTime offsetDateTime47 = instant34.atOffset(zoneOffset46);
        java.time.Month month48 = offsetDateTime47.getMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(clock28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNull(zoneOffsetTransition30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(fileTime37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + month48 + "' != '" + java.time.Month.JANUARY + "'", month48.equals(java.time.Month.JANUARY));
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path5 = path4.getRoot();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap7 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = zoneOffset11.getRules();
        java.time.zone.ZoneRules zoneRules14 = zoneIdMap7.getOrDefault((java.lang.Object) 1.0d, zoneRules13);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset19);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap23 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset27.getRules();
        java.time.zone.ZoneRules zoneRules30 = zoneIdMap23.getOrDefault((java.lang.Object) 1.0d, zoneRules29);
        java.lang.String str31 = zoneRules29.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList32 = zoneRules29.getTransitions();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap7.putIfAbsent((java.time.ZoneId) zoneOffset19, zoneRules29);
        java.io.File file35 = new java.io.File("GBR");
        boolean boolean37 = file35.setWritable(true);
        java.nio.file.Path path38 = file35.toPath();
        java.nio.file.Path path40 = path38.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file42 = new java.io.File("GBR");
        boolean boolean44 = file42.setWritable(true);
        java.nio.file.Path path45 = file42.toPath();
        java.nio.file.Path path47 = path45.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption48 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption49 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray50 = new java.nio.file.LinkOption[] { linkOption48, linkOption49 };
        java.nio.file.Path path51 = null; // flaky: path45.toRealPath(linkOptionArray50);
        java.nio.channels.FileChannel fileChannel52 = null; // flaky: java.nio.channels.FileChannel.open(path38, (java.nio.file.OpenOption[]) linkOptionArray50);
        boolean boolean53 = zoneIdMap7.containsValue((java.lang.Object) linkOptionArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path54 = path5.toRealPath(linkOptionArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNull(path5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneRules14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str31, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList32);
        org.junit.Assert.assertNull(zoneRules33);
        org.junit.Assert.assertNull("file35.getParent() == null", file35.getParent());
        org.junit.Assert.assertEquals(file35.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(path38);
        org.junit.Assert.assertNotNull(path40);
        org.junit.Assert.assertNull("file42.getParent() == null", file42.getParent());
        org.junit.Assert.assertEquals(file42.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(path45);
        org.junit.Assert.assertNotNull(path47);
        org.junit.Assert.assertTrue("'" + linkOption48 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption48.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption49 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption49.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray50);
        org.junit.Assert.assertNotNull(path51);
        org.junit.Assert.assertNotNull(fileChannel52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.format.TextStyle textStyle2 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getISO3Language();
        java.time.format.DecimalStyle decimalStyle5 = java.time.format.DecimalStyle.of(locale3);
        java.lang.String str6 = chronology1.getDisplayName(textStyle2, locale3);
        java.time.format.TextStyle textStyle7 = textStyle2.asStandalone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + textStyle2 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle2.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISO" + "'", str6, "ISO");
        org.junit.Assert.assertTrue("'" + textStyle7 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle7.equals(java.time.format.TextStyle.NARROW_STANDALONE));
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Set<java.time.ZoneId> zoneIdSet2 = zoneIdMap1.keySet();
        java.time.format.FormatStyle formatStyle3 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter4 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle3);
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology6 = dateTimeFormatter5.getChronology();
        java.time.format.TextStyle textStyle7 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getISO3Language();
        java.time.format.DecimalStyle decimalStyle10 = java.time.format.DecimalStyle.of(locale8);
        java.lang.String str11 = chronology6.getDisplayName(textStyle7, locale8);
        java.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter4.withChronology(chronology6);
        boolean boolean13 = zoneIdSet2.contains((java.lang.Object) dateTimeFormatter12);
        java.lang.Object[] objArray14 = zoneIdSet2.toArray();
        zoneIdSet2.clear();
        org.junit.Assert.assertNotNull(zoneIdSet2);
        org.junit.Assert.assertTrue("'" + formatStyle3 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle3.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + textStyle7 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle7.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertNotNull(decimalStyle10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISO" + "'", str11, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration4 = duration2.abs();
        java.time.Duration duration5 = duration4.abs();
        java.time.Duration duration7 = duration4.plusDays((long) 17488);
        java.time.Duration duration9 = duration4.minusHours((long) 834000000);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer1 = java.nio.IntBuffer.wrap(intArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        char[] charArray21 = new char[] { 'a', '#', '4', '#' };
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsAny("", charArray21);
        boolean boolean23 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray21);
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray21);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap26 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.zone.ZoneRules zoneRules33 = zoneIdMap26.getOrDefault((java.lang.Object) 1.0d, zoneRules32);
        java.lang.String str34 = zoneRules32.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList35 = zoneRules32.getTransitions();
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap1.getOrDefault((java.lang.Object) charArray21, zoneRules32);
        java.util.Enumeration<java.time.zone.ZoneRules> zoneRulesEnumeration37 = zoneIdMap1.elements();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.OffsetDateTime offsetDateTime43 = offsetDateTime41.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        java.time.zone.ZoneRules zoneRules48 = zoneOffset46.getRules();
        java.time.ZonedDateTime zonedDateTime49 = offsetDateTime41.atZoneSameInstant((java.time.ZoneId) zoneOffset46);
        int int50 = zonedDateTime49.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime49.withDayOfYear(10);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset57);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit62 = chronoField61.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime63 = localDateTime59.minus((long) (-999999999), temporalUnit62);
        boolean boolean64 = zonedDateTime49.isSupported(temporalUnit62);
        java.time.Instant instant66 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant68 = instant66.minusNanos((long) 'a');
        long long69 = instant66.getEpochSecond();
        java.time.Instant instant71 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime75 = localDateTime72.atOffset(zoneOffset74);
        java.time.Clock clock76 = java.time.Clock.fixed(instant71, (java.time.ZoneId) zoneOffset74);
        java.time.OffsetDateTime offsetDateTime77 = instant66.atOffset(zoneOffset74);
        java.time.OffsetDateTime offsetDateTime79 = offsetDateTime77.plusSeconds((long) 371000000);
        java.time.OffsetDateTime offsetDateTime81 = offsetDateTime77.plusYears((long) 284000000);
        boolean boolean82 = zoneIdMap1.remove((java.lang.Object) zonedDateTime49, (java.lang.Object) offsetDateTime81);
        javax.security.auth.Subject subject83 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet84 = subject83.getPublicCredentials();
        boolean boolean85 = subject83.isReadOnly();
        subject83.setReadOnly();
        boolean boolean87 = zoneIdMap1.containsValue((java.lang.Object) subject83);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zoneRules33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str34, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneRulesEnumeration37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 31 + "'", int50 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField61.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit62 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit62.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 32L + "'", long69 == 32L);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(clock76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.lang.String str18 = isoChronology0.toString();
        java.lang.String str19 = isoChronology0.toString();
        java.time.LocalDate localDate20 = isoChronology0.dateNow();
        java.util.Map<java.time.temporal.TemporalField, java.lang.Long> temporalFieldMap21 = null;
        java.time.format.ResolverStyle resolverStyle22 = java.time.format.ResolverStyle.SMART;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate23 = isoChronology0.resolveDate(temporalFieldMap21, resolverStyle22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISO" + "'", str19, "ISO");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + resolverStyle22 + "' != '" + java.time.format.ResolverStyle.SMART + "'", resolverStyle22.equals(java.time.format.ResolverStyle.SMART));
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        java.net.URISyntaxException uRISyntaxException2 = new java.net.URISyntaxException("1 Jan 1970 00:00:32 GMT", "java.nio.HeapShortBuffer[pos=64 lim=64 cap=64]");
        java.lang.String str3 = uRISyntaxException2.getInput();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 Jan 1970 00:00:32 GMT" + "'", str3, "1 Jan 1970 00:00:32 GMT");
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalDate localDate8 = java.time.LocalDate.now(clock6);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 97);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long14 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery15 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period16 = zonedDateTime11.query(periodTemporalQuery15);
        java.time.ZoneId zoneId17 = zonedDateTime11.getZone();
        java.time.Instant instant18 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime20 = zonedDateTime11.minusMonths(781000000000000000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -65083332333333334");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 999999999L + "'", long14 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(instant18);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        char[] charArray15 = new char[] { 'a', '#', '4', '#' };
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsAny("", charArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray15);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray15);
        int int19 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer7, charArray15);
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray15);
        printWriter1.println(charArray15);
        char[] charArray29 = new char[] { '#', '\n', '\uffff', '\n', '\uffff', '-' };
        printWriter1.println(charArray29);
        printWriter1.println((long) 4096);
        java.util.Locale locale33 = java.util.Locale.UK;
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.lang.String str36 = locale33.getDisplayScript(locale35);
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet38 = locale35.getExtensionKeys();
        java.lang.String[] strArray42 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("ZoneRules[currentStandardOffset=Z]", '/');
        java.io.PrintWriter printWriter43 = printWriter1.printf(locale35, "-999999999-01-01", (java.lang.Object[]) strArray42);
        // The following exception was thrown during execution in test generation
        try {
            printWriter43.write("\u4e0a\u5348\u65f6\u5206\u79d2", 2, (int) '\n');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 12");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#\n\uffff\n\uffff-");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#\n\uffff\n\uffff-");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, \n\uffff, \n\uffff, -]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GBR" + "'", str34, "GBR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter43);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        java.io.File file1 = new java.io.File("+999999999-12-31T00:00:00.000031Z");
        java.io.File file3 = new java.io.File("GBR");
        boolean boolean5 = file3.setWritable(true);
        java.nio.file.Path path6 = file3.toPath();
        boolean boolean7 = file1.renameTo(file3);
        boolean boolean10 = file1.setExecutable(true, true);
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "+999999999-12-31T00:00:00.000031Z");
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(path6);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = instant1.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.plusSeconds((long) 371000000);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime12.plusYears((long) 284000000);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime20.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime20.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset30);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit35 = chronoField34.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime36 = localDateTime32.minus((long) (-999999999), temporalUnit35);
        java.lang.String str37 = temporalUnit35.toString();
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime24.plus((long) (byte) 100, temporalUnit35);
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime24.withDayOfYear((int) '#');
        boolean boolean41 = offsetDateTime16.isAfter(offsetDateTime24);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField34.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit35 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit35.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Weeks" + "'", str37, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        float float6 = floatBuffer3.get();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer9 = floatBuffer3.put(10, (float) 722000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 16.0f + "'", float6 == 16.0f);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer3 = charBuffer1.duplicate();
        java.util.stream.IntStream intStream4 = charBuffer3.codePoints();
        intStream4.close();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = intStream4.unordered();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.ZonedDateTime zonedDateTime19 = offsetDateTime11.atZoneSameInstant((java.time.ZoneId) zoneOffset16);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime19.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime21 = zonedDateTime19.toLocalTime();
        boolean boolean22 = localTime7.isAfter(localTime21);
        java.time.chrono.Chronology chronology23 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localTime21);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.Clock clock13 = java.time.Clock.systemUTC();
        java.time.Instant instant14 = clock13.instant();
        java.time.ZoneId zoneId15 = clock13.getZone();
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.ofInstant(localDateTime4, zoneOffset11, zoneId15);
        java.time.ZoneOffset zoneOffset17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime18 = java.time.OffsetDateTime.of(localDateTime4, zoneOffset17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: offset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator3 = ofInt2.trySplit();
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt6 = intStream5.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = ofInt6.trySplit();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        ofInt6.forEachRemaining((java.util.function.IntConsumer) builder8);
        boolean boolean10 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder8);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNull(intSpliterator3);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(ofInt6);
        org.junit.Assert.assertNull(intSpliterator7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.net.Proxy proxy10 = java.net.Proxy.NO_PROXY;
        java.lang.String str11 = proxy10.toString();
        java.net.Proxy.Type type12 = proxy10.type();
        java.net.URLConnection uRLConnection13 = uRL7.openConnection(proxy10);
        java.lang.String str15 = uRLConnection13.getRequestProperty("lo////////");
        java.lang.String str17 = uRLConnection13.getRequestProperty("\\u0023");
        long long18 = uRLConnection13.getExpiration();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = uRLConnection13.getRequestProperties();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Already connected");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom6773970589993893435aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom6773970589993893435aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom199793336216346760aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom199793336216346760aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(proxy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DIRECT" + "'", str11, "DIRECT");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type12.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(uRLConnection13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        java.nio.LongBuffer longBuffer10 = longBuffer7.put((int) (byte) 0, 0L);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer13 = byteBuffer12.asLongBuffer();
        java.nio.LongBuffer longBuffer15 = longBuffer13.put(0L);
        java.time.LocalTime localTime16 = java.time.LocalTime.now();
        int int17 = localTime16.getNano();
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long19 = localTime16.getLong((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.withSecond((int) (byte) 0);
        boolean boolean26 = chronoField18.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime23);
        boolean boolean27 = longBuffer15.equals((java.lang.Object) chronoField18);
        boolean boolean28 = longBuffer15.isReadOnly();
        java.nio.LongBuffer longBuffer29 = longBuffer10.put(longBuffer15);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = longBuffer10.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertNotNull(localTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 859000000 + "'", int17 == 859000000);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField18.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 19L + "'", long19 == 19L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longBuffer29);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.ZoneId zoneId22 = zonedDateTime21.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap24 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap24.put((java.time.ZoneId) zoneOffset26, zoneRules34);
        java.time.ZoneId[] zoneIdArray37 = new java.time.ZoneId[] { zoneOffset6, zoneId22, zoneOffset26 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet38 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet38, zoneIdArray37);
        java.lang.String[] strArray43 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray45 = org.apache.commons.lang3.StringUtils.stripAll(strArray43, "GBR");
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray45);
        boolean boolean47 = zoneIdSet38.remove((java.lang.Object) strArray45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList59);
        boolean boolean62 = zoneIdSet38.removeAll((java.util.Collection<java.lang.String>) strList61);
        strList61.clear();
        java.io.File file65 = new java.io.File("GBR");
        boolean boolean66 = file65.mkdirs();
        java.nio.file.Path path67 = file65.toPath();
        boolean boolean68 = strList61.contains((java.lang.Object) path67);
        boolean boolean69 = strList61.isEmpty();
        java.util.stream.IntStream intStream71 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt72 = intStream71.min();
        java.lang.String str73 = optionalInt72.toString();
        int int74 = optionalInt72.getAsInt();
        int int75 = strList61.lastIndexOf((java.lang.Object) optionalInt72);
        boolean boolean77 = strList61.add("Thu Jan 01 00:00:32 UTC 1970");
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneIdArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Minute(null <no signer certificates>)" + "'", str46, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull("file65.getParent() == null", file65.getParent());
        org.junit.Assert.assertEquals(file65.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(path67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(intStream71);
        org.junit.Assert.assertNotNull(optionalInt72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "OptionalInt[10]" + "'", str73, "OptionalInt[10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        java.time.Instant instant16 = java.time.Instant.ofEpochSecond((long) (short) 10, (long) (byte) 0);
        java.time.Instant instant18 = instant16.plusNanos((long) 676000000);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset19 = zoneRules13.getOffset(instant16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI14 = path11.toUri();
        java.net.URI uRI15 = uRI6.relativize(uRI14);
        java.lang.String str16 = uRI14.getRawSchemeSpecificPart();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertNotNull(uRI15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "///experiment/GBR/" + "'", str16, "///experiment/GBR/");
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        double[] doubleArray4 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer5 = java.nio.DoubleBuffer.wrap(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer7 = doubleBuffer5.put((double) 16);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[16.0, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(doubleBuffer7);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        java.time.Month month1 = java.time.Month.MARCH;
        java.time.Month month2 = month1.firstMonthOfQuarter();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.of(97, month1, (int) (short) 0, (-999999999), 457000000, 7);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.MARCH + "'", month1.equals(java.time.Month.MARCH));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JANUARY + "'", month2.equals(java.time.Month.JANUARY));
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer21 = byteBuffer20.asLongBuffer();
        float float23 = byteBuffer20.getFloat(4);
        double double25 = byteBuffer20.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder26 = null;
        java.nio.ByteBuffer byteBuffer27 = byteBuffer20.order(byteOrder26);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer20.putInt((int) (byte) 0, 32);
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] { byteBuffer20 };
        // The following exception was thrown during execution in test generation
        try {
            long long34 = fileChannel18.write(byteBufferArray31, 971000000, 861000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(fileChannel18);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(longBuffer21);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap5 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.zone.ZoneRules zoneRules12 = zoneIdMap5.getOrDefault((java.lang.Object) 1.0d, zoneRules11);
        java.time.zone.ZoneRules zoneRules13 = zoneIdMap1.put((java.time.ZoneId) zoneOffset3, zoneRules11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList14 = zoneRules13.getTransitions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNull(zoneRules13);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI1 = java.net.URI.create("\u4e3b\u4f53: \n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal character in scheme name at index 0: ??: ?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        java.util.Hashtable<java.net.URLConnection, java.time.format.ResolverStyle> uRLConnectionMap0 = new java.util.Hashtable<java.net.URLConnection, java.time.format.ResolverStyle>();
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.Instant instant5 = instant3.minusMillis((long) 399000000);
        java.util.Set<java.lang.String> strSet6 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month7 = java.time.Month.OCTOBER;
        java.time.Month month9 = month7.plus(0L);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        int int20 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.temporal.Temporal temporal21 = month9.adjustInto((java.time.temporal.Temporal) localDateTime11);
        boolean boolean22 = strSet6.equals((java.lang.Object) month9);
        java.security.ProtectionDomain[] protectionDomainArray23 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext24 = new java.security.AccessControlContext(protectionDomainArray23);
        java.time.LocalDate localDate25 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery26 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period27 = localDate25.query(periodTemporalQuery26);
        boolean boolean28 = accessControlContext24.equals((java.lang.Object) periodTemporalQuery26);
        java.time.Period period29 = month9.query(periodTemporalQuery26);
        java.time.Period period30 = instant5.query(periodTemporalQuery26);
        java.util.Date date31 = java.util.Date.from(instant5);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + month7 + "' != '" + java.time.Month.OCTOBER + "'", month7.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month9 + "' != '" + java.time.Month.OCTOBER + "'", month9.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(temporal21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodTemporalQuery26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Dec 27 09:10:31 UTC 1969");
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        java.security.NoSuchProviderException noSuchProviderException1 = new java.security.NoSuchProviderException("hi!x(null <no signer certificates>)x(null <no signer certificates>)xMinutexMinutex(null <no signer certificates>)");
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = offsetDateTime12.atZoneSameInstant((java.time.ZoneId) zoneOffset17);
        java.time.LocalTime localTime21 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.of(localDate6, localTime21, (java.time.ZoneId) zoneOffset24);
        java.time.OffsetTime offsetTime28 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime30 = offsetTime28.withSecond(16);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant34 = instant32.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime35 = java.nio.file.attribute.FileTime.from(instant32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = instant32.query(periodTemporalQuery36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        boolean boolean40 = instant32.isSupported(temporalUnit39);
        boolean boolean41 = offsetTime28.isSupported(temporalUnit39);
        java.time.OffsetDateTime offsetDateTime42 = localDate6.atTime(offsetTime28);
        long long43 = offsetDateTime42.toEpochSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField38.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(offsetDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 31556889832727947L + "'", long43 == 31556889832727947L);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: ");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap7 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = zoneOffset11.getRules();
        java.time.zone.ZoneRules zoneRules14 = zoneIdMap7.getOrDefault((java.lang.Object) 1.0d, zoneRules13);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration15 = zoneIdMap7.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration16 = zoneIdMap7.keys();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.lang.String str20 = locale17.getDisplayScript(locale19);
        java.util.Locale.setDefault(locale19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset26);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset26.getRules();
        java.time.zone.ZoneRules zoneRules30 = zoneIdMap7.getOrDefault((java.lang.Object) locale19, zoneRules29);
        float[] floatArray33 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer34 = java.nio.FloatBuffer.wrap(floatArray33);
        java.nio.FloatBuffer floatBuffer35 = floatBuffer34.compact();
        boolean boolean36 = zoneRules30.equals((java.lang.Object) floatBuffer34);
        java.nio.FloatBuffer floatBuffer37 = floatBuffer3.put(floatBuffer34);
        int int38 = floatBuffer3.arrayOffset();
        float[] floatArray39 = floatBuffer3.array();
        java.nio.FloatBuffer floatBuffer40 = floatBuffer3.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(zoneRules14);
        org.junit.Assert.assertNotNull(zoneIdEnumeration15);
        org.junit.Assert.assertNotNull(zoneIdEnumeration16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GBR" + "'", str18, "GBR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer34);
        org.junit.Assert.assertNotNull(floatBuffer35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatBuffer37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer40);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.MILLISECONDS;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.SECONDS;
        long long4 = timeUnit2.toNanos((long) 781000000);
        long long6 = timeUnit2.toDays((long) 794000000);
        long long7 = timeUnit0.convert(35L, timeUnit2);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 781000000000000000L + "'", long4 == 781000000000000000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9189L + "'", long6 == 9189L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35000L + "'", long7 == 35000L);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.util.Date date5 = java.util.Date.from(instant1);
        int int6 = date5.getDay();
        java.lang.String str7 = date5.toLocaleString();
        date5.setDate(316000000);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Aug 12 00:00:32 UTC 867148");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-1-1 0:00:32" + "'", str7, "1970-1-1 0:00:32");
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant1 = java.time.Instant.parse((java.lang.CharSequence) "3");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '3' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign('a');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle4.withNegativeSign('+');
        char char7 = decimalStyle4.getNegativeSign();
        java.time.format.DecimalStyle decimalStyle9 = decimalStyle4.withZeroDigit('x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '-' + "'", char7 == '-');
        org.junit.Assert.assertNotNull(decimalStyle9);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.Instant instant4 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant6 = instant4.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime7 = java.nio.file.attribute.FileTime.from(instant4);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery8 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period9 = instant4.query(periodTemporalQuery8);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit11 = chronoField10.getBaseUnit();
        boolean boolean12 = instant4.isSupported(temporalUnit11);
        java.time.Instant instant14 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant16 = instant14.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.ofInstant(instant14, (java.time.ZoneId) zoneOffset19);
        java.time.ZoneId zoneId23 = zonedDateTime22.getZone();
        java.time.Clock clock24 = java.time.Clock.fixed(instant4, zoneId23);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset29);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset29.getRules();
        java.time.OffsetDateTime offsetDateTime33 = instant4.atOffset(zoneOffset29);
        java.time.Instant instant35 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant37 = instant35.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime38 = java.nio.file.attribute.FileTime.from(instant35);
        java.time.Instant instant40 = instant35.plusMillis((long) 10);
        boolean boolean41 = instant4.isAfter(instant35);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.zone.ZoneRules zoneRules52 = zoneOffset50.getRules();
        java.time.ZonedDateTime zonedDateTime53 = offsetDateTime45.atZoneSameInstant((java.time.ZoneId) zoneOffset50);
        int int54 = zonedDateTime53.getDayOfMonth();
        int int55 = zonedDateTime53.getHour();
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime53.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.OffsetDateTime offsetDateTime63 = offsetDateTime61.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.zone.ZoneRules zoneRules68 = zoneOffset66.getRules();
        java.time.ZonedDateTime zonedDateTime69 = offsetDateTime61.atZoneSameInstant((java.time.ZoneId) zoneOffset66);
        java.time.ZonedDateTime zonedDateTime70 = zonedDateTime69.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long72 = zonedDateTime69.getLong((java.time.temporal.TemporalField) chronoField71);
        long long73 = zonedDateTime57.getLong((java.time.temporal.TemporalField) chronoField71);
        int int74 = instant4.get((java.time.temporal.TemporalField) chronoField71);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal75 = offsetTime2.adjustInto((java.time.temporal.Temporal) instant4);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(fileTime7);
        org.junit.Assert.assertNotNull(periodTemporalQuery8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField10.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit11 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit11.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(clock24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(fileTime38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(zoneRules52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(zoneRules68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField71.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 999999999L + "'", long72 == 999999999L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 999999999L + "'", long73 == 999999999L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = longStream0.peek((java.util.function.LongConsumer) longSummaryStatistics4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        boolean boolean12 = file8.setWritable(true);
        java.net.URI uRI13 = file8.toURI();
        java.net.URI uRI14 = uRI6.relativize(uRI13);
        java.lang.String str15 = uRI6.getRawSchemeSpecificPart();
        java.io.File file17 = new java.io.File("GBR");
        boolean boolean19 = file17.setWritable(true);
        boolean boolean21 = file17.setWritable(true);
        java.net.URI uRI22 = file17.toURI();
        java.io.File file24 = new java.io.File("GBR");
        boolean boolean26 = file24.setWritable(true);
        java.nio.file.Path path27 = file24.toPath();
        java.nio.file.Path path29 = path27.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI30 = path27.toUri();
        java.net.URI uRI31 = uRI22.relativize(uRI30);
        int int32 = uRI6.compareTo(uRI31);
        java.lang.String str33 = uRI6.getFragment();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(uRI14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/experiment/GBR/" + "'", str15, "/experiment/GBR/");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertNotNull(uRI30);
        org.junit.Assert.assertNotNull(uRI31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime3.minusMinutes((long) 100);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime15.withSecond((int) (byte) 0);
        java.time.LocalDate localDate18 = offsetDateTime15.toLocalDate();
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime15.withDayOfYear((int) '+');
        java.time.format.DateTimeFormatter dateTimeFormatter21 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology22 = dateTimeFormatter21.getChronology();
        java.time.format.TextStyle textStyle23 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String str25 = locale24.getISO3Language();
        java.time.format.DecimalStyle decimalStyle26 = java.time.format.DecimalStyle.of(locale24);
        java.lang.String str27 = chronology22.getDisplayName(textStyle23, locale24);
        java.time.OffsetTime offsetTime28 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime30 = offsetTime28.withSecond(16);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int32 = offsetTime30.get((java.time.temporal.TemporalField) chronoField31);
        java.time.temporal.ValueRange valueRange33 = chronology22.range(chronoField31);
        boolean boolean34 = offsetDateTime20.isSupported((java.time.temporal.TemporalField) chronoField31);
        boolean boolean35 = offsetDateTime11.equals((java.lang.Object) boolean34);
        int int36 = offsetDateTime11.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + textStyle23 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle23.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "eng" + "'", str25, "eng");
        org.junit.Assert.assertNotNull(decimalStyle26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISO" + "'", str27, "ISO");
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField31.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
        org.junit.Assert.assertNotNull(valueRange33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("x-windows-iso2022jp", '#', '\000');
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "x-windows-iso2022jp" + "'", str3, "x-windows-iso2022jp");
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        java.net.URLConnection.setDefaultRequestProperty("en_GB", "");
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.temporal.ValueRange valueRange14 = zonedDateTime11.range((java.time.temporal.TemporalField) chronoField13);
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = chronoField13.getDisplayName(locale15);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(valueRange14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NanoOfSecond" + "'", str16, "NanoOfSecond");
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.LocalDate localDate15 = localDate13.plusYears((long) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate17 = localDate15.withMonth(23);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 23");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        double[] doubleArray4 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer5 = java.nio.DoubleBuffer.wrap(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit8 = chronoField7.getBaseUnit();
        boolean boolean9 = temporalUnit8.isTimeBased();
        java.time.Duration duration10 = temporalUnit8.getDuration();
        boolean boolean11 = doubleBuffer6.equals((java.lang.Object) duration10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit8 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit8.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.zone.ZoneRules zoneRules31 = zoneOffset29.getRules();
        java.time.ZonedDateTime zonedDateTime32 = offsetDateTime24.atZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.time.ZoneId zoneId33 = zonedDateTime32.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap35 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap39 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.zone.ZoneRules zoneRules46 = zoneIdMap39.getOrDefault((java.lang.Object) 1.0d, zoneRules45);
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap35.put((java.time.ZoneId) zoneOffset37, zoneRules45);
        java.time.ZoneId[] zoneIdArray48 = new java.time.ZoneId[] { zoneOffset17, zoneId33, zoneOffset37 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet49 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet49, zoneIdArray48);
        java.lang.String[] strArray54 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray56 = org.apache.commons.lang3.StringUtils.stripAll(strArray54, "GBR");
        java.lang.String str57 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray56);
        boolean boolean58 = zoneIdSet49.remove((java.lang.Object) strArray56);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        strList65.add((int) (short) 0, "eng");
        boolean boolean70 = zoneIdSet49.removeAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean71 = strList65.isEmpty();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean73 = inetAddress72.isMCLinkLocal();
        byte[] byteArray74 = inetAddress72.getAddress();
        boolean boolean75 = zoneIdMap1.remove((java.lang.Object) boolean71, (java.lang.Object) inetAddress72);
        java.net.NetworkInterface networkInterface76 = java.net.NetworkInterface.getByInetAddress(inetAddress72);
        java.net.NetworkInterface networkInterface77 = networkInterface76.getParent();
        boolean boolean78 = networkInterface76.supportsMulticast();
        boolean boolean79 = networkInterface76.supportsMulticast();
        java.lang.String str80 = networkInterface76.getDisplayName();
        boolean boolean81 = networkInterface76.isPointToPoint();
        boolean boolean82 = networkInterface76.isPointToPoint();
        java.util.Enumeration<java.net.InetAddress> inetAddressEnumeration83 = networkInterface76.getInetAddresses();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneIdArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Minute(null <no signer certificates>)" + "'", str57, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[127, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(networkInterface76);
        org.junit.Assert.assertNull(networkInterface77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "lo" + "'", str80, "lo");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(inetAddressEnumeration83);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset32);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField36.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime38 = localDateTime34.minus((long) (-999999999), temporalUnit37);
        java.util.List<java.time.ZoneOffset> zoneOffsetList39 = zoneRules23.getValidOffsets(localDateTime34);
        int int40 = localDateTime34.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField36.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime38);
        org.junit.Assert.assertNotNull(zoneOffsetList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer2.compact();
        java.nio.ShortBuffer shortBuffer5 = shortBuffer3.put((short) (byte) 0);
        java.nio.ShortBuffer shortBuffer6 = shortBuffer5.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer9 = shortBuffer6.put(257000000, (short) 100);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(shortBuffer6);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("/", 755000000, 882000010);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        long long19 = fileChannel18.position();
        boolean boolean20 = fileChannel18.isOpen();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(fileChannel18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        java.security.KeyException keyException1 = new java.security.KeyException("DIRECT");
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("23:59:59.999999999", "f");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.Instant instant5 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant7 = instant5.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime8 = java.nio.file.attribute.FileTime.from(instant5);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = instant5.query(periodTemporalQuery9);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit12 = chronoField11.getBaseUnit();
        boolean boolean13 = instant5.isSupported(temporalUnit12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime15.minusNanos((long) (short) 100);
        boolean boolean22 = temporalUnit12.isSupportedBy((java.time.temporal.Temporal) localDateTime15);
        boolean boolean23 = temporalUnit12.isTimeBased();
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = localDate1.plus((long) 495000000, temporalUnit12);
        java.time.LocalDate localDate25 = java.time.LocalDate.now();
        java.time.LocalDate localDate26 = java.time.LocalDate.MIN;
        boolean boolean27 = localDate25.isEqual((java.time.chrono.ChronoLocalDate) localDate26);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.OffsetDateTime offsetDateTime33 = offsetDateTime31.withSecond((int) (byte) 0);
        java.time.LocalDate localDate34 = offsetDateTime31.toLocalDate();
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean36 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField35);
        boolean boolean37 = localDate25.isSupported((java.time.temporal.TemporalField) chronoField35);
        java.time.LocalDate localDate39 = localDate25.minusMonths(32L);
        java.time.chrono.ChronoPeriod chronoPeriod40 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate1, (java.time.chrono.ChronoLocalDate) localDate39);
        java.time.chrono.Chronology chronology41 = localDate1.getChronology();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField11.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit12 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit12.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField35.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronoPeriod40);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.lang.String str18 = isoChronology0.toString();
        java.time.format.DateTimeFormatter dateTimeFormatter19 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology20 = dateTimeFormatter19.getChronology();
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer23 = charBuffer22.flip();
        int int24 = charBuffer22.capacity();
        boolean boolean25 = charBuffer22.hasArray();
        boolean boolean26 = chronology20.equals((java.lang.Object) charBuffer22);
        java.util.List<java.time.chrono.Era> eraList27 = chronology20.eras();
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.BCE;
        int int29 = isoEra28.getValue();
        java.time.chrono.ChronoLocalDate chronoLocalDate32 = chronology20.dateYearDay((java.time.chrono.Era) isoEra28, 794000000, 59);
        int int33 = isoChronology0.compareTo(chronology20);
        java.lang.String str34 = isoChronology0.getId();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(eraList27);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra28.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISO" + "'", str34, "ISO");
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        longSummaryStatistics0.accept(794000000);
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=1, sum=794000000, min=794000000, average=794000000.000000, max=794000000}");
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.Instant instant8 = offsetDateTime7.toInstant();
        java.time.Duration duration9 = java.time.Duration.ZERO;
        java.time.Duration duration11 = duration9.minusDays((long) (-1));
        java.time.Duration duration13 = duration9.plusNanos((long) 26);
        java.time.Duration duration15 = duration13.minusNanos(0L);
        java.time.Instant instant16 = instant8.minus((java.time.temporal.TemporalAmount) duration13);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("localhostish (United Kingdom)", "\\u0020", 14);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "loca\\u0020dom)" + "'", str3, "loca\\u0020dom)");
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        java.lang.String[] strArray5 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray7 = org.apache.commons.lang3.StringUtils.stripAll(strArray5, "GBR");
        java.lang.String str11 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray5, 'a', 31, 31);
        java.lang.String[] strArray15 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("eng", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)", (int) (byte) -1);
        java.lang.String str16 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("ZoneRules[currentStandardOffset=Z]", strArray5, strArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.startsWithAny("\u4e8c", strArray15);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str16, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        java.security.NoSuchProviderException noSuchProviderException1 = new java.security.NoSuchProviderException();
        java.security.NoSuchProviderException noSuchProviderException2 = new java.security.NoSuchProviderException();
        noSuchProviderException1.addSuppressed((java.lang.Throwable) noSuchProviderException2);
        java.util.concurrent.ExecutionException executionException4 = new java.util.concurrent.ExecutionException("OptionalLong.empty", (java.lang.Throwable) noSuchProviderException1);
        java.security.cert.CertificateEncodingException certificateEncodingException5 = new java.security.cert.CertificateEncodingException((java.lang.Throwable) noSuchProviderException1);
        java.lang.Throwable[] throwableArray6 = noSuchProviderException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.chrono.Chronology chronology2 = dateTimeFormatter0.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod6 = chronology2.period(829000000, 371000000, 16384);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate10 = chronology2.date(882000010, 17, 997000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 17");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(chronoPeriod6);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.zone.ZoneRules zoneRules16 = zoneOffset14.getRules();
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        java.time.zone.ZoneRules zoneRules28 = zoneOffset26.getRules();
        java.time.ZonedDateTime zonedDateTime29 = offsetDateTime21.atZoneSameInstant((java.time.ZoneId) zoneOffset26);
        int int30 = zonedDateTime29.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime29.withDayOfYear(10);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.zone.ZoneRules zoneRules43 = zoneOffset41.getRules();
        java.time.ZonedDateTime zonedDateTime44 = offsetDateTime36.atZoneSameInstant((java.time.ZoneId) zoneOffset41);
        java.time.ZoneId zoneId45 = zonedDateTime44.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime46 = zonedDateTime44.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime50.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.zone.ZoneRules zoneRules57 = zoneOffset55.getRules();
        java.time.ZonedDateTime zonedDateTime58 = offsetDateTime50.atZoneSameInstant((java.time.ZoneId) zoneOffset55);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime58.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long61 = zonedDateTime58.getLong((java.time.temporal.TemporalField) chronoField60);
        long long62 = zonedDateTime44.getLong((java.time.temporal.TemporalField) chronoField60);
        int int63 = zonedDateTime32.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime44);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        java.time.temporal.ValueRange valueRange66 = zonedDateTime32.range((java.time.temporal.TemporalField) chronoField64);
        java.time.Instant instant68 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant70 = instant68.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime71 = java.nio.file.attribute.FileTime.from(instant68);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery72 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period73 = instant68.query(periodTemporalQuery72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField74.getBaseUnit();
        boolean boolean76 = instant68.isSupported(temporalUnit75);
        java.time.Instant instant78 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant80 = instant78.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime84 = localDateTime81.atOffset(zoneOffset83);
        java.time.zone.ZoneRules zoneRules85 = zoneOffset83.getRules();
        java.time.ZonedDateTime zonedDateTime86 = java.time.ZonedDateTime.ofInstant(instant78, (java.time.ZoneId) zoneOffset83);
        java.time.ZoneId zoneId87 = zonedDateTime86.getZone();
        java.time.Clock clock88 = java.time.Clock.fixed(instant68, zoneId87);
        java.time.ZonedDateTime zonedDateTime89 = zonedDateTime32.with((java.time.temporal.TemporalAdjuster) instant68);
        java.time.Instant instant90 = instant9.with((java.time.temporal.TemporalAdjuster) instant68);
        boolean boolean91 = byteBuffer6.equals((java.lang.Object) instant90);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer6.putLong((long) (short) 100);
        java.nio.FloatBuffer floatBuffer94 = byteBuffer6.asFloatBuffer();
        java.nio.FloatBuffer floatBuffer95 = floatBuffer94.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(zoneRules28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zoneId45);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(zoneRules57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 999999999L + "'", long61 == 999999999L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 999999999L + "'", long62 == 999999999L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField64.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(fileTime71);
        org.junit.Assert.assertNotNull(periodTemporalQuery72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField74.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertNotNull(zoneRules85);
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertNotNull(zoneId87);
        org.junit.Assert.assertNotNull(clock88);
        org.junit.Assert.assertNotNull(zonedDateTime89);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(floatBuffer94);
        org.junit.Assert.assertNotNull(floatBuffer95);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        java.lang.String[] strArray1 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        boolean boolean4 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor5 = strList2.listIterator();
        strItor5.add("");
        strItor5.add("x-windows-iso2022jp");
        strItor5.add("-692477-03-10T13:58:00Z");
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strItor5);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        java.net.URL uRL1 = null;
        java.security.CodeSigner[] codeSignerArray2 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource3 = new java.security.CodeSource(uRL1, codeSignerArray2);
        java.lang.String str4 = org.apache.commons.lang3.StringUtils.concatWith("\u82f1\u6587", (java.lang.Object[]) codeSignerArray2);
        java.lang.String str8 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) codeSignerArray2, "\u4e0b\u5348\u65f6\u5206\u79d2", 64, (int) ':');
        org.junit.Assert.assertNotNull(codeSignerArray2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        boolean boolean14 = fileChannel13.isOpen();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        longStream3.close();
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray5 = longStream3.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("zonerules[currentstandardoffset=z]");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime12 = localDateTime1.minusDays((long) 495000000);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.withSecond((int) (byte) 0);
        java.time.LocalDate localDate19 = offsetDateTime16.toLocalDate();
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean21 = offsetDateTime16.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int23 = offsetDateTime16.get((java.time.temporal.TemporalField) chronoField22);
        java.util.stream.Stream<java.time.temporal.ChronoField> chronoFieldStream24 = java.util.stream.Stream.of(chronoField22);
        int int25 = localDateTime12.get((java.time.temporal.TemporalField) chronoField22);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId26 = java.time.ZoneId.from((java.time.temporal.TemporalAccessor) localDateTime12);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZoneId from TemporalAccessor: +998644736-01-12T23:59:59.999999999 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField20.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField22.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(chronoFieldStream24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.security.Principal> principalSet1 = subject0.getPrincipals();
        org.junit.Assert.assertNotNull(principalSet1);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.MINUTES;
        java.nio.file.attribute.FileTime fileTime2 = java.nio.file.attribute.FileTime.from((-365243219162L), timeUnit1);
        long long4 = timeUnit1.toHours((long) (short) 100);
        java.lang.Thread thread5 = null;
        timeUnit1.timedJoin(thread5, (long) (short) 0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertNotNull(fileTime2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.zone.ZoneRules zoneRules17 = zoneOffset15.getRules();
        java.time.ZonedDateTime zonedDateTime18 = offsetDateTime10.atZoneSameInstant((java.time.ZoneId) zoneOffset15);
        int int19 = zonedDateTime18.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime18.withDayOfYear(10);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = offsetDateTime25.atZoneSameInstant((java.time.ZoneId) zoneOffset30);
        java.time.ZoneId zoneId34 = zonedDateTime33.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime35 = zonedDateTime33.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime39.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.zone.ZoneRules zoneRules46 = zoneOffset44.getRules();
        java.time.ZonedDateTime zonedDateTime47 = offsetDateTime39.atZoneSameInstant((java.time.ZoneId) zoneOffset44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime47.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long50 = zonedDateTime47.getLong((java.time.temporal.TemporalField) chronoField49);
        long long51 = zonedDateTime33.getLong((java.time.temporal.TemporalField) chronoField49);
        int int52 = zonedDateTime21.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime33);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit54 = chronoField53.getBaseUnit();
        java.time.temporal.ValueRange valueRange55 = zonedDateTime21.range((java.time.temporal.TemporalField) chronoField53);
        java.time.ZoneId zoneId56 = zonedDateTime21.getZone();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.of(32, (int) (short) 10, 755000000, 70, 395000000, (-15888074), (int) (short) 10, zoneId56);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 755000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 999999999L + "'", long50 == 999999999L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 999999999L + "'", long51 == 999999999L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField53.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit54 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit54.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange55);
        org.junit.Assert.assertNotNull(zoneId56);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        char char6 = byteBuffer1.getChar(0);
        java.io.File file9 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL10 = file9.toURL();
        java.io.File file13 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL14 = file13.toURL();
        boolean boolean15 = uRL10.sameFile(uRL14);
        java.lang.String str16 = uRL14.getQuery();
        java.lang.String str17 = uRL14.getHost();
        java.io.InputStream inputStream18 = uRL14.openStream();
        boolean boolean19 = inputStream18.markSupported();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.wrap(byteArray21);
        int int23 = inputStream18.read(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer26 = byteBuffer1.put(byteArray21, 1999999998, 190000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\000' + "'", char6 == '\000');
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/tmp/United Kingdom6463201974908488998aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/tmp/United Kingdom6463201974908488998aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/tmp/United Kingdom4537322804956252545aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL14);
// flaky:         org.junit.Assert.assertEquals(uRL14.toString(), "file:/tmp/United Kingdom4537322804956252545aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (byte) -1);
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap11 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.zone.ZoneRules zoneRules17 = zoneOffset15.getRules();
        java.time.zone.ZoneRules zoneRules18 = zoneIdMap11.getOrDefault((java.lang.Object) 1.0d, zoneRules17);
        java.lang.String str19 = zoneRules17.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList20 = zoneRules17.getTransitions();
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        int int37 = localDateTime32.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        int int42 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        boolean boolean43 = localDateTime22.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str45 = localDateTime38.format(dateTimeFormatter44);
        java.time.ZoneOffset zoneOffset46 = zoneRules17.getOffset(localDateTime38);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime9.withOffsetSameLocal(zoneOffset46);
        boolean boolean48 = fileTime1.equals((java.lang.Object) offsetDateTime9);
        java.time.LocalDate localDate49 = java.time.LocalDate.now();
        java.time.LocalDate localDate50 = java.time.LocalDate.MIN;
        boolean boolean51 = localDate49.isEqual((java.time.chrono.ChronoLocalDate) localDate50);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime56.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime60 = offsetDateTime56.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset66);
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit71 = chronoField70.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime72 = localDateTime68.minus((long) (-999999999), temporalUnit71);
        java.lang.String str73 = temporalUnit71.toString();
        java.time.OffsetDateTime offsetDateTime74 = offsetDateTime60.plus((long) (byte) 100, temporalUnit71);
        java.time.LocalDate localDate75 = localDate49.minus((long) (-1), temporalUnit71);
        java.time.LocalDate localDate76 = java.time.LocalDate.now();
        java.time.LocalDate localDate77 = java.time.LocalDate.MIN;
        boolean boolean78 = localDate76.isEqual((java.time.chrono.ChronoLocalDate) localDate77);
        java.time.chrono.ChronoPeriod chronoPeriod79 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate75, (java.time.chrono.ChronoLocalDate) localDate76);
        java.time.OffsetDateTime offsetDateTime80 = offsetDateTime9.plus((java.time.temporal.TemporalAmount) chronoPeriod79);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneRules17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str19, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str45, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField70.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit71 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit71.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Weeks" + "'", str73, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronoPeriod79);
        org.junit.Assert.assertNotNull(offsetDateTime80);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from(instant1);
        java.io.File file6 = new java.io.File("GBR");
        boolean boolean8 = file6.setWritable(true);
        boolean boolean10 = file6.setWritable(true);
        java.lang.String str11 = file6.getPath();
        long long12 = file6.length();
        java.io.File file13 = file6.getAbsoluteFile();
        boolean boolean14 = fileTime4.equals((java.lang.Object) file13);
        long long15 = fileTime4.toMillis();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GBR" + "'", str11, "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4096L + "'", long12 == 4096L);
        org.junit.Assert.assertNotNull(file13);
// flaky:         org.junit.Assert.assertEquals(file13.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/experiment/GBR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32000L + "'", long15 == 32000L);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.println(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray10 = org.apache.commons.lang3.StringUtils.stripAll(strArray8, "GBR");
        java.io.PrintWriter printWriter11 = printWriter1.printf("5", (java.lang.Object[]) strArray10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter1.print(true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter11);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "DIRECT");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.lastKey();
        java.lang.String str2 = strMap0.firstKey();
        java.lang.String str3 = strMap0.firstKey();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "x-windows-iso2022jp" + "'", str1, "x-windows-iso2022jp");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Big5" + "'", str2, "Big5");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Big5" + "'", str3, "Big5");
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) -1);
        int int2 = parsePosition1.getIndex();
        java.lang.String str3 = parsePosition1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParsePosition[index=-1,errorIndex=-1]" + "'", str3, "java.text.ParsePosition[index=-1,errorIndex=-1]");
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusNanos((long) 10000);
        java.time.LocalDateTime localDateTime22 = zonedDateTime21.toLocalDateTime();
        java.time.ZoneId zoneId23 = zonedDateTime21.getZone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneId23);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        java.util.Comparator<java.time.LocalDate> localDateComparator0 = java.util.Comparator.reverseOrder();
        org.junit.Assert.assertNotNull(localDateComparator0);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.Month month4 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime0);
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime5.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime17 = localDateTime11.withHour(4);
        int int18 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDate localDate19 = localDateTime0.toLocalDate();
        java.time.format.FormatStyle formatStyle20 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter21 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle20);
        java.lang.String str22 = localDateTime0.format(dateTimeFormatter21);
        java.time.LocalDate localDate23 = java.time.LocalDate.now();
        java.time.LocalDate localDate24 = java.time.LocalDate.MIN;
        boolean boolean25 = localDate23.isEqual((java.time.chrono.ChronoLocalDate) localDate24);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime30.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime30.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset40);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit45 = chronoField44.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime46 = localDateTime42.minus((long) (-999999999), temporalUnit45);
        java.lang.String str47 = temporalUnit45.toString();
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime34.plus((long) (byte) 100, temporalUnit45);
        java.time.LocalDate localDate49 = localDate23.minus((long) (-1), temporalUnit45);
        java.time.LocalDate localDate50 = java.time.LocalDate.now();
        java.time.LocalDate localDate51 = java.time.LocalDate.MIN;
        boolean boolean52 = localDate50.isEqual((java.time.chrono.ChronoLocalDate) localDate51);
        java.time.chrono.ChronoPeriod chronoPeriod53 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate49, (java.time.chrono.ChronoLocalDate) localDate50);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime54 = localDateTime0.with((java.time.temporal.TemporalAdjuster) localDate49);
        java.time.LocalDate localDate56 = localDate49.minusYears(0L);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        int int62 = localDateTime57.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        java.time.LocalDateTime localDateTime64 = localDateTime58.minusNanos((long) (short) 100);
        java.time.LocalTime localTime65 = localDateTime64.toLocalTime();
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.of(localDate56, localTime65);
        java.time.LocalDate localDate67 = java.time.LocalDate.now();
        java.time.LocalDate localDate68 = java.time.LocalDate.MIN;
        boolean boolean69 = localDate67.isEqual((java.time.chrono.ChronoLocalDate) localDate68);
        int int70 = localDate68.getYear();
        java.time.LocalDate localDate71 = java.time.LocalDate.now();
        java.time.LocalDate localDate72 = java.time.LocalDate.MIN;
        boolean boolean73 = localDate71.isEqual((java.time.chrono.ChronoLocalDate) localDate72);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        java.time.OffsetDateTime offsetDateTime79 = offsetDateTime77.withSecond((int) (byte) 0);
        java.time.LocalDate localDate80 = offsetDateTime77.toLocalDate();
        java.time.temporal.ChronoField chronoField81 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean82 = offsetDateTime77.isSupported((java.time.temporal.TemporalField) chronoField81);
        boolean boolean83 = localDate71.isSupported((java.time.temporal.TemporalField) chronoField81);
        java.time.Period period84 = java.time.Period.between(localDate68, localDate71);
        boolean boolean85 = localDate56.isEqual((java.time.chrono.ChronoLocalDate) localDate71);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.DECEMBER + "'", month4.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + formatStyle20 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle20.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e0b\u5348\u65f6\u5206\u79d2" + "'", str22, "\u4e0b\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField44.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit45 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit45.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Weeks" + "'", str47, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronoPeriod53);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-999999999) + "'", int70 == (-999999999));
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + chronoField81 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField81.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime35.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset45);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit50 = chronoField49.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime51 = localDateTime47.minus((long) (-999999999), temporalUnit50);
        java.lang.String str52 = temporalUnit50.toString();
        java.time.OffsetDateTime offsetDateTime53 = offsetDateTime39.plus((long) (byte) 100, temporalUnit50);
        java.time.OffsetDateTime offsetDateTime55 = offsetDateTime53.plusDays((long) 31);
        java.time.Instant instant57 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        java.time.Clock clock62 = java.time.Clock.fixed(instant57, (java.time.ZoneId) zoneOffset60);
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset67);
        java.time.Clock clock70 = clock62.withZone((java.time.ZoneId) zoneOffset67);
        java.time.OffsetDateTime offsetDateTime71 = offsetDateTime53.withOffsetSameInstant(zoneOffset67);
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.ValueRange valueRange73 = offsetDateTime53.range((java.time.temporal.TemporalField) chronoField72);
        boolean boolean74 = zonedDateTime31.isSupported((java.time.temporal.TemporalField) chronoField72);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField49.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit50 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit50.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Weeks" + "'", str52, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(clock62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField72.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(valueRange73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("09:14:52.125Z", "java.nio.ByteBufferAsIntBufferRB[pos=0 lim=7 cap=7]", 878000000);
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withDecimalSeparator('\000');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle2.withDecimalSeparator('#');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withZeroDigit('0');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt2 = intStream1.spliterator();
        java.util.stream.IntStream.Builder builder3 = java.util.stream.IntStream.builder();
        boolean boolean4 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder3);
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.stream.IntStream.Builder builder8 = java.util.stream.IntStream.builder();
        boolean boolean9 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder8);
        ofInt2.forEachRemaining((java.util.function.IntConsumer) builder8);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt13 = intStream12.min();
        java.lang.String str14 = optionalInt13.toString();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        boolean boolean17 = optionalInt13.equals((java.lang.Object) localDate16);
        int int19 = optionalInt13.orElse(59);
        java.util.stream.IntStream intStream21 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt22 = intStream21.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = ofInt22.trySplit();
        java.util.stream.IntStream.Builder builder24 = java.util.stream.IntStream.builder();
        ofInt22.forEachRemaining((java.util.function.IntConsumer) builder24);
        optionalInt13.ifPresent((java.util.function.IntConsumer) builder24);
        boolean boolean27 = ofInt2.tryAdvance((java.util.function.IntConsumer) builder24);
        java.util.stream.IntStream.Builder builder29 = builder24.add(12);
        java.util.stream.IntStream intStream31 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt32 = intStream31.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator33 = ofInt32.trySplit();
        java.util.stream.IntStream intStream35 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt36 = intStream35.spliterator();
        java.util.stream.IntStream.Builder builder37 = java.util.stream.IntStream.builder();
        boolean boolean38 = ofInt36.tryAdvance((java.util.function.IntConsumer) builder37);
        java.util.stream.IntStream intStream40 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt41 = intStream40.spliterator();
        java.util.stream.IntStream.Builder builder42 = java.util.stream.IntStream.builder();
        boolean boolean43 = ofInt41.tryAdvance((java.util.function.IntConsumer) builder42);
        ofInt36.forEachRemaining((java.util.function.IntConsumer) builder42);
        boolean boolean45 = ofInt32.tryAdvance((java.util.function.IntConsumer) builder42);
        java.util.function.IntConsumer intConsumer46 = builder24.andThen((java.util.function.IntConsumer) builder42);
        intConsumer46.accept(469000000);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(ofInt2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(optionalInt13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OptionalInt[10]" + "'", str14, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertNotNull(ofInt22);
        org.junit.Assert.assertNull(intSpliterator23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(intStream31);
        org.junit.Assert.assertNotNull(ofInt32);
        org.junit.Assert.assertNull(intSpliterator33);
        org.junit.Assert.assertNotNull(intStream35);
        org.junit.Assert.assertNotNull(ofInt36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(intStream40);
        org.junit.Assert.assertNotNull(ofInt41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(intConsumer46);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.Duration duration31 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration34 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList35 = duration34.getUnits();
        java.time.Duration duration36 = duration31.minus(duration34);
        int int37 = duration31.getNano();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime38 = zonedDateTime11.minus((java.time.temporal.TemporalAmount) duration31);
        java.time.OffsetTime offsetTime39 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime41 = offsetTime39.withSecond(16);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int43 = offsetTime41.get((java.time.temporal.TemporalField) chronoField42);
        java.time.temporal.Temporal temporal44 = duration31.subtractFrom((java.time.temporal.Temporal) offsetTime41);
        java.time.OffsetTime offsetTime46 = offsetTime41.minusNanos(15L);
        java.time.OffsetTime offsetTime48 = offsetTime41.minusSeconds(7187392471159151072L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(temporalUnitList35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime38);
        org.junit.Assert.assertNotNull(offsetTime39);
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField42.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertNotNull(temporal44);
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertNotNull(offsetTime48);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI4 = uRL3.toURI();
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Illegal character in path at index 16: file:/tmp/United Kingdom1092117386255279652aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom1092117386255279652aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom1092117386255279652aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate1 = localDateTime0.toLocalDate();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset6);
        java.time.zone.ZoneRules zoneRules9 = zoneOffset6.getRules();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset14);
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition17 = zoneRules9.getTransition(localDateTime16);
        int int18 = localDateTime16.getSecond();
        java.time.Duration duration21 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int22 = duration21.getNano();
        java.time.Duration duration23 = duration21.abs();
        java.time.LocalDateTime localDateTime24 = localDateTime16.minus((java.time.temporal.TemporalAmount) duration23);
        java.time.LocalDate localDate25 = java.time.LocalDate.now();
        java.time.LocalDate localDate26 = java.time.LocalDate.MIN;
        boolean boolean27 = localDate25.isEqual((java.time.chrono.ChronoLocalDate) localDate26);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime32.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset42);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime48 = localDateTime44.minus((long) (-999999999), temporalUnit47);
        java.lang.String str49 = temporalUnit47.toString();
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime36.plus((long) (byte) 100, temporalUnit47);
        java.time.LocalDate localDate51 = localDate25.minus((long) (-1), temporalUnit47);
        long long52 = localDateTime0.until((java.time.temporal.Temporal) localDateTime16, temporalUnit47);
        java.time.LocalDateTime localDateTime54 = localDateTime0.minusSeconds(284000000L);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        boolean boolean56 = localDateTime0.isSupported((java.time.temporal.TemporalField) chronoField55);
        java.time.LocalDateTime localDateTime58 = localDateTime0.withYear(18);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNull(zoneOffsetTransition17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Weeks" + "'", str49, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-52177397210L) + "'", long52 == (-52177397210L));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField55.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition0 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        int int6 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime2);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        int int11 = localDateTime2.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        int int17 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        int int22 = localDateTime13.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        int int33 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        int int39 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        int int44 = localDateTime35.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        boolean boolean45 = localDateTime24.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.temporal.Temporal temporal46 = localDateTime18.adjustInto((java.time.temporal.Temporal) localDateTime24);
        java.time.LocalDateTime localDateTime48 = localDateTime18.minusWeeks((long) (short) 0);
        java.time.DayOfWeek dayOfWeek49 = localDateTime18.getDayOfWeek();
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds(1);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond(0L, (int) '\r', zoneOffset53);
        long long55 = localDateTime18.toEpochSecond(zoneOffset53);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.OffsetDateTime offsetDateTime61 = offsetDateTime59.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.zone.ZoneRules zoneRules66 = zoneOffset64.getRules();
        java.time.ZonedDateTime zonedDateTime67 = offsetDateTime59.atZoneSameInstant((java.time.ZoneId) zoneOffset64);
        java.time.ZoneId zoneId68 = zonedDateTime67.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime69 = zonedDateTime67.withEarlierOffsetAtOverlap();
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.from((java.time.temporal.TemporalAccessor) zonedDateTime67);
        java.time.LocalDateTime localDateTime71 = timeDefinition0.createDateTime(localDateTime7, zoneOffset53, zoneOffset70);
        java.nio.ByteBuffer byteBuffer73 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer74 = byteBuffer73.asLongBuffer();
        java.nio.LongBuffer longBuffer76 = longBuffer74.put(0L);
        java.time.LocalTime localTime77 = java.time.LocalTime.now();
        int int78 = localTime77.getNano();
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long80 = localTime77.getLong((java.time.temporal.TemporalField) chronoField79);
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime84 = localDateTime81.atOffset(zoneOffset83);
        java.time.OffsetDateTime offsetDateTime86 = offsetDateTime84.withSecond((int) (byte) 0);
        boolean boolean87 = chronoField79.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime84);
        boolean boolean88 = longBuffer76.equals((java.lang.Object) chronoField79);
        boolean boolean89 = localDateTime7.isSupported((java.time.temporal.TemporalField) chronoField79);
        org.junit.Assert.assertTrue("'" + timeDefinition0 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD + "'", timeDefinition0.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(temporal46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + dayOfWeek49 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek49.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 31556889832780798L + "'", long55 == 31556889832780798L);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(zoneRules66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(zoneId68);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(longBuffer74);
        org.junit.Assert.assertNotNull(longBuffer76);
        org.junit.Assert.assertNotNull(localTime77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 413000000 + "'", int78 == 413000000);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField79.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 19L + "'", long80 == 19L);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale3.toLanguageTag();
        java.lang.String str5 = locale1.getDisplayName(locale3);
        java.lang.String str6 = org.apache.commons.lang3.StringUtils.upperCase("", locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-CN" + "'", str4, "zh-CN");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str5, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        java.time.Period period4 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period5 = period4.normalized();
        long long6 = period4.toTotalMonths();
        java.time.chrono.ChronoPeriod chronoPeriod8 = period4.multipliedBy((int) (short) 100);
        java.time.chrono.ChronoPeriod chronoPeriod9 = period1.plus((java.time.temporal.TemporalAmount) period4);
        java.time.chrono.ChronoPeriod chronoPeriod10 = period1.negated();
        java.time.Period period12 = period1.minusYears((long) 23);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList13 = period1.getUnits();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.withSecond((int) (byte) 0);
        java.time.LocalDate localDate20 = offsetDateTime17.toLocalDate();
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime17.withDayOfYear((int) '+');
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology24 = dateTimeFormatter23.getChronology();
        java.time.format.TextStyle textStyle25 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String str27 = locale26.getISO3Language();
        java.time.format.DecimalStyle decimalStyle28 = java.time.format.DecimalStyle.of(locale26);
        java.lang.String str29 = chronology24.getDisplayName(textStyle25, locale26);
        java.time.OffsetTime offsetTime30 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime32 = offsetTime30.withSecond(16);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int34 = offsetTime32.get((java.time.temporal.TemporalField) chronoField33);
        java.time.temporal.ValueRange valueRange35 = chronology24.range(chronoField33);
        boolean boolean36 = offsetDateTime22.isSupported((java.time.temporal.TemporalField) chronoField33);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime22.withMinute(0);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime38.plus(0L, temporalUnit41);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = period1.get(temporalUnit41);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(chronoPeriod8);
        org.junit.Assert.assertNotNull(chronoPeriod9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(temporalUnitList13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + textStyle25 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle25.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertNotNull(decimalStyle28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISO" + "'", str29, "ISO");
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(offsetTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField33.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19 + "'", int34 == 19);
        org.junit.Assert.assertNotNull(valueRange35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(offsetDateTime42);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        boolean boolean12 = file8.setWritable(true);
        java.net.URI uRI13 = file8.toURI();
        java.net.URI uRI14 = uRI6.relativize(uRI13);
        java.lang.String str15 = uRI6.getRawSchemeSpecificPart();
        java.io.File file17 = new java.io.File("GBR");
        boolean boolean19 = file17.setWritable(true);
        boolean boolean21 = file17.setWritable(true);
        java.net.URI uRI22 = file17.toURI();
        java.io.File file24 = new java.io.File("GBR");
        boolean boolean26 = file24.setWritable(true);
        java.nio.file.Path path27 = file24.toPath();
        java.nio.file.Path path29 = path27.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI30 = path27.toUri();
        java.net.URI uRI31 = uRI22.relativize(uRI30);
        int int32 = uRI6.compareTo(uRI31);
        java.net.URI uRI33 = uRI6.parseServerAuthority();
        java.net.URI uRI34 = uRI33.parseServerAuthority();
        java.lang.String str35 = uRI33.getRawAuthority();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(uRI14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/experiment/GBR/" + "'", str15, "/experiment/GBR/");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertNotNull(uRI30);
        org.junit.Assert.assertNotNull(uRI31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(uRI33);
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Set<java.time.ZoneId> zoneIdSet2 = zoneIdMap1.keySet();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap4 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.zone.ZoneRules zoneRules11 = zoneIdMap4.getOrDefault((java.lang.Object) 1.0d, zoneRules10);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration12 = zoneIdMap4.keys();
        java.util.Set<java.util.Map.Entry<java.time.ZoneId, java.time.zone.ZoneRules>> zoneIdEntrySet13 = zoneIdMap4.entrySet();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration14 = zoneIdMap4.keys();
        java.util.OptionalLong optionalLong16 = java.util.OptionalLong.of((long) 91);
        boolean boolean17 = zoneIdMap4.equals((java.lang.Object) 91);
        int int18 = zoneIdMap4.size();
        zoneIdMap1.putAll((java.util.Map<java.time.ZoneId, java.time.zone.ZoneRules>) zoneIdMap4);
        int int20 = zoneIdMap1.size();
        org.junit.Assert.assertNotNull(zoneIdSet2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zoneIdEnumeration12);
        org.junit.Assert.assertNotNull(zoneIdEntrySet13);
        org.junit.Assert.assertNotNull(zoneIdEnumeration14);
        org.junit.Assert.assertNotNull(optionalLong16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month2 = month0.minus((long) (short) -1);
        java.time.Month month4 = month2.minus(32000L);
        java.time.Month month5 = month4.firstMonthOfQuarter();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.FEBRUARY + "'", month2.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.JUNE + "'", month4.equals(java.time.Month.JUNE));
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.APRIL + "'", month5.equals(java.time.Month.APRIL));
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        java.time.Instant instant0 = null;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime12.withDayOfYear(10);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime27.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long30 = zonedDateTime27.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = zonedDateTime27.query(periodTemporalQuery31);
        java.time.Period period33 = zonedDateTime12.query(periodTemporalQuery31);
        java.time.ZoneOffset zoneOffset34 = zonedDateTime12.getOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime35 = java.time.OffsetTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: instant");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 999999999L + "'", long30 == 999999999L);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(zoneOffset34);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int3 = duration2.getNano();
        java.time.Duration duration5 = duration2.minusNanos((-1L));
        java.time.LocalDate localDate6 = java.time.LocalDate.now();
        java.time.LocalDate localDate7 = java.time.LocalDate.MIN;
        boolean boolean8 = localDate6.isEqual((java.time.chrono.ChronoLocalDate) localDate7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean10 = localDate7.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.time.LocalDate localDate12 = localDate7.plusWeeks((long) 10);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        int int18 = localDateTime13.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        int int23 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        int int34 = localDateTime25.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        boolean boolean35 = localDateTime14.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        int int41 = localDateTime36.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        boolean boolean46 = localDateTime36.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        boolean boolean47 = localDateTime30.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDate localDate48 = localDateTime30.toLocalDate();
        java.time.LocalDate localDate49 = java.time.LocalDate.now();
        java.time.LocalDate localDate50 = java.time.LocalDate.MIN;
        boolean boolean51 = localDate49.isEqual((java.time.chrono.ChronoLocalDate) localDate50);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean53 = localDate50.isSupported((java.time.temporal.TemporalField) chronoField52);
        int int54 = localDate50.getDayOfYear();
        int int55 = localDate48.compareTo((java.time.chrono.ChronoLocalDate) localDate50);
        java.time.LocalDate localDate57 = localDate48.minusYears(32000L);
        java.time.LocalDate localDate59 = localDate48.minusWeeks((long) (short) 1);
        boolean boolean60 = localDate12.isEqual((java.time.chrono.ChronoLocalDate) localDate48);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate62 = localDateTime61.toLocalDate();
        java.time.LocalDateTime localDateTime64 = localDateTime61.plusWeeks(0L);
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean66 = localDateTime61.isSupported((java.time.temporal.TemporalField) chronoField65);
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField65.getRangeUnit();
        java.time.Duration duration68 = temporalUnit67.getDuration();
        boolean boolean69 = localDate12.isSupported(temporalUnit67);
        boolean boolean70 = duration5.equals((java.lang.Object) boolean69);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField52.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1999999998 + "'", int55 == 1999999998);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField65.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream4 = intStream3.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfInt ofInt5 = intStream3.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        java.util.OptionalInt optionalInt1 = java.util.OptionalInt.of(64);
        org.junit.Assert.assertNotNull(optionalInt1);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.plusNanos((long) (-7));
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        boolean boolean17 = instant9.isSupported(temporalUnit16);
        java.time.Instant instant19 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant21 = instant19.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.ofInstant(instant19, (java.time.ZoneId) zoneOffset24);
        java.time.ZoneId zoneId28 = zonedDateTime27.getZone();
        java.time.Clock clock29 = java.time.Clock.fixed(instant9, zoneId28);
        java.time.ZonedDateTime zonedDateTime30 = offsetDateTime5.atZoneSimilarLocal(zoneId28);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime5.minusMinutes((long) 399000000);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime5.minusWeeks((long) (byte) 10);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField15.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(zoneId28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = fileChannel11.lock((long) 533000000, 0L, true);
        fileLock19.release();
        java.nio.channels.FileChannel fileChannel21 = fileLock19.channel();
        java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset23 = java.nio.charset.Charset.defaultCharset();
        boolean boolean24 = charset22.contains(charset23);
        java.nio.charset.CharsetEncoder charsetEncoder25 = charset22.newEncoder();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.wrap(byteArray27);
        java.nio.charset.CharsetEncoder charsetEncoder29 = charsetEncoder25.replaceWith(byteArray27);
        java.nio.charset.CodingErrorAction codingErrorAction30 = charsetEncoder29.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder31 = charsetEncoder29.reset();
        java.nio.charset.CodingErrorAction codingErrorAction32 = java.nio.charset.CodingErrorAction.REPLACE;
        java.nio.charset.CharsetEncoder charsetEncoder33 = charsetEncoder31.onUnmappableCharacter(codingErrorAction32);
        java.nio.CharBuffer charBuffer35 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer36 = charBuffer35.flip();
        java.nio.CharBuffer charBuffer37 = charBuffer35.duplicate();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer40 = byteBuffer39.asLongBuffer();
        short short41 = byteBuffer39.getShort();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer39.putChar('G');
        java.nio.ByteBuffer byteBuffer45 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer46 = byteBuffer45.asLongBuffer();
        short short47 = byteBuffer45.getShort();
        boolean boolean48 = byteBuffer39.equals((java.lang.Object) byteBuffer45);
        java.nio.charset.CoderResult coderResult50 = charsetEncoder31.encode(charBuffer37, byteBuffer39, true);
        java.nio.LongBuffer longBuffer51 = byteBuffer39.asLongBuffer();
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocate((int) (byte) 100);
        java.io.File file56 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL57 = file56.toURL();
        java.io.File file60 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL61 = file60.toURL();
        boolean boolean62 = uRL57.sameFile(uRL61);
        java.lang.String str63 = uRL61.getQuery();
        java.lang.String str64 = uRL61.getHost();
        java.io.InputStream inputStream65 = uRL61.openStream();
        boolean boolean66 = inputStream65.markSupported();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer69 = java.nio.ByteBuffer.wrap(byteArray68);
        int int70 = inputStream65.read(byteArray68);
        java.nio.ByteBuffer byteBuffer71 = byteBuffer53.get(byteArray68);
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] { byteBuffer39, byteBuffer71 };
        // The following exception was thrown during execution in test generation
        try {
            long long75 = fileChannel21.write(byteBufferArray72, 284000000, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertNotNull(fileChannel21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(codingErrorAction30);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(codingErrorAction32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(charBuffer35);
        org.junit.Assert.assertNotNull(buffer36);
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(longBuffer40);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(longBuffer46);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 0 + "'", short47 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(coderResult50);
        org.junit.Assert.assertNotNull(longBuffer51);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/tmp/United Kingdom4971089172771956025aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL57);
// flaky:         org.junit.Assert.assertEquals(uRL57.toString(), "file:/tmp/United Kingdom4971089172771956025aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file60.toString(), "/tmp/United Kingdom5981071813975442748aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL61);
// flaky:         org.junit.Assert.assertEquals(uRL61.toString(), "file:/tmp/United Kingdom5981071813975442748aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(inputStream65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0]");
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.net.Proxy proxy10 = java.net.Proxy.NO_PROXY;
        java.lang.String str11 = proxy10.toString();
        java.net.Proxy.Type type12 = proxy10.type();
        java.net.URLConnection uRLConnection13 = uRL7.openConnection(proxy10);
        java.io.InputStream inputStream14 = uRLConnection13.getInputStream();
        java.lang.String str15 = uRLConnection13.toString();
        uRLConnection13.setDefaultUseCaches(true);
        java.net.URL uRL18 = uRLConnection13.getURL();
        uRLConnection13.setConnectTimeout(420000000);
        java.lang.String str22 = uRLConnection13.getHeaderField(23);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom9148871197086631927aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom9148871197086631927aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom5117211957038586361aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom5117211957038586361aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(proxy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DIRECT" + "'", str11, "DIRECT");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type12.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(uRLConnection13);
        org.junit.Assert.assertNotNull(inputStream14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom5117211957038586361aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str15, "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom5117211957038586361aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL18);
        org.junit.Assert.assertEquals(uRL18.toString(), "file:/tmp/United Kingdom5117211957038586361aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        int int0 = java.util.Spliterator.NONNULL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 256 + "'", int0 == 256);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer2.compact();
        java.nio.ShortBuffer shortBuffer5 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer6 = shortBuffer5.compact();
        java.nio.ShortBuffer shortBuffer7 = shortBuffer5.asReadOnlyBuffer();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer7.duplicate();
        boolean boolean9 = shortBuffer7.isDirect();
        java.nio.ShortBuffer shortBuffer10 = shortBuffer3.put(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(shortBuffer6);
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(shortBuffer10);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime13 = zonedDateTime11.toLocalTime();
        java.time.LocalDate localDate14 = zonedDateTime11.toLocalDate();
        java.time.chrono.Era era15 = localDate14.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate17 = localDate14.withDayOfMonth(794000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 794000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + era15 + "' != '" + java.time.chrono.IsoEra.CE + "'", era15.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        int int2 = org.apache.commons.lang3.CharUtils.toIntValue((java.lang.Character) 'a', 95000000);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 95000000 + "'", int2 == 95000000);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream4 = intStream1.parallel();
        java.util.stream.IntStream intStream5 = intStream4.parallel();
        java.util.stream.IntStream intStream6 = intStream5.sequential();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream7 = intStream5.asDoubleStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.now(clock6);
        java.time.Duration duration11 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int12 = duration11.getNano();
        java.time.Duration duration13 = duration11.abs();
        java.time.Duration duration15 = duration11.minusMinutes((long) 385000000);
        java.time.Duration duration17 = duration11.minusMinutes((long) 12);
        java.time.Clock clock18 = java.time.Clock.tick(clock6, duration11);
        java.time.LocalDate localDate19 = java.time.LocalDate.now(clock6);
        java.time.Instant instant20 = java.time.Instant.now(clock6);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        int int9 = byteBuffer8.getInt();
        int int10 = byteBuffer8.limit();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        float float4 = charsetEncoder3.maxBytesPerChar();
        boolean boolean6 = charsetEncoder3.canEncode((java.lang.CharSequence) "file:/tmp/United Kingdom2392117129954120837aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.nio.charset.Charset charset7 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset8 = java.nio.charset.Charset.defaultCharset();
        boolean boolean9 = charset7.contains(charset8);
        java.lang.String str10 = charset7.toString();
        java.time.format.DateTimeFormatter dateTimeFormatter11 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE;
        java.nio.CharBuffer charBuffer13 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer14 = charBuffer13.flip();
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer17 = charBuffer16.flip();
        int int18 = charBuffer13.compareTo(charBuffer16);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (byte) -1);
        java.time.temporal.TemporalAccessor temporalAccessor21 = dateTimeFormatter11.parseUnresolved((java.lang.CharSequence) charBuffer13, parsePosition20);
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer24 = charBuffer23.flip();
        java.nio.CharBuffer charBuffer25 = charBuffer23.duplicate();
        char[] charArray33 = new char[] { 'a', '#', '4', '#' };
        boolean boolean34 = org.apache.commons.lang3.StringUtils.containsAny("", charArray33);
        boolean boolean35 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray33);
        boolean boolean36 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray33);
        int int37 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer25, charArray33);
        java.nio.Buffer buffer38 = charBuffer25.clear();
        java.nio.CharBuffer charBuffer40 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer41 = charBuffer40.flip();
        java.nio.CharBuffer charBuffer42 = charBuffer40.duplicate();
        char[] charArray50 = new char[] { 'a', '#', '4', '#' };
        boolean boolean51 = org.apache.commons.lang3.StringUtils.containsAny("", charArray50);
        boolean boolean52 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray50);
        boolean boolean53 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray50);
        int int54 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer42, charArray50);
        java.nio.CharBuffer charBuffer55 = charBuffer25.append((java.lang.CharSequence) charBuffer42);
        java.nio.CharBuffer charBuffer56 = charBuffer13.put(charBuffer42);
        java.nio.ByteBuffer byteBuffer57 = charset7.encode(charBuffer56);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CoderResult coderResult58 = charsetEncoder3.flush(byteBuffer57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Current state = RESET, new state = FLUSHED");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "US-ASCII" + "'", str10, "US-ASCII");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(buffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(temporalAccessor21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(buffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(buffer38);
        org.junit.Assert.assertNotNull(charBuffer40);
        org.junit.Assert.assertNotNull(buffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charBuffer55);
        org.junit.Assert.assertNotNull(charBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.util.stream.IntStream intStream3 = intStream1.sequential();
        java.util.stream.IntStream intStream4 = intStream3.parallel();
        java.util.stream.IntStream intStream6 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = ofInt7.trySplit();
        java.util.stream.IntStream intStream10 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt11 = intStream10.spliterator();
        java.util.stream.IntStream.Builder builder12 = java.util.stream.IntStream.builder();
        boolean boolean13 = ofInt11.tryAdvance((java.util.function.IntConsumer) builder12);
        java.util.stream.IntStream intStream15 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt16 = intStream15.spliterator();
        java.util.stream.IntStream.Builder builder17 = java.util.stream.IntStream.builder();
        boolean boolean18 = ofInt16.tryAdvance((java.util.function.IntConsumer) builder17);
        ofInt11.forEachRemaining((java.util.function.IntConsumer) builder17);
        boolean boolean20 = ofInt7.tryAdvance((java.util.function.IntConsumer) builder17);
        java.util.stream.IntStream intStream22 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt23 = intStream22.spliterator();
        java.util.stream.IntStream.Builder builder24 = java.util.stream.IntStream.builder();
        boolean boolean25 = ofInt23.tryAdvance((java.util.function.IntConsumer) builder24);
        java.util.stream.IntStream intStream27 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt28 = intStream27.spliterator();
        java.util.stream.IntStream.Builder builder29 = java.util.stream.IntStream.builder();
        boolean boolean30 = ofInt28.tryAdvance((java.util.function.IntConsumer) builder29);
        ofInt23.forEachRemaining((java.util.function.IntConsumer) builder29);
        java.util.stream.IntStream intStream33 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.OptionalInt optionalInt34 = intStream33.min();
        java.lang.String str35 = optionalInt34.toString();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate37 = localDateTime36.toLocalDate();
        boolean boolean38 = optionalInt34.equals((java.lang.Object) localDate37);
        int int40 = optionalInt34.orElse(59);
        java.util.stream.IntStream intStream42 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt43 = intStream42.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator44 = ofInt43.trySplit();
        java.util.stream.IntStream.Builder builder45 = java.util.stream.IntStream.builder();
        ofInt43.forEachRemaining((java.util.function.IntConsumer) builder45);
        optionalInt34.ifPresent((java.util.function.IntConsumer) builder45);
        boolean boolean48 = ofInt23.tryAdvance((java.util.function.IntConsumer) builder45);
        java.util.stream.IntStream.Builder builder50 = builder45.add(12);
        java.util.stream.IntStream intStream52 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt53 = intStream52.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator54 = ofInt53.trySplit();
        java.util.stream.IntStream intStream56 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt57 = intStream56.spliterator();
        java.util.stream.IntStream.Builder builder58 = java.util.stream.IntStream.builder();
        boolean boolean59 = ofInt57.tryAdvance((java.util.function.IntConsumer) builder58);
        java.util.stream.IntStream intStream61 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt62 = intStream61.spliterator();
        java.util.stream.IntStream.Builder builder63 = java.util.stream.IntStream.builder();
        boolean boolean64 = ofInt62.tryAdvance((java.util.function.IntConsumer) builder63);
        ofInt57.forEachRemaining((java.util.function.IntConsumer) builder63);
        boolean boolean66 = ofInt53.tryAdvance((java.util.function.IntConsumer) builder63);
        java.util.function.IntConsumer intConsumer67 = builder45.andThen((java.util.function.IntConsumer) builder63);
        java.util.function.IntConsumer intConsumer68 = builder17.andThen((java.util.function.IntConsumer) builder45);
        // The following exception was thrown during execution in test generation
        try {
            intStream4.forEachOrdered((java.util.function.IntConsumer) builder45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(ofInt11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(intStream15);
        org.junit.Assert.assertNotNull(ofInt16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertNotNull(ofInt23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(intStream27);
        org.junit.Assert.assertNotNull(ofInt28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(intStream33);
        org.junit.Assert.assertNotNull(optionalInt34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OptionalInt[10]" + "'", str35, "OptionalInt[10]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(intStream42);
        org.junit.Assert.assertNotNull(ofInt43);
        org.junit.Assert.assertNull(intSpliterator44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(intStream52);
        org.junit.Assert.assertNotNull(ofInt53);
        org.junit.Assert.assertNull(intSpliterator54);
        org.junit.Assert.assertNotNull(intStream56);
        org.junit.Assert.assertNotNull(ofInt57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intStream61);
        org.junit.Assert.assertNotNull(ofInt62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(intConsumer67);
        org.junit.Assert.assertNotNull(intConsumer68);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = instant1.atOffset(zoneOffset9);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.plusSeconds((long) 371000000);
        int int15 = offsetDateTime12.getHour();
        java.lang.Object obj16 = null;
        boolean boolean17 = offsetDateTime12.equals(obj16);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime46.withSecond((int) (byte) 0);
        java.time.LocalDate localDate49 = offsetDateTime46.toLocalDate();
        boolean boolean50 = localDate37.isBefore((java.time.chrono.ChronoLocalDate) localDate49);
        boolean boolean51 = localDate37.isLeapYear();
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int54 = zoneOffset53.getTotalSeconds();
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.OffsetDateTime offsetDateTime60 = offsetDateTime58.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        java.time.OffsetDateTime offsetDateTime66 = offsetDateTime64.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime70 = localDateTime67.atOffset(zoneOffset69);
        java.time.zone.ZoneRules zoneRules71 = zoneOffset69.getRules();
        java.time.ZonedDateTime zonedDateTime72 = offsetDateTime64.atZoneSameInstant((java.time.ZoneId) zoneOffset69);
        int int73 = zonedDateTime72.getDayOfMonth();
        int int74 = zonedDateTime72.getHour();
        java.time.ZonedDateTime zonedDateTime76 = zonedDateTime72.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset79 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime80 = localDateTime77.atOffset(zoneOffset79);
        java.time.OffsetDateTime offsetDateTime82 = offsetDateTime80.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime83 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime86 = localDateTime83.atOffset(zoneOffset85);
        java.time.zone.ZoneRules zoneRules87 = zoneOffset85.getRules();
        java.time.ZonedDateTime zonedDateTime88 = offsetDateTime80.atZoneSameInstant((java.time.ZoneId) zoneOffset85);
        java.time.ZonedDateTime zonedDateTime89 = zonedDateTime88.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField90 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long91 = zonedDateTime88.getLong((java.time.temporal.TemporalField) chronoField90);
        long long92 = zonedDateTime76.getLong((java.time.temporal.TemporalField) chronoField90);
        boolean boolean93 = offsetDateTime58.isSupported((java.time.temporal.TemporalField) chronoField90);
        boolean boolean94 = zoneOffset53.isSupported((java.time.temporal.TemporalField) chronoField90);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate96 = localDate37.with((java.time.temporal.TemporalField) chronoField90, (long) 861000000);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertNotNull(zoneRules71);
        org.junit.Assert.assertNotNull(zonedDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 31 + "'", int73 == 31);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 23 + "'", int74 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zoneOffset79);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(zoneRules87);
        org.junit.Assert.assertNotNull(zonedDateTime88);
        org.junit.Assert.assertNotNull(zonedDateTime89);
        org.junit.Assert.assertTrue("'" + chronoField90 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField90.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 999999999L + "'", long91 == 999999999L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 999999999L + "'", long92 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.lang.String str1 = attribute0.toString();
        java.security.AccessControlException accessControlException3 = new java.security.AccessControlException("");
        java.security.Permission permission4 = accessControlException3.getPermission();
        java.security.PrivilegedActionException privilegedActionException5 = new java.security.PrivilegedActionException((java.lang.Exception) accessControlException3);
        java.lang.String str6 = privilegedActionException5.toString();
        java.lang.Exception exception7 = privilegedActionException5.getException();
        boolean boolean8 = attribute0.equals((java.lang.Object) exception7);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNull(permission4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.security.PrivilegedActionException: java.security.AccessControlException: " + "'", str6, "java.security.PrivilegedActionException: java.security.AccessControlException: ");
        org.junit.Assert.assertNotNull(exception7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CodingErrorAction codingErrorAction8 = charsetEncoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder9 = charsetEncoder7.reset();
        java.nio.charset.CodingErrorAction codingErrorAction10 = java.nio.charset.CodingErrorAction.REPLACE;
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder9.onUnmappableCharacter(codingErrorAction10);
        java.nio.CharBuffer charBuffer13 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer14 = charBuffer13.flip();
        java.nio.CharBuffer charBuffer15 = charBuffer13.duplicate();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer18 = byteBuffer17.asLongBuffer();
        short short19 = byteBuffer17.getShort();
        java.nio.ByteBuffer byteBuffer21 = byteBuffer17.putChar('G');
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer24 = byteBuffer23.asLongBuffer();
        short short25 = byteBuffer23.getShort();
        boolean boolean26 = byteBuffer17.equals((java.lang.Object) byteBuffer23);
        java.nio.charset.CoderResult coderResult28 = charsetEncoder9.encode(charBuffer15, byteBuffer17, true);
        java.nio.LongBuffer longBuffer29 = byteBuffer17.asLongBuffer();
        java.nio.ByteBuffer byteBuffer31 = byteBuffer17.putInt(676000000);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(longBuffer18);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 0 + "'", short19 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(longBuffer24);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(coderResult28);
        org.junit.Assert.assertNotNull(longBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer31);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.println(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray10 = org.apache.commons.lang3.StringUtils.stripAll(strArray8, "GBR");
        java.io.PrintWriter printWriter11 = printWriter1.printf("5", (java.lang.Object[]) strArray10);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter1, false);
        printWriter13.println();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter11);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        java.nio.channels.FileChannel fileChannel13 = fileChannel11.position((long) 'x');
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = fileChannel11.position((long) 495000000);
        java.nio.channels.FileLock fileLock19 = fileChannel11.lock((long) 533000000, 0L, true);
        fileLock19.release();
        long long21 = fileLock19.size();
        long long22 = fileLock19.size();
        boolean boolean23 = fileLock19.isShared();
        boolean boolean26 = fileLock19.overlaps((long) 21, (-1L));
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertNotNull(fileChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(fileLock19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month2 = month0.minus((long) (short) -1);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime10 = offsetDateTime6.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset16);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit21 = chronoField20.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime22 = localDateTime18.minus((long) (-999999999), temporalUnit21);
        java.lang.String str23 = temporalUnit21.toString();
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime10.plus((long) (byte) 100, temporalUnit21);
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime24.plusDays((long) 31);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.Clock clock33 = java.time.Clock.fixed(instant28, (java.time.ZoneId) zoneOffset31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset38);
        java.time.Clock clock41 = clock33.withZone((java.time.ZoneId) zoneOffset38);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime24.withOffsetSameInstant(zoneOffset38);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.ValueRange valueRange44 = offsetDateTime24.range((java.time.temporal.TemporalField) chronoField43);
        boolean boolean45 = chronoField43.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            int int46 = month0.get((java.time.temporal.TemporalField) chronoField43);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.FEBRUARY + "'", month2.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField20.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit21 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit21.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Weeks" + "'", str23, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(clock33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(clock41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField43.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(valueRange44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.ZonedDateTime zonedDateTime24 = offsetDateTime16.atZoneSameInstant((java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime24.withLaterOffsetAtOverlap();
        boolean boolean26 = zonedDateTime11.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime25);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.UTC;
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime25.withZoneSameInstant((java.time.ZoneId) zoneOffset27);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZoneId zoneId41 = zonedDateTime40.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime42 = zonedDateTime40.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime46.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        java.time.zone.ZoneRules zoneRules53 = zoneOffset51.getRules();
        java.time.ZonedDateTime zonedDateTime54 = offsetDateTime46.atZoneSameInstant((java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime54.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long57 = zonedDateTime54.getLong((java.time.temporal.TemporalField) chronoField56);
        long long58 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField56);
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime40.minusSeconds((long) 999999999);
        java.time.LocalDate localDate61 = zonedDateTime60.toLocalDate();
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime65 = localDateTime62.atOffset(zoneOffset64);
        java.time.OffsetDateTime offsetDateTime67 = offsetDateTime65.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        java.time.zone.ZoneRules zoneRules72 = zoneOffset70.getRules();
        java.time.ZonedDateTime zonedDateTime73 = offsetDateTime65.atZoneSameInstant((java.time.ZoneId) zoneOffset70);
        int int74 = zonedDateTime73.getDayOfMonth();
        int int75 = zonedDateTime73.getMinute();
        java.time.LocalDateTime localDateTime76 = zonedDateTime73.toLocalDateTime();
        boolean boolean77 = zonedDateTime60.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime73);
        boolean boolean78 = zonedDateTime25.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime73);
        java.time.ZoneOffset zoneOffset82 = java.time.ZoneOffset.ofTotalSeconds(1);
        java.time.LocalDateTime localDateTime83 = java.time.LocalDateTime.ofEpochSecond(0L, (int) '\r', zoneOffset82);
        java.time.ZonedDateTime zonedDateTime84 = zonedDateTime25.with((java.time.temporal.TemporalAdjuster) localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zoneId41);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField56.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 999999999L + "'", long57 == 999999999L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 999999999L + "'", long58 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(zoneRules72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 31 + "'", int74 == 31);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 59 + "'", int75 == 59);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(zoneOffset82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(zonedDateTime84);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate1 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate4 = cloneablePredicate1.or(cloneablePredicate3);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate6 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate8 = java.util.function.Predicate.isEqual((java.lang.Object) (short) 100);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate9 = cloneablePredicate6.or(cloneablePredicate8);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate10 = cloneablePredicate4.or(cloneablePredicate6);
        java.util.function.Predicate<java.lang.Cloneable> cloneablePredicate11 = cloneablePredicate10.negate();
        org.junit.Assert.assertNotNull(cloneablePredicate1);
        org.junit.Assert.assertNotNull(cloneablePredicate3);
        org.junit.Assert.assertNotNull(cloneablePredicate4);
        org.junit.Assert.assertNotNull(cloneablePredicate6);
        org.junit.Assert.assertNotNull(cloneablePredicate8);
        org.junit.Assert.assertNotNull(cloneablePredicate9);
        org.junit.Assert.assertNotNull(cloneablePredicate10);
        org.junit.Assert.assertNotNull(cloneablePredicate11);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strList83);
        boolean boolean86 = strList69.removeAll((java.util.Collection<java.lang.String>) strList85);
        boolean boolean87 = strList57.retainAll((java.util.Collection<java.lang.String>) strList85);
        java.lang.Object[] objArray88 = strList57.toArray();
        boolean boolean89 = strList41.addAll((java.util.Collection<java.lang.String>) strList57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = strList41.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getAuthority();
        int int10 = uRL7.getDefaultPort();
        java.net.URL uRL12 = new java.net.URL(uRL7, "09:14:52.125Z");
        java.io.File file15 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL16 = file15.toURL();
        java.io.File file19 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL20 = file19.toURL();
        boolean boolean21 = uRL16.sameFile(uRL20);
        java.net.URL uRL23 = null;
        java.security.CodeSigner[] codeSignerArray24 = new java.security.CodeSigner[] {};
        java.security.CodeSource codeSource25 = new java.security.CodeSource(uRL23, codeSignerArray24);
        java.lang.String str26 = org.apache.commons.lang3.StringUtils.concatWith("\u82f1\u6587", (java.lang.Object[]) codeSignerArray24);
        java.security.CodeSource codeSource27 = new java.security.CodeSource(uRL16, codeSignerArray24);
        java.security.CodeSource codeSource28 = new java.security.CodeSource(uRL12, codeSignerArray24);
        java.lang.String str29 = uRL12.getAuthority();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom3566269828364519628aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom3566269828364519628aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom5954593254685732751aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom5954593254685732751aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals(uRL12.toString(), "file:/tmp/09:14:52.125Z");
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/tmp/United Kingdom5746895928573047947aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL16);
        org.junit.Assert.assertEquals(uRL16.toString(), "file:/tmp/United Kingdom5746895928573047947aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "/tmp");
        org.junit.Assert.assertEquals(file19.toString(), "/tmp/United Kingdom673654451666542761aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL20);
        org.junit.Assert.assertEquals(uRL20.toString(), "file:/tmp/United Kingdom673654451666542761aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(codeSignerArray24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        java.security.cert.CertificateException certificateException1 = new java.security.cert.CertificateException("Minute");
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalTime localTime8 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime10 = localTime8.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime11 = localDate1.atTime(localTime8);
        java.time.LocalTime localTime13 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int14 = localTime8.compareTo(localTime13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.Duration duration17 = duration15.minusDays((long) (-1));
        java.time.LocalTime localTime18 = localTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime20 = localTime18.plusMinutes(100L);
        java.time.Instant instant22 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant24 = instant22.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime25 = java.nio.file.attribute.FileTime.from(instant22);
        java.time.Instant instant27 = instant22.plusMillis((long) 10);
        java.time.Instant instant29 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant31 = instant29.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime32 = java.nio.file.attribute.FileTime.from(instant29);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery33 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period34 = instant29.query(periodTemporalQuery33);
        java.time.Period period35 = instant27.query(periodTemporalQuery33);
        java.time.Period period36 = localTime20.query(periodTemporalQuery33);
        java.time.Instant instant38 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.Clock clock43 = java.time.Clock.fixed(instant38, (java.time.ZoneId) zoneOffset41);
        java.time.LocalTime localTime44 = java.time.LocalTime.now(clock43);
        java.time.LocalTime localTime46 = localTime44.plusHours((long) 16384);
        long long47 = localTime46.toNanoOfDay();
        java.time.LocalTime localTime49 = localTime46.minusHours((long) 'G');
        int int50 = localTime20.compareTo(localTime46);
        java.time.LocalTime localTime52 = localTime46.withNano(0);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(fileTime25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(fileTime32);
        org.junit.Assert.assertNotNull(periodTemporalQuery33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(clock43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 57632000000000L + "'", long47 == 57632000000000L);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(localTime52);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.ZoneId zoneId22 = zonedDateTime21.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap24 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap24.put((java.time.ZoneId) zoneOffset26, zoneRules34);
        java.time.ZoneId[] zoneIdArray37 = new java.time.ZoneId[] { zoneOffset6, zoneId22, zoneOffset26 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet38 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet38, zoneIdArray37);
        java.lang.String[] strArray43 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray45 = org.apache.commons.lang3.StringUtils.stripAll(strArray43, "GBR");
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray45);
        boolean boolean47 = zoneIdSet38.remove((java.lang.Object) strArray45);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "\\u0020", "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        strList54.add((int) (short) 0, "eng");
        boolean boolean59 = zoneIdSet38.removeAll((java.util.Collection<java.lang.String>) strList54);
        boolean boolean60 = strList54.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strList54.add(26, "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom632896297712551156aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 26, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneIdArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Minute(null <no signer certificates>)" + "'", str46, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        float float6 = floatBuffer3.get();
        float[] floatArray9 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.ByteOrder byteOrder11 = floatBuffer10.order();
        int int12 = floatBuffer3.compareTo(floatBuffer10);
        int int13 = floatBuffer3.arrayOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer16 = floatBuffer3.put(755000000, (float) 861000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 16.0f + "'", float6 == 16.0f);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[16.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(byteOrder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalTime localTime7 = java.time.LocalTime.now(clock6);
        java.time.LocalTime localTime9 = localTime7.plusHours((long) 16384);
        java.time.LocalTime localTime11 = localTime7.minusNanos(0L);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime15.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.zone.ZoneRules zoneRules22 = zoneOffset20.getRules();
        java.time.ZonedDateTime zonedDateTime23 = offsetDateTime15.atZoneSameInstant((java.time.ZoneId) zoneOffset20);
        int int24 = zonedDateTime23.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime23.withDayOfYear(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.lang.String str36 = zoneRules34.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = zoneRules34.getTransitions();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime38.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        int int48 = localDateTime39.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        int int54 = localDateTime49.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime50);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        int int59 = localDateTime50.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        boolean boolean60 = localDateTime39.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.time.format.DateTimeFormatter dateTimeFormatter61 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str62 = localDateTime55.format(dateTimeFormatter61);
        java.time.ZoneOffset zoneOffset63 = zoneRules34.getOffset(localDateTime55);
        java.time.LocalDateTime localDateTime65 = localDateTime55.minusMinutes(13L);
        java.time.temporal.ChronoField chronoField67 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit68 = chronoField67.getBaseUnit();
        boolean boolean69 = temporalUnit68.isTimeBased();
        java.time.LocalDateTime localDateTime70 = localDateTime55.minus((long) 829000000, temporalUnit68);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime26.with((java.time.temporal.TemporalAdjuster) localDateTime55);
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
        java.time.temporal.ValueRange valueRange73 = zonedDateTime26.range((java.time.temporal.TemporalField) chronoField72);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime75 = localTime11.with((java.time.temporal.TemporalField) chronoField72, (-9223372036854775808L));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AlignedDayOfWeekInYear (valid values 1 - 7): -9223372036854775808");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str36, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str62, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + chronoField67 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField67.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit68 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit68.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR + "'", chronoField72.equals(java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));
        org.junit.Assert.assertNotNull(valueRange73);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        java.time.Instant instant2 = java.time.Instant.ofEpochSecond(32000L, (long) 64);
        java.time.Instant instant4 = instant2.minusNanos((-52177397210L));
        long long5 = instant4.toEpochMilli();
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.time.Instant instant11 = instant9.minusMillis((long) 399000000);
        java.util.Set<java.lang.String> strSet12 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month13 = java.time.Month.OCTOBER;
        java.time.Month month15 = month13.plus(0L);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime16.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime17.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.temporal.Temporal temporal27 = month15.adjustInto((java.time.temporal.Temporal) localDateTime17);
        boolean boolean28 = strSet12.equals((java.lang.Object) month15);
        java.security.ProtectionDomain[] protectionDomainArray29 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext30 = new java.security.AccessControlContext(protectionDomainArray29);
        java.time.LocalDate localDate31 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery32 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period33 = localDate31.query(periodTemporalQuery32);
        boolean boolean34 = accessControlContext30.equals((java.lang.Object) periodTemporalQuery32);
        java.time.Period period35 = month15.query(periodTemporalQuery32);
        java.time.Period period36 = instant11.query(periodTemporalQuery32);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate38 = localDateTime37.toLocalDate();
        java.time.temporal.Temporal temporal39 = period36.subtractFrom((java.time.temporal.Temporal) localDateTime37);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int44 = zoneOffset43.getTotalSeconds();
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset43);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime49 = localDateTime46.atOffset(zoneOffset48);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime49.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset54.getRules();
        java.time.ZonedDateTime zonedDateTime57 = offsetDateTime49.atZoneSameInstant((java.time.ZoneId) zoneOffset54);
        int int58 = zonedDateTime57.getDayOfMonth();
        int int59 = zonedDateTime57.getHour();
        java.time.Instant instant60 = zonedDateTime57.toInstant();
        java.time.temporal.Temporal temporal61 = zoneOffset43.adjustInto((java.time.temporal.Temporal) zonedDateTime57);
        java.time.OffsetDateTime offsetDateTime62 = java.time.OffsetDateTime.of(localDateTime37, zoneOffset43);
        java.time.ZonedDateTime zonedDateTime63 = instant4.atZone((java.time.ZoneId) zoneOffset43);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32052177L + "'", long5 == 32052177L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + month13 + "' != '" + java.time.Month.OCTOBER + "'", month13.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.OCTOBER + "'", month15.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(temporal27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(periodTemporalQuery32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(temporal39);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 31 + "'", int58 == 31);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 23 + "'", int59 == 23);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(temporal61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = zoneOffset18.getRules();
        java.time.ZonedDateTime zonedDateTime21 = offsetDateTime13.atZoneSameInstant((java.time.ZoneId) zoneOffset18);
        java.time.ZoneId zoneId22 = zonedDateTime21.getZone();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap24 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.time.zone.ZoneRules zoneRules36 = zoneIdMap24.put((java.time.ZoneId) zoneOffset26, zoneRules34);
        java.time.ZoneId[] zoneIdArray37 = new java.time.ZoneId[] { zoneOffset6, zoneId22, zoneOffset26 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet38 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet38, zoneIdArray37);
        java.lang.String[] strArray43 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray45 = org.apache.commons.lang3.StringUtils.stripAll(strArray43, "GBR");
        java.lang.String str46 = org.apache.commons.lang3.StringUtils.concat((java.lang.Object[]) strArray45);
        boolean boolean47 = zoneIdSet38.remove((java.lang.Object) strArray45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList59);
        boolean boolean62 = zoneIdSet38.removeAll((java.util.Collection<java.lang.String>) strList61);
        boolean boolean63 = strList61.isEmpty();
        java.util.Iterator<java.lang.String> strItor64 = strList61.iterator();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNull(zoneRules36);
        org.junit.Assert.assertNotNull(zoneIdArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Minute(null <no signer certificates>)" + "'", str46, "Minute(null <no signer certificates>)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        java.util.Spliterator.OfDouble ofDouble3 = doubleStream1.spliterator();
        int int4 = ofDouble3.characteristics();
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.distinct();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.parallel();
        java.util.Spliterator.OfDouble ofDouble8 = doubleStream6.spliterator();
        int int9 = ofDouble8.characteristics();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics10 = new java.util.DoubleSummaryStatistics();
        boolean boolean11 = ofDouble8.tryAdvance((java.util.function.DoubleConsumer) doubleSummaryStatistics10);
        ofDouble3.forEachRemaining((java.util.function.DoubleConsumer) doubleSummaryStatistics10);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics13 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics13.accept((double) 0);
        doubleSummaryStatistics13.accept((double) 100L);
        doubleSummaryStatistics10.combine(doubleSummaryStatistics13);
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(ofDouble3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(ofDouble8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(doubleSummaryStatistics10.toString(), "DoubleSummaryStatistics{count=2, sum=100.000000, min=0.000000, average=50.000000, max=100.000000}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(doubleSummaryStatistics13.toString(), "DoubleSummaryStatistics{count=2, sum=100.000000, min=0.000000, average=50.000000, max=100.000000}");
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        int int0 = java.util.Spliterator.CONCURRENT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4096 + "'", int0 == 4096);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        java.nio.ShortBuffer shortBuffer2 = shortBuffer1.compact();
        java.nio.ShortBuffer shortBuffer3 = shortBuffer1.asReadOnlyBuffer();
        short[] shortArray4 = shortBuffer1.array();
        java.nio.ShortBuffer shortBuffer5 = java.nio.ShortBuffer.wrap(shortArray4);
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(shortBuffer5);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset4.getRules();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.UTC;
        java.time.ZoneId[] zoneIdArray9 = new java.time.ZoneId[] { zoneOffset4, zoneOffset8 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet10 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet10, zoneIdArray9);
        java.util.Spliterator<java.time.ZoneId> zoneIdSpliterator12 = zoneIdSet10.spliterator();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        boolean boolean15 = zoneIdSet10.removeAll((java.util.Collection<java.lang.String>) strSet14);
        java.util.Spliterator<java.time.ZoneId> zoneIdSpliterator16 = zoneIdSet10.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList56);
        boolean boolean59 = strList42.removeAll((java.util.Collection<java.lang.String>) strList58);
        boolean boolean60 = strList30.retainAll((java.util.Collection<java.lang.String>) strList58);
        java.io.File file62 = new java.io.File("GBR");
        boolean boolean64 = file62.setWritable(true);
        boolean boolean66 = file62.setWritable(true);
        java.net.URI uRI67 = file62.toURI();
        java.io.File file69 = new java.io.File("GBR");
        boolean boolean71 = file69.setWritable(true);
        java.nio.file.Path path72 = file69.toPath();
        java.nio.file.Path path74 = path72.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI75 = path72.toUri();
        java.net.URI uRI76 = uRI67.relativize(uRI75);
        boolean boolean77 = strList30.equals((java.lang.Object) uRI67);
        int int78 = strList30.size();
        boolean boolean79 = zoneIdSet10.removeAll((java.util.Collection<java.lang.String>) strList30);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(zoneIdArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(zoneIdSpliterator12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneIdSpliterator16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull("file62.getParent() == null", file62.getParent());
        org.junit.Assert.assertEquals(file62.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(uRI67);
        org.junit.Assert.assertNull("file69.getParent() == null", file69.getParent());
        org.junit.Assert.assertEquals(file69.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(path72);
        org.junit.Assert.assertNotNull(path74);
        org.junit.Assert.assertNotNull(uRI75);
        org.junit.Assert.assertNotNull(uRI76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.nio.LongBuffer longBuffer5 = longBuffer2.asReadOnlyBuffer();
        java.nio.LongBuffer longBuffer8 = longBuffer2.put((int) (byte) 0, (long) 17);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer8);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.lang.String str7 = uRI6.getPath();
        java.io.File file9 = new java.io.File("GBR");
        boolean boolean11 = file9.setWritable(true);
        boolean boolean13 = file9.setWritable(true);
        java.net.URI uRI14 = file9.toURI();
        java.io.File file16 = new java.io.File("GBR");
        boolean boolean18 = file16.setWritable(true);
        boolean boolean20 = file16.setWritable(true);
        java.net.URI uRI21 = file16.toURI();
        java.net.URI uRI22 = uRI14.relativize(uRI21);
        int int23 = uRI6.compareTo(uRI14);
        java.lang.String str24 = uRI14.getUserInfo();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/experiment/GBR/" + "'", str7, "/experiment/GBR/");
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
        org.junit.Assert.assertEquals(file16.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.print(385000000);
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer6 = charBuffer5.flip();
        java.nio.CharBuffer charBuffer7 = charBuffer5.duplicate();
        char[] charArray15 = new char[] { 'a', '#', '4', '#' };
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsAny("", charArray15);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray15);
        boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray15);
        int int19 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer7, charArray15);
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap(charArray15);
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray15);
        printWriter1.println(charArray15);
        char[] charArray29 = new char[] { '#', '\n', '\uffff', '\n', '\uffff', '-' };
        printWriter1.println(charArray29);
        printWriter1.close();
        printWriter1.println((double) (-52177397210L));
        printWriter1.close();
        printWriter1.write(33541);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#\n\uffff\n\uffff-");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#\n\uffff\n\uffff-");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, \n\uffff, \n\uffff, -]");
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalTime localTime8 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime10 = localTime8.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime11 = localDate1.atTime(localTime8);
        java.time.LocalTime localTime13 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int14 = localTime8.compareTo(localTime13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.Duration duration17 = duration15.minusDays((long) (-1));
        java.time.LocalTime localTime18 = localTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime20 = localTime18.plusMinutes(100L);
        java.lang.String str21 = localTime20.toString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "01:40:00.000000032" + "'", str21, "01:40:00.000000032");
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        java.util.stream.Stream.Builder<java.util.function.DoubleConsumer> doubleConsumerBuilder0 = java.util.stream.Stream.builder();
        org.junit.Assert.assertNotNull(doubleConsumerBuilder0);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime16 = localDateTime13.atOffset(zoneOffset15);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.ZonedDateTime zonedDateTime24 = offsetDateTime16.atZoneSameInstant((java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime24.withLaterOffsetAtOverlap();
        boolean boolean26 = zonedDateTime11.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime25);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime28 = zonedDateTime11.minusSeconds(6603384152749567654L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -208252913677");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.peek((java.util.function.DoubleConsumer) doubleSummaryStatistics3);
        java.util.Spliterator.OfDouble ofDouble5 = doubleStream4.spliterator();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(ofDouble5);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale2.toLanguageTag();
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale2.getDisplayScript();
        java.lang.String str6 = chronoField0.getDisplayName(locale2);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-CN" + "'", str3, "zh-CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u5c0f\u65f6" + "'", str6, "\u5c0f\u65f6");
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        java.security.NoSuchProviderException noSuchProviderException1 = new java.security.NoSuchProviderException("sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom5432662299242066087aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.lang.String str7 = path6.toString();
        boolean boolean8 = path6.isAbsolute();
        java.lang.String str10 = org.apache.commons.lang3.StringUtils.join((java.lang.Iterable<java.nio.file.Path>) path6, '4');
        java.util.Iterator<java.nio.file.Path> pathItor11 = path6.iterator();
        java.nio.file.Path path12 = path6.getParent();
        java.io.File file14 = new java.io.File("GBR");
        boolean boolean16 = file14.setWritable(true);
        java.nio.file.Path path17 = file14.toPath();
        java.nio.file.Path path18 = path6.resolve(path17);
        java.util.Iterator<java.nio.file.Path> pathItor19 = path6.iterator();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str7, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str10, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(pathItor11);
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertNotNull(pathItor19);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        int int2 = zoneIdMap1.size();
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.OffsetTime offsetTime7 = offsetTime5.plusNanos(1434414441700000L);
        java.time.OffsetTime offsetTime8 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime10 = offsetTime8.withSecond(16);
        java.time.Instant instant12 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant14 = instant12.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime15 = java.nio.file.attribute.FileTime.from(instant12);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery16 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period17 = instant12.query(periodTemporalQuery16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit19 = chronoField18.getBaseUnit();
        boolean boolean20 = instant12.isSupported(temporalUnit19);
        boolean boolean21 = offsetTime8.isSupported(temporalUnit19);
        boolean boolean22 = offsetTime7.isEqual(offsetTime8);
        java.time.OffsetTime offsetTime24 = offsetTime8.minusHours((long) 33237);
        boolean boolean25 = zoneIdMap1.containsValue((java.lang.Object) offsetTime8);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetTime8);
        org.junit.Assert.assertNotNull(offsetTime10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(fileTime15);
        org.junit.Assert.assertNotNull(periodTemporalQuery16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField18.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit19 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit19.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(offsetTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        java.time.LocalTime localTime8 = java.time.LocalTime.MIN;
        java.time.LocalTime localTime10 = localTime8.plusHours((long) 16384);
        java.time.LocalDateTime localDateTime11 = localDate1.atTime(localTime8);
        java.time.LocalTime localTime13 = java.time.LocalTime.ofNanoOfDay((long) ' ');
        int int14 = localTime8.compareTo(localTime13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.time.Duration duration17 = duration15.minusDays((long) (-1));
        java.time.LocalTime localTime18 = localTime13.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.Duration duration19 = duration17.negated();
        boolean boolean20 = duration17.isZero();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        boolean boolean1 = org.apache.commons.lang3.CharUtils.isAsciiNumeric('a');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("P-7D", "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "P-7D" + "'", str2, "P-7D");
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period1 = java.time.Period.parse((java.lang.CharSequence) "java.nio.HeapFloatBuffer[pos=0 lim=2 cap=2]");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text cannot be parsed to a Period");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        boolean boolean3 = charBuffer1.hasRemaining();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer7 = charBuffer1.append((java.lang.CharSequence) "00:00:32", (int) 'u', 1999999998);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1999999998");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        java.time.LocalDate localDate1 = java.time.LocalDate.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.MIN;
        boolean boolean3 = localDate1.isEqual((java.time.chrono.ChronoLocalDate) localDate2);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean5 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField4);
        java.time.OffsetTime offsetTime6 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime8 = offsetTime6.withSecond(16);
        java.time.OffsetDateTime offsetDateTime9 = localDate2.atTime(offsetTime8);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        int int15 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        int int20 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        int int26 = localDateTime21.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime30 = localDateTime27.atOffset(zoneOffset29);
        int int31 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        boolean boolean32 = localDateTime11.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime27);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        int int38 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        boolean boolean43 = localDateTime33.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        boolean boolean44 = localDateTime27.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDate localDate45 = localDateTime27.toLocalDate();
        java.time.LocalDate localDate46 = java.time.LocalDate.now();
        java.time.LocalDate localDate47 = java.time.LocalDate.MIN;
        boolean boolean48 = localDate46.isEqual((java.time.chrono.ChronoLocalDate) localDate47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean50 = localDate47.isSupported((java.time.temporal.TemporalField) chronoField49);
        int int51 = localDate47.getDayOfYear();
        int int52 = localDate45.compareTo((java.time.chrono.ChronoLocalDate) localDate47);
        java.time.Period period53 = localDate2.until((java.time.chrono.ChronoLocalDate) localDate47);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit56 = chronoField55.getBaseUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate57 = localDate2.plus(999999999L, temporalUnit56);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration58 = java.time.Duration.of(168L, temporalUnit56);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unit must not have an estimated duration");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField4.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(offsetTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField49.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1999999998 + "'", int52 == 1999999998);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField55.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit56 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit56.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(chronoLocalDate57);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.temporal.TemporalUnit temporalUnit14 = null;
        boolean boolean15 = localDate13.isSupported(temporalUnit14);
        boolean boolean16 = localDate13.isLeapYear();
        java.time.LocalTime localTime17 = java.time.LocalTime.now();
        java.time.LocalTime localTime19 = localTime17.plusHours(0L);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.zone.ZoneRules zoneRules30 = zoneOffset28.getRules();
        java.time.ZonedDateTime zonedDateTime31 = offsetDateTime23.atZoneSameInstant((java.time.ZoneId) zoneOffset28);
        java.time.LocalTime localTime32 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset28);
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.of(localDate13, localTime17, zoneOffset28);
        java.time.LocalDate localDate35 = localDate13.withYear(0);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.lang.Object obj7 = byteBuffer6.array();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer6.putInt((-793999999));
        java.nio.CharBuffer charBuffer10 = byteBuffer9.asCharBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        int int2 = byteBuffer1.position();
        byte byte4 = byteBuffer1.get(0);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = byteBuffer1.getDouble(131000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("5");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: 5");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.time.format.TextStyle textStyle2 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getISO3Language();
        java.time.format.DecimalStyle decimalStyle5 = java.time.format.DecimalStyle.of(locale3);
        java.lang.String str6 = chronology1.getDisplayName(textStyle2, locale3);
        boolean boolean8 = chronology1.isLeapYear((long) (-7));
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate12 = chronology1.date((int) '+', 574000000, 29);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 574000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + textStyle2 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle2.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(decimalStyle5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISO" + "'", str6, "ISO");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.toLanguageTag();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.getDisplayScript();
        boolean boolean5 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Month month1 = java.time.Month.of((-1000002021));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear: -1000002021");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset32);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField36.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime38 = localDateTime34.minus((long) (-999999999), temporalUnit37);
        java.util.List<java.time.ZoneOffset> zoneOffsetList39 = zoneRules23.getValidOffsets(localDateTime34);
        int int40 = localDateTime34.getHour();
        java.time.LocalDateTime localDateTime42 = localDateTime34.withNano(30);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField36.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime38);
        org.junit.Assert.assertNotNull(zoneOffsetList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        int int1 = localTime0.getNano();
        java.time.LocalDate localDate2 = java.time.LocalDate.now();
        java.time.LocalDate localDate3 = java.time.LocalDate.MIN;
        boolean boolean4 = localDate2.isEqual((java.time.chrono.ChronoLocalDate) localDate3);
        int int5 = localDate3.getYear();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.temporal.Temporal temporal10 = localDate3.adjustInto((java.time.temporal.Temporal) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime14.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap20 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap20.getOrDefault((java.lang.Object) 1.0d, zoneRules26);
        java.lang.String str28 = zoneRules26.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList29 = zoneRules26.getTransitions();
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime41.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime42.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        boolean boolean52 = localDateTime31.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.format.DateTimeFormatter dateTimeFormatter53 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str54 = localDateTime47.format(dateTimeFormatter53);
        java.time.ZoneOffset zoneOffset55 = zoneRules26.getOffset(localDateTime47);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime18.withOffsetSameLocal(zoneOffset55);
        long long57 = localDateTime6.toEpochSecond(zoneOffset55);
        java.lang.String str58 = zoneOffset55.toString();
        java.time.OffsetTime offsetTime59 = localTime0.atOffset(zoneOffset55);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime61 = offsetTime59.withSecond(829000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): 829000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 741000000 + "'", int1 == 741000000);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-999999999) + "'", int5 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(temporal10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str28, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str54, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 31556889832780799L + "'", long57 == 31556889832780799L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Z" + "'", str58, "Z");
        org.junit.Assert.assertNotNull(offsetTime59);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        java.util.Locale locale2 = new java.util.Locale("", "Minute");
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "_MINUTE");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.lang.String str6 = file1.getPath();
        long long7 = file1.length();
        java.io.File file8 = file1.getAbsoluteFile();
        boolean boolean9 = file8.delete();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4096L + "'", long7 == 4096L);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strList25.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strList13.retainAll((java.util.Collection<java.lang.String>) strList41);
        strList41.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime12.withFixedOffsetZone();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime15.minusNanos((long) (short) 100);
        java.time.LocalTime localTime22 = localDateTime21.toLocalTime();
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        int int33 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        int int39 = localDateTime34.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        int int44 = localDateTime35.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        boolean boolean45 = localDateTime24.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime46.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        boolean boolean56 = localDateTime46.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        boolean boolean57 = localDateTime40.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        java.time.LocalDate localDate58 = localDateTime40.toLocalDate();
        java.time.LocalDate localDate59 = java.time.LocalDate.now();
        java.time.LocalDate localDate60 = java.time.LocalDate.MIN;
        boolean boolean61 = localDate59.isEqual((java.time.chrono.ChronoLocalDate) localDate60);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean63 = localDate60.isSupported((java.time.temporal.TemporalField) chronoField62);
        int int64 = localDate60.getDayOfYear();
        int int65 = localDate58.compareTo((java.time.chrono.ChronoLocalDate) localDate60);
        java.time.LocalDateTime localDateTime66 = localTime22.atDate(localDate58);
        java.time.temporal.Temporal temporal67 = zonedDateTime12.with((java.time.temporal.TemporalAdjuster) localDate58);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField62.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1999999998 + "'", int65 == 1999999998);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(temporal67);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.chrono.Era era14 = localDate13.getEra();
        java.security.ProtectionDomain[] protectionDomainArray15 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext16 = new java.security.AccessControlContext(protectionDomainArray15);
        java.time.LocalDate localDate17 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery18 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period19 = localDate17.query(periodTemporalQuery18);
        boolean boolean20 = accessControlContext16.equals((java.lang.Object) periodTemporalQuery18);
        java.time.Period period21 = localDate13.query(periodTemporalQuery18);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime25.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        java.time.zone.ZoneRules zoneRules32 = zoneOffset30.getRules();
        java.time.ZonedDateTime zonedDateTime33 = offsetDateTime25.atZoneSameInstant((java.time.ZoneId) zoneOffset30);
        java.time.ZoneId zoneId34 = zonedDateTime33.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime35 = zonedDateTime33.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime39.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.zone.ZoneRules zoneRules46 = zoneOffset44.getRules();
        java.time.ZonedDateTime zonedDateTime47 = offsetDateTime39.atZoneSameInstant((java.time.ZoneId) zoneOffset44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime47.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long50 = zonedDateTime47.getLong((java.time.temporal.TemporalField) chronoField49);
        long long51 = zonedDateTime33.getLong((java.time.temporal.TemporalField) chronoField49);
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime33.minusSeconds((long) 999999999);
        java.time.LocalDate localDate54 = zonedDateTime53.toLocalDate();
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime58 = localDateTime55.atOffset(zoneOffset57);
        java.time.OffsetDateTime offsetDateTime60 = offsetDateTime58.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        java.time.zone.ZoneRules zoneRules65 = zoneOffset63.getRules();
        java.time.ZonedDateTime zonedDateTime66 = offsetDateTime58.atZoneSameInstant((java.time.ZoneId) zoneOffset63);
        int int67 = zonedDateTime66.getDayOfMonth();
        int int68 = zonedDateTime66.getMinute();
        java.time.LocalDateTime localDateTime69 = zonedDateTime66.toLocalDateTime();
        boolean boolean70 = zonedDateTime53.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime66);
        java.time.temporal.Temporal temporal71 = period21.subtractFrom((java.time.temporal.Temporal) zonedDateTime66);
        java.time.Instant instant74 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant76 = instant74.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime77 = java.nio.file.attribute.FileTime.from(instant74);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery78 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period79 = instant74.query(periodTemporalQuery78);
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit81 = chronoField80.getBaseUnit();
        boolean boolean82 = instant74.isSupported(temporalUnit81);
        java.time.LocalDateTime localDateTime83 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime84 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset86 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime87 = localDateTime84.atOffset(zoneOffset86);
        int int88 = localDateTime83.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime84);
        java.time.LocalDateTime localDateTime90 = localDateTime84.minusNanos((long) (short) 100);
        boolean boolean91 = temporalUnit81.isSupportedBy((java.time.temporal.Temporal) localDateTime84);
        boolean boolean92 = temporalUnit81.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime93 = zonedDateTime66.plus(35L, temporalUnit81);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + era14 + "' != '" + java.time.chrono.IsoEra.BCE + "'", era14.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(protectionDomainArray15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(periodTemporalQuery18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(zoneRules32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 999999999L + "'", long50 == 999999999L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 999999999L + "'", long51 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(zoneRules65);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 31 + "'", int67 == 31);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 59 + "'", int68 == 59);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(temporal71);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(fileTime77);
        org.junit.Assert.assertNotNull(periodTemporalQuery78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField80.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit81 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit81.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(zoneOffset86);
        org.junit.Assert.assertNotNull(offsetDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer4 = charBuffer3.flip();
        int int5 = charBuffer3.capacity();
        boolean boolean6 = charBuffer3.hasArray();
        boolean boolean7 = chronology1.equals((java.lang.Object) charBuffer3);
        java.lang.String str8 = chronology1.toString();
        java.time.chrono.ChronoPeriod chronoPeriod12 = chronology1.period((int) '-', 722000000, 0);
        java.util.Map<java.time.temporal.TemporalField, java.lang.Long> temporalFieldMap13 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology15 = dateTimeFormatter14.getChronology();
        java.time.chrono.Chronology chronology16 = dateTimeFormatter14.getChronology();
        java.time.format.ResolverStyle resolverStyle17 = dateTimeFormatter14.getResolverStyle();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate18 = chronology1.resolveDate(temporalFieldMap13, resolverStyle17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + resolverStyle17 + "' != '" + java.time.format.ResolverStyle.STRICT + "'", resolverStyle17.equals(java.time.format.ResolverStyle.STRICT));
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = null; // flaky: path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = null; // flaky: java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        java.nio.channels.FileChannel fileChannel20 = null; // flaky: fileChannel18.position((long) '\uffff');
        boolean boolean21 = false; // flaky: fileChannel20.isOpen();
        java.net.InetAddress inetAddress22 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str23 = inetAddress22.getHostName();
        byte[] byteArray24 = inetAddress22.getAddress();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.wrap(byteArray24);
        java.nio.ByteBuffer[] byteBufferArray26 = new java.nio.ByteBuffer[] { byteBuffer25 };
        // The following exception was thrown during execution in test generation
        try {
            long long27 = 0L; // flaky: fileChannel20.read(byteBufferArray26);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Is a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(fileChannel18);
        org.junit.Assert.assertNotNull(fileChannel20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(inetAddress22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "localhost" + "'", str23, "localhost");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[127, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(byteBufferArray26);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.Duration duration22 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int23 = duration22.getNano();
        java.time.Duration duration24 = duration22.abs();
        java.time.Duration duration27 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int28 = duration27.getNano();
        java.time.Duration duration29 = duration27.abs();
        java.time.Duration duration30 = duration29.abs();
        java.time.Duration duration32 = duration30.dividedBy((long) 533000000);
        long long33 = duration30.toMinutes();
        java.time.Duration duration34 = duration24.minus(duration30);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime35 = zonedDateTime17.minus((java.time.temporal.TemporalAmount) duration30);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime35);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed(35L, (long) 15);
        java.util.stream.LongStream longStream4 = longStream2.skip((long) 4096);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = null; // flaky: path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = null; // flaky: java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        java.nio.channels.SeekableByteChannel seekableByteChannel20 = null; // flaky: fileChannel18.position((long) 861000000);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer23 = byteBuffer22.asLongBuffer();
        boolean boolean24 = byteBuffer22.hasArray();
        java.lang.Object obj25 = byteBuffer22.array();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer22.put((byte) 0);
        java.nio.ByteBuffer byteBuffer29 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer30 = byteBuffer29.asLongBuffer();
        float float32 = byteBuffer29.getFloat(4);
        double double34 = byteBuffer29.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder35 = null;
        java.nio.ByteBuffer byteBuffer36 = byteBuffer29.order(byteOrder35);
        java.nio.ByteOrder byteOrder37 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer38 = byteBuffer29.order(byteOrder37);
        java.nio.IntBuffer intBuffer39 = byteBuffer38.asIntBuffer();
        java.net.InetAddress inetAddress41 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str42 = inetAddress41.getHostName();
        byte[] byteArray43 = inetAddress41.getAddress();
        java.net.InetAddress inetAddress44 = java.net.InetAddress.getByAddress("zh_CN", byteArray43);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer38.get(byteArray43);
        java.nio.ByteOrder byteOrder46 = byteBuffer38.order();
        java.nio.ByteBuffer byteBuffer48 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer49 = byteBuffer48.asLongBuffer();
        float float51 = byteBuffer48.getFloat(4);
        double double53 = byteBuffer48.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder54 = null;
        java.nio.ByteBuffer byteBuffer55 = byteBuffer48.order(byteOrder54);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer48.putInt((int) (byte) 0, 32);
        java.nio.ByteBuffer byteBuffer60 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer61 = byteBuffer60.asLongBuffer();
        float float63 = byteBuffer60.getFloat(4);
        double double65 = byteBuffer60.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder66 = null;
        java.nio.ByteBuffer byteBuffer67 = byteBuffer60.order(byteOrder66);
        java.nio.ByteOrder byteOrder68 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer69 = byteBuffer60.order(byteOrder68);
        java.nio.IntBuffer intBuffer70 = byteBuffer69.asIntBuffer();
        java.net.InetAddress inetAddress72 = java.net.InetAddress.getLoopbackAddress();
        java.lang.String str73 = inetAddress72.getHostName();
        byte[] byteArray74 = inetAddress72.getAddress();
        java.net.InetAddress inetAddress75 = java.net.InetAddress.getByAddress("zh_CN", byteArray74);
        java.nio.ByteBuffer byteBuffer76 = byteBuffer69.get(byteArray74);
        java.nio.ByteBuffer byteBuffer77 = byteBuffer76.compact();
        java.nio.ByteBuffer byteBuffer79 = byteBuffer77.put((byte) 10);
        java.nio.ShortBuffer shortBuffer80 = byteBuffer79.asShortBuffer();
        java.nio.ByteBuffer[] byteBufferArray81 = new java.nio.ByteBuffer[] { byteBuffer22, byteBuffer38, byteBuffer48, byteBuffer79 };
        // The following exception was thrown during execution in test generation
        try {
            long long84 = 0L; // flaky: fileChannel18.read(byteBufferArray81, 13, (-793999999));
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(fileChannel18);
        org.junit.Assert.assertNotNull(seekableByteChannel20);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(longBuffer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(longBuffer30);
        org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.0f + "'", float32 == 0.0f);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteOrder37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(intBuffer39);
        org.junit.Assert.assertNotNull(inetAddress41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "localhost" + "'", str42, "localhost");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inetAddress44);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(byteOrder46);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(longBuffer49);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(longBuffer61);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertNotNull(byteOrder68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(intBuffer70);
        org.junit.Assert.assertNotNull(inetAddress72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "localhost" + "'", str73, "localhost");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inetAddress75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(shortBuffer80);
        org.junit.Assert.assertNotNull(byteBufferArray81);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("US-ASCII", 13, 420000000);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strList11.removeAll((java.util.Collection<java.lang.String>) strList27);
        boolean boolean29 = strList11.isEmpty();
        boolean boolean31 = strList11.add("LITTLE_ENDIAN");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        double[] doubleArray5 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.util.OptionalDouble optionalDouble7 = doubleStream6.min();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble8 = doubleStream6.min();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        java.util.stream.DoubleStream doubleStream0 = null;
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.distinct();
        java.util.stream.DoubleStream doubleStream3 = doubleStream1.unordered();
        java.util.stream.DoubleStream doubleStream4 = doubleStream1.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.concat(doubleStream0, doubleStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        char[] charArray5 = new char[] { 'a', '#', '4', '#' };
        boolean boolean6 = org.apache.commons.lang3.StringUtils.containsAny("", charArray5);
        java.nio.CharBuffer charBuffer7 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.CharBuffer charBuffer8 = charBuffer7.slice();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Collection<java.time.zone.ZoneRules> zoneRulesCollection9 = zoneIdMap1.values();
        java.util.stream.LongStream longStream10 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream11 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream12 = java.util.stream.LongStream.concat(longStream10, longStream11);
        java.util.stream.LongStream longStream13 = longStream10.unordered();
        java.util.stream.LongStream longStream14 = longStream10.parallel();
        boolean boolean15 = zoneIdMap1.equals((java.lang.Object) longStream14);
        boolean boolean16 = zoneIdMap1.isEmpty();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneRulesCollection9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1024, 794000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 1024 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate2 = localDateTime1.toLocalDate();
        java.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange5 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.LocalDateTime localDateTime11 = localDateTime6.plusYears((long) (short) -1);
        int int12 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.LocalTime localTime13 = java.time.LocalTime.NOON;
        java.time.LocalTime localTime14 = java.time.LocalTime.now();
        int int15 = localTime14.getNano();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long17 = localTime14.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime19 = localTime13.with((java.time.temporal.TemporalField) chronoField16, 0L);
        boolean boolean20 = localDateTime11.isSupported((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalDateTime localDateTime22 = localDateTime11.minusDays(13L);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap24 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.zone.ZoneRules zoneRules30 = zoneOffset28.getRules();
        java.time.zone.ZoneRules zoneRules31 = zoneIdMap24.getOrDefault((java.lang.Object) 1.0d, zoneRules30);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime37 = localDateTime34.atOffset(zoneOffset36);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset36);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap40 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        java.time.zone.ZoneRules zoneRules46 = zoneOffset44.getRules();
        java.time.zone.ZoneRules zoneRules47 = zoneIdMap40.getOrDefault((java.lang.Object) 1.0d, zoneRules46);
        java.lang.String str48 = zoneRules46.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList49 = zoneRules46.getTransitions();
        java.time.zone.ZoneRules zoneRules50 = zoneIdMap24.putIfAbsent((java.time.ZoneId) zoneOffset36, zoneRules46);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime56 = localDateTime53.atOffset(zoneOffset55);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset55);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit60 = chronoField59.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime61 = localDateTime57.minus((long) (-999999999), temporalUnit60);
        java.util.List<java.time.ZoneOffset> zoneOffsetList62 = zoneRules46.getValidOffsets(localDateTime57);
        java.time.LocalDateTime localDateTime64 = localDateTime57.withYear((int) (byte) 100);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime65 = localDateTime22.with((java.time.temporal.TemporalAdjuster) localDateTime57);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54000000 + "'", int15 == 54000000);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField16.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 19L + "'", long17 == 19L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(zoneRules30);
        org.junit.Assert.assertNotNull(zoneRules31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(zoneRules46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str48, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList49);
        org.junit.Assert.assertNull(zoneRules50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField59.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit60 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit60.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime61);
        org.junit.Assert.assertNotNull(zoneOffsetList62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime65);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        java.util.Date date1 = new java.util.Date(1L);
        long long2 = date1.getTime();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate2 = localDateTime1.toLocalDate();
        java.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange5 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap12 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.zone.ZoneRules zoneRules18 = zoneOffset16.getRules();
        java.time.zone.ZoneRules zoneRules19 = zoneIdMap12.getOrDefault((java.lang.Object) 1.0d, zoneRules18);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset24);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap28 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime33 = localDateTime30.atOffset(zoneOffset32);
        java.time.zone.ZoneRules zoneRules34 = zoneOffset32.getRules();
        java.time.zone.ZoneRules zoneRules35 = zoneIdMap28.getOrDefault((java.lang.Object) 1.0d, zoneRules34);
        java.lang.String str36 = zoneRules34.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList37 = zoneRules34.getTransitions();
        java.time.zone.ZoneRules zoneRules38 = zoneIdMap12.putIfAbsent((java.time.ZoneId) zoneOffset24, zoneRules34);
        java.lang.String str39 = zoneOffset24.toString();
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.ofInstant(localDateTime1, zoneOffset8, (java.time.ZoneId) zoneOffset24);
        java.time.Month month41 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDateTime1);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(valueRange5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneRules18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(zoneRules34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str36, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList37);
        org.junit.Assert.assertNull(zoneRules38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Z" + "'", str39, "Z");
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + month41 + "' != '" + java.time.Month.DECEMBER + "'", month41.equals(java.time.Month.DECEMBER));
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        java.nio.IntBuffer intBuffer12 = intBuffer11.asReadOnlyBuffer();
        boolean boolean13 = intBuffer11.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        float float9 = byteBuffer6.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer6.putChar('\r');
        java.nio.LongBuffer longBuffer12 = byteBuffer11.asLongBuffer();
        java.nio.LongBuffer longBuffer13 = longBuffer2.put(longBuffer12);
        java.lang.String str14 = longBuffer2.toString();
        java.nio.LongBuffer longBuffer15 = longBuffer2.compact();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(longBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]" + "'", str14, "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(longBuffer15);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.LocalDate localDate7 = localDate1.withYear((int) '4');
        int int8 = localDate1.getDayOfMonth();
        int int9 = localDate1.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\ufffd");
        double[] doubleArray6 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer7 = java.nio.DoubleBuffer.wrap(doubleArray6);
        printStream1.print((java.lang.Object) doubleArray6);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.write((int) '.');
        java.nio.CharBuffer charBuffer14 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer15 = charBuffer14.flip();
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer18 = charBuffer17.flip();
        int int19 = charBuffer14.compareTo(charBuffer17);
        int int20 = charBuffer17.length();
        java.nio.CharBuffer charBuffer21 = charBuffer17.duplicate();
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) charBuffer21);
        printStream22.print(false);
        printStream22.print((int) '\000');
        printStream22.write(64);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(printStream22);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer10 = charBuffer9.flip();
        java.nio.CharBuffer charBuffer11 = charBuffer9.duplicate();
        char[] charArray19 = new char[] { 'a', '#', '4', '#' };
        boolean boolean20 = org.apache.commons.lang3.StringUtils.containsAny("", charArray19);
        boolean boolean21 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray19);
        boolean boolean22 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray19);
        int int23 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer11, charArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer26 = byteBuffer25.asLongBuffer();
        java.nio.charset.CoderResult coderResult28 = charsetEncoder7.encode(charBuffer11, byteBuffer25, false);
        java.nio.ByteBuffer byteBuffer30 = byteBuffer25.putShort((short) 10);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer30.putInt((int) (byte) 0);
        java.nio.ByteBuffer byteBuffer34 = byteBuffer32.putDouble((double) 'G');
        java.net.InetAddress inetAddress35 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean36 = inetAddress35.isMCLinkLocal();
        byte[] byteArray37 = inetAddress35.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer40 = byteBuffer32.put(byteArray37, 33541, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertNotNull(coderResult28);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(inetAddress35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[127, 0, 0, 1]");
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.IsoEra isoEra19 = isoChronology0.eraOf(274);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid era: 274");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.lang.String str7 = zoneOffset4.getId();
        java.time.LocalTime localTime8 = java.time.LocalTime.now();
        java.time.LocalTime localTime10 = localTime8.plusHours(0L);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit12 = chronoField11.getBaseUnit();
        java.time.temporal.ValueRange valueRange13 = localTime10.range((java.time.temporal.TemporalField) chronoField11);
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField11.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = zoneOffset4.getLong((java.time.temporal.TemporalField) chronoField11);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MicroOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Z" + "'", str7, "Z");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField11.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit12 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit12.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(valueRange13);
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.SECONDS));
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.lang.String str49 = valueRange48.toString();
        long long50 = valueRange48.getMinimum();
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime55 = localDateTime52.atOffset(zoneOffset54);
        int int56 = localDateTime51.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime52);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        int int61 = localDateTime52.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime57);
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        int int67 = localDateTime62.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime71 = localDateTime68.atOffset(zoneOffset70);
        int int72 = localDateTime63.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime68);
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        int int78 = localDateTime73.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime74);
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime82 = localDateTime79.atOffset(zoneOffset81);
        int int83 = localDateTime74.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime79);
        boolean boolean84 = localDateTime63.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime79);
        java.time.temporal.Temporal temporal85 = localDateTime57.adjustInto((java.time.temporal.Temporal) localDateTime63);
        java.time.LocalDateTime localDateTime87 = localDateTime57.minusWeeks((long) (short) 0);
        boolean boolean88 = valueRange48.equals((java.lang.Object) (short) 0);
        java.lang.String str89 = valueRange48.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1 - 53" + "'", str49, "1 - 53");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(temporal85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1 - 53" + "'", str89, "1 - 53");
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getMinute();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (byte) 100);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusNanos((long) 10000);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = localDateTime23.minusNanos((long) (short) 100);
        java.time.LocalDateTime localDateTime31 = localDateTime23.minusYears((long) (short) 1);
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime19.with((java.time.temporal.TemporalAdjuster) localDateTime31);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        java.time.zone.ZoneRules zoneRules43 = zoneOffset41.getRules();
        java.time.ZonedDateTime zonedDateTime44 = offsetDateTime36.atZoneSameInstant((java.time.ZoneId) zoneOffset41);
        java.time.ZoneId zoneId45 = zonedDateTime44.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime46 = zonedDateTime44.withEarlierOffsetAtOverlap();
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) zonedDateTime44);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.OffsetDateTime offsetDateTime53 = offsetDateTime51.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime57 = localDateTime54.atOffset(zoneOffset56);
        java.time.zone.ZoneRules zoneRules58 = zoneOffset56.getRules();
        java.time.ZonedDateTime zonedDateTime59 = offsetDateTime51.atZoneSameInstant((java.time.ZoneId) zoneOffset56);
        int int60 = zonedDateTime44.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime59);
        boolean boolean61 = zonedDateTime19.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime59);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(zoneRules43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zoneId45);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(zoneRules58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        java.nio.CharBuffer charBuffer21 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer22 = charBuffer6.slice();
        java.time.format.FormatStyle formatStyle23 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter24 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle23);
        java.time.format.DateTimeFormatter dateTimeFormatter25 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology26 = dateTimeFormatter25.getChronology();
        java.time.format.TextStyle textStyle27 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = locale28.getISO3Language();
        java.time.format.DecimalStyle decimalStyle30 = java.time.format.DecimalStyle.of(locale28);
        java.lang.String str31 = chronology26.getDisplayName(textStyle27, locale28);
        java.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter24.withChronology(chronology26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime33 = java.time.OffsetTime.parse((java.lang.CharSequence) charBuffer6, dateTimeFormatter24);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertTrue("'" + formatStyle23 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle23.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + textStyle27 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle27.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "eng" + "'", str29, "eng");
        org.junit.Assert.assertNotNull(decimalStyle30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISO" + "'", str31, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.getEpochSecond();
        java.time.Instant instant6 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.fixed(instant6, (java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime12 = instant1.atOffset(zoneOffset9);
        java.util.Date date13 = java.util.Date.from(instant1);
        int int14 = date13.getDay();
        date13.setDate(574000000);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Aug 15 00:00:32 UTC 1573528");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.Instant instant44 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime48 = localDateTime45.atOffset(zoneOffset47);
        java.time.Clock clock49 = java.time.Clock.fixed(instant44, (java.time.ZoneId) zoneOffset47);
        java.time.LocalTime localTime50 = java.time.LocalTime.now(clock49);
        java.time.LocalTime localTime52 = localTime50.plusHours((long) 16384);
        java.time.LocalTime localTime54 = localTime50.minusNanos(0L);
        java.time.LocalDate localDate55 = java.time.LocalDate.now();
        java.time.LocalDate localDate56 = java.time.LocalDate.MIN;
        boolean boolean57 = localDate55.isEqual((java.time.chrono.ChronoLocalDate) localDate56);
        int int58 = localDate56.getYear();
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        java.time.temporal.Temporal temporal63 = localDate56.adjustInto((java.time.temporal.Temporal) localDateTime59);
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime67 = localDateTime64.atOffset(zoneOffset66);
        java.time.Clock clock68 = java.time.Clock.systemUTC();
        java.time.Instant instant69 = clock68.instant();
        java.time.ZoneId zoneId70 = clock68.getZone();
        java.time.ZonedDateTime zonedDateTime71 = java.time.ZonedDateTime.ofInstant(localDateTime59, zoneOffset66, zoneId70);
        java.time.OffsetDateTime offsetDateTime72 = java.time.OffsetDateTime.of(localDate37, localTime54, zoneOffset66);
        java.time.OffsetDateTime offsetDateTime74 = offsetDateTime72.withYear(8000000);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(clock49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-999999999) + "'", int58 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(temporal63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(clock68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(zoneId70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(offsetDateTime74);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset1 = java.nio.charset.Charset.forName("file:/tmp/United Kingdom2266976126535835110aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: file:/tmp/United Kingdom2266976126535835110aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime19 = localDateTime15.minus((long) (-999999999), temporalUnit18);
        java.lang.String str20 = temporalUnit18.toString();
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime7.plus((long) (byte) 100, temporalUnit18);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.plusDays((long) 31);
        java.time.Instant instant25 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.Clock clock30 = java.time.Clock.fixed(instant25, (java.time.ZoneId) zoneOffset28);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime36 = localDateTime33.atOffset(zoneOffset35);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset35);
        java.time.Clock clock38 = clock30.withZone((java.time.ZoneId) zoneOffset35);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime21.withOffsetSameInstant(zoneOffset35);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.ValueRange valueRange41 = offsetDateTime21.range((java.time.temporal.TemporalField) chronoField40);
        java.time.OffsetDateTime offsetDateTime43 = offsetDateTime21.minusYears((long) '+');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField17.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Weeks" + "'", str20, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField40.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(valueRange41);
        org.junit.Assert.assertNotNull(offsetDateTime43);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\ufffd");
        double[] doubleArray6 = new double[] { 794000000, (-1L), 0.0f, 4096 };
        java.nio.DoubleBuffer doubleBuffer7 = java.nio.DoubleBuffer.wrap(doubleArray6);
        printStream1.print((java.lang.Object) doubleArray6);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.write((int) '.');
        java.nio.CharBuffer charBuffer14 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer15 = charBuffer14.flip();
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer18 = charBuffer17.flip();
        int int19 = charBuffer14.compareTo(charBuffer17);
        int int20 = charBuffer17.length();
        java.nio.CharBuffer charBuffer21 = charBuffer17.duplicate();
        java.io.PrintStream printStream22 = printStream1.append((java.lang.CharSequence) charBuffer21);
        printStream22.print(false);
        printStream22.print((float) 'a');
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[7.94E8, -1.0, 0.0, 4096.0]");
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(buffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(buffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(printStream22);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalDate localDate36 = java.time.LocalDate.now();
        java.time.LocalDate localDate37 = java.time.LocalDate.MIN;
        boolean boolean38 = localDate36.isEqual((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean40 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int41 = localDate37.getDayOfYear();
        int int42 = localDate35.compareTo((java.time.chrono.ChronoLocalDate) localDate37);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime46.withSecond((int) (byte) 0);
        java.time.LocalDate localDate49 = offsetDateTime46.toLocalDate();
        boolean boolean50 = localDate37.isBefore((java.time.chrono.ChronoLocalDate) localDate49);
        java.time.temporal.ChronoField chronoField51 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean52 = localDate37.isSupported((java.time.temporal.TemporalField) chronoField51);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1999999998 + "'", int42 == 1999999998);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + chronoField51 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField51.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.concat(longStream0, longStream1);
        java.util.stream.LongStream longStream3 = longStream0.unordered();
        java.util.stream.LongStream longStream4 = longStream0.parallel();
        java.util.stream.LongStream longStream5 = longStream4.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfLong ofLong6 = longStream4.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        java.io.File file1 = new java.io.File("GBR");
        java.io.File file3 = new java.io.File(file1, "5");
        java.nio.file.Path path4 = file1.toPath();
        java.lang.String str5 = file1.getAbsolutePath();
        long long6 = file1.getUsableSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertEquals(file3.getParent(), "GBR");
        org.junit.Assert.assertEquals(file3.toString(), "GBR/5");
        org.junit.Assert.assertNotNull(path4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/GBR" + "'", str5, "/experiment/GBR");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 280505851904L + "'", long6 == 280505851904L);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("1 Jan 1970 00:00:32 GMT", "MinuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getISO3Language();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle2.withPositiveSign('a');
        java.time.format.DecimalStyle decimalStyle6 = decimalStyle4.withNegativeSign('+');
        java.time.format.DecimalStyle decimalStyle8 = decimalStyle6.withDecimalSeparator('a');
        java.time.format.DecimalStyle decimalStyle10 = decimalStyle8.withZeroDigit('M');
        java.time.format.DecimalStyle decimalStyle12 = decimalStyle10.withPositiveSign('G');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eng" + "'", str1, "eng");
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(decimalStyle6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(decimalStyle10);
        org.junit.Assert.assertNotNull(decimalStyle12);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) 1999999998);
        java.util.stream.LongStream.Builder builder2 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream.Builder builder3 = java.util.stream.LongStream.builder();
        builder3.accept((long) 6);
        java.util.function.LongConsumer longConsumer6 = builder2.andThen((java.util.function.LongConsumer) builder3);
        longStream1.forEachOrdered((java.util.function.LongConsumer) builder2);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(longConsumer6);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putChar('\r');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer10 = byteBuffer9.asLongBuffer();
        short short11 = byteBuffer9.getShort();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer9.putChar('G');
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer16 = byteBuffer15.asLongBuffer();
        short short17 = byteBuffer15.getShort();
        boolean boolean18 = byteBuffer9.equals((java.lang.Object) byteBuffer15);
        int int19 = byteBuffer6.compareTo(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(longBuffer10);
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 0 + "'", short11 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.Duration duration6 = java.time.Duration.ZERO;
        boolean boolean8 = duration6.equals((java.lang.Object) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime5.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.withSecond((int) (byte) 0);
        java.time.LocalDate localDate16 = offsetDateTime13.toLocalDate();
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime13.withDayOfYear((int) '+');
        java.time.format.DateTimeFormatter dateTimeFormatter19 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology20 = dateTimeFormatter19.getChronology();
        java.time.format.TextStyle textStyle21 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = locale22.getISO3Language();
        java.time.format.DecimalStyle decimalStyle24 = java.time.format.DecimalStyle.of(locale22);
        java.lang.String str25 = chronology20.getDisplayName(textStyle21, locale22);
        java.time.OffsetTime offsetTime26 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime28 = offsetTime26.withSecond(16);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int30 = offsetTime28.get((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.ValueRange valueRange31 = chronology20.range(chronoField29);
        boolean boolean32 = offsetDateTime18.isSupported((java.time.temporal.TemporalField) chronoField29);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime18.withMinute(0);
        boolean boolean35 = offsetDateTime5.isAfter(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + textStyle21 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle21.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "eng" + "'", str23, "eng");
        org.junit.Assert.assertNotNull(decimalStyle24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISO" + "'", str25, "ISO");
        org.junit.Assert.assertNotNull(offsetTime26);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField29.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertNotNull(valueRange31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.limit((long) 10);
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setWritable(true);
        java.net.URI uRI6 = file1.toURI();
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        boolean boolean12 = file8.setWritable(true);
        java.net.URI uRI13 = file8.toURI();
        java.net.URI uRI14 = uRI6.relativize(uRI13);
        java.lang.String str15 = uRI6.getRawSchemeSpecificPart();
        java.io.File file17 = new java.io.File("GBR");
        boolean boolean19 = file17.setWritable(true);
        boolean boolean21 = file17.setWritable(true);
        java.net.URI uRI22 = file17.toURI();
        java.io.File file24 = new java.io.File("GBR");
        boolean boolean26 = file24.setWritable(true);
        java.nio.file.Path path27 = file24.toPath();
        java.nio.file.Path path29 = path27.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI30 = path27.toUri();
        java.net.URI uRI31 = uRI22.relativize(uRI30);
        int int32 = uRI6.compareTo(uRI31);
        java.net.URI uRI33 = uRI6.parseServerAuthority();
        java.net.URI uRI34 = uRI33.parseServerAuthority();
        java.lang.String str35 = uRI34.toASCIIString();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(uRI14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/experiment/GBR/" + "'", str15, "/experiment/GBR/");
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertNotNull(uRI30);
        org.junit.Assert.assertNotNull(uRI31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(uRI33);
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "file:/experiment/GBR/" + "'", str35, "file:/experiment/GBR/");
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate2 = localDate0.withDayOfMonth((int) (byte) 1);
        java.time.LocalDate localDate4 = localDate0.minusWeeks((long) 'a');
        java.time.Month month5 = localDate0.getMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.FEBRUARY + "'", month5.equals(java.time.Month.FEBRUARY));
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.wrap(byteArray5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charsetEncoder3.replaceWith(byteArray5);
        java.nio.charset.CodingErrorAction codingErrorAction8 = charsetEncoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder9 = charsetEncoder7.reset();
        java.nio.charset.CodingErrorAction codingErrorAction10 = java.nio.charset.CodingErrorAction.REPLACE;
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder9.onUnmappableCharacter(codingErrorAction10);
        java.nio.CharBuffer charBuffer13 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer14 = charBuffer13.flip();
        java.nio.CharBuffer charBuffer15 = charBuffer13.duplicate();
        char[] charArray23 = new char[] { 'a', '#', '4', '#' };
        boolean boolean24 = org.apache.commons.lang3.StringUtils.containsAny("", charArray23);
        boolean boolean25 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray23);
        boolean boolean26 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray23);
        int int27 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer15, charArray23);
        boolean boolean28 = charBuffer15.hasArray();
        java.nio.ByteBuffer byteBuffer29 = charsetEncoder9.encode(charBuffer15);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetEncoder9);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(buffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteBuffer29);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        char char2 = org.apache.commons.lang3.CharUtils.toChar(":", '.');
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + ':' + "'", char2 == ':');
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset4);
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer9 = byteBuffer8.asLongBuffer();
        java.nio.LongBuffer longBuffer11 = longBuffer9.put(0L);
        java.time.LocalTime localTime12 = java.time.LocalTime.now();
        int int13 = localTime12.getNano();
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long15 = localTime12.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.withSecond((int) (byte) 0);
        boolean boolean22 = chronoField14.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime19);
        boolean boolean23 = longBuffer11.equals((java.lang.Object) chronoField14);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = zoneOffset4.getLong((java.time.temporal.TemporalField) chronoField14);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MinuteOfHour");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(longBuffer11);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 420000000 + "'", int13 == 420000000);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField14.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 19L + "'", long15 == 19L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        long long1 = longSummaryStatistics0.getSum();
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt4 = intStream3.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = ofInt4.trySplit();
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt8 = intStream7.spliterator();
        java.util.stream.IntStream.Builder builder9 = java.util.stream.IntStream.builder();
        boolean boolean10 = ofInt8.tryAdvance((java.util.function.IntConsumer) builder9);
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.Spliterator.OfInt ofInt13 = intStream12.spliterator();
        java.util.stream.IntStream.Builder builder14 = java.util.stream.IntStream.builder();
        boolean boolean15 = ofInt13.tryAdvance((java.util.function.IntConsumer) builder14);
        ofInt8.forEachRemaining((java.util.function.IntConsumer) builder14);
        boolean boolean17 = ofInt4.tryAdvance((java.util.function.IntConsumer) builder14);
        java.util.function.IntConsumer intConsumer18 = longSummaryStatistics0.andThen((java.util.function.IntConsumer) builder14);
        java.util.LongSummaryStatistics longSummaryStatistics19 = new java.util.LongSummaryStatistics();
        longSummaryStatistics0.combine(longSummaryStatistics19);
        long long21 = longSummaryStatistics0.getMax();
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(ofInt4);
        org.junit.Assert.assertNull(intSpliterator5);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(ofInt8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(ofInt13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intConsumer18);
        org.junit.Assert.assertEquals(longSummaryStatistics19.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-9223372036854775808L) + "'", long21 == (-9223372036854775808L));
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption14 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption15 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray16 = new java.nio.file.LinkOption[] { linkOption14, linkOption15 };
        java.nio.file.Path path17 = null; // flaky: path11.toRealPath(linkOptionArray16);
        java.nio.channels.FileChannel fileChannel18 = null; // flaky: java.nio.channels.FileChannel.open(path4, (java.nio.file.OpenOption[]) linkOptionArray16);
        java.nio.channels.FileChannel fileChannel20 = null; // flaky: fileChannel18.position((long) '\uffff');
// flaky:         fileChannel20.close();
        java.nio.channels.FileChannel.MapMode mapMode22 = java.nio.channels.FileChannel.MapMode.READ_WRITE;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.MappedByteBuffer mappedByteBuffer25 = null; // flaky: fileChannel20.map(mapMode22, (-9223372036854775808L), (long) 33);
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + linkOption14 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption14.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption15 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption15.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(fileChannel18);
        org.junit.Assert.assertNotNull(fileChannel20);
        org.junit.Assert.assertNotNull(mapMode22);
        org.junit.Assert.assertEquals(mapMode22.toString(), "READ_WRITE");
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime5 = offsetTime3.withSecond(16);
        java.time.Instant instant7 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant9 = instant7.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from(instant7);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = instant7.query(periodTemporalQuery11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = instant7.isSupported(temporalUnit14);
        boolean boolean16 = offsetTime3.isSupported(temporalUnit14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.Instant instant28 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant30 = instant28.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        java.time.zone.ZoneRules zoneRules35 = zoneOffset33.getRules();
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneId zoneId37 = zonedDateTime36.getZone();
        java.time.Clock clock38 = java.time.Clock.fixed(instant18, zoneId37);
        boolean boolean39 = offsetTime3.equals((java.lang.Object) zoneId37);
        int int40 = offsetTime0.compareTo(offsetTime3);
        java.time.OffsetTime offsetTime42 = offsetTime0.plusNanos((long) '\n');
        java.time.OffsetTime offsetTime44 = offsetTime42.minusHours((long) 11);
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.MIN;
        boolean boolean47 = localDate45.isEqual((java.time.chrono.ChronoLocalDate) localDate46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean49 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField48);
        int int50 = localDate46.getDayOfYear();
        java.time.temporal.TemporalUnit temporalUnit51 = null;
        boolean boolean52 = localDate46.isSupported(temporalUnit51);
        long long53 = localDate46.toEpochDay();
        java.time.OffsetTime offsetTime54 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime56 = offsetTime54.withSecond(16);
        int int57 = offsetTime54.getMinute();
        java.time.OffsetTime offsetTime59 = offsetTime54.minusSeconds(6883333L);
        java.time.LocalTime localTime60 = offsetTime59.toLocalTime();
        java.time.OffsetDateTime offsetDateTime61 = localDate46.atTime(offsetTime59);
        boolean boolean62 = offsetTime42.isEqual(offsetTime59);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(zoneRules35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(offsetTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField48.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-365243219162L) + "'", long53 == (-365243219162L));
        org.junit.Assert.assertNotNull(offsetTime54);
        org.junit.Assert.assertNotNull(offsetTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 19 + "'", int57 == 19);
        org.junit.Assert.assertNotNull(offsetTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.Month month2 = month0.minus((long) (short) -1);
        java.time.Month month4 = month2.minus(32000L);
        java.time.DayOfWeek dayOfWeek6 = java.time.DayOfWeek.WEDNESDAY;
        java.time.LocalTime localTime7 = null;
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition9 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset14);
        java.time.LocalTime localTime17 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset14);
        java.time.chrono.IsoChronology isoChronology18 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        java.time.zone.ZoneRules zoneRules29 = zoneOffset27.getRules();
        java.time.ZonedDateTime zonedDateTime30 = offsetDateTime22.atZoneSameInstant((java.time.ZoneId) zoneOffset27);
        int int31 = zonedDateTime30.getDayOfMonth();
        int int32 = zonedDateTime30.getMinute();
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime30.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime35 = isoChronology18.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime30);
        java.lang.String str36 = isoChronology18.toString();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime40 = localDateTime37.atOffset(zoneOffset39);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.withSecond((int) (byte) 0);
        java.time.LocalDate localDate43 = offsetDateTime40.toLocalDate();
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit45 = chronoField44.getBaseUnit();
        boolean boolean46 = offsetDateTime40.isSupported((java.time.temporal.TemporalField) chronoField44);
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime40.minusMinutes((long) 100);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.Clock clock55 = java.time.Clock.fixed(instant50, (java.time.ZoneId) zoneOffset53);
        java.time.ZonedDateTime zonedDateTime56 = offsetDateTime48.atZoneSameInstant((java.time.ZoneId) zoneOffset53);
        java.time.LocalDate localDate57 = isoChronology18.dateNow((java.time.ZoneId) zoneOffset53);
        java.time.ZonedDateTime zonedDateTime58 = java.time.ZonedDateTime.now((java.time.ZoneId) zoneOffset53);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int63 = zoneOffset62.getTotalSeconds();
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.ofEpochSecond((long) 16, 3, zoneOffset62);
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransitionRule zoneOffsetTransitionRule65 = java.time.zone.ZoneOffsetTransitionRule.of(month4, 999999998, dayOfWeek6, localTime7, true, timeDefinition9, zoneOffset14, zoneOffset53, zoneOffset62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: time");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.FEBRUARY + "'", month2.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.JUNE + "'", month4.equals(java.time.Month.JUNE));
        org.junit.Assert.assertTrue("'" + dayOfWeek6 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek6.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertTrue("'" + timeDefinition9 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD + "'", timeDefinition9.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(isoChronology18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(zoneRules29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISO" + "'", str36, "ISO");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField44.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit45 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit45.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ISO");
        printWriter1.println(false);
        java.lang.String[] strArray8 = new java.lang.String[] { "Minute", "(null <no signer certificates>)", "" };
        java.lang.String[] strArray10 = org.apache.commons.lang3.StringUtils.stripAll(strArray8, "GBR");
        java.io.PrintWriter printWriter11 = printWriter1.printf("5", (java.lang.Object[]) strArray10);
        printWriter1.print(437000000);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter11);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.lang.String str18 = isoChronology0.toString();
        java.time.format.DateTimeFormatter dateTimeFormatter19 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology20 = dateTimeFormatter19.getChronology();
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer23 = charBuffer22.flip();
        int int24 = charBuffer22.capacity();
        boolean boolean25 = charBuffer22.hasArray();
        boolean boolean26 = chronology20.equals((java.lang.Object) charBuffer22);
        java.util.List<java.time.chrono.Era> eraList27 = chronology20.eras();
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.BCE;
        int int29 = isoEra28.getValue();
        java.time.chrono.ChronoLocalDate chronoLocalDate32 = chronology20.dateYearDay((java.time.chrono.Era) isoEra28, 794000000, 59);
        int int33 = isoChronology0.compareTo(chronology20);
        java.net.URISyntaxException uRISyntaxException36 = new java.net.URISyntaxException("Minute", "");
        boolean boolean37 = isoChronology0.equals((java.lang.Object) uRISyntaxException36);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(eraList27);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra28.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\ufffd");
        printStream1.println((long) 1024);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter7 = printWriter5.append('+');
        org.junit.Assert.assertNotNull(printWriter7);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        float float4 = byteBuffer1.getFloat(4);
        double double6 = byteBuffer1.getDouble((int) (byte) 0);
        java.nio.ByteOrder byteOrder7 = null;
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.order(byteOrder7);
        java.nio.ByteOrder byteOrder9 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer10 = byteBuffer1.order(byteOrder9);
        java.nio.IntBuffer intBuffer11 = byteBuffer10.asIntBuffer();
        int[] intArray18 = new int[] { 4, 399000000, 437000000, 653000000, 21, 10 };
        java.nio.IntBuffer intBuffer19 = intBuffer11.get(intArray18);
        int int21 = intBuffer11.get(0);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("Eng");
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String str6 = locale5.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        java.util.Locale locale10 = java.util.Locale.UK;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = chronoField9.getDisplayName(locale10);
        java.lang.String str13 = locale5.getDisplayCountry(locale10);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setLanguageTag("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: java.text.FieldPosition[field= [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GBR" + "'", str6, "GBR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField9.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GBR" + "'", str11, "GBR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Minute" + "'", str12, "Minute");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United Kingdom" + "'", str13, "United Kingdom");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        int int13 = zonedDateTime11.getHour();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime11.minusDays((long) 385000000);
        java.time.LocalDate localDate16 = java.time.LocalDate.now();
        java.time.LocalDate localDate17 = java.time.LocalDate.MIN;
        boolean boolean18 = localDate16.isEqual((java.time.chrono.ChronoLocalDate) localDate17);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean20 = localDate17.isSupported((java.time.temporal.TemporalField) chronoField19);
        int int21 = localDate17.getDayOfYear();
        java.time.LocalDate localDate22 = java.time.LocalDate.now();
        java.time.LocalDate localDate23 = java.time.LocalDate.MIN;
        boolean boolean24 = localDate22.isEqual((java.time.chrono.ChronoLocalDate) localDate23);
        int int25 = localDate23.getYear();
        java.lang.String str26 = localDate23.toString();
        java.time.chrono.ChronoPeriod chronoPeriod27 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate17, (java.time.chrono.ChronoLocalDate) localDate23);
        java.time.Period period28 = java.time.Period.from((java.time.temporal.TemporalAmount) chronoPeriod27);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime29 = zonedDateTime15.minus((java.time.temporal.TemporalAmount) period28);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField19.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-999999999) + "'", int25 == (-999999999));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-999999999-01-01" + "'", str26, "-999999999-01-01");
        org.junit.Assert.assertNotNull(chronoPeriod27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime29);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now(clock6);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.ShortBuffer shortBuffer11 = byteBuffer7.asShortBuffer();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer7.put(19, (byte) 1);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer14);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.MILLISECONDS;
        long long2 = timeUnit0.toMinutes((long) 6);
        long long4 = timeUnit0.toNanos((long) 11);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 11000000L + "'", long4 == 11000000L);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet2 = properties1.stringPropertyNames();
        boolean boolean3 = properties1.isEmpty();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        boolean boolean5 = longBuffer2.isDirect();
        long long6 = longBuffer2.get();
        java.nio.ByteOrder byteOrder7 = longBuffer2.order();
        java.nio.LongBuffer longBuffer8 = longBuffer2.slice();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer11 = byteBuffer10.asLongBuffer();
        java.nio.LongBuffer longBuffer13 = longBuffer11.put(0L);
        java.time.LocalTime localTime14 = java.time.LocalTime.now();
        int int15 = localTime14.getNano();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long17 = localTime14.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.OffsetDateTime offsetDateTime23 = offsetDateTime21.withSecond((int) (byte) 0);
        boolean boolean24 = chronoField16.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime21);
        boolean boolean25 = longBuffer13.equals((java.lang.Object) chronoField16);
        boolean boolean26 = longBuffer13.hasArray();
        java.nio.LongBuffer longBuffer28 = java.nio.LongBuffer.allocate(0);
        long[] longArray29 = longBuffer28.array();
        java.nio.LongBuffer longBuffer30 = longBuffer13.get(longArray29);
        java.nio.LongBuffer longBuffer31 = longBuffer2.put(longArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer34 = java.nio.LongBuffer.wrap(longArray29, 31, 636000010);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteOrder7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(longBuffer11);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 486000000 + "'", int15 == 486000000);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField16.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 19L + "'", long17 == 19L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longBuffer28);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[]");
        org.junit.Assert.assertNotNull(longBuffer30);
        org.junit.Assert.assertNotNull(longBuffer31);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap9 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.zone.ZoneRules zoneRules15 = zoneOffset13.getRules();
        java.time.zone.ZoneRules zoneRules16 = zoneIdMap9.getOrDefault((java.lang.Object) 1.0d, zoneRules15);
        java.lang.String str17 = zoneRules15.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList18 = zoneRules15.getTransitions();
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        int int24 = localDateTime19.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime28 = localDateTime25.atOffset(zoneOffset27);
        int int29 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        boolean boolean41 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.format.DateTimeFormatter dateTimeFormatter42 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str43 = localDateTime36.format(dateTimeFormatter42);
        java.time.ZoneOffset zoneOffset44 = zoneRules15.getOffset(localDateTime36);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime7.withOffsetSameLocal(zoneOffset44);
        java.lang.String str46 = zoneOffset44.getId();
        java.lang.String str47 = zoneOffset44.getId();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(zoneRules15);
        org.junit.Assert.assertNotNull(zoneRules16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str17, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str43, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Z" + "'", str46, "Z");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Z" + "'", str47, "Z");
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer5 = charBuffer4.flip();
        java.nio.CharBuffer charBuffer6 = charBuffer4.duplicate();
        char[] charArray14 = new char[] { 'a', '#', '4', '#' };
        boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny("", charArray14);
        boolean boolean16 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray14);
        boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray14);
        int int18 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer6, charArray14);
        boolean boolean19 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer20 = charBuffer1.append((java.lang.CharSequence) charBuffer6);
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer23 = charBuffer22.flip();
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer26 = charBuffer25.flip();
        java.nio.CharBuffer charBuffer27 = charBuffer25.duplicate();
        char[] charArray35 = new char[] { 'a', '#', '4', '#' };
        boolean boolean36 = org.apache.commons.lang3.StringUtils.containsAny("", charArray35);
        boolean boolean37 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR GBR", charArray35);
        boolean boolean38 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "Minute", charArray35);
        int int39 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) charBuffer27, charArray35);
        boolean boolean40 = charBuffer27.isDirect();
        java.nio.CharBuffer charBuffer41 = charBuffer22.append((java.lang.CharSequence) charBuffer27);
        java.nio.CharBuffer charBuffer42 = org.apache.commons.lang3.StringUtils.defaultIfEmpty(charBuffer6, charBuffer41);
        boolean boolean43 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) charBuffer41);
        java.nio.CharBuffer charBuffer44 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer41);
        java.util.stream.IntStream intStream45 = charBuffer41.codePoints();
        java.util.stream.IntStream intStream46 = intStream45.unordered();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(buffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(buffer23);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(buffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a, #, 4, #]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charBuffer44);
        org.junit.Assert.assertNotNull(intStream45);
        org.junit.Assert.assertNotNull(intStream46);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.ShortBuffer shortBuffer11 = byteBuffer7.asShortBuffer();
        byte byte12 = byteBuffer7.get();
        java.nio.ByteBuffer byteBuffer15 = byteBuffer7.putLong((int) '\r', 0L);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        java.time.Duration duration1 = java.time.Duration.ofDays(2L);
        java.time.Duration duration2 = duration1.negated();
        java.time.Duration duration4 = duration1.minusDays((-37672155000L));
        boolean boolean5 = duration4.isZero();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.WEDNESDAY;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.temporal.Temporal temporal7 = dayOfWeek0.adjustInto((java.time.temporal.Temporal) offsetDateTime4);
        int int8 = offsetDateTime4.getSecond();
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(temporal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        java.time.Period period1 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period2 = period1.normalized();
        java.time.Period period4 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period5 = period4.normalized();
        long long6 = period4.toTotalMonths();
        java.time.chrono.ChronoPeriod chronoPeriod8 = period4.multipliedBy((int) (short) 100);
        java.time.chrono.ChronoPeriod chronoPeriod9 = period1.plus((java.time.temporal.TemporalAmount) period4);
        java.time.chrono.ChronoPeriod chronoPeriod10 = period1.negated();
        java.time.Period period12 = period1.minusYears((long) 23);
        java.time.Period period14 = period1.plusYears((long) '\n');
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(chronoPeriod8);
        org.junit.Assert.assertNotNull(chronoPeriod9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.with((java.time.temporal.TemporalField) chronoField6, (long) 31);
        java.time.OffsetTime offsetTime9 = offsetDateTime8.toOffsetTime();
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit11 = chronoField10.getBaseUnit();
        long long12 = offsetDateTime8.getLong((java.time.temporal.TemporalField) chronoField10);
        java.time.temporal.ValueRange valueRange13 = chronoField10.range();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField10.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit11 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit11.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 31L + "'", long12 == 31L);
        org.junit.Assert.assertNotNull(valueRange13);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.util.Set<java.lang.String> strSet3 = charset0.aliases();
        java.lang.String str4 = charset0.displayName();
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        short short8 = byteBuffer6.getShort();
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putChar('G');
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer13 = byteBuffer12.asLongBuffer();
        short short14 = byteBuffer12.getShort();
        boolean boolean15 = byteBuffer6.equals((java.lang.Object) byteBuffer12);
        java.nio.ShortBuffer shortBuffer16 = byteBuffer12.asShortBuffer();
        byte byte17 = byteBuffer12.get();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer20 = byteBuffer19.asLongBuffer();
        int int21 = byteBuffer12.compareTo(byteBuffer19);
        java.nio.CharBuffer charBuffer22 = charset0.decode(byteBuffer12);
        java.io.File file24 = new java.io.File("GBR");
        boolean boolean26 = file24.setExecutable(true);
        java.io.File file27 = file24.getCanonicalFile();
        boolean boolean29 = file24.setReadable(true);
        boolean boolean30 = file24.exists();
        boolean boolean31 = file24.exists();
        boolean boolean32 = byteBuffer12.equals((java.lang.Object) boolean31);
        // The following exception was thrown during execution in test generation
        try {
            short short33 = byteBuffer12.getShort();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "US-ASCII" + "'", str4, "US-ASCII");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(shortBuffer16);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(longBuffer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(file27);
// flaky:         org.junit.Assert.assertEquals(file27.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/experiment/GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.SECONDS;
        long long2 = timeUnit0.toNanos((long) 781000000);
        long long4 = timeUnit0.toDays((long) 794000000);
        long long6 = timeUnit0.toHours((long) 64);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 781000000000000000L + "'", long2 == 781000000000000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9189L + "'", long4 == 9189L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        boolean boolean5 = longBuffer2.isDirect();
        long long6 = longBuffer2.get();
        java.nio.ByteOrder byteOrder7 = longBuffer2.order();
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray8 = longBuffer2.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteOrder7);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.of((-999999999), (int) (short) 1, 293000000, (int) 'a', 997000000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 293000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        java.lang.String str12 = intBuffer11.toString();
        java.nio.IntBuffer intBuffer14 = intBuffer11.put(722000000);
        java.nio.IntBuffer intBuffer16 = intBuffer14.put((-793999999));
        boolean boolean17 = intBuffer14.hasArray();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]" + "'", str12, "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]");
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertNotNull(intBuffer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration9 = zoneIdMap1.keys();
        java.util.Enumeration<java.time.ZoneId> zoneIdEnumeration10 = zoneIdMap1.keys();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.util.Locale.setDefault(locale13);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset20);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset20.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap1.getOrDefault((java.lang.Object) locale13, zoneRules23);
        java.lang.String str25 = locale13.getDisplayScript();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zoneIdEnumeration9);
        org.junit.Assert.assertNotNull(zoneIdEnumeration10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GBR" + "'", str12, "GBR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getISO3Language();
        java.time.format.DecimalStyle decimalStyle3 = java.time.format.DecimalStyle.of(locale1);
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now();
        boolean boolean5 = decimalStyle3.equals((java.lang.Object) offsetDateTime4);
        java.time.format.DecimalStyle decimalStyle7 = decimalStyle3.withZeroDigit('G');
        java.time.format.DecimalStyle decimalStyle9 = decimalStyle7.withPositiveSign('\uffff');
        java.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withDecimalStyle(decimalStyle9);
        java.time.format.DecimalStyle decimalStyle11 = dateTimeFormatter10.getDecimalStyle();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertNotNull(decimalStyle9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(decimalStyle11);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.zone.ZoneRules zoneRules8 = zoneOffset6.getRules();
        java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset6);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap11 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap15 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        java.time.zone.ZoneRules zoneRules21 = zoneOffset19.getRules();
        java.time.zone.ZoneRules zoneRules22 = zoneIdMap15.getOrDefault((java.lang.Object) 1.0d, zoneRules21);
        java.time.zone.ZoneRules zoneRules23 = zoneIdMap11.put((java.time.ZoneId) zoneOffset13, zoneRules21);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime9.withZoneSameLocal((java.time.ZoneId) zoneOffset13);
        java.time.format.FormatStyle formatStyle25 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter26 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle25);
        java.lang.String str27 = zonedDateTime24.format(dateTimeFormatter26);
        java.time.Instant instant28 = zonedDateTime24.toInstant();
        java.time.Instant instant30 = instant28.minusSeconds((long) 23);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneRules21);
        org.junit.Assert.assertNotNull(zoneRules22);
        org.junit.Assert.assertNull(zoneRules23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + formatStyle25 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle25.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e0a\u5348\u65f6\u5206\u79d2" + "'", str27, "\u4e0a\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) (-7));
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.Clock clock8 = java.time.Clock.fixed(instant3, (java.time.ZoneId) zoneOffset6);
        java.time.LocalTime localTime9 = java.time.LocalTime.now(clock8);
        java.time.Duration duration10 = java.time.Duration.ZERO;
        boolean boolean12 = duration10.equals((java.lang.Object) (short) 0);
        java.time.Duration duration13 = duration10.abs();
        java.time.LocalTime localTime14 = localTime9.plus((java.time.temporal.TemporalAmount) duration13);
        boolean boolean15 = instant1.equals((java.lang.Object) localTime14);
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant20 = instant18.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery22 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period23 = instant18.query(periodTemporalQuery22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        boolean boolean26 = instant18.isSupported(temporalUnit25);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime27.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.LocalDateTime localDateTime34 = localDateTime28.minusNanos((long) (short) 100);
        boolean boolean35 = temporalUnit25.isSupportedBy((java.time.temporal.Temporal) localDateTime28);
        boolean boolean36 = temporalUnit25.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant37 = instant1.plus((long) '.', temporalUnit25);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Weeks");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(clock8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(periodTemporalQuery22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField24.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean5 = file1.setLastModified((long) 284000000);
        boolean boolean6 = file1.isHidden();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        short short3 = byteBuffer1.getShort();
        java.nio.ByteBuffer byteBuffer5 = byteBuffer1.putChar('G');
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        short short9 = byteBuffer7.getShort();
        boolean boolean10 = byteBuffer1.equals((java.lang.Object) byteBuffer7);
        java.nio.IntBuffer intBuffer11 = byteBuffer1.asIntBuffer();
        java.lang.String str12 = intBuffer11.toString();
        java.nio.IntBuffer intBuffer14 = intBuffer11.put(722000000);
        java.nio.IntBuffer intBuffer15 = intBuffer11.slice();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 0 + "'", short3 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]" + "'", str12, "java.nio.ByteBufferAsIntBufferB[pos=0 lim=7 cap=7]");
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertNotNull(intBuffer15);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        java.time.Month month0 = java.time.Month.OCTOBER;
        java.time.Month month2 = month0.plus(0L);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        int int8 = localDateTime3.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        int int13 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.temporal.Temporal temporal14 = month2.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        java.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks(0L);
        boolean boolean19 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime15.minusMinutes((long) 256);
        int int22 = localDateTime21.getHour();
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate25 = localDateTime24.toLocalDate();
        java.time.LocalDateTime localDateTime27 = localDateTime24.plusWeeks(0L);
        java.time.temporal.ValueRange valueRange28 = chronoField23.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.LocalDateTime localDateTime34 = localDateTime29.plusYears((long) (short) -1);
        int int35 = localDateTime24.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalTime localTime36 = java.time.LocalTime.NOON;
        java.time.LocalTime localTime37 = java.time.LocalTime.now();
        int int38 = localTime37.getNano();
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long40 = localTime37.getLong((java.time.temporal.TemporalField) chronoField39);
        java.time.LocalTime localTime42 = localTime36.with((java.time.temporal.TemporalField) chronoField39, 0L);
        boolean boolean43 = localDateTime34.isSupported((java.time.temporal.TemporalField) chronoField39);
        int int44 = localDateTime21.get((java.time.temporal.TemporalField) chronoField39);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.OCTOBER + "'", month0.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.OCTOBER + "'", month2.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField23.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 245000000 + "'", int38 == 245000000);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField39.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 19L + "'", long40 == 19L);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 43 + "'", int44 == 43);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant3 = instant1.minusNanos((long) 'a');
        long long4 = instant1.toEpochMilli();
        java.text.AttributedCharacterIterator.Attribute attribute5 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.Optional<java.io.ObjectStreamException> objectStreamExceptionOptional6 = java.util.Optional.empty();
        boolean boolean7 = attribute5.equals((java.lang.Object) objectStreamExceptionOptional6);
        boolean boolean8 = instant1.equals((java.lang.Object) boolean7);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32000L + "'", long4 == 32000L);
        org.junit.Assert.assertNotNull(attribute5);
        org.junit.Assert.assertNotNull(objectStreamExceptionOptional6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer4 = charBuffer3.flip();
        int int5 = charBuffer3.capacity();
        boolean boolean6 = charBuffer3.hasArray();
        boolean boolean7 = chronology1.equals((java.lang.Object) charBuffer3);
        java.time.chrono.ChronoLocalDate chronoLocalDate8 = chronology1.dateNow();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronoLocalDate8);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("+999999998-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (-1));
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        int int4 = fieldPosition2.getField();
        int int5 = fieldPosition2.getField();
        org.junit.Assert.assertNull(field3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.Instant instant10 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant12 = instant10.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime13 = java.nio.file.attribute.FileTime.from(instant10);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery14 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period15 = instant10.query(periodTemporalQuery14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        boolean boolean18 = instant10.isSupported(temporalUnit17);
        java.time.Instant instant20 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant22 = instant20.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = zoneOffset25.getRules();
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.ofInstant(instant20, (java.time.ZoneId) zoneOffset25);
        java.time.ZoneId zoneId29 = zonedDateTime28.getZone();
        java.time.Clock clock30 = java.time.Clock.fixed(instant10, zoneId29);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField31.getBaseUnit();
        java.time.Instant instant33 = instant10.truncatedTo(temporalUnit32);
        java.time.Duration duration34 = zoneRules7.getDaylightSavings(instant33);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime38.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime44 = localDateTime41.atOffset(zoneOffset43);
        java.time.zone.ZoneRules zoneRules45 = zoneOffset43.getRules();
        java.time.ZonedDateTime zonedDateTime46 = offsetDateTime38.atZoneSameInstant((java.time.ZoneId) zoneOffset43);
        int int47 = zonedDateTime46.getDayOfMonth();
        int int48 = zonedDateTime46.getHour();
        java.time.ZonedDateTime zonedDateTime50 = zonedDateTime46.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime54.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime60 = localDateTime57.atOffset(zoneOffset59);
        java.time.zone.ZoneRules zoneRules61 = zoneOffset59.getRules();
        java.time.ZonedDateTime zonedDateTime62 = offsetDateTime54.atZoneSameInstant((java.time.ZoneId) zoneOffset59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime62.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long65 = zonedDateTime62.getLong((java.time.temporal.TemporalField) chronoField64);
        long long66 = zonedDateTime50.getLong((java.time.temporal.TemporalField) chronoField64);
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField64.getRangeUnit();
        boolean boolean68 = temporalUnit67.isDateBased();
        boolean boolean69 = instant33.isSupported(temporalUnit67);
        long long70 = instant33.getEpochSecond();
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit72 = chronoField71.getBaseUnit();
        boolean boolean73 = temporalUnit72.isTimeBased();
        boolean boolean74 = instant33.isSupported(temporalUnit72);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertNotNull(periodTemporalQuery14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField16.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField31.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneRules45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 23 + "'", int48 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(zoneRules61);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField64.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 999999999L + "'", long65 == 999999999L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 999999999L + "'", long66 == 999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 32L + "'", long70 == 32L);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField71.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit72 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit72.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime11 = localDateTime8.atOffset(zoneOffset10);
        java.time.zone.ZoneRules zoneRules12 = zoneOffset10.getRules();
        java.time.ZonedDateTime zonedDateTime13 = offsetDateTime5.atZoneSameInstant((java.time.ZoneId) zoneOffset10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime13.withLaterOffsetAtOverlap();
        java.time.Period period16 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period17 = java.time.Period.from((java.time.temporal.TemporalAmount) period16);
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str19 = dateTimeFormatter18.toString();
        boolean boolean20 = period17.equals((java.lang.Object) dateTimeFormatter18);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime21 = zonedDateTime14.plus((java.time.temporal.TemporalAmount) period17);
        boolean boolean22 = duration1.equals((java.lang.Object) period17);
        long long23 = duration1.toDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneRules12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str19, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4L + "'", long23 == 4L);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.distinct();
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.parallel();
        doubleStream1.close();
        doubleStream1.close();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = doubleStream1.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        java.io.InvalidObjectException invalidObjectException3 = new java.io.InvalidObjectException("1 - 53");
        java.security.KeyException keyException4 = new java.security.KeyException("eng", (java.lang.Throwable) invalidObjectException3);
        java.security.cert.CertificateEncodingException certificateEncodingException5 = new java.security.cert.CertificateEncodingException("file:/tmp/United Kingdom7542713138829080402aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (java.lang.Throwable) keyException4);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        java.util.stream.IntStream intStream10 = charBuffer9.chars();
        boolean boolean11 = charBuffer9.hasArray();
        java.lang.String str12 = charBuffer9.toString();
        boolean boolean13 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) str12);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        int int3 = org.apache.commons.lang3.StringUtils.indexOf("zh-CN", 256, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        int int3 = localDate1.getYear();
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        java.time.temporal.Temporal temporal8 = localDate1.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.Period period10 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period11 = period10.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod12 = period10.negated();
        java.time.LocalDate localDate13 = localDate1.plus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        int int19 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime15.minusNanos((long) (short) 100);
        java.time.LocalTime localTime22 = localDateTime21.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal23 = chronoPeriod12.subtractFrom((java.time.temporal.Temporal) localTime22);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Days");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-999999999) + "'", int3 == (-999999999));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(temporal8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray9 = new java.nio.file.LinkOption[] { linkOption7, linkOption8 };
        java.nio.file.Path path10 = null; // flaky: path4.toRealPath(linkOptionArray9);
        boolean boolean12 = false; // flaky: path10.startsWith("00:00:32");
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray9);
// flaky:         org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        java.time.Month month1 = java.time.Month.APRIL;
        int int3 = month1.firstDayOfYear(false);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.of((int) ':', month1, 794000000, 781000000, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 794000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.APRIL + "'", month1.equals(java.time.Month.APRIL));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 91 + "'", int3 == 91);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("\u4e2d\u6587\u4e2d\u56fd)", "java.text.AttributedCharacterIterator$Attribute(input_method_segment)", 40000000, "file:///experiment/GBR/");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: ?? (??)");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime5 = localDateTime2.atOffset(zoneOffset4);
        java.time.Clock clock6 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset4);
        java.lang.String str7 = zoneOffset4.getId();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime12.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset22);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime28 = localDateTime24.minus((long) (-999999999), temporalUnit27);
        java.lang.String str29 = temporalUnit27.toString();
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime16.plus((long) (byte) 100, temporalUnit27);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime16.plusWeeks((long) '4');
        java.time.temporal.ValueRange valueRange33 = chronoField8.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime32);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = zoneOffset4.getLong((java.time.temporal.TemporalField) chronoField8);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MilliOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(clock6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Z" + "'", str7, "Z");
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField8.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Weeks" + "'", str29, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(valueRange33);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        java.util.OptionalInt optionalInt1 = java.util.OptionalInt.of((int) 'x');
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant5 = instant3.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime6 = java.nio.file.attribute.FileTime.from(instant3);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery7 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period8 = instant3.query(periodTemporalQuery7);
        java.time.Period period9 = java.time.Period.from((java.time.temporal.TemporalAmount) period8);
        java.time.Period period11 = period9.withYears(722000000);
        long long12 = period9.toTotalMonths();
        boolean boolean13 = optionalInt1.equals((java.lang.Object) period9);
        org.junit.Assert.assertNotNull(optionalInt1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertNotNull(periodTemporalQuery7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList3 = duration2.getUnits();
        java.time.Duration duration5 = duration2.plusDays((-1L));
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList6 = duration5.getUnits();
        long long7 = duration5.toMinutes();
        java.time.Duration duration9 = duration5.dividedBy(14L);
        java.time.Duration duration11 = duration9.minusSeconds((long) 18);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(temporalUnitList3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(temporalUnitList6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1439L) + "'", long7 == (-1439L));
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        int int12 = zonedDateTime11.getDayOfMonth();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime11.withDayOfYear(10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime24 = localDateTime21.atOffset(zoneOffset23);
        java.time.zone.ZoneRules zoneRules25 = zoneOffset23.getRules();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime18.atZoneSameInstant((java.time.ZoneId) zoneOffset23);
        java.time.ZoneId zoneId27 = zonedDateTime26.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime26.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        java.time.OffsetDateTime offsetDateTime34 = offsetDateTime32.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.zone.ZoneRules zoneRules39 = zoneOffset37.getRules();
        java.time.ZonedDateTime zonedDateTime40 = offsetDateTime32.atZoneSameInstant((java.time.ZoneId) zoneOffset37);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime40.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long43 = zonedDateTime40.getLong((java.time.temporal.TemporalField) chronoField42);
        long long44 = zonedDateTime26.getLong((java.time.temporal.TemporalField) chronoField42);
        int int45 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.temporal.ValueRange valueRange48 = zonedDateTime14.range((java.time.temporal.TemporalField) chronoField46);
        java.time.Instant instant50 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant52 = instant50.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime53 = java.nio.file.attribute.FileTime.from(instant50);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = instant50.query(periodTemporalQuery54);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        boolean boolean58 = instant50.isSupported(temporalUnit57);
        java.time.Instant instant60 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant62 = instant60.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        java.time.zone.ZoneRules zoneRules67 = zoneOffset65.getRules();
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.ofInstant(instant60, (java.time.ZoneId) zoneOffset65);
        java.time.ZoneId zoneId69 = zonedDateTime68.getZone();
        java.time.Clock clock70 = java.time.Clock.fixed(instant50, zoneId69);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime14.with((java.time.temporal.TemporalAdjuster) instant50);
        java.time.Instant instant72 = zonedDateTime14.toInstant();
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        // The following exception was thrown during execution in test generation
        try {
            long long74 = instant72.getLong((java.time.temporal.TemporalField) chronoField73);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MinuteOfHour");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(zoneRules25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 999999999L + "'", long43 == 999999999L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 999999999L + "'", long44 == 999999999L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField46.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(fileTime53);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField56.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(zoneRules67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zoneId69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField73.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("Eng", "12-31");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "12-31" + "'", str2, "12-31");
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        java.time.Duration duration1 = java.time.Duration.ofNanos((long) 834000000);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime11.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId13 = zonedDateTime11.getZone();
        int int14 = zonedDateTime11.getHour();
        java.time.Month month15 = zonedDateTime11.getMonth();
        java.time.DayOfWeek dayOfWeek16 = zonedDateTime11.getDayOfWeek();
        java.time.Instant instant18 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.Clock clock23 = java.time.Clock.fixed(instant18, (java.time.ZoneId) zoneOffset21);
        java.time.LocalTime localTime24 = java.time.LocalTime.now(clock23);
        java.time.LocalTime localTime26 = localTime24.plusHours((long) 16384);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.HOUR_OF_AMPM;
        boolean boolean28 = localTime26.isSupported((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.lang.String str30 = zonedDateTime11.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertTrue("'" + month15 + "' != '" + java.time.Month.DECEMBER + "'", month15.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + dayOfWeek16 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek16.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 11L + "'", long29 == 11L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+999999999-12-31T23:59:59.999999999Z" + "'", str30, "+999999999-12-31T23:59:59.999999999Z");
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.SATURDAY;
        int int1 = dayOfWeek0.getValue();
        int int2 = dayOfWeek0.getValue();
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.SATURDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.SATURDAY));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strList11.removeAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList11.spliterator();
        java.io.File file31 = new java.io.File("GBR");
        boolean boolean33 = file31.setExecutable(true);
        java.io.File file34 = file31.getCanonicalFile();
        java.io.File file35 = file31.getParentFile();
        int int36 = strList11.lastIndexOf((java.lang.Object) file35);
        boolean boolean37 = strList11.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(file34);
// flaky:         org.junit.Assert.assertEquals(file34.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/experiment/GBR");
        org.junit.Assert.assertNull(file35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        java.time.Month month0 = java.time.Month.OCTOBER;
        java.time.Month month2 = month0.plus(0L);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime7 = localDateTime4.atOffset(zoneOffset6);
        int int8 = localDateTime3.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime4);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        int int13 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        java.time.temporal.Temporal temporal14 = month2.adjustInto((java.time.temporal.Temporal) localDateTime4);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.LocalDate localDate16 = localDateTime15.toLocalDate();
        java.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks(0L);
        boolean boolean19 = localDateTime4.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        java.time.LocalDateTime localDateTime21 = localDateTime4.minusHours((long) '\n');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime29 = localDateTime23.minusWeeks((long) 0);
        boolean boolean30 = localDateTime21.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.OCTOBER + "'", month0.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.OCTOBER + "'", month2.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime4.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset14);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit19 = chronoField18.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime20 = localDateTime16.minus((long) (-999999999), temporalUnit19);
        java.lang.String str21 = temporalUnit19.toString();
        java.time.OffsetDateTime offsetDateTime22 = offsetDateTime8.plus((long) (byte) 100, temporalUnit19);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime8.plusWeeks((long) '4');
        java.time.temporal.ValueRange valueRange25 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime24);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime29 = localDateTime26.atOffset(zoneOffset28);
        java.time.OffsetDateTime offsetDateTime31 = offsetDateTime29.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.zone.ZoneRules zoneRules36 = zoneOffset34.getRules();
        java.time.ZonedDateTime zonedDateTime37 = offsetDateTime29.atZoneSameInstant((java.time.ZoneId) zoneOffset34);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime37.withLaterOffsetAtOverlap();
        java.time.LocalTime localTime39 = zonedDateTime37.toLocalTime();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime43 = localDateTime40.atOffset(zoneOffset42);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.withSecond((int) (byte) 0);
        int int46 = offsetDateTime45.getNano();
        java.time.Month month47 = offsetDateTime45.getMonth();
        boolean boolean48 = zonedDateTime37.equals((java.lang.Object) month47);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime37.withFixedOffsetZone();
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime53 = localDateTime50.atOffset(zoneOffset52);
        java.time.OffsetDateTime offsetDateTime55 = offsetDateTime53.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime59 = localDateTime56.atOffset(zoneOffset58);
        java.time.zone.ZoneRules zoneRules60 = zoneOffset58.getRules();
        java.time.ZonedDateTime zonedDateTime61 = offsetDateTime53.atZoneSameInstant((java.time.ZoneId) zoneOffset58);
        int int62 = zonedDateTime61.getDayOfMonth();
        int int63 = zonedDateTime61.getHour();
        java.time.ZonedDateTime zonedDateTime65 = zonedDateTime61.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime69 = localDateTime66.atOffset(zoneOffset68);
        java.time.OffsetDateTime offsetDateTime71 = offsetDateTime69.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime75 = localDateTime72.atOffset(zoneOffset74);
        java.time.zone.ZoneRules zoneRules76 = zoneOffset74.getRules();
        java.time.ZonedDateTime zonedDateTime77 = offsetDateTime69.atZoneSameInstant((java.time.ZoneId) zoneOffset74);
        java.time.ZonedDateTime zonedDateTime78 = zonedDateTime77.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long80 = zonedDateTime77.getLong((java.time.temporal.TemporalField) chronoField79);
        long long81 = zonedDateTime65.getLong((java.time.temporal.TemporalField) chronoField79);
        java.time.temporal.ValueRange valueRange82 = zonedDateTime37.range((java.time.temporal.TemporalField) chronoField79);
        java.time.temporal.Temporal temporal84 = chronoField0.adjustInto((java.time.temporal.Temporal) zonedDateTime37, 0L);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField18.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit19 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit19.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Weeks" + "'", str21, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(valueRange25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(zoneRules36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999999999 + "'", int46 == 999999999);
        org.junit.Assert.assertTrue("'" + month47 + "' != '" + java.time.Month.DECEMBER + "'", month47.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(zoneRules60);
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 31 + "'", int62 == 31);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 23 + "'", int63 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(zoneRules76);
        org.junit.Assert.assertNotNull(zonedDateTime77);
        org.junit.Assert.assertNotNull(zonedDateTime78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField79.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 999999999L + "'", long80 == 999999999L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 999999999L + "'", long81 == 999999999L);
        org.junit.Assert.assertNotNull(valueRange82);
        org.junit.Assert.assertNotNull(temporal84);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        boolean boolean8 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = offsetDateTime12.atZoneSameInstant((java.time.ZoneId) zoneOffset17);
        int int21 = zonedDateTime20.getDayOfMonth();
        int int22 = zonedDateTime20.getMinute();
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime20.minusWeeks((long) 1);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.minusMinutes(0L);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime26.withYear((int) (byte) 100);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusNanos((long) 10000);
        java.time.LocalDateTime localDateTime31 = zonedDateTime30.toLocalDateTime();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.ZonedDateTime zonedDateTime43 = offsetDateTime35.atZoneSameInstant((java.time.ZoneId) zoneOffset40);
        int int44 = zonedDateTime43.getDayOfMonth();
        int int45 = zonedDateTime43.getHour();
        java.time.ZonedDateTime zonedDateTime47 = zonedDateTime43.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime51 = localDateTime48.atOffset(zoneOffset50);
        java.time.OffsetDateTime offsetDateTime53 = offsetDateTime51.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime57 = localDateTime54.atOffset(zoneOffset56);
        java.time.zone.ZoneRules zoneRules58 = zoneOffset56.getRules();
        java.time.ZonedDateTime zonedDateTime59 = offsetDateTime51.atZoneSameInstant((java.time.ZoneId) zoneOffset56);
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime59.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long62 = zonedDateTime59.getLong((java.time.temporal.TemporalField) chronoField61);
        long long63 = zonedDateTime47.getLong((java.time.temporal.TemporalField) chronoField61);
        java.time.temporal.TemporalUnit temporalUnit64 = chronoField61.getRangeUnit();
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField61.getBaseUnit();
        // The following exception was thrown during execution in test generation
        try {
            long long66 = offsetDateTime3.until((java.time.temporal.Temporal) zonedDateTime30, temporalUnit65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: long overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField7.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 23 + "'", int45 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(zoneRules58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField61.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 999999999L + "'", long62 == 999999999L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 999999999L + "'", long63 == 999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit64 + "' != '" + java.time.temporal.ChronoUnit.SECONDS + "'", temporalUnit64.equals(java.time.temporal.ChronoUnit.SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.NANOS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.NANOS));
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        java.io.File file1 = new java.io.File("GBR");
        java.io.File file3 = new java.io.File(file1, "5");
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path5 = path4.normalize();
        boolean boolean6 = path5.isAbsolute();
        java.nio.file.FileSystem fileSystem7 = path5.getFileSystem();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertEquals(file3.getParent(), "GBR");
        org.junit.Assert.assertEquals(file3.toString(), "GBR/5");
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(fileSystem7);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        java.net.URLConnection.setDefaultRequestProperty("ISO", "AlignedDayOfWeekInYear");
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.putLong((long) 829000000);
        java.nio.DoubleBuffer doubleBuffer5 = byteBuffer4.asDoubleBuffer();
        boolean boolean6 = doubleBuffer5.isDirect();
        java.nio.DoubleBuffer doubleBuffer7 = doubleBuffer5.compact();
        double[] doubleArray14 = new double[] { 574000000, 722000000, 2, 999999999, 999999, 30 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer17 = doubleBuffer7.get(doubleArray14, 399000000, 371000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(doubleBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[5.74E8, 7.22E8, 2.0, 9.99999999E8, 999999.0, 30.0]");
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((int) '4', 997000000);
        java.util.OptionalInt optionalInt3 = intStream2.min();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = intStream2.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(optionalInt3);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(28);
        org.junit.Assert.assertNotNull(longBuffer1);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(399000000);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putInt(607000000);
        char char4 = byteBuffer3.getChar();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\000' + "'", char4 == '\000');
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer2 = byteBuffer1.asLongBuffer();
        java.nio.LongBuffer longBuffer4 = longBuffer2.put(0L);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer7 = byteBuffer6.asLongBuffer();
        float float9 = byteBuffer6.getFloat(4);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer6.putChar('\r');
        java.nio.LongBuffer longBuffer12 = byteBuffer11.asLongBuffer();
        java.nio.LongBuffer longBuffer13 = longBuffer2.put(longBuffer12);
        java.lang.String str14 = longBuffer2.toString();
        java.nio.ByteOrder byteOrder15 = longBuffer2.order();
        java.lang.String str16 = longBuffer2.toString();
        java.nio.LongBuffer longBuffer18 = java.nio.LongBuffer.allocate(0);
        long[] longArray19 = longBuffer18.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer22 = longBuffer2.put(longArray19, (int) 'x', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(longBuffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.0f + "'", float9 == 0.0f);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(longBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]" + "'", str14, "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(byteOrder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]" + "'", str16, "java.nio.ByteBufferAsLongBufferB[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(longBuffer18);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("en_GB", "(null <no signer certificates>)", (int) (short) -1, "\u7f8e\u56fd");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: en_gb");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        float[] floatArray2 = new float[] { 16, 21 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        java.nio.ByteOrder byteOrder5 = floatBuffer3.order();
        float float6 = floatBuffer3.get();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer3.compact();
        java.nio.FloatBuffer floatBuffer8 = floatBuffer3.compact();
        java.nio.FloatBuffer floatBuffer9 = floatBuffer8.slice();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[21.0, 21.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertNotNull(byteOrder5);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 16.0f + "'", float6 == 16.0f);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(floatBuffer8);
        org.junit.Assert.assertNotNull(floatBuffer9);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime6 = localDateTime3.atOffset(zoneOffset5);
        java.time.zone.ZoneRules zoneRules7 = zoneOffset5.getRules();
        java.time.zone.ZoneRules zoneRules8 = zoneIdMap1.getOrDefault((java.lang.Object) 1.0d, zoneRules7);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime14 = localDateTime11.atOffset(zoneOffset13);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset13);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap17 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime22 = localDateTime19.atOffset(zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset21.getRules();
        java.time.zone.ZoneRules zoneRules24 = zoneIdMap17.getOrDefault((java.lang.Object) 1.0d, zoneRules23);
        java.lang.String str25 = zoneRules23.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList26 = zoneRules23.getTransitions();
        java.time.zone.ZoneRules zoneRules27 = zoneIdMap1.putIfAbsent((java.time.ZoneId) zoneOffset13, zoneRules23);
        java.time.Duration duration30 = java.time.Duration.ofSeconds((long) 10, 0L);
        int int31 = duration30.getNano();
        java.time.Duration duration32 = duration30.abs();
        java.time.Duration duration33 = duration32.abs();
        long long34 = duration32.toMillis();
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime38 = localDateTime35.atOffset(zoneOffset37);
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime38.withSecond((int) (byte) 0);
        java.time.LocalDate localDate41 = offsetDateTime38.toLocalDate();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField42.getBaseUnit();
        boolean boolean44 = offsetDateTime38.isSupported((java.time.temporal.TemporalField) chronoField42);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime38.minusMinutes((long) 100);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime50.withSecond((int) (byte) 0);
        java.time.LocalDate localDate53 = offsetDateTime50.toLocalDate();
        java.time.OffsetDateTime offsetDateTime55 = offsetDateTime50.withDayOfYear((int) '+');
        java.time.format.DateTimeFormatter dateTimeFormatter56 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.time.chrono.Chronology chronology57 = dateTimeFormatter56.getChronology();
        java.time.format.TextStyle textStyle58 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale59 = java.util.Locale.UK;
        java.lang.String str60 = locale59.getISO3Language();
        java.time.format.DecimalStyle decimalStyle61 = java.time.format.DecimalStyle.of(locale59);
        java.lang.String str62 = chronology57.getDisplayName(textStyle58, locale59);
        java.time.OffsetTime offsetTime63 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime65 = offsetTime63.withSecond(16);
        java.time.temporal.ChronoField chronoField66 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        int int67 = offsetTime65.get((java.time.temporal.TemporalField) chronoField66);
        java.time.temporal.ValueRange valueRange68 = chronology57.range(chronoField66);
        boolean boolean69 = offsetDateTime55.isSupported((java.time.temporal.TemporalField) chronoField66);
        boolean boolean70 = offsetDateTime46.equals((java.lang.Object) boolean69);
        boolean boolean71 = zoneIdMap1.remove((java.lang.Object) long34, (java.lang.Object) boolean70);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneRules7);
        org.junit.Assert.assertNotNull(zoneRules8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str25, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList26);
        org.junit.Assert.assertNull(zoneRules27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + textStyle58 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle58.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "eng" + "'", str60, "eng");
        org.junit.Assert.assertNotNull(decimalStyle61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ISO" + "'", str62, "ISO");
        org.junit.Assert.assertNotNull(offsetTime63);
        org.junit.Assert.assertNotNull(offsetTime65);
        org.junit.Assert.assertTrue("'" + chronoField66 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField66.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 21 + "'", int67 == 21);
        org.junit.Assert.assertNotNull(valueRange68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean2 = file1.mkdirs();
        java.io.File file3 = file1.getParentFile();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean4 = file1.canExecute();
        boolean boolean5 = file1.createNewFile();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream7 = new java.io.PrintStream(file1, "\u4e2d\u6587               ");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message:                ??               ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime27 = localDateTime24.atOffset(zoneOffset26);
        int int28 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime24);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime32 = localDateTime29.atOffset(zoneOffset31);
        boolean boolean33 = localDateTime23.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        boolean boolean34 = localDateTime17.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime29);
        java.time.LocalDate localDate35 = localDateTime17.toLocalDate();
        java.time.LocalTime localTime36 = localDateTime17.toLocalTime();
        java.time.LocalTime localTime37 = localDateTime17.toLocalTime();
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap41 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.zone.ZoneRules zoneRules47 = zoneOffset45.getRules();
        java.time.zone.ZoneRules zoneRules48 = zoneIdMap41.getOrDefault((java.lang.Object) 1.0d, zoneRules47);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset53);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap57 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime62 = localDateTime59.atOffset(zoneOffset61);
        java.time.zone.ZoneRules zoneRules63 = zoneOffset61.getRules();
        java.time.zone.ZoneRules zoneRules64 = zoneIdMap57.getOrDefault((java.lang.Object) 1.0d, zoneRules63);
        java.lang.String str65 = zoneRules63.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList66 = zoneRules63.getTransitions();
        java.time.zone.ZoneRules zoneRules67 = zoneIdMap41.putIfAbsent((java.time.ZoneId) zoneOffset53, zoneRules63);
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime73 = localDateTime70.atOffset(zoneOffset72);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset72);
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit77 = chronoField76.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime78 = localDateTime74.minus((long) (-999999999), temporalUnit77);
        java.util.List<java.time.ZoneOffset> zoneOffsetList79 = zoneRules63.getValidOffsets(localDateTime74);
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime84 = localDateTime81.atOffset(zoneOffset83);
        int int85 = localDateTime80.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime81);
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime89 = localDateTime86.atOffset(zoneOffset88);
        int int90 = localDateTime81.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime86);
        java.time.ZoneOffset zoneOffset91 = zoneRules63.getOffset(localDateTime81);
        java.time.LocalDateTime localDateTime92 = java.time.LocalDateTime.ofEpochSecond((long) 469000000, 607000000, zoneOffset91);
        java.time.OffsetTime offsetTime93 = java.time.OffsetTime.of(localTime37, zoneOffset91);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneRules47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(zoneRules63);
        org.junit.Assert.assertNotNull(zoneRules64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str65, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList66);
        org.junit.Assert.assertNull(zoneRules67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField76.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit77 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit77.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime78);
        org.junit.Assert.assertNotNull(zoneOffsetList79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertNotNull(offsetDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(zoneOffset91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(offsetTime93);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration4 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList5 = duration4.getUnits();
        java.time.Duration duration6 = duration1.minus(duration4);
        int int7 = duration1.getNano();
        int int8 = duration1.getNano();
        long long9 = duration1.toMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(temporalUnitList5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 6650L + "'", long9 == 6650L);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        java.io.File file2 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file6 = java.io.File.createTempFile("United Kingdom", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.net.Proxy proxy10 = java.net.Proxy.NO_PROXY;
        java.lang.String str11 = proxy10.toString();
        java.net.Proxy.Type type12 = proxy10.type();
        java.net.URLConnection uRLConnection13 = uRL7.openConnection(proxy10);
        java.io.InputStream inputStream14 = uRLConnection13.getInputStream();
        java.lang.String str15 = uRLConnection13.toString();
        uRLConnection13.setReadTimeout(8000000);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/United Kingdom9107223367267620755aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/tmp/United Kingdom9107223367267620755aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/United Kingdom7461199553629431094aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/tmp/United Kingdom7461199553629431094aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(proxy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DIRECT" + "'", str11, "DIRECT");
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type12.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(uRLConnection13);
        org.junit.Assert.assertNotNull(inputStream14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom7461199553629431094aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str15, "sun.net.www.protocol.file.FileURLConnection:file:/tmp/United Kingdom7461199553629431094aaaaaaaaaaaaaaaaaaaaaaaaaaaaaZaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) (byte) -1);
        java.lang.String str2 = fileTime1.toString();
        java.util.concurrent.TimeUnit timeUnit4 = java.util.concurrent.TimeUnit.MINUTES;
        java.nio.file.attribute.FileTime fileTime5 = java.nio.file.attribute.FileTime.from((-365243219162L), timeUnit4);
        int int6 = fileTime1.compareTo(fileTime5);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int9 = zoneOffset8.getTotalSeconds();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime19 = localDateTime16.atOffset(zoneOffset18);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime19.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = offsetDateTime19.atZoneSameInstant((java.time.ZoneId) zoneOffset24);
        int int28 = zonedDateTime27.getDayOfMonth();
        int int29 = zonedDateTime27.getHour();
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime27.minusDays((long) 385000000);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime35 = localDateTime32.atOffset(zoneOffset34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.zone.ZoneRules zoneRules42 = zoneOffset40.getRules();
        java.time.ZonedDateTime zonedDateTime43 = offsetDateTime35.atZoneSameInstant((java.time.ZoneId) zoneOffset40);
        java.time.ZonedDateTime zonedDateTime44 = zonedDateTime43.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long46 = zonedDateTime43.getLong((java.time.temporal.TemporalField) chronoField45);
        long long47 = zonedDateTime31.getLong((java.time.temporal.TemporalField) chronoField45);
        boolean boolean48 = offsetDateTime13.isSupported((java.time.temporal.TemporalField) chronoField45);
        boolean boolean49 = zoneOffset8.isSupported((java.time.temporal.TemporalField) chronoField45);
        boolean boolean50 = fileTime5.equals((java.lang.Object) zoneOffset8);
        java.lang.String str51 = fileTime5.toString();
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str2, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(timeUnit4);
        org.junit.Assert.assertNotNull(fileTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zoneRules42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField45.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 999999999L + "'", long46 == 999999999L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 999999999L + "'", long47 == 999999999L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-692477-03-10T13:58:00Z" + "'", str51, "-692477-03-10T13:58:00Z");
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(0);
        java.nio.ByteBuffer byteBuffer3 = java.nio.ByteBuffer.allocate((int) ' ');
        java.nio.LongBuffer longBuffer4 = byteBuffer3.asLongBuffer();
        java.nio.LongBuffer longBuffer6 = longBuffer4.put(0L);
        java.lang.String str7 = longBuffer4.toString();
        int int8 = longBuffer1.compareTo(longBuffer4);
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]" + "'", str7, "java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime2 = offsetTime0.withSecond(16);
        java.time.OffsetTime offsetTime4 = offsetTime2.plusNanos(1434414441700000L);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime7 = offsetTime5.withSecond(16);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant11 = instant9.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime12 = java.nio.file.attribute.FileTime.from(instant9);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery13 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period14 = instant9.query(periodTemporalQuery13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        boolean boolean17 = instant9.isSupported(temporalUnit16);
        boolean boolean18 = offsetTime5.isSupported(temporalUnit16);
        boolean boolean19 = offsetTime4.isEqual(offsetTime5);
        int int20 = offsetTime5.getNano();
        java.time.OffsetTime offsetTime22 = offsetTime5.withNano((int) '\000');
        int int23 = offsetTime22.getNano();
        java.time.OffsetTime offsetTime25 = offsetTime22.minusNanos(4096L);
        java.time.LocalDate localDate27 = java.time.LocalDate.now();
        java.time.LocalDateTime localDateTime28 = localDate27.atStartOfDay();
        java.time.Duration duration31 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration34 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList35 = duration34.getUnits();
        java.time.Duration duration36 = duration31.minus(duration34);
        java.time.Duration duration38 = duration31.plusNanos((long) 722000000);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.MICRO_OF_SECOND;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        java.time.Duration duration42 = duration38.minus((long) (byte) 100, temporalUnit41);
        java.time.temporal.Temporal temporal43 = localDateTime28.minus((long) 794000000, temporalUnit41);
        java.time.OffsetTime offsetTime44 = offsetTime22.plus(0L, temporalUnit41);
        java.time.LocalDate localDate45 = java.time.LocalDate.now();
        java.time.OffsetDateTime offsetDateTime46 = offsetTime22.atDate(localDate45);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(fileTime12);
        org.junit.Assert.assertNotNull(periodTemporalQuery13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField15.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 629000000 + "'", int20 == 629000000);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(temporalUnitList35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_SECOND + "'", chronoField40.equals(java.time.temporal.ChronoField.MICRO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(temporal43);
        org.junit.Assert.assertNotNull(offsetTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        double[] doubleArray5 = new double[] { 'M', 1024, 0.0d, 1999999998, 'u' };
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.of(doubleArray5);
        java.util.OptionalDouble optionalDouble7 = doubleStream6.min();
        java.lang.String str8 = optionalDouble7.toString();
        java.util.Optional<java.util.OptionalDouble> optionalDoubleOptional9 = java.util.Optional.of(optionalDouble7);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[77.0, 1024.0, 0.0, 1.999999998E9, 117.0]");
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[0.0]" + "'", str8, "OptionalDouble[0.0]");
        org.junit.Assert.assertNotNull(optionalDoubleOptional9);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) (short) 10);
        java.util.stream.Stream<java.lang.Integer> intStream2 = intStream1.boxed();
        java.util.stream.Stream<java.lang.Integer> intStream4 = intStream2.skip(10L);
        java.util.stream.Stream<java.lang.Integer> intStream6 = intStream4.limit(68618241259163000L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.Integer> intOptional7 = intStream4.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((int) '4', 997000000);
        java.util.stream.LongStream longStream3 = intStream2.asLongStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<java.lang.Integer> intSpliterator4 = intStream2.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        java.security.AccessControlException accessControlException1 = new java.security.AccessControlException("");
        java.security.Permission permission2 = accessControlException1.getPermission();
        java.security.PrivilegedActionException privilegedActionException3 = new java.security.PrivilegedActionException((java.lang.Exception) accessControlException1);
        java.lang.String str4 = privilegedActionException3.toString();
        java.lang.Exception exception5 = privilegedActionException3.getException();
        java.lang.Exception exception6 = privilegedActionException3.getException();
        org.junit.Assert.assertNull(permission2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.security.PrivilegedActionException: java.security.AccessControlException: " + "'", str4, "java.security.PrivilegedActionException: java.security.AccessControlException: ");
        org.junit.Assert.assertNotNull(exception5);
        org.junit.Assert.assertNotNull(exception6);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        java.time.Period period3 = java.time.Period.of(33, 8000000, (int) 'a');
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalDate localDate1 = java.time.LocalDate.MIN;
        boolean boolean2 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate1);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        boolean boolean4 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField3);
        int int5 = localDate1.getDayOfYear();
        java.time.temporal.TemporalUnit temporalUnit6 = null;
        boolean boolean7 = localDate1.isSupported(temporalUnit6);
        long long8 = localDate1.toEpochDay();
        int int9 = localDate1.getDayOfMonth();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.withSecond((int) (byte) 0);
        java.time.LocalDate localDate16 = offsetDateTime13.toLocalDate();
        java.time.LocalDate localDate18 = localDate16.minusWeeks((long) 834000000);
        int int19 = localDate16.getDayOfYear();
        java.time.LocalDate localDate21 = localDate16.minusWeeks(0L);
        boolean boolean22 = localDate1.isEqual((java.time.chrono.ChronoLocalDate) localDate21);
        int int23 = localDate1.lengthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField3.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-365243219162L) + "'", long8 == (-365243219162L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 365 + "'", int23 == 365);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.ofHours((int) (short) 0);
        int int2 = zoneOffset1.getTotalSeconds();
        java.time.LocalTime localTime3 = java.time.LocalTime.now();
        int int4 = localTime3.getNano();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long6 = localTime3.getLong((java.time.temporal.TemporalField) chronoField5);
        boolean boolean7 = zoneOffset1.isSupported((java.time.temporal.TemporalField) chronoField5);
        java.time.Instant instant9 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime13 = localDateTime10.atOffset(zoneOffset12);
        java.time.Clock clock14 = java.time.Clock.fixed(instant9, (java.time.ZoneId) zoneOffset12);
        java.time.LocalTime localTime15 = java.time.LocalTime.now(clock14);
        java.time.LocalTime localTime17 = localTime15.plusMinutes((long) 10);
        int int18 = localTime15.getHour();
        java.time.temporal.ValueRange valueRange19 = chronoField5.rangeRefinedBy((java.time.temporal.TemporalAccessor) localTime15);
        java.time.Duration duration21 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration24 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList25 = duration24.getUnits();
        java.time.Duration duration26 = duration21.minus(duration24);
        int int27 = duration21.getNano();
        java.time.Duration duration29 = java.time.Duration.ofMillis((long) 399000000);
        java.time.Duration duration32 = java.time.Duration.ofSeconds((long) 10, 0L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList33 = duration32.getUnits();
        java.time.Duration duration34 = duration29.minus(duration32);
        java.time.Duration duration36 = duration29.plusNanos((long) 722000000);
        java.time.Duration duration38 = duration29.withNanos(413000000);
        int int39 = duration21.compareTo(duration38);
        boolean boolean40 = localTime15.equals((java.lang.Object) duration21);
        org.junit.Assert.assertNotNull(zoneOffset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 747000000 + "'", int4 == 747000000);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField5.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 21L + "'", long6 == 21L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(clock14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(temporalUnitList25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(temporalUnitList33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-413000000) + "'", int39 == (-413000000));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        java.time.Period period1 = java.time.Period.ofDays(245000000);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\ufffd");
        printStream1.println((long) 1024);
        java.io.PrintStream printStream5 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream5.print(true);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        java.time.zone.ZoneRules zoneRules10 = zoneOffset8.getRules();
        java.time.ZonedDateTime zonedDateTime11 = offsetDateTime3.atZoneSameInstant((java.time.ZoneId) zoneOffset8);
        java.time.ZoneId zoneId12 = zonedDateTime11.getZone();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime11.withEarlierOffsetAtOverlap();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime17 = localDateTime14.atOffset(zoneOffset16);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime23 = localDateTime20.atOffset(zoneOffset22);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset22.getRules();
        java.time.ZonedDateTime zonedDateTime25 = offsetDateTime17.atZoneSameInstant((java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime25.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long28 = zonedDateTime25.getLong((java.time.temporal.TemporalField) chronoField27);
        long long29 = zonedDateTime11.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime11.minusSeconds((long) 999999999);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.plusHours((-1L));
        java.util.Set<java.lang.String> strSet34 = java.time.ZoneId.getAvailableZoneIds();
        java.time.Month month35 = java.time.Month.OCTOBER;
        java.time.Month month37 = month35.plus(0L);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime42 = localDateTime39.atOffset(zoneOffset41);
        int int43 = localDateTime38.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime39);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime47 = localDateTime44.atOffset(zoneOffset46);
        int int48 = localDateTime39.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        java.time.temporal.Temporal temporal49 = month37.adjustInto((java.time.temporal.Temporal) localDateTime39);
        boolean boolean50 = strSet34.equals((java.lang.Object) month37);
        java.security.ProtectionDomain[] protectionDomainArray51 = new java.security.ProtectionDomain[] {};
        java.security.AccessControlContext accessControlContext52 = new java.security.AccessControlContext(protectionDomainArray51);
        java.time.LocalDate localDate53 = java.time.LocalDate.MIN;
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = localDate53.query(periodTemporalQuery54);
        boolean boolean56 = accessControlContext52.equals((java.lang.Object) periodTemporalQuery54);
        java.time.Period period57 = month37.query(periodTemporalQuery54);
        java.time.Period period58 = zonedDateTime33.query(periodTemporalQuery54);
        java.time.ZoneId zoneId59 = zonedDateTime33.getZone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneRules10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneRules24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 999999999L + "'", long28 == 999999999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 999999999L + "'", long29 == 999999999L);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + month35 + "' != '" + java.time.Month.OCTOBER + "'", month35.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + month37 + "' != '" + java.time.Month.OCTOBER + "'", month37.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(temporal49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(protectionDomainArray51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(zoneId59);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        boolean boolean4 = file1.canExecute();
        boolean boolean5 = file1.createNewFile();
        boolean boolean6 = file1.canRead();
        long long7 = file1.getTotalSpace();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 364740218880L + "'", long7 == 364740218880L);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap14);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime21 = localDateTime18.atOffset(zoneOffset20);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset20);
        java.time.zone.ZoneRules zoneRules23 = zoneOffset20.getRules();
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.UTC;
        java.time.ZoneId[] zoneIdArray25 = new java.time.ZoneId[] { zoneOffset20, zoneOffset24 };
        java.util.LinkedHashSet<java.time.ZoneId> zoneIdSet26 = new java.util.LinkedHashSet<java.time.ZoneId>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.time.ZoneId>) zoneIdSet26, zoneIdArray25);
        java.util.Spliterator<java.time.ZoneId> zoneIdSpliterator28 = zoneIdSet26.spliterator();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        boolean boolean31 = zoneIdSet26.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet30, filteringMode32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList59);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList73);
        boolean boolean76 = strList59.removeAll((java.util.Collection<java.lang.String>) strList75);
        boolean boolean77 = strList47.retainAll((java.util.Collection<java.lang.String>) strList75);
        java.lang.Object[] objArray78 = strList47.toArray();
        java.lang.String str79 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList47);
        java.lang.String[] strArray81 = new java.lang.String[] { "OptionalInt[10]" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        boolean boolean84 = strList82.isEmpty();
        java.util.ListIterator<java.lang.String> strItor85 = strList82.listIterator();
        java.util.Locale.FilteringMode filteringMode86 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList82, filteringMode86);
        strList87.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(zoneIdArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneIdSpliterator28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strItor85);
        org.junit.Assert.assertTrue("'" + filteringMode86 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode86.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        java.time.Month month0 = java.time.Month.MARCH;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.Month month2 = month1.firstMonthOfQuarter();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = month1.get((java.time.temporal.TemporalField) chronoField3);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.MARCH + "'", month0.equals(java.time.Month.MARCH));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.JANUARY + "'", month1.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.JANUARY + "'", month2.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField3.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap1 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.util.Set<java.time.ZoneId> zoneIdSet2 = zoneIdMap1.keySet();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "(null <no signer certificates>)", "(null <no signer certificates>)", "Minute", "Minute", "(null <no signer certificates>)" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = strList28.removeAll((java.util.Collection<java.lang.String>) strList44);
        boolean boolean46 = strList16.retainAll((java.util.Collection<java.lang.String>) strList44);
        java.io.File file48 = new java.io.File("GBR");
        boolean boolean50 = file48.setWritable(true);
        boolean boolean52 = file48.setWritable(true);
        java.net.URI uRI53 = file48.toURI();
        java.io.File file55 = new java.io.File("GBR");
        boolean boolean57 = file55.setWritable(true);
        java.nio.file.Path path58 = file55.toPath();
        java.nio.file.Path path60 = path58.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI61 = path58.toUri();
        java.net.URI uRI62 = uRI53.relativize(uRI61);
        boolean boolean63 = strList16.equals((java.lang.Object) uRI53);
        boolean boolean64 = zoneIdSet2.retainAll((java.util.Collection<java.lang.String>) strList16);
        java.time.Instant instant66 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant68 = instant66.minusNanos((long) 'a');
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime72 = localDateTime69.atOffset(zoneOffset71);
        java.time.zone.ZoneRules zoneRules73 = zoneOffset71.getRules();
        java.time.ZonedDateTime zonedDateTime74 = java.time.ZonedDateTime.ofInstant(instant66, (java.time.ZoneId) zoneOffset71);
        java.time.ZoneId zoneId75 = zonedDateTime74.getZone();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime76 = zonedDateTime74.toLocalDateTime();
        java.time.ZonedDateTime zonedDateTime78 = zonedDateTime74.minusNanos(31556889832175999L);
        java.time.Period period80 = java.time.Period.ofWeeks((int) (byte) -1);
        java.time.Period period81 = java.time.Period.from((java.time.temporal.TemporalAmount) period80);
        java.time.format.DateTimeFormatter dateTimeFormatter82 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str83 = dateTimeFormatter82.toString();
        boolean boolean84 = period81.equals((java.lang.Object) dateTimeFormatter82);
        java.time.ZonedDateTime zonedDateTime85 = zonedDateTime74.minus((java.time.temporal.TemporalAmount) period81);
        java.time.Instant instant87 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime88 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset90 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime91 = localDateTime88.atOffset(zoneOffset90);
        java.time.Clock clock92 = java.time.Clock.fixed(instant87, (java.time.ZoneId) zoneOffset90);
        java.lang.String str93 = zoneOffset90.getId();
        java.time.LocalDateTime localDateTime94 = java.time.LocalDateTime.now((java.time.ZoneId) zoneOffset90);
        boolean boolean95 = zonedDateTime74.equals((java.lang.Object) localDateTime94);
        int int96 = strList16.lastIndexOf((java.lang.Object) localDateTime94);
        org.junit.Assert.assertNotNull(zoneIdSet2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull("file48.getParent() == null", file48.getParent());
        org.junit.Assert.assertEquals(file48.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(uRI53);
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(path58);
        org.junit.Assert.assertNotNull(path60);
        org.junit.Assert.assertNotNull(uRI61);
        org.junit.Assert.assertNotNull(uRI62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(zoneRules73);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(zoneId75);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime76);
        org.junit.Assert.assertNotNull(zonedDateTime78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)" + "'", str83, "Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2)");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(zonedDateTime85);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(zoneOffset90);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(clock92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Z" + "'", str93, "Z");
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "23:59:59.999999999-18:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer2 = charBuffer1.flip();
        int int3 = charBuffer1.capacity();
        boolean boolean4 = charBuffer1.hasArray();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) (byte) 0);
        java.nio.Buffer buffer7 = charBuffer6.flip();
        java.nio.CharBuffer charBuffer8 = charBuffer6.duplicate();
        java.nio.CharBuffer charBuffer9 = org.apache.commons.lang3.StringUtils.defaultIfBlank(charBuffer1, charBuffer8);
        java.util.stream.IntStream intStream10 = charBuffer9.chars();
        boolean boolean11 = charBuffer9.hasArray();
        java.time.format.DateTimeFormatter dateTimeFormatter12 = java.time.format.DateTimeFormatter.ISO_TIME;
        java.time.format.DecimalStyle decimalStyle13 = dateTimeFormatter12.getDecimalStyle();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.parse((java.lang.CharSequence) charBuffer9, dateTimeFormatter12);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(decimalStyle13);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime4.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime10 = localDateTime7.atOffset(zoneOffset9);
        java.time.zone.ZoneRules zoneRules11 = zoneOffset9.getRules();
        java.time.ZonedDateTime zonedDateTime12 = offsetDateTime4.atZoneSameInstant((java.time.ZoneId) zoneOffset9);
        int int13 = zonedDateTime12.getDayOfMonth();
        int int14 = zonedDateTime12.getMinute();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime12.minusMinutes((long) 31);
        java.time.LocalDateTime localDateTime17 = isoChronology0.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime12);
        java.lang.String str18 = isoChronology0.toString();
        java.lang.String str19 = isoChronology0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate22 = isoChronology0.dateYearDay((-413000000), 4096);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 4096");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneRules11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISO" + "'", str19, "ISO");
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setExecutable(true);
        boolean boolean4 = file1.canExecute();
        boolean boolean5 = file1.canExecute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime26 = localDateTime23.atOffset(zoneOffset25);
        int int27 = localDateTime22.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime23);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime31 = localDateTime28.atOffset(zoneOffset30);
        int int32 = localDateTime23.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        boolean boolean33 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.Temporal temporal34 = localDateTime6.adjustInto((java.time.temporal.Temporal) localDateTime12);
        java.time.LocalDateTime localDateTime36 = localDateTime6.minusWeeks((long) (short) 0);
        java.time.DayOfWeek dayOfWeek37 = localDateTime6.getDayOfWeek();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime41 = localDateTime38.atOffset(zoneOffset40);
        java.time.OffsetDateTime offsetDateTime43 = offsetDateTime41.withSecond((int) (byte) 0);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime43.withMinute(10);
        java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules> zoneIdMap47 = new java.util.Hashtable<java.time.ZoneId, java.time.zone.ZoneRules>(100);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime52 = localDateTime49.atOffset(zoneOffset51);
        java.time.zone.ZoneRules zoneRules53 = zoneOffset51.getRules();
        java.time.zone.ZoneRules zoneRules54 = zoneIdMap47.getOrDefault((java.lang.Object) 1.0d, zoneRules53);
        java.lang.String str55 = zoneRules53.toString();
        java.util.List<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList56 = zoneRules53.getTransitions();
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime61 = localDateTime58.atOffset(zoneOffset60);
        int int62 = localDateTime57.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime58);
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime66 = localDateTime63.atOffset(zoneOffset65);
        int int67 = localDateTime58.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime63);
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime72 = localDateTime69.atOffset(zoneOffset71);
        int int73 = localDateTime68.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime69);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime77 = localDateTime74.atOffset(zoneOffset76);
        int int78 = localDateTime69.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime74);
        boolean boolean79 = localDateTime58.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime74);
        java.time.format.DateTimeFormatter dateTimeFormatter80 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.lang.String str81 = localDateTime74.format(dateTimeFormatter80);
        java.time.ZoneOffset zoneOffset82 = zoneRules53.getOffset(localDateTime74);
        java.time.OffsetDateTime offsetDateTime83 = offsetDateTime45.withOffsetSameLocal(zoneOffset82);
        java.time.OffsetDateTime offsetDateTime85 = offsetDateTime83.plusMinutes((long) ' ');
        java.time.temporal.Temporal temporal86 = dayOfWeek37.adjustInto((java.time.temporal.Temporal) offsetDateTime85);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + dayOfWeek37 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek37.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(zoneRules53);
        org.junit.Assert.assertNotNull(zoneRules54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ZoneRules[currentStandardOffset=Z]" + "'", str55, "ZoneRules[currentStandardOffset=Z]");
        org.junit.Assert.assertNotNull(zoneOffsetTransitionList56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+999999999-12-31T23:59:59.999999999" + "'", str81, "+999999999-12-31T23:59:59.999999999");
        org.junit.Assert.assertNotNull(zoneOffset82);
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertNotNull(offsetDateTime85);
        org.junit.Assert.assertNotNull(temporal86);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime3 = localDateTime0.atOffset(zoneOffset2);
        java.time.OffsetDateTime offsetDateTime5 = offsetDateTime3.withSecond((int) (byte) 0);
        java.time.LocalDate localDate6 = offsetDateTime3.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.minusWeeks((long) 834000000);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime12.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime18 = localDateTime15.atOffset(zoneOffset17);
        java.time.zone.ZoneRules zoneRules19 = zoneOffset17.getRules();
        java.time.ZonedDateTime zonedDateTime20 = offsetDateTime12.atZoneSameInstant((java.time.ZoneId) zoneOffset17);
        java.time.LocalTime localTime21 = java.time.LocalTime.now((java.time.ZoneId) zoneOffset17);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime25 = localDateTime22.atOffset(zoneOffset24);
        java.time.zone.ZoneRules zoneRules26 = zoneOffset24.getRules();
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.of(localDate6, localTime21, (java.time.ZoneId) zoneOffset24);
        java.time.OffsetTime offsetTime28 = java.time.OffsetTime.now();
        java.time.OffsetTime offsetTime30 = offsetTime28.withSecond(16);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.Instant instant34 = instant32.minusNanos((long) 'a');
        java.nio.file.attribute.FileTime fileTime35 = java.nio.file.attribute.FileTime.from(instant32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = instant32.query(periodTemporalQuery36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        boolean boolean40 = instant32.isSupported(temporalUnit39);
        boolean boolean41 = offsetTime28.isSupported(temporalUnit39);
        java.time.OffsetDateTime offsetDateTime42 = localDate6.atTime(offsetTime28);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime46 = localDateTime43.atOffset(zoneOffset45);
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime46.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime46.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime54 = localDateTime51.atOffset(zoneOffset53);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime54.withSecond((int) (byte) 0);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.OffsetDateTime offsetDateTime59 = offsetDateTime54.with((java.time.temporal.TemporalField) chronoField57, (long) 31);
        boolean boolean60 = offsetDateTime50.isSupported((java.time.temporal.TemporalField) chronoField57);
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime64 = localDateTime61.atOffset(zoneOffset63);
        java.time.OffsetDateTime offsetDateTime66 = offsetDateTime64.minusSeconds((long) (byte) 0);
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime70 = localDateTime67.atOffset(zoneOffset69);
        java.time.zone.ZoneRules zoneRules71 = zoneOffset69.getRules();
        java.time.ZonedDateTime zonedDateTime72 = offsetDateTime64.atZoneSameInstant((java.time.ZoneId) zoneOffset69);
        java.time.ZonedDateTime zonedDateTime73 = zonedDateTime72.withLaterOffsetAtOverlap();
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        long long75 = zonedDateTime72.getLong((java.time.temporal.TemporalField) chronoField74);
        int int76 = offsetDateTime50.get((java.time.temporal.TemporalField) chronoField74);
        int int77 = offsetTime28.get((java.time.temporal.TemporalField) chronoField74);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(zoneRules19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zoneRules26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField38.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertNotNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertNotNull(zoneRules71);
        org.junit.Assert.assertNotNull(zonedDateTime72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField74.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 999999999L + "'", long75 == 999999999L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 999999999 + "'", int76 == 999999999);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 825000000 + "'", int77 == 825000000);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        java.util.function.IntUnaryOperator intUnaryOperator1 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator2 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator3 = intUnaryOperator1.compose(intUnaryOperator2);
        int int5 = intUnaryOperator3.applyAsInt(385000000);
        java.util.function.IntUnaryOperator intUnaryOperator6 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator7 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator8 = intUnaryOperator6.compose(intUnaryOperator7);
        java.util.function.IntUnaryOperator intUnaryOperator9 = intUnaryOperator3.andThen(intUnaryOperator7);
        java.util.function.IntUnaryOperator intUnaryOperator10 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator11 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator12 = intUnaryOperator10.compose(intUnaryOperator11);
        int int14 = intUnaryOperator12.applyAsInt(385000000);
        java.util.function.IntUnaryOperator intUnaryOperator15 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator16 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator17 = intUnaryOperator15.compose(intUnaryOperator16);
        java.util.function.IntUnaryOperator intUnaryOperator18 = intUnaryOperator12.andThen(intUnaryOperator16);
        java.util.function.IntUnaryOperator intUnaryOperator19 = intUnaryOperator9.compose(intUnaryOperator18);
        java.util.stream.IntStream intStream20 = java.util.stream.IntStream.iterate(1024, intUnaryOperator19);
        org.junit.Assert.assertNotNull(intUnaryOperator1);
        org.junit.Assert.assertNotNull(intUnaryOperator2);
        org.junit.Assert.assertNotNull(intUnaryOperator3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 385000000 + "'", int5 == 385000000);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertNotNull(intUnaryOperator7);
        org.junit.Assert.assertNotNull(intUnaryOperator8);
        org.junit.Assert.assertNotNull(intUnaryOperator9);
        org.junit.Assert.assertNotNull(intUnaryOperator10);
        org.junit.Assert.assertNotNull(intUnaryOperator11);
        org.junit.Assert.assertNotNull(intUnaryOperator12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 385000000 + "'", int14 == 385000000);
        org.junit.Assert.assertNotNull(intUnaryOperator15);
        org.junit.Assert.assertNotNull(intUnaryOperator16);
        org.junit.Assert.assertNotNull(intUnaryOperator17);
        org.junit.Assert.assertNotNull(intUnaryOperator18);
        org.junit.Assert.assertNotNull(intUnaryOperator19);
        org.junit.Assert.assertNotNull(intStream20);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(0);
        long[] longArray2 = longBuffer1.array();
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.wrap(longArray2);
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longBuffer3);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.OptionalLong optionalLong1 = longStream0.findAny();
        java.util.stream.LongStream longStream2 = longStream0.sequential();
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(optionalLong1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        java.nio.channels.FileChannel.MapMode mapMode0 = java.nio.channels.FileChannel.MapMode.PRIVATE;
        java.lang.String str1 = mapMode0.toString();
        org.junit.Assert.assertNotNull(mapMode0);
        org.junit.Assert.assertEquals(mapMode0.toString(), "PRIVATE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PRIVATE" + "'", str1, "PRIVATE");
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        int int1 = isoEra0.getValue();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime4 = localDateTime2.plusDays((long) (-7));
        java.time.temporal.Temporal temporal5 = isoEra0.adjustInto((java.time.temporal.Temporal) localDateTime2);
        java.time.LocalTime localTime6 = java.time.LocalTime.now();
        int int7 = localTime6.getNano();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.MINUTE_OF_HOUR;
        long long9 = localTime6.getLong((java.time.temporal.TemporalField) chronoField8);
        boolean boolean10 = chronoField8.isTimeBased();
        boolean boolean11 = chronoField8.isTimeBased();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = isoEra0.get((java.time.temporal.TemporalField) chronoField8);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MinuteOfHour");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(temporal5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 689000000 + "'", int7 == 689000000);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_HOUR + "'", chronoField8.equals(java.time.temporal.ChronoField.MINUTE_OF_HOUR));
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 21L + "'", long9 == 21L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip((long) (byte) 10);
        java.util.function.DoubleToIntFunction doubleToIntFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = doubleStream0.mapToInt(doubleToIntFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption7 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption8 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption9 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray10 = new java.nio.file.OpenOption[] { linkOption7, linkOption8, linkOption9 };
        java.nio.channels.FileChannel fileChannel11 = java.nio.channels.FileChannel.open(path4, openOptionArray10);
        fileChannel11.close();
        boolean boolean13 = fileChannel11.isOpen();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileChannel fileChannel15 = fileChannel11.truncate((-7981810L));
            org.junit.Assert.fail("Expected exception of type java.nio.channels.ClosedChannelException; message: null");
        } catch (java.nio.channels.ClosedChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertTrue("'" + linkOption7 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption7.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption8 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption8.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption9 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption9.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray10);
        org.junit.Assert.assertNotNull(fileChannel11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.io.File file8 = new java.io.File("GBR");
        boolean boolean10 = file8.setWritable(true);
        java.nio.file.Path path11 = file8.toPath();
        java.nio.file.Path path13 = path11.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI14 = path11.toUri();
        boolean boolean16 = path11.startsWith("/experiment/GBR/");
        java.io.File file18 = new java.io.File("GBR");
        boolean boolean20 = file18.setWritable(true);
        java.nio.file.Path path21 = file18.toPath();
        java.nio.file.Path path23 = path21.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption24 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption25 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray26 = new java.nio.file.LinkOption[] { linkOption24, linkOption25 };
        java.nio.file.Path path27 = path21.toRealPath(linkOptionArray26);
        java.nio.file.Path path28 = path11.resolveSibling(path21);
        int int29 = path4.compareTo(path28);
        java.net.URI uRI30 = path28.toUri();
        java.nio.file.Path path31 = path28.getRoot();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNotNull(path23);
        org.junit.Assert.assertTrue("'" + linkOption24 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption24.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption25 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption25.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray26);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(uRI30);
        org.junit.Assert.assertNull(path31);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        java.io.File file1 = new java.io.File("GBR");
        boolean boolean3 = file1.setWritable(true);
        java.nio.file.Path path4 = file1.toPath();
        java.nio.file.Path path6 = path4.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.net.URI uRI7 = path4.toUri();
        boolean boolean9 = path4.startsWith("/experiment/GBR/");
        java.io.File file11 = new java.io.File("GBR");
        boolean boolean13 = file11.setWritable(true);
        java.nio.file.Path path14 = file11.toPath();
        java.nio.file.Path path16 = path14.resolveSibling("ZoneRules[currentStandardOffset=Z]");
        java.nio.file.LinkOption linkOption17 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption linkOption18 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.LinkOption[] linkOptionArray19 = new java.nio.file.LinkOption[] { linkOption17, linkOption18 };
        java.nio.file.Path path20 = path14.toRealPath(linkOptionArray19);
        java.nio.file.Path path21 = path4.resolveSibling(path14);
        java.util.Iterator<java.nio.file.Path> pathItor22 = path21.iterator();
        java.nio.file.Path path23 = path21.getParent();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(path4);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "GBR");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertTrue("'" + linkOption17 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption17.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertTrue("'" + linkOption18 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption18.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(linkOptionArray19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNotNull(pathItor22);
        org.junit.Assert.assertNull(path23);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        char char1 = org.apache.commons.lang3.CharUtils.toChar("CHN");
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'C' + "'", char1 == 'C');
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime4 = localDateTime1.atOffset(zoneOffset3);
        int int5 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime9 = localDateTime6.atOffset(zoneOffset8);
        int int10 = localDateTime1.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime15 = localDateTime12.atOffset(zoneOffset14);
        int int16 = localDateTime11.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime20 = localDateTime17.atOffset(zoneOffset19);
        int int21 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        boolean boolean22 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.DayOfWeek dayOfWeek23 = localDateTime17.getDayOfWeek();
        java.time.format.TextStyle textStyle24 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        java.lang.String str29 = dayOfWeek23.getDisplayName(textStyle24, locale25);
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime34 = localDateTime31.atOffset(zoneOffset33);
        int int35 = localDateTime30.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime39 = localDateTime36.atOffset(zoneOffset38);
        int int40 = localDateTime31.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.MAX;
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime45 = localDateTime42.atOffset(zoneOffset44);
        int int46 = localDateTime41.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime50 = localDateTime47.atOffset(zoneOffset49);
        int int51 = localDateTime42.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        boolean boolean52 = localDateTime31.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.DayOfWeek dayOfWeek53 = localDateTime47.getDayOfWeek();
        java.time.format.TextStyle textStyle54 = java.time.format.TextStyle.NARROW_STANDALONE;
        java.util.Locale locale55 = java.util.Locale.UK;
        java.lang.String str56 = locale55.getISO3Country();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.lang.String str58 = locale55.getDisplayScript(locale57);
        java.lang.String str59 = dayOfWeek53.getDisplayName(textStyle54, locale55);
        java.time.format.TextStyle textStyle60 = textStyle54.asStandalone();
        java.util.Locale locale61 = java.util.Locale.CHINA;
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str63 = dayOfWeek23.getDisplayName(textStyle54, locale61);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime68 = localDateTime65.atOffset(zoneOffset67);
        java.time.OffsetDateTime offsetDateTime70 = offsetDateTime68.minusSeconds((long) (byte) 0);
        java.time.OffsetDateTime offsetDateTime72 = offsetDateTime68.minusYears((long) 722000000);
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime79 = localDateTime76.atOffset(zoneOffset78);
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.ofEpochSecond((long) (short) 10, 10, zoneOffset78);
        java.time.temporal.ChronoField chronoField82 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit83 = chronoField82.getBaseUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime84 = localDateTime80.minus((long) (-999999999), temporalUnit83);
        java.lang.String str85 = temporalUnit83.toString();
        java.time.OffsetDateTime offsetDateTime86 = offsetDateTime72.plus((long) (byte) 100, temporalUnit83);
        java.time.OffsetDateTime offsetDateTime88 = offsetDateTime72.plusWeeks((long) '4');
        java.time.temporal.ValueRange valueRange89 = chronoField64.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime88);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange90 = dayOfWeek23.range((java.time.temporal.TemporalField) chronoField64);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MilliOfSecond");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle24 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle24.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GBR" + "'", str26, "GBR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5" + "'", str29, "5");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + dayOfWeek53 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek53.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + textStyle54 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle54.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GBR" + "'", str56, "GBR");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "5" + "'", str59, "5");
        org.junit.Assert.assertTrue("'" + textStyle60 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle60.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u4e94" + "'", str63, "\u4e94");
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField64.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + chronoField82 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField82.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit83 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit83.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Weeks" + "'", str85, "Weeks");
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(valueRange89);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("Hours", "localhost", "java.nio.ByteBufferAsLongBufferB[pos=1 lim=4 cap=4]");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: hours");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        java.time.LocalTime localTime2 = localTime0.plusHours(0L);
        java.time.temporal.TemporalUnit temporalUnit3 = null;
        boolean boolean4 = localTime0.isSupported(temporalUnit3);
        java.time.LocalTime localTime6 = localTime0.plusNanos((long) (byte) 1);
        java.time.LocalTime localTime8 = localTime0.minusHours((long) 5);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset0.contains(charset1);
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset0.newEncoder();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.lang.String str5 = locale4.getISO3Language();
        java.lang.String str6 = charset0.displayName(locale4);
        java.time.Instant instant8 = java.time.Instant.ofEpochSecond((long) ' ');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours((int) (short) 0);
        java.time.OffsetDateTime offsetDateTime12 = localDateTime9.atOffset(zoneOffset11);
        java.time.Clock clock13 = java.time.Clock.fixed(instant8, (java.time.ZoneId) zoneOffset11);
        java.time.LocalTime localTime14 = java.time.LocalTime.now(clock13);
        java.time.Duration duration15 = java.time.Duration.ZERO;
        boolean boolean17 = duration15.equals((java.lang.Object) (short) 0);
        java.time.Duration duration18 = duration15.abs();
        java.time.LocalTime localTime19 = localTime14.plus((java.time.temporal.TemporalAmount) duration18);
        java.nio.charset.Charset charset20 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        boolean boolean22 = charset20.contains(charset21);
        boolean boolean23 = duration18.equals((java.lang.Object) charset20);
        boolean boolean24 = charset0.contains(charset20);
        java.nio.charset.CharsetEncoder charsetEncoder25 = charset0.newEncoder();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "US-ASCII" + "'", str6, "US-ASCII");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charsetEncoder25);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "OptionalLong.empty");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(64);
        boolean boolean2 = shortBuffer1.hasArray();
        short[] shortArray8 = new short[] { (byte) 100, (byte) 0, (short) 1, (short) 10, (byte) 10 };
        java.nio.ShortBuffer shortBuffer9 = java.nio.ShortBuffer.wrap(shortArray8);
        java.nio.ShortBuffer shortBuffer10 = java.nio.ShortBuffer.wrap(shortArray8);
        java.nio.ShortBuffer shortBuffer11 = shortBuffer1.put(shortBuffer10);
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[100, 0, 1, 10, 10]");
        org.junit.Assert.assertNotNull(shortBuffer9);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(shortBuffer11);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest26 {

    public static boolean debug = false;

    @Test
    public void test13001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13001");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.lang.Object[] objArray6 = charSet5.toArray();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        boolean boolean9 = charSet5.retainAll((java.util.Collection<java.lang.Character>) charSet8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        int int14 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime11.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.minusWeeks((int) (short) 1);
        boolean boolean19 = charSet5.remove((java.lang.Object) localDateTime18);
        boolean boolean20 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfDay(99);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.minusWeeks(56);
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy(62026660);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test13002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13002");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int28 = dateTimeZone26.getOffsetFromLocal(4518471413L);
        boolean boolean30 = dateTimeZone26.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology31 = zonedChronology12.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField33 = zonedChronology12.weeks();
        long long36 = durationField33.getMillis(61733, 360001028L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 37336118400000L + "'", long36 == 37336118400000L);
    }

    @Test
    public void test13003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13003");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-01-07T18:08:31.785");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test13004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13004");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 1645427337785L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(125);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMinuteOfHour(36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test13005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13005");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        org.joda.time.DurationField durationField39 = zonedChronology38.weeks();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology38.year();
        org.joda.time.DateTimeZone dateTimeZone41 = zonedChronology38.getZone();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology38.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone43 = zonedChronology38.getZone();
        java.lang.String str45 = dateTimeZone43.getShortName(32L);
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology13, dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology13.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test13006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13006");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = dateTimeFieldType17.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType17.getField(chronology24);
        java.lang.String str26 = dateTimeField25.getName();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getDisplayLanguage();
        java.lang.String str35 = locale33.getISO3Country();
        java.lang.String str36 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, 2, locale33);
        int int38 = dateTimeField25.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        boolean boolean41 = dateTimeFieldType39.isSupported(chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks(0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType39.getField(chronology46);
        java.lang.String str48 = dateTimeField47.getName();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.lang.String str57 = locale55.getISO3Country();
        java.lang.String str58 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime52, 2, locale55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime52.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plus(readableDuration61);
        int[] intArray67 = new int[] { 0, 292278993, 10, 'a' };
        int int68 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDateTime62, intArray67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone71);
        int int73 = localDateTime70.compareTo((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDateTime70.toDateTime(readableInstant74);
        boolean boolean77 = dateTime75.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime78 = localDateTime62.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.LocalDateTime.Property property79 = localDateTime62.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime62.minusMinutes(1389);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime62.minusWeeks(625);
        int[] intArray84 = null;
        int int85 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDateTime83, intArray84);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "millisOfSecond" + "'", str26, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u65e5\u6587" + "'", str34, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2" + "'", str36, "2");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 999 + "'", int38 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "millisOfSecond" + "'", str48, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u6587" + "'", str56, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2" + "'", str58, "2");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test13007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13007");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withField(dateTimeFieldType4, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        long long10 = property9.remainder();
        int int11 = property9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = localDateTime12.get(dateTimeFieldType13);
        int int15 = localDateTime1.indexOf(dateTimeFieldType13);
        org.joda.time.Chronology chronology16 = localDateTime1.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime1.minus(readableDuration17);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.monthOfYear();
        int int21 = property20.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4555033389L + "'", long10 == 4555033389L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 17 + "'", int14 == 17);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:17:13.389" + "'", str19, "2022-02-22T17:17:13.389");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
    }

    @Test
    public void test13008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13008");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType23.getField(chronology30);
        java.lang.String str32 = dateTimeField31.getName();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 2, locale39);
        int int44 = dateTimeField31.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = dateTimeFieldType45.isSupported(chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType45.getField(chronology52);
        java.lang.String str54 = dateTimeField53.getName();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.lang.String str63 = locale61.getISO3Country();
        java.lang.String str64 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, 2, locale61);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plus(readableDuration67);
        int[] intArray73 = new int[] { 0, 292278993, 10, 'a' };
        int int74 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68, intArray73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        int int79 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime76.toDateTime(readableInstant80);
        boolean boolean83 = dateTime81.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime84 = localDateTime68.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        long long86 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime68, 10L);
        org.joda.time.DateTimeField dateTimeField87 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField88 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField89 = zonedChronology12.clockhourOfHalfday();
        java.lang.String str90 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField91 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField92 = zonedChronology12.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u6587" + "'", str40, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 999 + "'", int44 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "millisOfSecond" + "'", str54, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u65e5\u6587" + "'", str62, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2" + "'", str64, "2");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645427833419L + "'", long86 == 1645427833419L);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str90, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
    }

    @Test
    public void test13009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13009");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = zonedChronology12.add(readablePeriod15, (long) 360000000, (int) 'a');
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField19.set((long) 76319978, 203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 203 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000000L + "'", long18 == 360000000L);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test13010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13010");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        java.lang.String str17 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfWeek();
        long long21 = dateTimeField19.roundHalfEven((long) 444);
        java.lang.String str22 = dateTimeField19.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str17, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-36000000L) + "'", long21 == (-36000000L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[dayOfWeek]" + "'", str22, "DateTimeField[dayOfWeek]");
    }

    @Test
    public void test13011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13011");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        int int4 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime5.get(dateTimeFieldType6);
        int int8 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.year();
        java.lang.String str10 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4555033575L + "'", long3 == 4555033575L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "292278993" + "'", str10, "292278993");
    }

    @Test
    public void test13012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13012");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DurationField durationField30 = zonedChronology12.halfdays();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test13013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13013");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str25 = dateTimeZone23.getShortName((long) 10);
        java.lang.String str26 = dateTimeZone23.getID();
        long long29 = dateTimeZone23.convertLocalToUTC((long) (short) 1, false);
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale34 = builder33.build();
        java.lang.String str35 = dateTimeZone23.getName((long) 749, locale34);
        java.util.TimeZone timeZone36 = dateTimeZone23.toTimeZone();
        org.joda.time.Chronology chronology37 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology12.era();
        int int42 = dateTimeField40.getMinimumValue((long) 835);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-35999999L) + "'", long29 == (-35999999L));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test13014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13014");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        long long14 = chronology7.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = chronology7.minuteOfDay();
        long long17 = dateTimeField15.roundFloor((long) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        boolean boolean20 = dateTimeFieldType18.isSupported(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType18.getField(chronology25);
        java.lang.String str27 = dateTimeField26.getName();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.lang.String str36 = locale34.getISO3Country();
        java.lang.String str37 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, 2, locale34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime31.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withMinuteOfHour((int) '#');
        java.util.Date date42 = localDateTime39.toDate();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.minusSeconds(749);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = dateTimeFieldType45.isSupported(chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType45.getField(chronology52);
        java.lang.String str54 = dateTimeField53.getName();
        org.joda.time.ReadablePartial readablePartial55 = null;
        int[] intArray59 = new int[] { (short) -1, (byte) 10, ' ' };
        int int60 = dateTimeField53.getMaximumValue(readablePartial55, intArray59);
        int int61 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44, intArray59);
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleKeys();
        boolean boolean65 = localDateTime44.equals((java.lang.Object) locale62);
        java.lang.String str66 = locale62.getISO3Country();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 70001L + "'", long14 == 70001L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "millisOfSecond" + "'", str27, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u6587" + "'", str35, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2" + "'", str37, "2");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Mon Feb 21 17:17:13 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "millisOfSecond" + "'", str54, "millisOfSecond");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 32]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 999 + "'", int60 == 999);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u65e5\u6587" + "'", str63, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test13015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13015");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType23.getField(chronology30);
        java.lang.String str32 = dateTimeField31.getName();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 2, locale39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime36.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime36.withYearOfEra((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withDurationAdded(readableDuration47, (int) ' ');
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.minusMillis((int) (short) 1);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.util.Locale locale55 = locale52.stripExtensions();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = locale52.getDisplayCountry(locale56);
        java.lang.String str60 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime51, locale56);
        java.util.Locale.setDefault(locale56);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u65e5\u6587" + "'", str40, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "17" + "'", str60, "17");
    }

    @Test
    public void test13016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13016");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DurationField durationField24 = zonedChronology12.weeks();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology12.add(readablePeriod25, (long) 12, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField31 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.secondOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 12L + "'", long28 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test13017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13017");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.dayOfYear();
        org.joda.time.DurationField durationField23 = zonedChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology13.yearOfCentury();
        org.joda.time.DurationField durationField27 = zonedChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(4295463084L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology13.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test13018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13018");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.yearOfCentury();
        org.joda.time.DurationField durationField32 = zonedChronology12.years();
        org.joda.time.DurationField durationField33 = zonedChronology12.seconds();
        int int36 = durationField33.getDifference(1645514019562L, 1649945747136L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-4431727) + "'", int36 == (-4431727));
    }

    @Test
    public void test13019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13019");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DurationField durationField22 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.year();
        org.joda.time.DurationField durationField24 = zonedChronology12.millis();
        org.joda.time.DurationField durationField25 = zonedChronology12.years();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test13020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13020");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4518470650L);
        java.util.TimeZone timeZone19 = dateTimeZone11.toTimeZone();
        boolean boolean20 = timeZone19.observesDaylightTime();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        timeZone22.setRawOffset((int) (short) -1);
        java.lang.String str26 = timeZone22.getID();
        int int27 = timeZone22.getRawOffset();
        boolean boolean28 = timeZone19.hasSameRules(timeZone22);
        java.time.ZoneId zoneId29 = timeZone19.toZoneId();
        java.lang.String str30 = timeZone19.getID();
        int int32 = timeZone19.getOffset(356L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        long long36 = dateTimeZone33.convertLocalToUTC((-56834006399903L), true);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT" + "'", str26, "GMT");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GMT+10:00" + "'", str30, "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 36000000 + "'", int32 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-56834042399903L) + "'", long36 == (-56834042399903L));
    }

    @Test
    public void test13021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13021");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.minusWeeks(1389);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekyear(61853971);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str36 = dateTimeZone34.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone34);
        boolean boolean39 = zonedChronology37.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withHourOfDay((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = localDateTime44.getFieldType(0);
        boolean boolean47 = localDateTime22.isSupported(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test13022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13022");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("seconds");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test13023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13023");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str5 = dateTimeZone3.getShortName((long) 10);
        java.lang.String str6 = dateTimeZone3.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 9, dateTimeZone3);
        java.util.TimeZone timeZone9 = dateTimeZone3.toTimeZone();
        boolean boolean10 = timeZone9.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13024");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.days();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone11);
        org.joda.time.DurationField durationField15 = zonedChronology14.weeks();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology14.year();
        org.joda.time.DurationField durationField17 = zonedChronology14.months();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str22 = dateTimeZone20.getShortName((long) 10);
        java.lang.String str23 = dateTimeZone20.getID();
        long long26 = dateTimeZone20.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int29 = dateTimeZone20.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology14, dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology14.weekyear();
        boolean boolean34 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology14);
        java.lang.String str35 = dateTimeFieldType0.toString();
        java.lang.String str36 = dateTimeFieldType0.toString();
        java.lang.String str37 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "millisOfSecond" + "'", str1, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-35999999L) + "'", long26 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "millisOfSecond" + "'", str35, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfSecond" + "'", str36, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "millisOfSecond" + "'", str37, "millisOfSecond");
    }

    @Test
    public void test13025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13025");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.minuteOfHour();
        long long22 = zonedChronology12.add(1645391275084L, (long) 61678279, 21);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1646686518943L + "'", long22 == 1646686518943L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test13026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13026");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("292278993-01-01T17:12:30.953");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=292278993-01-01t17:12:30.953");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13027");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology12.getZone();
        java.lang.String str19 = dateTimeZone17.getShortName(1224780789L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
    }

    @Test
    public void test13028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13028");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.addUnicodeLocaleAttribute("seconds");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder14 = builder10.setExtension('u', "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test13029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13029");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test13030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13030");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        int int10 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime(readableInstant11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusWeeks((int) (short) 1);
        boolean boolean15 = charSet1.remove((java.lang.Object) localDateTime14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.year();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime25.toDateTime(readableInstant27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYear();
        int int31 = localDateTime29.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        int int33 = localDateTime29.get(dateTimeFieldType32);
        java.lang.String str34 = dateTimeFieldType32.getName();
        int int35 = dateTime28.get(dateTimeFieldType32);
        int int36 = property18.getDifference((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.year();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime43.toDateTime(readableInstant45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        boolean boolean50 = dateTimeFieldType48.isSupported(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType48.getField(chronology55);
        org.joda.time.DurationField durationField57 = durationFieldType47.getField(chronology55);
        org.joda.time.DurationField durationField58 = chronology55.weeks();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = dateTimeField59.getType();
        boolean boolean61 = dateTime46.isSupported(dateTimeFieldType60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusWeeks(0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.year();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime68.toDateTime(readableInstant70);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology74 = null;
        boolean boolean75 = dateTimeFieldType73.isSupported(chronology74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusWeeks(0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType73.getField(chronology80);
        org.joda.time.DurationField durationField82 = durationFieldType72.getField(chronology80);
        org.joda.time.DurationField durationField83 = chronology80.weeks();
        org.joda.time.DateTimeField dateTimeField84 = chronology80.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = dateTimeField84.getType();
        boolean boolean86 = dateTime71.isSupported(dateTimeFieldType85);
        org.joda.time.Chronology chronology87 = dateTime71.getChronology();
        boolean boolean88 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean89 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime46);
        long long90 = dateTime28.getMillis();
        org.joda.time.ReadableInstant readableInstant91 = null;
        boolean boolean92 = dateTime28.isEqual(readableInstant91);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 17 + "'", int31 == 17);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "year" + "'", str34, "year");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1921 + "'", int36 == 1921);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-59006940165823L) + "'", long90 == (-59006940165823L));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test13031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13031");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField23 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.halfdayOfDay();
        org.joda.time.DurationField durationField25 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test13032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13032");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str14 = dateTimeZone12.getShortName((long) 10);
        java.lang.String str15 = dateTimeZone12.getID();
        long long18 = dateTimeZone12.convertLocalToUTC((long) (short) 1, false);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale23 = builder22.build();
        java.lang.String str24 = dateTimeZone12.getName((long) 749, locale23);
        java.util.TimeZone timeZone25 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology26 = chronology7.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-35999999L) + "'", long18 == (-35999999L));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test13033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13033");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        int int25 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withWeekyear(481);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.withHourOfDay((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        boolean boolean32 = dateTimeFieldType30.isSupported(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType30.getField(chronology37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType30.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.days();
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str51 = dateTimeZone49.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology44, dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology52.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean57 = dateTimeZone55.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology58 = zonedChronology52.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology52.weekyear();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology52.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone64 = zonedChronology52.getZone();
        org.joda.time.DurationField durationField65 = durationFieldType39.getField((org.joda.time.Chronology) zonedChronology52);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology52.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology52.yearOfEra();
        org.joda.time.DurationField durationField68 = zonedChronology52.weekyears();
        org.joda.time.DurationField durationField69 = zonedChronology52.millis();
        boolean boolean70 = localDateTime29.equals((java.lang.Object) durationField69);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test13034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13034");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        int int56 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(readableInstant57);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime45.withWeekyear((int) 'x');
        org.joda.time.LocalDateTime.Property property64 = localDateTime45.dayOfMonth();
        java.util.Locale locale65 = null;
        int int66 = property64.getMaximumTextLength(locale65);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanisch" + "'", str39, "Japanisch");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test13035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13035");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        boolean boolean15 = zonedChronology13.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology13.dayOfYear();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = dateTimeField17.getAsText(7, locale19);
        java.lang.String str23 = nameProvider0.getName(locale19, "f\351vr.", "1027");
        java.lang.String str24 = locale19.getCountry();
        java.lang.String str25 = locale19.getISO3Language();
        java.util.Set<java.lang.Character> charSet26 = locale19.getExtensionKeys();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        int int33 = property31.getMaximumShortTextLength(locale32);
        java.lang.String str34 = locale32.getLanguage();
        java.lang.String str35 = locale32.getDisplayCountry();
        java.lang.String str36 = locale32.getCountry();
        java.lang.String str37 = locale19.getDisplayLanguage(locale32);
        java.lang.String str38 = locale19.getLanguage();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7" + "'", str20, "7");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CN" + "'", str24, "CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese" + "'", str37, "cinese");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
    }

    @Test
    public void test13036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13036");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readableDuration22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.weekyear();
        int int25 = localDateTime21.getSecondOfMinute();
        int int26 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.withMillisOfSecond(999);
        int int29 = localDateTime28.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
    }

    @Test
    public void test13037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13037");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        int int5 = localDateTime3.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withMillisOfDay(420);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int13 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime10.toDateTime(readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        int int20 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime17.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        int int27 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property29 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime10.plusHours(100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime10.minusWeeks(407);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime10.minusDays(61962160);
        boolean boolean37 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime10.minus(readablePeriod38);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test13038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13038");
        java.util.Locale locale1 = new java.util.Locale("");
        java.lang.String str3 = locale1.getExtension('u');
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str15 = dateTimeZone13.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, dateTimeZone13);
        org.joda.time.DurationField durationField17 = zonedChronology16.weeks();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology16.year();
        org.joda.time.DurationField durationField19 = zonedChronology16.months();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str24 = dateTimeZone22.getShortName((long) 10);
        java.lang.String str25 = dateTimeZone22.getID();
        long long28 = dateTimeZone22.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        int int31 = dateTimeZone22.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology16, dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.clockhourOfDay();
        long long37 = dateTimeField34.add(1876078097L, 8);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.yearOfEra();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        org.joda.time.LocalDateTime localDateTime44 = property41.addToCopy((long) (byte) 0);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime44, locale45);
        java.lang.String str48 = locale45.getDisplayLanguage();
        java.lang.String str49 = locale1.getDisplayLanguage(locale45);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-35999999L) + "'", long28 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1904878097L + "'", long37 == 1904878097L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "17" + "'", str47, "17");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Deutsch" + "'", str48, "Deutsch");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test13039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13039");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(433);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(1645427309334L, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str34 = dateTimeZone32.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance(chronology27, dateTimeZone32);
        boolean boolean37 = zonedChronology35.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology35.hourOfDay();
        org.joda.time.DurationField durationField39 = zonedChronology35.hours();
        org.joda.time.DurationField durationField40 = zonedChronology35.centuries();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology35.year();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet46 = locale44.getUnicodeLocaleKeys();
        java.util.Locale locale47 = locale44.stripExtensions();
        long long48 = dateTimeField41.set(1645427281857L, "1", locale47);
        java.lang.String str49 = locale47.getDisplayVariant();
        java.lang.String str50 = dateTimeZone20.getShortName(0L, locale47);
        org.joda.time.Chronology chronology51 = zonedChronology12.withZone(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Japanisch" + "'", str45, "Japanisch");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-62131164718143L) + "'", long48 == (-62131164718143L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.433" + "'", str50, "+00:00:00.433");
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test13040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13040");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        int int6 = localDateTime3.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plus(readablePeriod7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        int int11 = property9.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test13041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13041");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str14 = dateTimeZone12.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean20 = dateTimeZone18.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology21 = zonedChronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology15.dayOfYear();
        org.joda.time.DurationField durationField25 = zonedChronology15.halfdays();
        boolean boolean26 = durationFieldType2.isSupported((org.joda.time.Chronology) zonedChronology15);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology15.year();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology15.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test13042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13042");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        timeZone4.setRawOffset((int) (short) -1);
        boolean boolean8 = timeZone1.hasSameRules(timeZone4);
        boolean boolean9 = timeZone4.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology33 = zonedChronology27.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology27.weekyear();
        org.joda.time.DurationField durationField37 = zonedChronology27.years();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology43 = zonedChronology27.withZone(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 12, (org.joda.time.Chronology) zonedChronology27);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology27.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology27.weekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        int int52 = localDateTime49.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withField(dateTimeFieldType53, (int) '#');
        org.joda.time.LocalDateTime.Property property56 = localDateTime49.year();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.parse("2022-02-22T17:08:21.910");
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.weekyear();
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("593");
        int int62 = property59.getMaximumShortTextLength(locale61);
        java.lang.String str63 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, locale61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = timeZone4.getDisplayName(true, 5, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022" + "'", str63, "2022");
    }

    @Test
    public void test13043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13043");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        long long20 = zonedChronology12.add(59940000L, 69999L, 10);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusSeconds((int) (short) -1);
        long long31 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime29, (long) 53);
        org.joda.time.DurationField durationField32 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField35 = zonedChronology12.years();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 60639990L + "'", long20 == 60639990L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514233621L + "'", long31 == 1645514233621L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test13044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13044");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology28 = zonedChronology12.withZone(dateTimeZone25);
        java.util.TimeZone timeZone29 = dateTimeZone25.toTimeZone();
        int int30 = timeZone29.getRawOffset();
        java.util.TimeZone.setDefault(timeZone29);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 360000000 + "'", int30 == 360000000);
    }

    @Test
    public void test13045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13045");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DurationField durationField23 = zonedChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology29 = zonedChronology13.withZone(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 12, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology13.weekOfWeekyear();
        long long35 = dateTimeField33.roundHalfEven((-61152893398088L));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-61152832800000L) + "'", long35 == (-61152832800000L));
    }

    @Test
    public void test13046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13046");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime25.toDateTime(readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        int int35 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime32.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        int int42 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property44 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusHours(2022);
        int int49 = property44.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        long long51 = zonedChronology13.set((org.joda.time.ReadablePartial) localDateTime45, (long) 38);
        int int52 = localDateTime45.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645514234703L + "'", long51 == 1645514234703L);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 17 + "'", int52 == 17);
    }

    @Test
    public void test13047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13047");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField19 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        int int23 = dateTimeField20.getDifference(1645514066827L, (long) 61893610);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19044 + "'", int23 == 19044);
    }

    @Test
    public void test13048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13048");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        java.lang.String str17 = dateTimeZone15.getName(1876077118L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone15);
        java.util.TimeZone timeZone19 = dateTimeZone15.toTimeZone();
        java.util.TimeZone timeZone20 = dateTimeZone15.toTimeZone();
        long long22 = dateTimeZone15.nextTransition((long) 582);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 582L + "'", long22 == 582L);
    }

    @Test
    public void test13049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13049");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.monthOfYear();
        java.lang.String str24 = zonedChronology13.toString();
        org.joda.time.DurationField durationField25 = zonedChronology13.years();
        long long27 = durationField25.getMillis(1970);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str24, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 62167195440000L + "'", long27 == 62167195440000L);
    }

    @Test
    public void test13050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13050");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str17 = dateTimeZone15.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology18.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology24 = zonedChronology18.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology18.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = dateTimeField26.getLeapDurationField();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.util.Locale locale31 = locale28.stripExtensions();
        int int32 = dateTimeField26.getMaximumShortTextLength(locale31);
        java.lang.String str33 = dateTimeZone2.getName(4554472850L, locale31);
        java.lang.String str34 = dateTimeZone2.toString();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 9, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekyear(401);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.secondOfMinute();
        java.lang.String str40 = property39.getAsShortText();
        org.joda.time.LocalDateTime localDateTime41 = property39.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks(12);
        int int44 = localDateTime43.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.100" + "'", str33, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.100" + "'", str34, "+00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 109 + "'", int44 == 109);
    }

    @Test
    public void test13051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13051");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(913);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test13052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13052");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int3 = dateTimeZone1.getOffsetFromLocal(4518471413L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long6 = dateTimeZone1.nextTransition(60639990L);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category8, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category12, locale13);
        java.lang.String str15 = locale13.toLanguageTag();
        java.lang.String str16 = locale9.getDisplayLanguage(locale13);
        java.lang.String str17 = dateTimeZone1.getName(0L, locale9);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks(0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DurationField durationField24 = chronology22.minutes();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str29 = dateTimeZone27.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology22, dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology36 = zonedChronology30.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology30.year();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology30.dayOfYear();
        org.joda.time.Chronology chronology40 = zonedChronology30.withUTC();
        org.joda.time.DurationField durationField41 = zonedChronology30.seconds();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology30.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfEra();
        int int46 = property45.getMinimumValue();
        java.lang.String str47 = property45.getAsText();
        org.joda.time.LocalDateTime localDateTime48 = property45.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMinutes(100);
        int int51 = localDateTime50.getEra();
        long long53 = zonedChronology30.set((org.joda.time.ReadablePartial) localDateTime50, 1645513682127L);
        boolean boolean54 = dateTimeZone1.equals((java.lang.Object) zonedChronology30);
        org.joda.time.DurationField durationField55 = zonedChronology30.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 60639990L + "'", long6 == 60639990L);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-CA" + "'", str11, "en-CA");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en-CA" + "'", str15, "en-CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.100" + "'", str17, "+00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022" + "'", str47, "2022");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 9223371990106634900L + "'", long53 == 9223371990106634900L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test13053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13053");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DurationField durationField24 = zonedChronology12.weeks();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology12.add(readablePeriod25, (long) 12, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 12L + "'", long28 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test13054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13054");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology13.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        boolean boolean26 = dateTimeFieldType24.isSupported(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType24.getField(chronology31);
        java.lang.String str33 = dateTimeField32.getName();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = locale40.getISO3Country();
        java.lang.String str43 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, 2, locale40);
        int int45 = dateTimeField32.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology47 = null;
        boolean boolean48 = dateTimeFieldType46.isSupported(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType46.getField(chronology53);
        java.lang.String str55 = dateTimeField54.getName();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusWeeks(0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.getDisplayLanguage();
        java.lang.String str64 = locale62.getISO3Country();
        java.lang.String str65 = dateTimeField54.getAsShortText((org.joda.time.ReadablePartial) localDateTime59, 2, locale62);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plus(readableDuration68);
        int[] intArray74 = new int[] { 0, 292278993, 10, 'a' };
        int int75 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDateTime69, intArray74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(dateTimeZone78);
        int int80 = localDateTime77.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localDateTime77.toDateTime(readableInstant81);
        boolean boolean84 = dateTime82.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime85 = localDateTime69.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        long long87 = zonedChronology13.set((org.joda.time.ReadablePartial) localDateTime69, 10L);
        java.lang.String str88 = zonedChronology13.toString();
        org.joda.time.DateTimeField dateTimeField89 = zonedChronology13.year();
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((long) 61704317, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        long long94 = zonedChronology13.add(readablePeriod91, 999L, 957);
        org.joda.time.DateTimeField dateTimeField95 = zonedChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField96 = zonedChronology13.era();
        org.joda.time.DateTimeField dateTimeField97 = zonedChronology13.secondOfDay();
        org.joda.time.DurationField durationField98 = dateTimeField97.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfSecond" + "'", str33, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Japanisch" + "'", str41, "Japanisch");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2" + "'", str43, "2");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 999 + "'", int45 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "millisOfSecond" + "'", str55, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japanisch" + "'", str63, "Japanisch");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2" + "'", str65, "2");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1645427834973L + "'", long87 == 1645427834973L);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str88, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 999L + "'", long94 == 999L);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNull(durationField98);
    }

    @Test
    public void test13055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13055");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.hourOfDay();
        java.lang.String str27 = dateTimeField25.getAsText((long) 177);
        int int29 = dateTimeField25.getMinimumValue((long) 38);
        long long32 = dateTimeField25.add(1645538400000L, 61893610);
        boolean boolean33 = dateTimeField25.isLenient();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 224462534400000L + "'", long32 == 224462534400000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test13056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13056");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int25 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        int int31 = property30.getMinimumValue();
        boolean boolean32 = dateTime27.equals((java.lang.Object) int31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int34 = dateTime27.get(dateTimeFieldType33);
        int int35 = property20.compareTo((org.joda.time.ReadableInstant) dateTime27);
        java.lang.String str36 = property20.getAsText();
        org.joda.time.LocalDateTime localDateTime37 = property20.withMaximumValue();
        java.lang.String str38 = property20.getAsShortText();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
    }

    @Test
    public void test13057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13057");
        java.util.Locale locale2 = new java.util.Locale("+04:00", "2022-02-22T17:11:13.732+10:00");
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.lang.String str4 = locale3.getVariant();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale16 = locale13.stripExtensions();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale13.getDisplayCountry(locale17);
        java.util.Locale.setDefault(category10, locale13);
        java.lang.String str22 = property9.getAsText(locale13);
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = locale13.getDisplayLanguage(locale23);
        java.lang.String str25 = locale3.getDisplayName(locale23);
        java.lang.String str26 = locale23.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.util.Locale locale30 = locale27.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.String str34 = locale27.getDisplayCountry(locale31);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale31.getDisplayScript(locale35);
        java.lang.String str37 = locale31.getDisplayLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        java.lang.String str45 = locale31.getDisplayVariant(locale41);
        java.lang.String str46 = locale23.getDisplayLanguage(locale31);
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale48 = java.util.Locale.getDefault(category47);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale52 = builder49.build();
        java.util.Locale.setDefault(category47, locale52);
        java.lang.String str55 = locale52.getExtension('a');
        java.lang.String str56 = locale23.getDisplayCountry(locale52);
        java.lang.String str57 = locale2.getDisplayLanguage(locale23);
        org.junit.Assert.assertEquals(locale2.toString(), "+04:00_2022-02-22T17:11:13.732+10:00");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9" + "'", str22, "9");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u5fb7\u6587" + "'", str24, "\u5fb7\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str25, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Chinesisch" + "'", str26, "Chinesisch");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Deutsch" + "'", str37, "Deutsch");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Japanisch" + "'", str42, "Japanisch");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinesisch" + "'", str46, "Chinesisch");
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "China" + "'", str56, "China");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+04:00" + "'", str57, "+04:00");
    }

    @Test
    public void test13058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13058");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField22 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField23 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test13059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13059");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        java.lang.Class<?> wildcardClass24 = localDateTime23.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test13060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13060");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DurationField durationField18 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = zonedChronology12.getDateTimeMillis(61839753, 874, 441, 2059);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 874 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test13061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13061");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = zonedChronology12.add(readablePeriod16, 0L, 2);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekyearOfCentury();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = zonedChronology12.add(readablePeriod22, (long) 356, 369);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        boolean boolean28 = dateTimeFieldType26.isSupported(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks(0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType26.getField(chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str39 = dateTimeZone37.getShortName((long) 10);
        java.lang.String str40 = dateTimeZone37.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone37);
        java.lang.String str44 = dateTimeZone37.getShortName(4518470650L);
        java.util.TimeZone timeZone45 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.Chronology chronology47 = zonedChronology12.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology12.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 356L + "'", long25 == 356L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test13062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13062");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int25 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        int int31 = property30.getMinimumValue();
        boolean boolean32 = dateTime27.equals((java.lang.Object) int31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int34 = dateTime27.get(dateTimeFieldType33);
        int int35 = property20.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DurationField durationField36 = property20.getDurationField();
        org.joda.time.LocalDateTime localDateTime37 = property20.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        int int39 = property38.get();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
    }

    @Test
    public void test13063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13063");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        int int4 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withMinuteOfHour((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        int int10 = property9.getMinimumValue();
        java.lang.String str11 = property9.getAsText();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = property9.getAsText(locale12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType14.getField(chronology21);
        java.lang.String str23 = dateTimeField22.getName();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = locale30.getISO3Country();
        java.lang.String str33 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime27, 2, locale30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        int int39 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime36.toDateTime(readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        int int45 = property44.getMinimumValue();
        boolean boolean46 = dateTime41.equals((java.lang.Object) int45);
        long long47 = property34.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
        int int48 = property9.getDifference((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology49 = dateTime41.getChronology();
        java.lang.String str50 = dateTime41.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.days();
        org.joda.time.DurationField durationField57 = chronology55.minutes();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str62 = dateTimeZone60.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology63 = org.joda.time.chrono.ZonedChronology.getInstance(chronology55, dateTimeZone60);
        org.joda.time.DurationField durationField64 = zonedChronology63.weeks();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology63.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        long long69 = zonedChronology63.add(readablePeriod66, (long) 360000000, (int) 'a');
        boolean boolean70 = dateTime41.equals((java.lang.Object) long69);
        org.joda.time.DateTime dateTime71 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime6.plus(readableDuration72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusWeeks(0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.days();
        org.joda.time.DurationField durationField80 = chronology78.minutes();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str85 = dateTimeZone83.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology86 = org.joda.time.chrono.ZonedChronology.getInstance(chronology78, dateTimeZone83);
        boolean boolean88 = zonedChronology86.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime89 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology86);
        org.joda.time.LocalDateTime.Property property90 = localDateTime89.year();
        org.joda.time.LocalDateTime.Property property91 = localDateTime89.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime92 = property91.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime93 = property91.roundHalfEvenCopy();
        boolean boolean94 = localDateTime73.isBefore((org.joda.time.ReadablePartial) localDateTime93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime98 = localDateTime73.withDate(836, 62140330, 62130826);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62140330 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 62235271 + "'", int4 == 62235271);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "millisOfSecond" + "'", str23, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japanisch" + "'", str31, "Japanisch");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2" + "'", str33, "2");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:17:15.271+10:00" + "'", str50, "2022-02-22T17:17:15.271+10:00");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 360000000L + "'", long69 == 360000000L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+10:00" + "'", str85, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test13064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13064");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        boolean boolean15 = zonedChronology13.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = zonedChronology13.getZone();
        org.joda.time.DurationField durationField19 = zonedChronology13.months();
        boolean boolean20 = durationFieldType0.isSupported((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DurationField durationField21 = zonedChronology13.hours();
        int int23 = durationField21.getValue(397617638400000L);
        java.lang.String str24 = durationField21.toString();
        long long27 = durationField21.getValueAsLong(1645513878846L, 4554862131L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 110449344 + "'", int23 == 110449344);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DurationField[hours]" + "'", str24, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 457087L + "'", long27 == 457087L);
    }

    @Test
    public void test13065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13065");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.years();
        org.joda.time.DurationField durationField22 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.year();
        org.joda.time.DurationField durationField25 = zonedChronology12.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test13066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13066");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        int int7 = localDateTime1.getDayOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.hourOfDay();
        java.lang.String str9 = property8.getAsShortText();
        int int10 = property8.get();
        java.lang.String str11 = property8.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "17" + "'", str9, "17");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 17 + "'", int10 == 17);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[hourOfDay]" + "'", str11, "Property[hourOfDay]");
    }

    @Test
    public void test13067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13067");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusHours((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str21 = dateTimeFieldType20.toString();
        int int22 = localDateTime18.get(dateTimeFieldType20);
        java.lang.String str23 = dateTimeFieldType20.getName();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType20.getRangeDurationType();
        java.lang.String str25 = dateTimeFieldType20.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "weekyearOfCentury" + "'", str21, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyearOfCentury" + "'", str23, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekyearOfCentury" + "'", str25, "weekyearOfCentury");
    }

    @Test
    public void test13068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13068");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        java.lang.String str13 = dateTimeZone9.getID();
        long long15 = dateTimeZone9.nextTransition((long) 1970);
        int int17 = dateTimeZone9.getOffset((-25377280L));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1970L + "'", long15 == 1970L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
    }

    @Test
    public void test13069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13069");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("Coordinated Universal Time");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("USA");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(dateTimeZone10);
    }

    @Test
    public void test13070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13070");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField18 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        int int24 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime21.toDateTime(readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        int int30 = property29.getMinimumValue();
        boolean boolean31 = dateTime26.equals((java.lang.Object) int30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = dateTimeFieldType33.isSupported(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType33.getField(chronology40);
        org.joda.time.DurationField durationField42 = durationFieldType32.getField(chronology40);
        boolean boolean43 = dateTime26.equals((java.lang.Object) chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.DurationField durationField52 = chronology50.minutes();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str57 = dateTimeZone55.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology58 = org.joda.time.chrono.ZonedChronology.getInstance(chronology50, dateTimeZone55);
        org.joda.time.DurationField durationField59 = zonedChronology58.weeks();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology58.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        long long65 = zonedChronology58.add(readablePeriod62, 0L, 2);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology58.weekyearOfCentury();
        org.joda.time.DurationField durationField67 = zonedChronology58.hours();
        org.joda.time.DurationField durationField68 = zonedChronology58.centuries();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology58.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(dateTimeZone72);
        int int74 = localDateTime71.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        boolean boolean76 = localDateTime71.isEqual((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusWeeks(0);
        int int81 = localDateTime75.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.LocalDateTime.Property property82 = localDateTime78.dayOfWeek();
        int int83 = property82.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime84 = property82.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime();
        int int86 = localDateTime85.getYear();
        int int87 = localDateTime85.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.LocalDateTime localDateTime89 = localDateTime85.plus(readableDuration88);
        int int90 = localDateTime84.compareTo((org.joda.time.ReadablePartial) localDateTime89);
        int[] intArray92 = zonedChronology58.get((org.joda.time.ReadablePartial) localDateTime89, (-58376098292591L));
        int int93 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localDateTime45, intArray92);
        int int94 = localDateTime45.getYearOfEra();
        org.joda.time.Chronology chronology95 = localDateTime45.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField97 = localDateTime45.getField(62106791);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 62106791");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2022 + "'", int86 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 17 + "'", int87 == 17);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[120, 2, 20, 11307409]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 53 + "'", int93 == 53);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2022 + "'", int94 == 2022);
        org.junit.Assert.assertNotNull(chronology95);
    }

    @Test
    public void test13071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13071");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = zonedChronology12.years();
        org.joda.time.DurationField durationField26 = zonedChronology12.months();
        org.joda.time.DurationField durationField27 = zonedChronology12.seconds();
        java.lang.String str28 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withField(dateTimeFieldType34, (int) 'x');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfEra((int) '#');
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusYears(9);
        int int41 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str28, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
    }

    @Test
    public void test13072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13072");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("292278993-01-01T17:09:05.485");
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setID("2022-02-22T17:08:24.104+10:00");
        timeZone1.setRawOffset(61767103);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+17:09");
    }

    @Test
    public void test13073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13073");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = zonedChronology13.add(readablePeriod21, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 61685839, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DurationField durationField27 = zonedChronology13.millis();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology13.monthOfYear();
        java.lang.String str29 = dateTimeField28.getName();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale30.getDisplayCountry();
        java.lang.String str32 = locale30.getCountry();
        int int33 = dateTimeField28.getMaximumTextLength(locale30);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "monthOfYear" + "'", str29, "monthOfYear");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Kanada" + "'", str31, "Kanada");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CA" + "'", str32, "CA");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
    }

    @Test
    public void test13074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13074");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField23 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.weekyear();
        java.lang.String str28 = dateTimeField26.getAsShortText(1876116320L);
        boolean boolean29 = dateTimeField26.isLenient();
        long long31 = dateTimeField26.roundCeiling(1645514144103L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970" + "'", str28, "1970");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1672581600000L + "'", long31 == 1672581600000L);
    }

    @Test
    public void test13075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13075");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4518470650L);
        java.util.TimeZone timeZone19 = dateTimeZone11.toTimeZone();
        boolean boolean20 = timeZone19.observesDaylightTime();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        timeZone22.setRawOffset((int) (short) -1);
        java.lang.String str26 = timeZone22.getID();
        int int27 = timeZone22.getRawOffset();
        boolean boolean28 = timeZone19.hasSameRules(timeZone22);
        java.time.ZoneId zoneId29 = timeZone19.toZoneId();
        boolean boolean30 = timeZone19.observesDaylightTime();
        timeZone19.setRawOffset((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int35 = timeZone19.getOffset((-1960984869344L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+17:09");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:08:24.104+10:00" + "'", str26, "2022-02-22T17:08:24.104+10:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test13076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13076");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = zonedChronology12.getDateTimeMillis(266, 62022865, 62099387, 62155255);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62022865 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test13077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13077");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField28 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField30 = zonedChronology12.days();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test13078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13078");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minus(readablePeriod24);
        int int26 = localDateTime21.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusDays(356);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime21.withMillisOfDay(110449344);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 110449344 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test13079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13079");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DurationField durationField23 = zonedChronology12.weeks();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology42 = zonedChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology36.weekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = zonedChronology36.getZone();
        org.joda.time.Chronology chronology47 = zonedChronology12.withZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.days();
        org.joda.time.DurationField durationField54 = chronology52.minutes();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str59 = dateTimeZone57.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology60 = org.joda.time.chrono.ZonedChronology.getInstance(chronology52, dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology60.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean65 = dateTimeZone63.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology66 = zonedChronology60.withZone(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology60.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology60.year();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology60.dayOfYear();
        org.joda.time.Chronology chronology70 = zonedChronology60.withUTC();
        org.joda.time.DurationField durationField71 = zonedChronology60.months();
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology60.centuryOfEra();
        boolean boolean73 = dateTimeZone46.equals((java.lang.Object) zonedChronology60);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test13080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13080");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.minuteOfHour();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMonths(61966361);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusHours(0);
        int[] intArray11 = localDateTime10.getValues();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "17" + "'", str5, "17");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 22, 62280000]");
    }

    @Test
    public void test13081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13081");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        java.lang.String str14 = dateTimeZone10.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        int int19 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(readableInstant20);
        boolean boolean23 = dateTime21.equals((java.lang.Object) 'a');
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime25.toDateTime(readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfEra();
        int int34 = property33.getMinimumValue();
        boolean boolean35 = dateTime30.equals((java.lang.Object) int34);
        org.joda.time.Chronology chronology36 = dateTime30.getChronology();
        int int37 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime30);
        int int38 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime30);
        java.lang.String str39 = dateTimeZone10.toString();
        long long41 = dateTimeZone10.previousTransition((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) 1645427289074L, dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
    }

    @Test
    public void test13082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13082");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder5 = builder2.clear();
        java.util.Locale.Builder builder7 = builder2.setVariant("CANADA");
        java.util.Locale locale8 = builder2.build();
        java.util.Locale locale9 = builder2.build();
        java.util.Locale.Builder builder11 = builder2.setScript("");
        java.util.Locale.Builder builder13 = builder2.setRegion("531");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test13083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13083");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str38 = dateTimeZone36.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology45 = zonedChronology39.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField48 = dateTimeField47.getLeapDurationField();
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale49.getDisplayCountry(locale50);
        java.util.Locale locale52 = locale49.stripExtensions();
        int int53 = dateTimeField47.getMaximumShortTextLength(locale52);
        java.lang.String str54 = dateTimeZone23.getName(4554472850L, locale52);
        org.joda.time.Chronology chronology55 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int59 = dateTimeZone57.getOffsetFromLocal(4518471413L);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusYears(0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.weekyear();
        long long67 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime62, (long) 61705356);
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField69 = zonedChronology12.halfdays();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNull(durationField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.100" + "'", str54, "+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-61152892964000L) + "'", long67 == (-61152892964000L));
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test13084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13084");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withWeekOfWeekyear(38);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.centuryOfEra();
        int int10 = localDateTime4.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.minusMonths(355);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 17 + "'", int10 == 17);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test13085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13085");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        int int36 = localDateTime35.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withMillisOfSecond((int) (short) 0);
        int int39 = localDateTime35.getMillisOfSecond();
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 811, locale41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.plus(readableDuration43);
        int int45 = localDateTime35.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 960 + "'", int39 == 960);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "811" + "'", str42, "811");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
    }

    @Test
    public void test13086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13086");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4518470650L);
        java.util.TimeZone timeZone19 = dateTimeZone11.toTimeZone();
        int int21 = timeZone19.getOffset((-35999999L));
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.time.ZoneId zoneId23 = timeZone19.toZoneId();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone(zoneId23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone(zoneId23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone(zoneId23);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone(zoneId23);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone(zoneId23);
        boolean boolean29 = timeZone28.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = timeZone28.getDisplayName(true, 61984992);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 61984992");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13087");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYearOfCentury(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusHours(2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test13088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13088");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale7 = locale6.stripExtensions();
        boolean boolean8 = charSet5.equals((java.lang.Object) locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor11 = charSet10.iterator();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.Object[] objArray14 = charSet13.toArray();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        boolean boolean17 = charSet13.retainAll((java.util.Collection<java.lang.Character>) charSet16);
        boolean boolean18 = charSet10.containsAll((java.util.Collection<java.lang.Character>) charSet13);
        java.util.stream.Stream<java.lang.Character> charStream19 = charSet13.stream();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.Object[] objArray22 = charSet21.toArray();
        org.joda.time.ReadableInstant[] readableInstantArray23 = new org.joda.time.ReadableInstant[] {};
        org.joda.time.ReadableInstant[] readableInstantArray24 = charSet21.toArray(readableInstantArray23);
        org.joda.time.DurationField[] durationFieldArray25 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray26 = charSet21.toArray(durationFieldArray25);
        boolean boolean27 = charSet13.addAll((java.util.Collection<java.lang.Character>) charSet21);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        int int30 = charSet29.size();
        boolean boolean31 = charSet13.addAll((java.util.Collection<java.lang.Character>) charSet29);
        boolean boolean32 = charSet5.containsAll((java.util.Collection<java.lang.Character>) charSet13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(charItor11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charStream19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(readableInstantArray23);
        org.junit.Assert.assertNotNull(readableInstantArray24);
        org.junit.Assert.assertNotNull(durationFieldArray25);
        org.junit.Assert.assertNotNull(durationFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test13089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13089");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.weekOfWeekyear();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        int int19 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        int int25 = property24.getMinimumValue();
        java.lang.String str26 = property24.getAsText();
        org.joda.time.LocalDateTime localDateTime27 = property24.withMaximumValue();
        java.lang.String str28 = localDateTime27.toString();
        int int29 = localDateTime27.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusMonths(0);
        int[] intArray32 = localDateTime27.getValues();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime27.toDateTime(readableInstant33);
        boolean boolean35 = dateTime21.isAfter(readableInstant33);
        long long36 = property13.getDifferenceAsLong(readableInstant33);
        java.util.Locale locale38 = new java.util.Locale("120");
        int int39 = property13.getMaximumShortTextLength(locale38);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "8" + "'", str14, "8");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022" + "'", str26, "2022");
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "292278993-02-22T17:17:16.082" + "'", str28, "292278993-02-22T17:17:16.082");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[292278993, 2, 22, 62236082]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals(locale38.toString(), "120");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test13090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13090");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.addUnicodeLocaleAttribute("999");
        java.util.Locale.Builder builder8 = builder2.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.setVariant("French");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setLanguageTag("391");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 391 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13091");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withYearOfEra((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, (int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minusDays(170888);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test13092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13092");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        org.joda.time.LocalDateTime.Property property21 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusDays(100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear(893);
        int int32 = localDateTime29.getMinuteOfHour();
        boolean boolean33 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str35 = dateTimeFieldType34.getName();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.days();
        org.joda.time.DurationField durationField42 = chronology40.minutes();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str47 = dateTimeZone45.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology48 = org.joda.time.chrono.ZonedChronology.getInstance(chronology40, dateTimeZone45);
        org.joda.time.DurationField durationField49 = zonedChronology48.weeks();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology48.year();
        org.joda.time.DurationField durationField51 = zonedChronology48.months();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str56 = dateTimeZone54.getShortName((long) 10);
        java.lang.String str57 = dateTimeZone54.getID();
        long long60 = dateTimeZone54.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        int int63 = dateTimeZone54.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology64 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology48, dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology48.weekyear();
        boolean boolean68 = dateTimeFieldType34.isSupported((org.joda.time.Chronology) zonedChronology48);
        int int69 = localDateTime12.indexOf(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime12.plusWeeks(58);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusWeeks(62016236);
        int int74 = localDateTime71.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 17 + "'", int32 == 17);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "millisOfSecond" + "'", str35, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-35999999L) + "'", long60 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 36000000 + "'", int63 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 14 + "'", int74 == 14);
    }

    @Test
    public void test13093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13093");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        int int12 = localDateTime8.getEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.year();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.withMillisOfSecond(964);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test13094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13094");
        java.lang.Character[] charArray2 = new java.lang.Character[] { 'a', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet3 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet3, charArray2);
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet8 = locale5.getExtensionKeys();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.Object[] objArray11 = charSet10.toArray();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        boolean boolean14 = charSet10.retainAll((java.util.Collection<java.lang.Character>) charSet13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        int int17 = charSet16.size();
        boolean boolean18 = charSet13.retainAll((java.util.Collection<java.lang.Character>) charSet16);
        boolean boolean19 = charSet8.addAll((java.util.Collection<java.lang.Character>) charSet16);
        boolean boolean20 = charSet3.addAll((java.util.Collection<java.lang.Character>) charSet8);
        java.util.Spliterator<java.lang.Character> charSpliterator21 = charSet8.spliterator();
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale.setDefault(category22, locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        boolean boolean29 = charSet8.remove((java.lang.Object) strSet28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.year();
        org.joda.time.LocalDateTime localDateTime38 = property37.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField39 = property37.getField();
        int int40 = property37.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime41 = property37.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plus(readablePeriod42);
        boolean boolean44 = charSet8.equals((java.lang.Object) localDateTime41);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.lang.Object[] objArray47 = charSet46.toArray();
        org.joda.time.ReadableInstant[] readableInstantArray48 = new org.joda.time.ReadableInstant[] {};
        org.joda.time.ReadableInstant[] readableInstantArray49 = charSet46.toArray(readableInstantArray48);
        org.joda.time.DurationField[] durationFieldArray50 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray51 = charSet46.toArray(durationFieldArray50);
        java.lang.Character[] charArray54 = new java.lang.Character[] { 'a', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet55 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet55, charArray54);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet60 = locale57.getExtensionKeys();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        java.lang.Object[] objArray63 = charSet62.toArray();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        boolean boolean66 = charSet62.retainAll((java.util.Collection<java.lang.Character>) charSet65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet68 = locale67.getExtensionKeys();
        int int69 = charSet68.size();
        boolean boolean70 = charSet65.retainAll((java.util.Collection<java.lang.Character>) charSet68);
        boolean boolean71 = charSet60.addAll((java.util.Collection<java.lang.Character>) charSet68);
        boolean boolean72 = charSet55.addAll((java.util.Collection<java.lang.Character>) charSet60);
        java.util.Spliterator<java.lang.Character> charSpliterator73 = charSet60.spliterator();
        boolean boolean74 = charSet46.removeAll((java.util.Collection<java.lang.Character>) charSet60);
        boolean boolean75 = charSet8.retainAll((java.util.Collection<java.lang.Character>) charSet60);
        java.util.Locale locale76 = java.util.Locale.JAPANESE;
        java.lang.String str77 = locale76.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet79 = locale76.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor80 = charSet79.iterator();
        java.util.Iterator<java.lang.Character> charItor81 = charSet79.iterator();
        java.lang.Object[] objArray82 = charSet79.toArray();
        boolean boolean83 = charSet8.containsAll((java.util.Collection<java.lang.Character>) charSet79);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japanisch" + "'", str6, "Japanisch");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charSpliterator21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(readableInstantArray48);
        org.junit.Assert.assertNotNull(readableInstantArray49);
        org.junit.Assert.assertNotNull(durationFieldArray50);
        org.junit.Assert.assertNotNull(durationFieldArray51);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Japanese" + "'", str58, "Japanese");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charSpliterator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Japanese" + "'", str77, "Japanese");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertNotNull(charItor80);
        org.junit.Assert.assertNotNull(charItor81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test13095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13095");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.secondOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology28.years();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        java.lang.String str36 = dateTimeZone33.getID();
        long long39 = dateTimeZone33.convertLocalToUTC((long) (short) 1, false);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale44 = builder43.build();
        java.lang.String str45 = dateTimeZone33.getName((long) 749, locale44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.chrono.ZonedChronology zonedChronology47 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology47.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology47.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology47.hourOfDay();
        boolean boolean52 = dateTimeField51.isLenient();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-35999999L) + "'", long39 == (-35999999L));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test13096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13096");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.hourOfDay();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = locale8.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale8.getDisplayCountry(locale12);
        java.util.Locale.setDefault(category5, locale8);
        java.lang.String str17 = property4.getAsText(locale8);
        org.joda.time.LocalDateTime localDateTime18 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology23, dateTimeZone28);
        boolean boolean33 = zonedChronology31.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology31.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = zonedChronology31.getZone();
        boolean boolean38 = localDateTime18.equals((java.lang.Object) dateTimeZone37);
        long long41 = dateTimeZone37.convertLocalToUTC(0L, true);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-36000000L) + "'", long41 == (-36000000L));
    }

    @Test
    public void test13097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13097");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfDay(17);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.Object[] objArray9 = charSet8.toArray();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        boolean boolean12 = charSet8.retainAll((java.util.Collection<java.lang.Character>) charSet11);
        java.util.stream.Stream<java.lang.Character> charStream13 = charSet8.parallelStream();
        boolean boolean14 = localDateTime6.equals((java.lang.Object) charStream13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        int int19 = localDateTime16.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withField(dateTimeFieldType20, (int) '#');
        int int23 = localDateTime6.get(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime6.withWeekyear(643);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDateTime25.getFieldType(2139);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2139");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test13098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13098");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DurationField durationField23 = zonedChronology12.weeks();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology42 = zonedChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology36.weekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = zonedChronology36.getZone();
        org.joda.time.Chronology chronology47 = zonedChronology12.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology12.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test13099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13099");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        int int56 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(readableInstant57);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime.Property property62 = localDateTime45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime63 = property62.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusMinutes(61678279);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType67 = localDateTime65.getFieldType(516);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 516");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanisch" + "'", str39, "Japanisch");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test13100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13100");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField15 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.monthOfYear();
        long long18 = dateTimeField16.roundHalfEven((long) 61859631);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-36000000L) + "'", long18 == (-36000000L));
    }

    @Test
    public void test13101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13101");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = zonedChronology12.add(readablePeriod16, 0L, 2);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField22 = zonedChronology12.weekyears();
        long long25 = durationField22.getDifferenceAsLong((long) 61683951, 4548473673L);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = durationField22.getMillis(1645513955001L, (long) 61696012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645513955001");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test13102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13102");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = new java.util.Locale("era", "0001-02-22T17:09:18.121");
        java.util.Locale.setDefault(category0, locale6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str19 = dateTimeZone17.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone17);
        org.joda.time.DurationField durationField21 = zonedChronology20.weeks();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology20.year();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology20.getZone();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology20.millisOfSecond();
        org.joda.time.DurationField durationField25 = zonedChronology20.hours();
        org.joda.time.DurationField durationField26 = zonedChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology20.weekyearOfCentury();
        java.util.Locale locale30 = new java.util.Locale("");
        java.lang.String str31 = dateTimeField27.getAsShortText((int) (byte) -1, locale30);
        java.util.Locale locale32 = java.util.Locale.PRC;
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale36 = builder35.build();
        java.util.Locale.Builder builder37 = builder35.clear();
        java.util.Locale locale38 = builder35.build();
        java.lang.String str39 = locale32.getDisplayName(locale38);
        java.lang.String str40 = locale30.getDisplayName(locale38);
        java.lang.String str41 = locale30.getLanguage();
        java.util.Locale.setDefault(category0, locale30);
        java.lang.String str43 = locale30.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale6.toString(), "era_0001-02-22T17:09:18.121");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1" + "'", str31, "-1");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinese (China)" + "'", str39, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test13103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13103");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone39);
        org.joda.time.DurationField durationField43 = zonedChronology42.weeks();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology42.year();
        org.joda.time.DurationField durationField45 = zonedChronology42.months();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str50 = dateTimeZone48.getShortName((long) 10);
        java.lang.String str51 = dateTimeZone48.getID();
        long long54 = dateTimeZone48.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        int int57 = dateTimeZone48.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology58 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology42, dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology42.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone60 = zonedChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology42.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology42.weekyearOfCentury();
        boolean boolean64 = zonedChronology12.equals((java.lang.Object) zonedChronology42);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology42.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-35999999L) + "'", long54 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 36000000 + "'", int57 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test13104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13104");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        int int12 = localDateTime8.getEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        java.lang.String str19 = dateTimeZone16.getID();
        long long22 = dateTimeZone16.convertLocalToUTC((long) (short) 1, false);
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale27 = builder26.build();
        java.lang.String str28 = dateTimeZone16.getName((long) 749, locale27);
        org.joda.time.DateTime dateTime29 = localDateTime8.toDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime8.withMillisOfSecond(52);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusMonths((int) (byte) 0);
        int int35 = localDateTime34.getDayOfYear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.year();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-35999999L) + "'", long22 == (-35999999L));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 53 + "'", int35 == 53);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test13105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13105");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField23 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField27 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField28 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField29 = zonedChronology12.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test13106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13106");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        org.joda.time.DurationField durationField4 = property2.getDurationField();
        org.joda.time.LocalDateTime localDateTime5 = property2.roundHalfFloorCopy();
        int int6 = property2.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        int int12 = property11.getMinimumValue();
        org.joda.time.DurationField durationField13 = property11.getLeapDurationField();
        int int14 = property11.getMinimumValue();
        java.lang.String str15 = property11.getName();
        java.util.Locale locale18 = new java.util.Locale("7", "2022-02-22T17:07:54.303");
        int int19 = property11.getMaximumShortTextLength(locale18);
        org.joda.time.LocalDateTime localDateTime20 = property2.setCopy("61909033", locale18);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4555036635L + "'", long3 == 4555036635L);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfEra" + "'", str15, "yearOfEra");
        org.junit.Assert.assertEquals(locale18.toString(), "7_2022-02-22T17:07:54.303");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test13107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13107");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField22 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test13108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13108");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField22 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str36 = dateTimeZone34.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology37.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology43 = zonedChronology37.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology37.dayOfMonth();
        org.joda.time.DurationField durationField45 = zonedChronology37.years();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology37);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology49 = null;
        boolean boolean50 = dateTimeFieldType48.isSupported(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType48.getField(chronology55);
        java.lang.String str57 = dateTimeField56.getName();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusWeeks(0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.lang.String str65 = locale64.getDisplayLanguage();
        java.lang.String str66 = locale64.getISO3Country();
        java.lang.String str67 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, 2, locale64);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime61.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plus(readableDuration70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.weekyear();
        org.joda.time.Chronology chronology73 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime.Property property74 = localDateTime69.secondOfMinute();
        java.util.Locale locale75 = java.util.Locale.JAPANESE;
        java.lang.String str76 = locale75.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet77 = locale75.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet78 = locale75.getExtensionKeys();
        java.lang.String str79 = property74.getAsText(locale75);
        java.lang.String str80 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, locale75);
        int int81 = dateTimeField24.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "millisOfSecond" + "'", str57, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Japanisch" + "'", str65, "Japanisch");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2" + "'", str67, "2");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Japanisch" + "'", str76, "Japanisch");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(charSet78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "16" + "'", str79, "16");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "62236696" + "'", str80, "62236696");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 86399999 + "'", int81 == 86399999);
    }

    @Test
    public void test13109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13109");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        long long26 = zonedChronology12.add(1876103295L, (long) 356, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray34 = zonedChronology12.get(readablePeriod32, 1645514199090L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1876102939L + "'", long26 == 1876102939L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test13110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13110");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField28 = zonedChronology12.millis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test13111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13111");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime1.plus(readableDuration22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime1.plus(readableDuration24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime1.minus(readablePeriod27);
        org.joda.time.DateTime dateTime29 = localDateTime1.toDateTime();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test13112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13112");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T17:14:15.156+100:00");
        boolean boolean2 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test13113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13113");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.centuries();
        org.joda.time.DurationField durationField5 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.year();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.millisOfSecond();
        long long11 = dateTimeField8.getDifferenceAsLong(0L, (long) 68);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-68L) + "'", long11 == (-68L));
    }

    @Test
    public void test13114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13114");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis(3);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths(999);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime5.getFields();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusWeeks((-1110016));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis(29);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test13115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13115");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        int int22 = property21.getMinimumValue();
        java.lang.String str23 = property21.getAsText();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = property21.getAsText(locale24);
        java.lang.String str26 = dateTimeZone17.getName((long) (short) 100, locale24);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property29.addToCopy((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.centuries();
        boolean boolean33 = property29.equals((java.lang.Object) durationFieldType32);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category34, locale35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfEra();
        int int40 = property39.getMinimumValue();
        java.lang.String str41 = property39.getAsText();
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = property39.getAsText(locale42);
        java.lang.String str44 = locale35.getDisplayCountry(locale42);
        int int45 = property29.getMaximumShortTextLength(locale35);
        java.lang.String str46 = dateTimeZone17.getName((long) 841, locale35);
        long long48 = dateTimeZone17.previousTransition(0L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Canada" + "'", str44, "Canada");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+10:00" + "'", str46, "+10:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test13116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13116");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField21 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField22 = zonedChronology12.hours();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int25 = localDateTime24.getEra();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.monthOfYear();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plus(readableDuration27);
        long long30 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime28, (long) (short) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.monthOfYear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        org.joda.time.DurationField durationField46 = zonedChronology45.weeks();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology45.year();
        org.joda.time.DateTimeZone dateTimeZone48 = zonedChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology45.millisOfSecond();
        org.joda.time.DurationField durationField50 = zonedChronology45.hours();
        org.joda.time.DurationField durationField51 = zonedChronology45.months();
        org.joda.time.DateTimeZone dateTimeZone52 = zonedChronology45.getZone();
        org.joda.time.DurationField durationField53 = zonedChronology45.halfdays();
        java.lang.String str54 = zonedChronology45.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) property32, (org.joda.time.Chronology) zonedChronology45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str54, "ZonedChronology[ISOChronology[UTC], +10:00]");
    }

    @Test
    public void test13117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13117");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology13.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        boolean boolean26 = dateTimeFieldType24.isSupported(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType24.getField(chronology31);
        java.lang.String str33 = dateTimeField32.getName();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = locale40.getISO3Country();
        java.lang.String str43 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, 2, locale40);
        int int45 = dateTimeField32.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology47 = null;
        boolean boolean48 = dateTimeFieldType46.isSupported(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType46.getField(chronology53);
        java.lang.String str55 = dateTimeField54.getName();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusWeeks(0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        java.util.Locale locale62 = java.util.Locale.JAPANESE;
        java.lang.String str63 = locale62.getDisplayLanguage();
        java.lang.String str64 = locale62.getISO3Country();
        java.lang.String str65 = dateTimeField54.getAsShortText((org.joda.time.ReadablePartial) localDateTime59, 2, locale62);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plus(readableDuration68);
        int[] intArray74 = new int[] { 0, 292278993, 10, 'a' };
        int int75 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDateTime69, intArray74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(dateTimeZone78);
        int int80 = localDateTime77.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localDateTime77.toDateTime(readableInstant81);
        boolean boolean84 = dateTime82.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime85 = localDateTime69.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        long long87 = zonedChronology13.set((org.joda.time.ReadablePartial) localDateTime69, 10L);
        java.lang.String str88 = zonedChronology13.toString();
        org.joda.time.DateTimeField dateTimeField89 = zonedChronology13.year();
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((long) 61704317, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.LocalDateTime.Property property91 = localDateTime90.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime93 = localDateTime90.withMinuteOfHour(29970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29970 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfSecond" + "'", str33, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Japanisch" + "'", str41, "Japanisch");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2" + "'", str43, "2");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 999 + "'", int45 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "millisOfSecond" + "'", str55, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japanisch" + "'", str63, "Japanisch");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2" + "'", str65, "2");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1645427836967L + "'", long87 == 1645427836967L);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str88, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test13118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13118");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        long long20 = zonedChronology12.add(59940000L, 69999L, 10);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str32 = dateTimeZone30.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone30);
        org.joda.time.DurationField durationField34 = zonedChronology33.weeks();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology33.year();
        org.joda.time.DateTimeZone dateTimeZone36 = zonedChronology33.getZone();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology33.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone38 = zonedChronology33.getZone();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        int int43 = property42.getMinimumValue();
        java.lang.String str44 = property42.getAsText();
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = property42.getAsText(locale45);
        java.lang.String str47 = dateTimeZone38.getName((long) (short) 100, locale45);
        boolean boolean48 = zonedChronology12.equals((java.lang.Object) locale45);
        // The following exception was thrown during execution in test generation
        try {
            long long53 = zonedChronology12.getDateTimeMillis(200, 483, 62202831, 368);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 483 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 60639990L + "'", long20 == 60639990L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022" + "'", str44, "2022");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test13119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13119");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.centuryOfEra();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category23, locale24);
        java.lang.String str26 = locale24.toLanguageTag();
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category27, locale28);
        java.lang.String str30 = locale28.toLanguageTag();
        java.lang.String str31 = locale24.getDisplayLanguage(locale28);
        java.lang.String str32 = locale22.getDisplayCountry(locale24);
        int int33 = dateTimeField21.getMaximumTextLength(locale24);
        org.joda.time.DurationField durationField34 = dateTimeField21.getRangeDurationField();
        org.joda.time.tz.NameProvider nameProvider35 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DurationField durationField43 = chronology41.minutes();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str48 = dateTimeZone46.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology41, dateTimeZone46);
        org.joda.time.DurationField durationField50 = zonedChronology49.weeks();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology49.year();
        org.joda.time.DateTimeZone dateTimeZone52 = zonedChronology49.getZone();
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeZone52.getShortName((long) '4', locale54);
        java.lang.String str56 = locale54.getDisplayCountry();
        java.lang.String str59 = nameProvider35.getName(locale54, "Japanese", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider35);
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("en-CA");
        java.lang.String str65 = nameProvider35.getShortName(locale62, "IT", "0");
        boolean boolean66 = locale62.hasExtensions();
        int int67 = dateTimeField21.getMaximumShortTextLength(locale62);
        java.lang.String str68 = locale62.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en-CA" + "'", str26, "en-CA");
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.FORMAT + "'", category27.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en-CA" + "'", str30, "en-CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertNotNull(nameProvider35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:00" + "'", str48, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:00" + "'", str55, "+10:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 7 + "'", int67 == 7);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "en-CA" + "'", str68, "en-CA");
    }

    @Test
    public void test13120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13120");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withHourOfDay((int) (short) 10);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.Object[] objArray22 = charSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        boolean boolean25 = charSet21.retainAll((java.util.Collection<java.lang.Character>) charSet24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int30 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime27.toDateTime(readableInstant31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.minusWeeks((int) (short) 1);
        boolean boolean35 = charSet21.remove((java.lang.Object) localDateTime34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime34.getFieldTypes();
        int int37 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor40 = charSet39.iterator();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        java.lang.Object[] objArray43 = charSet42.toArray();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        boolean boolean46 = charSet42.retainAll((java.util.Collection<java.lang.Character>) charSet45);
        boolean boolean47 = charSet39.containsAll((java.util.Collection<java.lang.Character>) charSet42);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean49 = charSet39.equals((java.lang.Object) dateTimeFieldType48);
        int int50 = localDateTime34.get(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        int int55 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        boolean boolean57 = localDateTime52.isEqual((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusWeeks(0);
        int int62 = localDateTime56.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        int int63 = localDateTime59.getEra();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusSeconds(61960598);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(charItor40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 46 + "'", int50 == 46);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
    }

    @Test
    public void test13121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13121");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.weekyear();
        java.lang.String str30 = dateTimeField29.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DateTimeField[weekyear]" + "'", str30, "DateTimeField[weekyear]");
    }

    @Test
    public void test13122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13122");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withFields(readablePartial20);
        int int22 = localDateTime21.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusMinutes(292278993);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minusYears(30);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.secondOfMinute();
        java.lang.String str28 = property27.getAsShortText();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 17 + "'", int22 == 17);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "17" + "'", str28, "17");
    }

    @Test
    public void test13123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13123");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.dayOfYear();
        long long33 = zonedChronology28.add(1645427292899L, (long) 61690923, 0);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology28.secondOfDay();
        long long37 = dateTimeField35.roundHalfEven(1645513946928L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645427292899L + "'", long33 == 1645427292899L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645513947000L + "'", long37 == 1645513947000L);
    }

    @Test
    public void test13124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13124");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.stream.Stream<java.lang.Character> charStream10 = charSet4.stream();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType11.isSupported(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType11.getField(chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str24 = dateTimeZone22.getShortName((long) 10);
        java.lang.String str25 = dateTimeZone22.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone22);
        java.lang.String str29 = dateTimeZone22.getShortName(4518470650L);
        boolean boolean31 = dateTimeZone22.isStandardOffset((-62142803999251L));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        int int36 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime33.toDateTime(readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfEra();
        int int42 = property41.getMinimumValue();
        boolean boolean43 = dateTime38.equals((java.lang.Object) int42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int45 = dateTime38.get(dateTimeFieldType44);
        int int46 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean47 = charSet4.equals((java.lang.Object) int46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        java.lang.Object[] objArray50 = charSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        boolean boolean53 = charSet49.retainAll((java.util.Collection<java.lang.Character>) charSet52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        boolean boolean57 = locale54.hasExtensions();
        boolean boolean58 = charSet52.remove((java.lang.Object) boolean57);
        boolean boolean59 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet52);
        java.util.stream.Stream<java.lang.Character> charStream60 = charSet52.stream();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        java.lang.Object[] objArray63 = charSet62.toArray();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        boolean boolean66 = charSet62.retainAll((java.util.Collection<java.lang.Character>) charSet65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet68 = locale67.getExtensionKeys();
        int int69 = charSet68.size();
        boolean boolean70 = charSet65.retainAll((java.util.Collection<java.lang.Character>) charSet68);
        boolean boolean71 = charSet52.removeAll((java.util.Collection<java.lang.Character>) charSet65);
        int int72 = charSet52.size();
        java.lang.Character[] charArray75 = new java.lang.Character[] { '#', 'x' };
        java.util.LinkedHashSet<java.lang.Character> charSet76 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet76, charArray75);
        boolean boolean79 = charSet76.add((java.lang.Character) 'x');
        boolean boolean80 = charSet52.removeAll((java.util.Collection<java.lang.Character>) charSet76);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charStream10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:00" + "'", str24, "+10:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:00" + "'", str29, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 36000000 + "'", int46 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charStream60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test13125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13125");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.hourOfHalfday();
        org.joda.time.Chronology chronology18 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.secondOfDay();
        org.joda.time.DurationField durationField21 = zonedChronology12.halfdays();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test13126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13126");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType23.getField(chronology30);
        java.lang.String str32 = dateTimeField31.getName();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 2, locale39);
        int int44 = dateTimeField31.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = dateTimeFieldType45.isSupported(chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType45.getField(chronology52);
        java.lang.String str54 = dateTimeField53.getName();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.lang.String str63 = locale61.getISO3Country();
        java.lang.String str64 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, 2, locale61);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plus(readableDuration67);
        int[] intArray73 = new int[] { 0, 292278993, 10, 'a' };
        int int74 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68, intArray73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        int int79 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime76.toDateTime(readableInstant80);
        boolean boolean83 = dateTime81.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime84 = localDateTime68.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        long long86 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime68, 10L);
        org.joda.time.DateTimeField dateTimeField87 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField88 = zonedChronology12.dayOfWeek();
        org.joda.time.Chronology chronology89 = zonedChronology12.withUTC();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japanisch" + "'", str40, "Japanisch");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 999 + "'", int44 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "millisOfSecond" + "'", str54, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Japanisch" + "'", str62, "Japanisch");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2" + "'", str64, "2");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645427837345L + "'", long86 == 1645427837345L);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(chronology89);
    }

    @Test
    public void test13127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13127");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        long long27 = zonedChronology12.add(1645427275536L, 0L, 8);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645427275536L + "'", long27 == 1645427275536L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test13128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13128");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.minusSeconds((int) '4');
        int int14 = localDateTime13.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusYears(61678279);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withTime(11, 56, 0, 58);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType23.getField(chronology30);
        java.lang.String str32 = dateTimeField31.getName();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 2, locale39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime36.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plus(readableDuration45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.year();
        boolean boolean48 = localDateTime21.isEqual((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime21.minusDays(61843199);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 427 + "'", int14 == 427);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japanisch" + "'", str40, "Japanisch");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test13129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13129");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test13130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13130");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        int int10 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime(readableInstant11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusWeeks((int) (short) 1);
        boolean boolean15 = charSet1.remove((java.lang.Object) localDateTime14);
        int int16 = localDateTime14.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = dateTimeFieldType17.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType17.getField(chronology24);
        java.lang.String str26 = dateTimeField25.getName();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getDisplayLanguage();
        java.lang.String str35 = locale33.getISO3Country();
        java.lang.String str36 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, 2, locale33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime30.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMinuteOfHour((int) '#');
        java.util.Date date41 = localDateTime38.toDate();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusMillis(749);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withWeekyear(17);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withSecondOfMinute((int) (byte) 0);
        int int48 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minus(readableDuration49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.plusDays(800);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 46 + "'", int16 == 46);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "millisOfSecond" + "'", str26, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Japanisch" + "'", str34, "Japanisch");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2" + "'", str36, "2");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Mon Feb 21 17:17:18 GMT+17:09 2022");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test13131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13131");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withDate(292278993, (int) (byte) 1, (int) (byte) 1);
        int int21 = localDateTime20.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minus(readablePeriod22);
        int int24 = localDateTime23.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minusMinutes(61939213);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.plus(readablePeriod29);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 93 + "'", int24 == 93);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test13132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13132");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1946718200433888000L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(538);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.String str8 = locale6.getVariant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean26 = dateTimeZone24.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology27 = zonedChronology21.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology21.yearOfEra();
        java.util.Locale locale35 = new java.util.Locale("CN", "Kanada");
        java.lang.String str36 = dateTimeField31.getAsText((long) 14, locale35);
        java.lang.String str37 = locale6.getDisplayVariant(locale35);
        java.lang.String str38 = localDateTime3.toString("+10:00", locale35);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uce90\ub098\ub2e4" + "'", str7, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "cn_KANADA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970" + "'", str36, "1970");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
    }

    @Test
    public void test13133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13133");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYearOfCentury(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        long long20 = chronology13.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = chronology13.minuteOfDay();
        long long23 = dateTimeField21.roundFloor((long) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        boolean boolean26 = dateTimeFieldType24.isSupported(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType24.getField(chronology31);
        java.lang.String str33 = dateTimeField32.getName();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = locale40.getISO3Country();
        java.lang.String str43 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, 2, locale40);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime37.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMinuteOfHour((int) '#');
        java.util.Date date48 = localDateTime45.toDate();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.minusSeconds(749);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology52 = null;
        boolean boolean53 = dateTimeFieldType51.isSupported(chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks(0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType51.getField(chronology58);
        java.lang.String str60 = dateTimeField59.getName();
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray65 = new int[] { (short) -1, (byte) 10, ' ' };
        int int66 = dateTimeField59.getMaximumValue(readablePartial61, intArray65);
        int int67 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50, intArray65);
        boolean boolean68 = localDateTime1.equals((java.lang.Object) intArray65);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.yearOfEra();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property74.getFieldType();
        boolean boolean76 = localDateTime69.isSupported(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime69.withMillisOfDay(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean80 = localDateTime69.isSupported(dateTimeFieldType79);
        int int81 = localDateTime1.get(dateTimeFieldType79);
        org.joda.time.LocalDateTime.Property property82 = localDateTime1.era();
        org.joda.time.LocalDateTime.Property property83 = localDateTime1.weekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 70001L + "'", long20 == 70001L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfSecond" + "'", str33, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Japanisch" + "'", str41, "Japanisch");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2" + "'", str43, "2");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Mon Feb 21 17:17:18 GMT+17:09 2022");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "millisOfSecond" + "'", str60, "millisOfSecond");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 32]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 999 + "'", int66 == 999);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 19 + "'", int81 == 19);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test13134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13134");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean43 = dateTimeZone41.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology44 = zonedChronology38.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology38.weekyear();
        org.joda.time.DurationField durationField48 = zonedChronology38.years();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean53 = dateTimeZone51.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology54 = zonedChronology38.withZone(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 12, (org.joda.time.Chronology) zonedChronology38);
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology38.yearOfEra();
        boolean boolean58 = dateTimeZone23.equals((java.lang.Object) zonedChronology38);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology38.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone60 = zonedChronology38.getZone();
        org.joda.time.DateTimeZone dateTimeZone61 = zonedChronology38.getZone();
        int int63 = dateTimeZone61.getOffset(57420000L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 36000000 + "'", int63 == 36000000);
    }

    @Test
    public void test13135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13135");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField22 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test13136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13136");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfWeek();
        int int13 = property12.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str25 = dateTimeZone23.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology26.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology32 = zonedChronology26.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology26.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = zonedChronology26.add(readablePeriod34, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology26.dayOfMonth();
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category39, locale40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        int int45 = property44.getMinimumValue();
        java.lang.String str46 = property44.getAsText();
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = property44.getAsText(locale47);
        java.lang.String str49 = locale40.getDisplayCountry(locale47);
        int int50 = dateTimeField38.getMaximumTextLength(locale47);
        java.lang.String str51 = property12.getAsShortText(locale47);
        org.joda.time.LocalDateTime localDateTime52 = property12.roundHalfFloorCopy();
        org.joda.time.Interval interval53 = property12.toInterval();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        boolean boolean57 = locale54.hasExtensions();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale58.getDisplayCountry(locale59);
        java.util.Locale locale61 = locale58.stripExtensions();
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale62.getDisplayCountry(locale63);
        java.lang.String str65 = locale58.getDisplayCountry(locale62);
        java.lang.String str66 = locale54.getDisplayVariant(locale62);
        java.util.Set<java.lang.Character> charSet67 = locale62.getExtensionKeys();
        int int68 = property12.getMaximumShortTextLength(locale62);
        org.joda.time.DurationField durationField69 = property12.getDurationField();
        org.joda.time.Interval interval70 = property12.toInterval();
        java.lang.String str71 = property12.getName();
        int int72 = property12.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 53L + "'", long37 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Canada" + "'", str49, "Canada");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "mar." + "'", str51, "mar.");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "dayOfWeek" + "'", str71, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test13137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13137");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusHours((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet23 = locale20.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor24 = charSet23.iterator();
        boolean boolean25 = localDateTime18.equals((java.lang.Object) charSet23);
        java.util.Spliterator<java.lang.Character> charSpliterator26 = charSet23.spliterator();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor29 = charSet28.iterator();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.lang.Object[] objArray32 = charSet31.toArray();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        boolean boolean35 = charSet31.retainAll((java.util.Collection<java.lang.Character>) charSet34);
        boolean boolean36 = charSet28.containsAll((java.util.Collection<java.lang.Character>) charSet31);
        java.util.Iterator<java.lang.Character> charItor37 = charSet31.iterator();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet40 = locale38.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet41 = locale38.getExtensionKeys();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale42.getDisplayCountry(locale43);
        boolean boolean45 = locale42.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.util.Locale locale49 = locale46.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale50.getDisplayCountry(locale51);
        java.lang.String str53 = locale46.getDisplayCountry(locale50);
        java.lang.String str54 = locale42.getDisplayVariant(locale50);
        java.util.Set<java.lang.Character> charSet55 = locale50.getExtensionKeys();
        boolean boolean56 = charSet41.removeAll((java.util.Collection<java.lang.Character>) charSet55);
        java.util.stream.Stream<java.lang.Character> charStream57 = charSet41.stream();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        int int60 = charSet59.size();
        java.lang.Object[] objArray61 = charSet59.toArray();
        boolean boolean62 = charSet41.removeAll((java.util.Collection<java.lang.Character>) charSet59);
        java.lang.Character[] charArray65 = new java.lang.Character[] { 'x', 'x' };
        java.util.ArrayList<java.lang.Character> charList66 = new java.util.ArrayList<java.lang.Character>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charList66, charArray65);
        java.util.stream.Stream<java.lang.Character> charStream68 = charList66.stream();
        boolean boolean69 = charSet59.removeAll((java.util.Collection<java.lang.Character>) charList66);
        boolean boolean70 = charSet31.containsAll((java.util.Collection<java.lang.Character>) charSet59);
        org.joda.time.tz.Provider provider71 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider71);
        org.joda.time.DateTimeZone dateTimeZone74 = provider71.getZone("Coordinated Universal Time");
        org.joda.time.DateTimeZone.setProvider(provider71);
        java.util.Set<java.lang.String> strSet76 = provider71.getAvailableIDs();
        java.util.Set<java.lang.String> strSet77 = provider71.getAvailableIDs();
        org.joda.time.tz.Provider provider78 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet79 = provider78.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone81 = provider78.getZone("Kanada");
        org.joda.time.tz.Provider provider82 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider82);
        org.joda.time.DateTimeZone.setProvider(provider82);
        java.util.Set<java.lang.String> strSet85 = provider82.getAvailableIDs();
        java.util.Set<java.lang.String> strSet86 = provider82.getAvailableIDs();
        org.joda.time.tz.Provider[] providerArray87 = new org.joda.time.tz.Provider[] { provider71, provider78, provider82 };
        org.joda.time.tz.Provider[] providerArray88 = charSet59.toArray(providerArray87);
        org.joda.time.tz.Provider[] providerArray89 = charSet23.toArray(providerArray87);
        java.util.Iterator<java.lang.Character> charItor90 = charSet23.iterator();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanisch" + "'", str21, "Japanisch");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(charItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(charSpliterator26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(charItor29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charItor37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanisch" + "'", str39, "Japanisch");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charStream57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(provider71);
        org.junit.Assert.assertNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(provider78);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(provider82);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(providerArray87);
        org.junit.Assert.assertNotNull(providerArray88);
        org.junit.Assert.assertNotNull(providerArray89);
        org.junit.Assert.assertNotNull(charItor90);
    }

    @Test
    public void test13138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13138");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField21 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField22 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField26 = zonedChronology12.halfdays();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test13139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13139");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.era();
        org.joda.time.DurationField durationField24 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField27 = zonedChronology12.seconds();
        org.joda.time.DurationField durationField28 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField29 = zonedChronology12.years();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test13140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13140");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        long long26 = zonedChronology12.add(1876103295L, (long) 356, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField28 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField30 = zonedChronology12.centuries();
        java.lang.String str31 = durationField30.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1876102939L + "'", long26 == 1876102939L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "centuries" + "'", str31, "centuries");
    }

    @Test
    public void test13141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13141");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str38 = dateTimeZone36.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology45 = zonedChronology39.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology39.weekyear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int51 = localDateTime50.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.seconds();
        boolean boolean53 = localDateTime50.isSupported(durationFieldType52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.yearOfEra();
        int[] intArray56 = new int[] { 'a' };
        int int57 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50, intArray56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime50.minusDays(0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime50.withMinuteOfHour(9);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withMillisOfSecond(20);
        long long65 = zonedChronology13.set((org.joda.time.ReadablePartial) localDateTime61, (long) 525);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology13.dayOfYear();
        org.joda.time.DurationField durationField68 = zonedChronology13.weekyears();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 21, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology13.centuryOfEra();
        org.joda.time.DurationField durationField71 = zonedChronology13.centuries();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[97]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292275054) + "'", int57 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-3000001L) + "'", long65 == (-3000001L));
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test13142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13142");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("days");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.parse("days");
        java.lang.String[] strArray21 = new java.lang.String[] { "427", "+10:00", "\uce90\ub098\ub2e4", "2022", "2", "2022", "2022-02-22T07:07:50.018", "2022", "millisOfSecond" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strList22);
        java.lang.String str25 = java.util.Locale.lookupTag(languageRangeList9, (java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("days");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.parse("days");
        java.lang.String[] strArray39 = new java.lang.String[] { "427", "+10:00", "\uce90\ub098\ub2e4", "2022", "2", "2022", "2022-02-22T07:07:50.018", "2022", "millisOfSecond" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strList40);
        java.lang.String str43 = java.util.Locale.lookupTag(languageRangeList27, (java.util.Collection<java.lang.String>) strList40);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.parse("days");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.parse("days");
        java.lang.String[] strArray60 = new java.lang.String[] { "427", "+10:00", "\uce90\ub098\ub2e4", "2022", "2", "2022", "2022-02-22T07:07:50.018", "2022", "millisOfSecond" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags(languageRangeList50, (java.util.Collection<java.lang.String>) strList61);
        java.lang.String str64 = java.util.Locale.lookupTag(languageRangeList48, (java.util.Collection<java.lang.String>) strList61);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList61, filteringMode65);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strList40, filteringMode65);
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap69);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap71);
        java.util.Collection<java.util.Locale> localeCollection73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, localeCollection73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "utc" + "'", str4, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(languageRangeList72);
    }

    @Test
    public void test13143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13143");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.centuryOfEra();
        org.joda.time.DurationField durationField19 = zonedChronology12.minutes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13144");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        int int10 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime(readableInstant11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusWeeks((int) (short) 1);
        boolean boolean15 = charSet1.remove((java.lang.Object) localDateTime14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        java.lang.String str18 = property17.getAsText();
        java.lang.String str19 = property17.toString();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundHalfFloorCopy();
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withYear(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMinutes(62055181);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "62238023" + "'", str18, "62238023");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[millisOfDay]" + "'", str19, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test13145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13145");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfDay(12);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks(0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DurationField durationField17 = chronology15.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str22 = dateTimeZone20.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology23 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone20);
        boolean boolean25 = zonedChronology23.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withHourOfDay((int) (short) 10);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.lang.Object[] objArray33 = charSet32.toArray();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        boolean boolean36 = charSet32.retainAll((java.util.Collection<java.lang.Character>) charSet35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        int int41 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime38.toDateTime(readableInstant42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusWeeks((int) (short) 1);
        boolean boolean46 = charSet32.remove((java.lang.Object) localDateTime45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime45.getFieldTypes();
        int int48 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor51 = charSet50.iterator();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet53 = locale52.getExtensionKeys();
        java.lang.Object[] objArray54 = charSet53.toArray();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet56 = locale55.getExtensionKeys();
        boolean boolean57 = charSet53.retainAll((java.util.Collection<java.lang.Character>) charSet56);
        boolean boolean58 = charSet50.containsAll((java.util.Collection<java.lang.Character>) charSet53);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean60 = charSet50.equals((java.lang.Object) dateTimeFieldType59);
        int int61 = localDateTime45.get(dateTimeFieldType59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusWeeks(0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.days();
        org.joda.time.DurationField durationField68 = chronology66.minutes();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str73 = dateTimeZone71.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology74 = org.joda.time.chrono.ZonedChronology.getInstance(chronology66, dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology74.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean79 = dateTimeZone77.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology80 = zonedChronology74.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology74.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        long long85 = zonedChronology74.add(readablePeriod82, (long) 53, (int) (byte) 0);
        long long89 = zonedChronology74.add(1645427275536L, 0L, 8);
        org.joda.time.DurationField durationField90 = zonedChronology74.hours();
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        long long94 = zonedChronology74.add(readablePeriod91, 1645513693732L, 107);
        boolean boolean95 = dateTimeFieldType59.isSupported((org.joda.time.Chronology) zonedChronology74);
        java.lang.String str96 = dateTimeFieldType59.getName();
        int int97 = localDateTime10.get(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(charItor51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 46 + "'", int61 == 46);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+10:00" + "'", str73, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 53L + "'", long85 == 53L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1645427275536L + "'", long89 == 1645427275536L);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1645513693732L + "'", long94 == 1645513693732L);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "dayOfYear" + "'", str96, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 53 + "'", int97 == 53);
    }

    @Test
    public void test13146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13146");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        int int21 = property20.getMaximumValue();
        int int22 = property20.get();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getDisplayLanguage();
        java.lang.String str26 = locale24.getISO3Country();
        java.util.Locale.setDefault(locale24);
        java.util.Set<java.lang.Character> charSet28 = locale24.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = property20.setCopy("2022-02-22T17:15:11.166", locale24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:15:11.166\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Japanisch" + "'", str25, "Japanisch");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charSet28);
    }

    @Test
    public void test13147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13147");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean11 = charSet1.equals((java.lang.Object) dateTimeFieldType10);
        java.util.Iterator<java.lang.Character> charItor12 = charSet1.iterator();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        int int16 = property15.getMinimumValue();
        java.lang.String str17 = property15.getAsText();
        org.joda.time.LocalDateTime localDateTime18 = property15.withMaximumValue();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.centuryOfEra();
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category21, locale22);
        org.joda.time.LocalDateTime localDateTime24 = property19.setCopy("427", locale22);
        org.joda.time.LocalDateTime localDateTime25 = property19.withMinimumValue();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plus(readablePeriod27);
        boolean boolean29 = charSet1.equals((java.lang.Object) readablePeriod27);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charItor12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13148");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DurationField durationField23 = zonedChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology29 = zonedChronology13.withZone(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 12, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology13.secondOfMinute();
        org.joda.time.DurationField durationField34 = zonedChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology13.weekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test13149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13149");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField32 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology12.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test13150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13150");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4518470650L);
        boolean boolean20 = dateTimeZone11.isStandardOffset((long) 999);
        int int22 = dateTimeZone11.getOffsetFromLocal((long) 536);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMonthOfYear(359);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 359 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test13151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13151");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.centuryOfEra();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category8, locale9);
        org.joda.time.LocalDateTime localDateTime11 = property6.setCopy("427", locale9);
        org.joda.time.LocalDateTime localDateTime12 = property6.withMinimumValue();
        java.lang.String str13 = property6.getAsString();
        int int14 = property6.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime15 = property6.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval16 = property6.toInterval();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292279000 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2922789" + "'", str13, "2922789");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test13152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13152");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.years();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category30, locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.util.Locale locale36 = locale33.stripExtensions();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale37.getDisplayCountry(locale38);
        java.lang.String str40 = locale33.getDisplayCountry(locale37);
        java.util.Locale.setDefault(category30, locale33);
        java.lang.String str42 = property29.getAsText(locale33);
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.lang.String str44 = locale33.getDisplayLanguage(locale43);
        java.lang.String str45 = dateTimeField23.getAsShortText(1645427292133L, locale33);
        long long47 = dateTimeField23.roundFloor(9223371990112226329L);
        java.util.Locale locale50 = new java.util.Locale("2022-02-22T17:09:27.315");
        java.lang.String str51 = dateTimeField23.getAsText(4295713421L, locale50);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9" + "'", str42, "9");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u5fb7\u6587" + "'", str44, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "61692133" + "'", str45, "61692133");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 9223371990112226329L + "'", long47 == 9223371990112226329L);
        org.junit.Assert.assertEquals(locale50.toString(), "2022-02-22t17:09:27.315");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "11713421" + "'", str51, "11713421");
    }

    @Test
    public void test13153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13153");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DurationField durationField23 = zonedChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology29 = zonedChronology13.withZone(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 12, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology13.secondOfMinute();
        org.joda.time.DurationField durationField34 = zonedChronology13.halfdays();
        long long37 = durationField34.add((-52L), 21056400000L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.days();
        org.joda.time.DurationField durationField44 = chronology42.minutes();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str49 = dateTimeZone47.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology50 = org.joda.time.chrono.ZonedChronology.getInstance(chronology42, dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology50.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean55 = dateTimeZone53.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology56 = zonedChronology50.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology50.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology50.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology62 = zonedChronology50.withZone(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology50);
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology50.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology50.weekyear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((java.lang.Object) 21056400000L, (org.joda.time.Chronology) zonedChronology50);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withDurationAdded(readableDuration67, 120);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 909636479999999948L + "'", long37 == 909636479999999948L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+10:00" + "'", str49, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test13154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13154");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime.Property property25 = localDateTime13.property(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str27 = dateTimeFieldType26.getName();
        boolean boolean28 = localDateTime13.isSupported(dateTimeFieldType26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime13.withPeriodAdded(readablePeriod29, 444);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime13.plusMinutes(61824736);
        java.util.Date date34 = localDateTime13.toDate();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "dayOfMonth" + "'", str27, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 17:17:19 GMT+17:09 2022");
    }

    @Test
    public void test13155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13155");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test13156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13156");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder6 = builder4.setScript("");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str19 = dateTimeZone17.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology26 = zonedChronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology20.dayOfMonth();
        org.joda.time.DurationField durationField28 = zonedChronology20.seconds();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology20);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology20.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology20.millisOfDay();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleKeys();
        java.util.Locale locale36 = locale33.stripExtensions();
        int int37 = dateTimeField32.getMaximumShortTextLength(locale33);
        java.util.Locale.Builder builder38 = builder4.setLocale(locale33);
        java.util.Locale locale39 = builder38.build();
        java.lang.String str40 = locale39.getLanguage();
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.monthOfYear();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundHalfFloorCopy();
        org.joda.time.DurationField durationField47 = property45.getDurationField();
        org.joda.time.Interval interval48 = property45.toInterval();
        org.joda.time.LocalDateTime localDateTime49 = property45.withMinimumValue();
        boolean boolean50 = locale39.equals((java.lang.Object) property45);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Japanisch" + "'", str34, "Japanisch");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ja" + "'", str40, "ja");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test13157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13157");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.monthOfYear();
        org.joda.time.DurationField durationField24 = zonedChronology13.hours();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField27 = zonedChronology13.hours();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology13.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test13158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13158");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime1.plus(readableDuration22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime1.plus(readableDuration24);
        int int26 = localDateTime25.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 18 + "'", int26 == 18);
    }

    @Test
    public void test13159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13159");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology4 = null;
        boolean boolean5 = dateTimeFieldType3.isSupported(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType3.getField(chronology10);
        long long17 = chronology10.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DurationField durationField18 = chronology10.minutes();
        boolean boolean19 = charSet1.contains((java.lang.Object) chronology10);
        java.util.stream.Stream<java.lang.Character> charStream20 = charSet1.stream();
        charSet1.clear();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor24 = charSet23.iterator();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.Object[] objArray27 = charSet26.toArray();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        boolean boolean30 = charSet26.retainAll((java.util.Collection<java.lang.Character>) charSet29);
        boolean boolean31 = charSet23.containsAll((java.util.Collection<java.lang.Character>) charSet26);
        java.util.stream.Stream<java.lang.Character> charStream32 = charSet26.stream();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = dateTimeFieldType33.isSupported(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType33.getField(chronology40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str46 = dateTimeZone44.getShortName((long) 10);
        java.lang.String str47 = dateTimeZone44.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology40, dateTimeZone44);
        java.lang.String str51 = dateTimeZone44.getShortName(4518470650L);
        boolean boolean53 = dateTimeZone44.isStandardOffset((-62142803999251L));
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        int int58 = localDateTime55.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime55.toDateTime(readableInstant59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.yearOfEra();
        int int64 = property63.getMinimumValue();
        boolean boolean65 = dateTime60.equals((java.lang.Object) int64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int67 = dateTime60.get(dateTimeFieldType66);
        int int68 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean69 = charSet26.equals((java.lang.Object) int68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet71 = locale70.getExtensionKeys();
        java.lang.Object[] objArray72 = charSet71.toArray();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet74 = locale73.getExtensionKeys();
        boolean boolean75 = charSet71.retainAll((java.util.Collection<java.lang.Character>) charSet74);
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.lang.String str78 = locale76.getDisplayCountry(locale77);
        boolean boolean79 = locale76.hasExtensions();
        boolean boolean80 = charSet74.remove((java.lang.Object) boolean79);
        boolean boolean81 = charSet26.retainAll((java.util.Collection<java.lang.Character>) charSet74);
        charSet26.clear();
        boolean boolean83 = charSet1.addAll((java.util.Collection<java.lang.Character>) charSet26);
        int int84 = charSet26.size();
        java.util.Iterator<java.lang.Character> charItor85 = charSet26.iterator();
        boolean boolean86 = charSet26.isEmpty();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 70001L + "'", long17 == 70001L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charStream20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(charItor24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charStream32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+10:00" + "'", str46, "+10:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 36000000 + "'", int68 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charItor85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test13160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13160");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        long long19 = zonedChronology12.getDateTimeMillis((int) (byte) 0, (int) (byte) 10, (int) (short) 10, 749);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62142803999251L) + "'", long19 == (-62142803999251L));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test13161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13161");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.weekyears();
        org.joda.time.DurationField durationField19 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = zonedChronology12.withZone(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test13162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13162");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.dayOfWeek();
        int int14 = property13.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField16 = property13.getField();
        org.joda.time.LocalDateTime localDateTime17 = property13.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test13163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13163");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.millis();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField24 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = zonedChronology12.getDateTimeMillis(0, 62096181, 37, 62198068, 600, 607, (-4431727));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62198068 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test13164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13164");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField21 = zonedChronology12.millis();
        org.joda.time.DurationField durationField22 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test13165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13165");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = zonedChronology12.add(readablePeriod15, (long) 360000000, (int) 'a');
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.millisOfSecond();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.halfdays();
        org.joda.time.DurationField durationField22 = zonedChronology12.millis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000000L + "'", long18 == 360000000L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test13166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13166");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test13167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13167");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getVariant();
        java.lang.String str5 = locale3.getVariant();
        java.lang.String str6 = dateTimeZone1.getName((long) 1959, locale3);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category7);
        java.lang.String str11 = locale3.getDisplayVariant(locale10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.100" + "'", str6, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test13168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13168");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int3 = dateTimeZone1.getOffsetFromLocal(4518471413L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear(583);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withMillisOfSecond(583);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear(36);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        long long16 = property15.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 583L + "'", long16 == 583L);
    }

    @Test
    public void test13169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13169");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        int int35 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime32.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime32.weekyear();
        int int39 = localDateTime32.getMillisOfSecond();
        int int40 = localDateTime32.size();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime32.minusDays(61733639);
        long long44 = zonedChronology28.set((org.joda.time.ReadablePartial) localDateTime42, (long) (-1));
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology28.dayOfYear();
        org.joda.time.DurationField durationField46 = zonedChronology28.millis();
        org.joda.time.DurationFieldType durationFieldType47 = durationField46.getType();
        long long50 = durationField46.getMillis((long) 61838842, 1645452000001L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 798 + "'", int39 == 798);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-5332140895361202L) + "'", long44 == (-5332140895361202L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 61838842L + "'", long50 == 61838842L);
    }

    @Test
    public void test13170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13170");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((int) (short) 10);
        int int18 = localDateTime17.getYear();
        int int19 = localDateTime17.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear(27);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        long long36 = chronology29.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField37 = chronology29.minuteOfDay();
        long long39 = dateTimeField37.roundFloor((long) 'x');
        java.lang.String str41 = dateTimeField37.getAsShortText((long) 536);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField37.getType();
        int int43 = localDateTime17.get(dateTimeFieldType42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks(0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.days();
        org.joda.time.DurationField durationField50 = chronology48.minutes();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str55 = dateTimeZone53.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology56 = org.joda.time.chrono.ZonedChronology.getInstance(chronology48, dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology56.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean61 = dateTimeZone59.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology62 = zonedChronology56.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology56.minuteOfHour();
        org.joda.time.Chronology chronology64 = zonedChronology56.withUTC();
        org.joda.time.DurationField durationField65 = zonedChronology56.years();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology56.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks(0);
        int int71 = localDateTime70.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusHours((int) '#');
        int[] intArray77 = zonedChronology56.get((org.joda.time.ReadablePartial) localDateTime73, (long) 2022);
        org.joda.time.LocalDateTime.Property property78 = localDateTime73.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime73.minusSeconds((-292275054));
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusYears(1255);
        int int83 = localDateTime80.getSecondOfMinute();
        boolean boolean84 = localDateTime17.isEqual((org.joda.time.ReadablePartial) localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2021 + "'", int18 == 2021);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 70001L + "'", long36 == 70001L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1037 + "'", int43 == 1037);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:00" + "'", str55, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 22 + "'", int71 == 22);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 36002022]");
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test13171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13171");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField23 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.era();
        long long28 = dateTimeField26.roundHalfFloor(1876406982L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-62135632800000L) + "'", long28 == (-62135632800000L));
    }

    @Test
    public void test13172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13172");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withYearOfEra((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, (int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int31 = localDateTime30.getEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.monthOfYear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.era();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        int int38 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime35.toDateTime(readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        int int45 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        boolean boolean47 = localDateTime42.isEqual((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        int int52 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property54 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime35);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        int int57 = localDateTime56.getYear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusHours(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int61 = localDateTime59.get(dateTimeFieldType60);
        int int62 = localDateTime35.indexOf(dateTimeFieldType60);
        int int63 = localDateTime30.get(dateTimeFieldType60);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.days();
        boolean boolean66 = localDateTime64.isSupported(durationFieldType65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime30.withFieldAdded(durationFieldType65, 583);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime28.withFieldAdded(durationFieldType65, 194);
        java.lang.String str71 = durationFieldType65.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1397 + "'", int61 == 1397);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 599 + "'", int63 == 599);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "days" + "'", str71, "days");
    }

    @Test
    public void test13173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13173");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        int int10 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime(readableInstant11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusWeeks((int) (short) 1);
        boolean boolean15 = charSet1.remove((java.lang.Object) localDateTime14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        java.lang.String str18 = property17.getAsText();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology23, dateTimeZone28);
        org.joda.time.DurationField durationField32 = zonedChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology31.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology31.era();
        boolean boolean35 = property17.equals((java.lang.Object) dateTimeField34);
        int int36 = property17.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property17.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = property17.setCopy("1970-02-26T21:08:50.325");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-02-26T21:08:50.325\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "62238976" + "'", str18, "62238976");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test13174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13174");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField15 = zonedChronology12.weekyears();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusSeconds(24);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test13175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13175");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.monthOfYear();
        java.lang.String str21 = zonedChronology12.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
    }

    @Test
    public void test13176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13176");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plus(readableDuration21);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test13177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13177");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        boolean boolean15 = zonedChronology13.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology13.hourOfDay();
        org.joda.time.DurationField durationField17 = zonedChronology13.hours();
        org.joda.time.DurationField durationField18 = zonedChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfWeek();
        org.joda.time.DurationField durationField21 = zonedChronology13.months();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((-58380429600000L), (org.joda.time.Chronology) zonedChronology13);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = zonedChronology13.getDateTimeMillis((long) 61806312, 62189624, 61806312, 942, 817);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62189624 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test13178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13178");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime3.getFieldTypes();
        int int6 = localDateTime3.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plus(readablePeriod7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        java.lang.String str11 = property9.getAsShortText();
        int int12 = property9.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "8" + "'", str11, "8");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
    }

    @Test
    public void test13179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13179");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale4 = new java.util.Locale("BC", "61992392", "1970-01-31T09:59:59.999");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals(locale4.toString(), "bc_61992392_1970-01-31T09:59:59.999");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test13180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13180");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.year();
        org.joda.time.DurationField durationField14 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField16 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField17 = zonedChronology12.weeks();
        org.joda.time.Chronology chronology18 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.halfdayOfDay();
        boolean boolean21 = dateTimeField19.isLeap(1876400691L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13181");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withDayOfYear(52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withWeekOfWeekyear(768);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 768 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test13182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13182");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        int int7 = localDateTime1.getDayOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean26 = dateTimeZone24.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology27 = zonedChronology21.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int33 = localDateTime32.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.seconds();
        boolean boolean35 = localDateTime32.isSupported(durationFieldType34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.yearOfEra();
        int[] intArray38 = new int[] { 'a' };
        int int39 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime32, intArray38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime32.minusDays(0);
        org.joda.time.DateTime dateTime42 = localDateTime41.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = dateTimeFieldType43.isSupported(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType43.getField(chronology50);
        java.lang.String str52 = dateTimeField51.getName();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks(0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = locale59.getDisplayLanguage();
        java.lang.String str61 = locale59.getISO3Country();
        java.lang.String str62 = dateTimeField51.getAsShortText((org.joda.time.ReadablePartial) localDateTime56, 2, locale59);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime56.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plus(readableDuration65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks(0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.year();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime73.toDateTime(readableInstant75);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology79 = null;
        boolean boolean80 = dateTimeFieldType78.isSupported(chronology79);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(dateTimeZone81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusWeeks(0);
        org.joda.time.Chronology chronology85 = localDateTime84.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType78.getField(chronology85);
        org.joda.time.DurationField durationField87 = durationFieldType77.getField(chronology85);
        org.joda.time.DurationField durationField88 = chronology85.weeks();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = dateTimeField89.getType();
        boolean boolean91 = dateTime76.isSupported(dateTimeFieldType90);
        org.joda.time.Chronology chronology92 = dateTime76.getChronology();
        org.joda.time.DateTime dateTime93 = localDateTime64.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean94 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime93);
        int int95 = property8.compareTo((org.joda.time.ReadableInstant) dateTime42);
        int int96 = property8.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[97]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-292275054) + "'", int39 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "millisOfSecond" + "'", str52, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Japanisch" + "'", str60, "Japanisch");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2" + "'", str62, "2");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 23 + "'", int96 == 23);
    }

    @Test
    public void test13183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13183");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime1.dayOfYear();
        java.util.Locale locale13 = new java.util.Locale("0", "Canada", "17");
        int int14 = property9.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime15 = property9.withMinimumValue();
        int int16 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusSeconds(61692116);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMonths(216);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals(locale13.toString(), "0_CANADA_17");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 17 + "'", int16 == 17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test13184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13184");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField17 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test13185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13185");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfCentury((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withWeekyear(62);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test13186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13186");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy(12);
        org.joda.time.LocalDateTime localDateTime12 = property7.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = property7.getField();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = locale14.stripExtensions();
        java.lang.String str18 = locale17.getDisplayVariant();
        boolean boolean19 = locale17.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale17.getDisplayScript(locale20);
        java.lang.String str22 = locale20.getDisplayLanguage();
        int int23 = property7.getMaximumTextLength(locale20);
        java.lang.Class<?> wildcardClass24 = property7.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Deutsch" + "'", str22, "Deutsch");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test13187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13187");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime27.toString(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:17:19.366" + "'", str29, "2022-02-22T17:17:19.366");
    }

    @Test
    public void test13188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13188");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        boolean boolean15 = zonedChronology13.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = zonedChronology13.getZone();
        org.joda.time.DurationField durationField19 = zonedChronology13.months();
        org.joda.time.DurationField durationField20 = zonedChronology13.millis();
        org.joda.time.DurationField durationField21 = durationFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DurationField durationField22 = zonedChronology13.hours();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.weekOfWeekyear();
        org.joda.time.DurationField durationField25 = zonedChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology13.dayOfWeek();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test13189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13189");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField17 = zonedChronology12.months();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test13190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13190");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(30L, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks(0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str15 = dateTimeZone13.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, dateTimeZone13);
        java.lang.String str17 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        int int22 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime19.toDateTime(readableInstant23);
        boolean boolean26 = dateTime24.equals((java.lang.Object) 'a');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        int int31 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime28.toDateTime(readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        int int37 = property36.getMinimumValue();
        boolean boolean38 = dateTime33.equals((java.lang.Object) int37);
        org.joda.time.Chronology chronology39 = dateTime33.getChronology();
        int int40 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime33);
        int int41 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime33);
        long long42 = dateTime33.getMillis();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime33.getZone();
        int int44 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean46 = dateTimeZone2.equals((java.lang.Object) (-52));
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone2);
        long long50 = dateTimeZone2.convertLocalToUTC(1645427281857L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514239501L + "'", long42 == 1645514239501L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645427281757L + "'", long50 == 1645427281757L);
    }

    @Test
    public void test13191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13191");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DurationField durationField23 = zonedChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology29 = zonedChronology13.withZone(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 12, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField35 = dateTimeField34.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test13192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13192");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = zonedChronology13.add(readablePeriod21, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 61685839, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeZone dateTimeZone27 = zonedChronology13.getZone();
        org.joda.time.DurationField durationField28 = zonedChronology13.weeks();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = zonedChronology13.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology13.getZone();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test13193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13193");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundCeilingCopy();
        int int11 = property8.getLeapAmount();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        int int15 = property14.getMinimumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = property14.getAsText(locale17);
        org.joda.time.DurationField durationField19 = property14.getLeapDurationField();
        boolean boolean20 = property14.isLeap();
        long long21 = property14.remainder();
        int int22 = property14.getMinimumValueOverall();
        java.lang.Character[] charArray26 = new java.lang.Character[] { ' ', '#', 'a' };
        java.util.LinkedHashSet<java.lang.Character> charSet27 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet27, charArray26);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("");
        boolean boolean31 = charSet27.equals((java.lang.Object) locale30);
        java.lang.String str32 = property14.getAsShortText(locale30);
        java.lang.String str33 = property8.getAsText(locale30);
        java.lang.String str34 = locale30.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4555039603L + "'", long21 == 4555039603L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "20" + "'", str33, "20");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
    }

    @Test
    public void test13194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13194");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int24 = localDateTime23.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        boolean boolean26 = localDateTime23.isSupported(durationFieldType25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.yearOfEra();
        int[] intArray29 = new int[] { 'a' };
        int int30 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDateTime23, intArray29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime23.minusDays(0);
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = localDateTime32.toString(dateTimeFormatter34);
        int int36 = localDateTime32.getMillisOfSecond();
        int int37 = localDateTime32.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        int int42 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime39.isEqual((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(0);
        int int49 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.dayOfWeek();
        org.joda.time.LocalDateTime.Property property51 = localDateTime46.yearOfEra();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime46.withFields((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.minusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime61 = localDateTime53.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusWeeks(0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.days();
        org.joda.time.DurationField durationField68 = chronology66.minutes();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str73 = dateTimeZone71.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology74 = org.joda.time.chrono.ZonedChronology.getInstance(chronology66, dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology74.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean79 = dateTimeZone77.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology80 = zonedChronology74.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology74.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField82 = zonedChronology74.year();
        java.lang.String str83 = zonedChronology74.toString();
        org.joda.time.DurationField durationField84 = zonedChronology74.months();
        org.joda.time.DateTimeField dateTimeField85 = zonedChronology74.year();
        org.joda.time.DateTimeField dateTimeField86 = zonedChronology74.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = dateTimeField86.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = dateTimeField86.getType();
        org.joda.time.LocalDateTime.Property property89 = localDateTime61.property(dateTimeFieldType88);
        boolean boolean90 = localDateTime32.isSupported(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-292275054) + "'", int30 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T09:59:59.999" + "'", str35, "1970-01-01T09:59:59.999");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 999 + "'", int36 == 999);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+10:00" + "'", str73, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str83, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test13195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13195");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        int int7 = localDateTime3.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks(0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType8.getField(chronology15);
        java.lang.String str17 = dateTimeField16.getName();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks(0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getDisplayLanguage();
        java.lang.String str26 = locale24.getISO3Country();
        java.lang.String str27 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, 2, locale24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime.Property property33 = localDateTime21.property(dateTimeFieldType32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str35 = dateTimeFieldType34.getName();
        boolean boolean36 = localDateTime21.isSupported(dateTimeFieldType34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology38 = null;
        boolean boolean39 = dateTimeFieldType37.isSupported(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType37.getField(chronology44);
        java.lang.String str46 = dateTimeField45.getName();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusWeeks(0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.lang.String str55 = locale53.getISO3Country();
        java.lang.String str56 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localDateTime50, 2, locale53);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime50.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime50.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime.Property property62 = localDateTime50.property(dateTimeFieldType61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str64 = dateTimeFieldType63.getName();
        boolean boolean65 = localDateTime50.isSupported(dateTimeFieldType63);
        org.joda.time.LocalDateTime.Property property66 = localDateTime21.property(dateTimeFieldType63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime68 = localDateTime3.withField(dateTimeFieldType63, 2014);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2014 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 710 + "'", int7 == 710);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfSecond" + "'", str17, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Japanisch" + "'", str25, "Japanisch");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2" + "'", str27, "2");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "dayOfMonth" + "'", str35, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "millisOfSecond" + "'", str46, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Japanisch" + "'", str54, "Japanisch");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2" + "'", str56, "2");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "dayOfMonth" + "'", str64, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test13196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13196");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.dayOfWeek();
        org.joda.time.DurationField durationField19 = zonedChronology12.millis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13197");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField23 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.centuryOfEra();
        org.joda.time.DurationField durationField25 = zonedChronology12.centuries();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology12.add(readablePeriod26, 100L, 126);
        org.joda.time.DurationField durationField30 = zonedChronology12.centuries();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test13198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13198");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField22 = zonedChronology12.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType23.getField(chronology30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str36 = dateTimeZone34.getShortName((long) 10);
        java.lang.String str37 = dateTimeZone34.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone34);
        java.lang.String str41 = dateTimeZone34.getShortName(4518470650L);
        long long44 = dateTimeZone34.adjustOffset(0L, false);
        long long47 = dateTimeZone34.convertLocalToUTC((long) '4', true);
        org.joda.time.Chronology chronology48 = zonedChronology12.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-35999948L) + "'", long47 == (-35999948L));
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test13199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13199");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        boolean boolean7 = locale4.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = locale8.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale8.getDisplayCountry(locale12);
        java.lang.String str16 = locale4.getDisplayVariant(locale12);
        java.util.Set<java.lang.Character> charSet17 = locale12.getExtensionKeys();
        boolean boolean18 = charSet3.removeAll((java.util.Collection<java.lang.Character>) charSet17);
        java.util.Iterator<java.lang.Character> charItor19 = charSet17.iterator();
        java.util.Iterator<java.lang.Character> charItor20 = charSet17.iterator();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str32 = dateTimeZone30.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone30);
        org.joda.time.DurationField durationField34 = zonedChronology33.weeks();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology33.year();
        org.joda.time.DurationField durationField36 = zonedChronology33.months();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        java.lang.String str42 = dateTimeZone39.getID();
        long long45 = dateTimeZone39.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        int int48 = dateTimeZone39.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology33, dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology49.secondOfDay();
        org.joda.time.DurationField durationField51 = zonedChronology49.years();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology49.secondOfDay();
        org.joda.time.DurationField durationField53 = zonedChronology49.centuries();
        long long56 = durationField53.subtract(1645427669649L, (long) 234);
        boolean boolean57 = charSet17.remove((java.lang.Object) durationField53);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanisch" + "'", str1, "Japanisch");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charItor19);
        org.junit.Assert.assertNotNull(charItor20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-35999999L) + "'", long45 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-736787292330351L) + "'", long56 == (-736787292330351L));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test13200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13200");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        int int56 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(readableInstant57);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime45.withWeekyear((int) 'x');
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readableDuration64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withMillisOfDay(1439);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.monthOfYear();
        int int69 = localDateTime65.getMinuteOfHour();
        org.joda.time.tz.Provider provider70 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider70);
        org.joda.time.DateTimeZone dateTimeZone73 = provider70.getZone("Coordinated Universal Time");
        java.util.Set<java.lang.String> strSet74 = provider70.getAvailableIDs();
        boolean boolean75 = localDateTime65.equals((java.lang.Object) provider70);
        int int76 = localDateTime65.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanisch" + "'", str39, "Japanisch");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 17 + "'", int69 == 17);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 17 + "'", int76 == 17);
    }

    @Test
    public void test13201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13201");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withYearOfEra((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, (int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minusMillis((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime23.withMonthOfYear(61800629);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61800629 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test13202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13202");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        long long27 = zonedChronology12.add(1645427275536L, 0L, 8);
        org.joda.time.Chronology chronology28 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.weekyearOfCentury();
        long long33 = zonedChronology12.add((-295200000L), (long) 755, 433);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology12.year();
        org.joda.time.DurationField durationField36 = zonedChronology12.halfdays();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        int int41 = localDateTime40.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMinutes(749);
        int int44 = localDateTime43.getMonthOfYear();
        long long46 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime43, 1645427417213L);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology12.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645427275536L + "'", long27 == 1645427275536L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-294873085L) + "'", long33 == (-294873085L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645469299995L + "'", long46 == 1645469299995L);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test13203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13203");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = property1.addToCopy((long) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withCenturyOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear((int) (short) 1);
        boolean boolean14 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.plusSeconds(62136933);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test13204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13204");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DurationField durationField23 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField25 = zonedChronology12.months();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test13205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13205");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ita");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("days");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.parse("days");
        java.lang.String[] strArray18 = new java.lang.String[] { "427", "+10:00", "\uce90\ub098\ub2e4", "2022", "2", "2022", "2022-02-22T07:07:50.018", "2022", "millisOfSecond" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strList19);
        java.lang.String str22 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strList19);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList19, filteringMode23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap25);
        java.util.Collection<java.util.Locale> localeCollection27 = null;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter(languageRangeList26, localeCollection27);
        org.joda.time.tz.NameProvider nameProvider29 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone39);
        boolean boolean44 = zonedChronology42.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology42.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology42.dayOfYear();
        java.util.Locale locale48 = java.util.Locale.PRC;
        java.lang.String str49 = dateTimeField46.getAsText(7, locale48);
        java.lang.String str52 = nameProvider29.getName(locale48, "f\351vr.", "1027");
        java.lang.String str53 = locale48.getCountry();
        java.util.Set<java.lang.String> strSet54 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str55 = java.util.Locale.lookupTag(languageRangeList26, (java.util.Collection<java.lang.String>) strSet54);
        java.lang.String str56 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap57);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(nameProvider29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "7" + "'", str49, "7");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "CN" + "'", str53, "CN");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(languageRangeList58);
    }

    @Test
    public void test13206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13206");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int13 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        int int20 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        int int21 = localDateTime17.getDayOfWeek();
        int int22 = localDateTime17.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withTime(61973076, 1645103329, (int) (byte) 1, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61973076 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 17 + "'", int22 == 17);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test13207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13207");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField23 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test13208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13208");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        int int20 = dateTimeField19.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int25 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType28.getField(chronology35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        java.lang.String str42 = dateTimeZone39.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology35, dateTimeZone39);
        java.lang.String str46 = dateTimeZone39.getShortName(4518470650L);
        boolean boolean48 = dateTimeZone39.isStandardOffset((-62142803999251L));
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        int int53 = localDateTime50.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime50.toDateTime(readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfEra();
        int int59 = property58.getMinimumValue();
        boolean boolean60 = dateTime55.equals((java.lang.Object) int59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int62 = dateTime55.get(dateTimeFieldType61);
        int int63 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime55);
        int int65 = dateTimeZone39.getOffset((long) 324);
        org.joda.time.DateTime dateTime66 = localDateTime27.toDateTime(dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime27.minus(readablePeriod67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone71);
        int int73 = localDateTime70.compareTo((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        boolean boolean75 = localDateTime70.isEqual((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusWeeks(0);
        int int80 = localDateTime74.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime.Property property81 = localDateTime77.dayOfWeek();
        org.joda.time.LocalDateTime.Property property82 = localDateTime77.yearOfEra();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.hourOfDay();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime77.withFields((org.joda.time.ReadablePartial) localDateTime84);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime84.minusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime92 = localDateTime84.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime.Property property93 = localDateTime84.dayOfWeek();
        int[] intArray94 = localDateTime84.getValues();
        int int95 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localDateTime68, intArray94);
        org.joda.time.LocalDateTime.Property property96 = localDateTime68.dayOfWeek();
        java.lang.String str97 = property96.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime99 = property96.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+10:00" + "'", str46, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 36000000 + "'", int63 == 36000000);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 36000000 + "'", int65 == 36000000);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[1970, 1, 1, 35999999]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 31 + "'", int95 == 31);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "\u571f" + "'", str97, "\u571f");
    }

    @Test
    public void test13209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13209");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField23 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.minuteOfHour();
        java.lang.Object obj25 = null;
        boolean boolean26 = zonedChronology12.equals(obj25);
        org.joda.time.DurationField durationField27 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = zonedChronology12.withZone(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test13210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13210");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str21 = dateTimeZone19.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology28 = zonedChronology22.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology22.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology22.getZone();
        org.joda.time.DurationField durationField35 = durationFieldType9.getField((org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology22.yearOfEra();
        org.joda.time.DurationField durationField38 = zonedChronology22.weekyears();
        org.joda.time.DurationField durationField39 = zonedChronology22.millis();
        org.joda.time.DurationField durationField40 = zonedChronology22.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = zonedChronology22.getDateTimeMillis((long) 567, 61902035, 992, 77, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61902035 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test13211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13211");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.weekyear();
        int int8 = localDateTime1.getMillisOfSecond();
        int int9 = localDateTime1.size();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.minus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.era();
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone24);
        org.joda.time.DurationField durationField28 = zonedChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology27.year();
        org.joda.time.DateTimeZone dateTimeZone30 = zonedChronology27.getZone();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = dateTimeZone30.getShortName((long) '4', locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str37 = nameProvider13.getName(locale32, "Japanese", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.days();
        org.joda.time.DurationField durationField45 = chronology43.minutes();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str50 = dateTimeZone48.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology51 = org.joda.time.chrono.ZonedChronology.getInstance(chronology43, dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology51.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean56 = dateTimeZone54.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology57 = zonedChronology51.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology51.weekOfWeekyear();
        org.joda.time.DurationField durationField60 = dateTimeField59.getLeapDurationField();
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str63 = locale61.getDisplayCountry(locale62);
        java.util.Locale locale64 = locale61.stripExtensions();
        int int65 = dateTimeField59.getMaximumShortTextLength(locale64);
        java.lang.String str66 = locale64.getISO3Country();
        java.lang.String str69 = nameProvider13.getShortName(locale64, "CAN", "2022-02-22T17:08:00.516+10:00");
        java.lang.String str70 = locale64.getDisplayCountry();
        int int71 = property12.getMaximumShortTextLength(locale64);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 290 + "'", int8 == 290);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNull(durationField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
    }

    @Test
    public void test13212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13212");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Spliterator<java.lang.Character> charSpliterator10 = charSet1.spliterator();
        int int11 = charSet1.size();
        java.util.Spliterator<java.lang.Character> charSpliterator12 = charSet1.spliterator();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor15 = charSet14.iterator();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.lang.Object[] objArray18 = charSet17.toArray();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        boolean boolean21 = charSet17.retainAll((java.util.Collection<java.lang.Character>) charSet20);
        boolean boolean22 = charSet14.containsAll((java.util.Collection<java.lang.Character>) charSet17);
        java.util.stream.Stream<java.lang.Character> charStream23 = charSet17.stream();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.lang.Object[] objArray26 = charSet25.toArray();
        org.joda.time.ReadableInstant[] readableInstantArray27 = new org.joda.time.ReadableInstant[] {};
        org.joda.time.ReadableInstant[] readableInstantArray28 = charSet25.toArray(readableInstantArray27);
        org.joda.time.DurationField[] durationFieldArray29 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray30 = charSet25.toArray(durationFieldArray29);
        boolean boolean31 = charSet17.addAll((java.util.Collection<java.lang.Character>) charSet25);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        int int34 = charSet33.size();
        boolean boolean35 = charSet17.addAll((java.util.Collection<java.lang.Character>) charSet33);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor38 = charSet37.iterator();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        java.lang.Object[] objArray41 = charSet40.toArray();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        boolean boolean44 = charSet40.retainAll((java.util.Collection<java.lang.Character>) charSet43);
        boolean boolean45 = charSet37.containsAll((java.util.Collection<java.lang.Character>) charSet40);
        java.util.stream.Stream<java.lang.Character> charStream46 = charSet40.stream();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        java.lang.Object[] objArray49 = charSet48.toArray();
        org.joda.time.ReadableInstant[] readableInstantArray50 = new org.joda.time.ReadableInstant[] {};
        org.joda.time.ReadableInstant[] readableInstantArray51 = charSet48.toArray(readableInstantArray50);
        org.joda.time.DurationField[] durationFieldArray52 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray53 = charSet48.toArray(durationFieldArray52);
        boolean boolean54 = charSet40.addAll((java.util.Collection<java.lang.Character>) charSet48);
        boolean boolean55 = charSet17.containsAll((java.util.Collection<java.lang.Character>) charSet40);
        java.lang.Object[] objArray56 = charSet17.toArray();
        boolean boolean57 = charSet17.isEmpty();
        boolean boolean58 = charSet1.addAll((java.util.Collection<java.lang.Character>) charSet17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charSpliterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(charSpliterator12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(charItor15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charStream23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(readableInstantArray27);
        org.junit.Assert.assertNotNull(readableInstantArray28);
        org.junit.Assert.assertNotNull(durationFieldArray29);
        org.junit.Assert.assertNotNull(durationFieldArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(charItor38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charStream46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(readableInstantArray50);
        org.junit.Assert.assertNotNull(readableInstantArray51);
        org.junit.Assert.assertNotNull(durationFieldArray52);
        org.junit.Assert.assertNotNull(durationFieldArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test13213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13213");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.hourOfHalfday();
        long long24 = zonedChronology12.add((long) 30667, 0L, 999);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 30667L + "'", long24 == 30667L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test13214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13214");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = zonedChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int30 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime27.toDateTime(readableInstant31);
        boolean boolean34 = dateTime32.equals((java.lang.Object) 'a');
        java.lang.String str35 = dateTime32.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        int int40 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime37.toDateTime(readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        int int47 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        boolean boolean49 = localDateTime44.isEqual((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusWeeks(0);
        int int54 = localDateTime48.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property56 = localDateTime48.year();
        java.util.Locale locale59 = new java.util.Locale("", "\uce90\ub098\ub2e4");
        int int60 = property56.getMaximumShortTextLength(locale59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(dateTimeZone63);
        int int65 = localDateTime62.compareTo((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime62.toDateTime(readableInstant66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(dateTimeZone68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.yearOfEra();
        int int71 = property70.getMinimumValue();
        boolean boolean72 = dateTime67.equals((java.lang.Object) int71);
        int int73 = property56.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusWeeks(0);
        int int78 = localDateTime77.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology82 = null;
        boolean boolean83 = dateTimeFieldType81.isSupported(chronology82);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(dateTimeZone84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.minusWeeks(0);
        org.joda.time.Chronology chronology88 = localDateTime87.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = dateTimeFieldType81.getField(chronology88);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime80.withField(dateTimeFieldType81, (int) 'x');
        int int92 = dateTime67.get(dateTimeFieldType81);
        java.lang.String str93 = dateTime67.toString();
        boolean boolean94 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime32.getZone();
        org.joda.time.Chronology chronology96 = zonedChronology12.withZone(dateTimeZone95);
        java.lang.String str97 = dateTimeZone95.getID();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:17:20.421+10:00" + "'", str35, "2022-02-22T17:17:20.421+10:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 22 + "'", int78 == 22);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(localDateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 422 + "'", int92 == 422);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2022-02-22T17:17:20.422+10:00" + "'", str93, "2022-02-22T17:17:20.422+10:00");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "+10:00" + "'", str97, "+10:00");
    }

    @Test
    public void test13215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13215");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DurationField durationField24 = zonedChronology12.weeks();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology12.add(readablePeriod25, (long) 12, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology12.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 12L + "'", long28 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test13216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13216");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test13217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13217");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        long long4 = property3.remainder();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category5, locale6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        int int11 = property10.getMinimumValue();
        java.lang.String str12 = property10.getAsText();
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.lang.String str14 = property10.getAsText(locale13);
        java.lang.String str15 = locale6.getDisplayCountry(locale13);
        java.lang.String str16 = property3.getAsShortText(locale13);
        java.lang.String str17 = locale13.toLanguageTag();
        java.lang.String str18 = locale13.getCountry();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale13.getDisplayName(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = locale13.getUnicodeLocaleType("62220128");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 62220128");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1876640541L + "'", long4 == 1876640541L);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "f\351vr." + "'", str16, "f\351vr.");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fr-FR" + "'", str17, "fr-FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "FR" + "'", str18, "FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "francese (Francia)" + "'", str20, "francese (Francia)");
    }

    @Test
    public void test13218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13218");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField22 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test13219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13219");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = new java.util.Locale("17", "Etc/UTC");
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category7, locale8);
        java.lang.String str10 = locale8.toLanguageTag();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category11, locale12);
        java.lang.String str14 = locale12.toLanguageTag();
        java.lang.String str15 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.lang.String str17 = locale12.getDisplayName();
        java.util.Locale locale21 = new java.util.Locale("600", "22", "61692116");
        java.lang.String str22 = locale12.getDisplayCountry(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale23.getVariant();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category30, locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.util.Locale locale36 = locale33.stripExtensions();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale37.getDisplayCountry(locale38);
        java.lang.String str40 = locale33.getDisplayCountry(locale37);
        java.util.Locale.setDefault(category30, locale33);
        java.lang.String str42 = property29.getAsText(locale33);
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.lang.String str44 = locale33.getDisplayLanguage(locale43);
        java.lang.String str45 = locale23.getDisplayName(locale43);
        java.lang.String str46 = locale21.getDisplayCountry(locale23);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale5.toString(), "17_ETC/UTC");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en-CA" + "'", str10, "en-CA");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en-CA" + "'", str14, "en-CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Englisch (Kanada)" + "'", str17, "Englisch (Kanada)");
        org.junit.Assert.assertEquals(locale21.toString(), "600_22_61692116");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Canada" + "'", str22, "Canada");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9" + "'", str42, "9");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u5fb7\u6587" + "'", str44, "\u5fb7\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str45, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "22" + "'", str46, "22");
    }

    @Test
    public void test13220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13220");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusHours(2022);
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.plusSeconds(58);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test13221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13221");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DurationField durationField23 = zonedChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology29 = zonedChronology13.withZone(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 12, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField32 = zonedChronology13.minutes();
        java.lang.String str33 = durationField32.getName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "minutes" + "'", str33, "minutes");
    }

    @Test
    public void test13222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13222");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours(2012);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test13223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13223");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusMillis((int) 'a');
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(30L, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        long long19 = property18.remainder();
        int int20 = property18.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = property18.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMinuteOfHour((int) '#');
        java.util.Date date46 = localDateTime43.toDate();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusMillis(749);
        boolean boolean49 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        int[] intArray50 = localDateTime48.getValues();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minusMillis(755);
        int int53 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str55 = durationFieldType54.toString();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusWeeks(0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.days();
        org.joda.time.DurationField durationField62 = chronology60.minutes();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str67 = dateTimeZone65.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology68 = org.joda.time.chrono.ZonedChronology.getInstance(chronology60, dateTimeZone65);
        org.joda.time.DurationField durationField69 = zonedChronology68.weeks();
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology68.year();
        org.joda.time.DurationField durationField71 = zonedChronology68.months();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str76 = dateTimeZone74.getShortName((long) 10);
        java.lang.String str77 = dateTimeZone74.getID();
        long long80 = dateTimeZone74.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone74);
        int int83 = dateTimeZone74.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology84 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology68, dateTimeZone74);
        org.joda.time.DateTimeField dateTimeField85 = zonedChronology68.millisOfDay();
        org.joda.time.DurationField durationField86 = durationFieldType54.getField((org.joda.time.Chronology) zonedChronology68);
        org.joda.time.DurationFieldType durationFieldType87 = durationField86.getType();
        boolean boolean88 = localDateTime48.isSupported(durationFieldType87);
        boolean boolean89 = localDateTime11.isSupported(durationFieldType87);
        java.lang.String str90 = durationFieldType87.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4555040727L + "'", long19 == 4555040727L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Japanisch" + "'", str39, "Japanisch");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Mon Feb 21 17:17:21 GMT+17:09 2022");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2022, 2, 21, 62241476]");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "seconds" + "'", str55, "seconds");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+10:00" + "'", str67, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+10:00" + "'", str76, "+10:00");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:00" + "'", str77, "+10:00");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-35999999L) + "'", long80 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 36000000 + "'", int83 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "seconds" + "'", str90, "seconds");
    }

    @Test
    public void test13224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13224");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField22 = zonedChronology12.weeks();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology12.getZone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test13225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13225");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = zonedChronology12.getDateTimeMillis(62071853467911292L, 61744661, 536, 0, 793);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61744661 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test13226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13226");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        int int12 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays(860);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test13227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13227");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = zonedChronology12.add(readablePeriod16, 0L, 2);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = zonedChronology12.hours();
        org.joda.time.DurationField durationField22 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        int int35 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfWeek();
        int int37 = property36.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime38 = property36.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYear();
        int int41 = localDateTime39.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plus(readableDuration42);
        int int44 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray46 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime43, (-58376098292591L));
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.days();
        org.joda.time.DurationField durationField55 = chronology53.minutes();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str60 = dateTimeZone58.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology61 = org.joda.time.chrono.ZonedChronology.getInstance(chronology53, dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology61.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean66 = dateTimeZone64.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology67 = zonedChronology61.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology61.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology61.weekyear();
        org.joda.time.DateTimeZone dateTimeZone71 = zonedChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology61.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology61.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int77 = dateTimeZone75.getOffsetFromLocal(4518471413L);
        boolean boolean79 = dateTimeZone75.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology80 = zonedChronology61.withZone(dateTimeZone75);
        java.lang.String str82 = dateTimeZone75.getName((long) 61751964);
        org.joda.time.Chronology chronology83 = zonedChronology12.withZone(dateTimeZone75);
        long long87 = dateTimeZone75.convertLocalToUTC((long) 16390826, true, 1645365600385L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 17 + "'", int41 == 17);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[120, 2, 20, 11307409]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.100" + "'", str82, "+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 16390726L + "'", long87 == 16390726L);
    }

    @Test
    public void test13228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13228");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.years();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField23 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.dayOfMonth();
        java.util.Locale locale30 = new java.util.Locale("2022-02-22T17:08:19.278+10:00", "2022-02-22T17:08:51.272", "17");
        java.lang.String str32 = locale30.getExtension('x');
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("749");
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        java.lang.String str36 = locale30.getVariant();
        java.lang.String str37 = dateTimeField25.getAsShortText(62164743, locale30);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale30.toString(), "2022-02-22t17:08:19.278+10:00_2022-02-22T17:08:51.272_17");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:08:51.272" + "'", str35, "2022-02-22T17:08:51.272");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "17" + "'", str36, "17");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "62164743" + "'", str37, "62164743");
    }

    @Test
    public void test13229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13229");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int20 = dateTimeZone18.getOffsetFromLocal(4518471413L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone18);
        long long23 = dateTimeZone18.nextTransition(60639990L);
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category25, locale26);
        java.lang.String str28 = locale26.toLanguageTag();
        java.util.Locale.Category category29 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category29, locale30);
        java.lang.String str32 = locale30.toLanguageTag();
        java.lang.String str33 = locale26.getDisplayLanguage(locale30);
        java.lang.String str34 = dateTimeZone18.getName(0L, locale26);
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology35.halfdayOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 60639990L + "'", long23 == 60639990L);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en-CA" + "'", str28, "en-CA");
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.FORMAT + "'", category29.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "en-CA" + "'", str32, "en-CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English" + "'", str33, "English");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.100" + "'", str34, "+00:00:00.100");
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test13230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13230");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.monthOfYear();
        java.lang.String str18 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str18, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test13231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13231");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DurationField durationField23 = zonedChronology12.weeks();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology42 = zonedChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology36.weekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = zonedChronology36.getZone();
        org.joda.time.Chronology chronology47 = zonedChronology12.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test13232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13232");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int3 = dateTimeZone1.getOffsetFromLocal(4518471413L);
        boolean boolean5 = dateTimeZone1.isStandardOffset((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 61673414);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType11.isSupported(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType11.getField(chronology18);
        java.lang.String str20 = dateTimeField19.getName();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale27.getDisplayLanguage();
        java.lang.String str29 = locale27.getISO3Country();
        java.lang.String str30 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, 2, locale27);
        int int32 = dateTimeField19.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = dateTimeFieldType33.isSupported(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType33.getField(chronology40);
        java.lang.String str42 = dateTimeField41.getName();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks(0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale49.getISO3Country();
        java.lang.String str52 = dateTimeField41.getAsShortText((org.joda.time.ReadablePartial) localDateTime46, 2, locale49);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime46.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plus(readableDuration55);
        int[] intArray61 = new int[] { 0, 292278993, 10, 'a' };
        int int62 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56, intArray61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone65);
        int int67 = localDateTime64.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime64.toDateTime(readableInstant68);
        boolean boolean71 = dateTime69.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime72 = localDateTime56.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        int int73 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime69);
        int int74 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Instant instant75 = dateTime69.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        boolean boolean77 = dateTime69.isSupported(dateTimeFieldType76);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfSecond();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.weekOfWeekyear();
        org.joda.time.Chronology chronology81 = localDateTime78.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = dateTimeField82.getType();
        boolean boolean84 = dateTime69.isSupported(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "millisOfSecond" + "'", str20, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japanisch" + "'", str28, "Japanisch");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2" + "'", str30, "2");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 999 + "'", int32 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "millisOfSecond" + "'", str42, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Japanisch" + "'", str50, "Japanisch");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2" + "'", str52, "2");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 360000000 + "'", int73 == 360000000);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test13233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13233");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        int int6 = charSet4.size();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor9 = charSet8.iterator();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        boolean boolean12 = dateTimeFieldType10.isSupported(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks(0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType10.getField(chronology17);
        long long24 = chronology17.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DurationField durationField25 = chronology17.minutes();
        boolean boolean26 = charSet8.contains((java.lang.Object) chronology17);
        java.util.stream.Stream<java.lang.Character> charStream27 = charSet8.stream();
        boolean boolean28 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet8);
        java.lang.Object[] objArray29 = charSet8.toArray();
        java.util.stream.Stream<java.lang.Character> charStream30 = charSet8.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(charItor9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 70001L + "'", long24 == 70001L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(charStream30);
    }

    @Test
    public void test13234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13234");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        java.lang.String str1 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hours" + "'", str1, "hours");
    }

    @Test
    public void test13235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13235");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusWeeks((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDateTime8.getFields();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusMinutes(759);
        int int12 = localDateTime8.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
    }

    @Test
    public void test13236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13236");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = zonedChronology13.add(readablePeriod21, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 61685839, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DurationField durationField27 = zonedChronology13.seconds();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        int int32 = localDateTime31.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime31.getFieldTypes();
        int int34 = localDateTime31.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plus(readablePeriod35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime31.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = property37.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = property37.roundHalfCeilingCopy();
        int int40 = localDateTime39.size();
        boolean boolean41 = zonedChronology13.equals((java.lang.Object) localDateTime39);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withDurationAdded(readableDuration42, 311);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53L + "'", long24 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test13237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13237");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = zonedChronology12.add(readablePeriod16, 0L, 2);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = zonedChronology12.months();
        org.joda.time.DurationField durationField22 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.secondOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test13238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13238");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.year();
        org.joda.time.DurationField durationField25 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.hourOfDay();
        boolean boolean29 = dateTimeField28.isLenient();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13239");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("98", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=98");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13240");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withYearOfEra((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, (int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(18);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.centuryOfEra();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test13241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13241");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        int int7 = property2.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime8 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusYears(825);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test13242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13242");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.secondOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField25 = zonedChronology12.weeks();
        boolean boolean26 = durationField25.isSupported();
        long long28 = durationField25.getMillis(953);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 576374400000L + "'", long28 == 576374400000L);
    }

    @Test
    public void test13243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13243");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test13244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13244");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.days();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.getID();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(53L, dateTimeZone11);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology23, dateTimeZone28);
        org.joda.time.DurationField durationField32 = zonedChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology31.year();
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology31.millisOfSecond();
        org.joda.time.DurationField durationField36 = zonedChronology31.hours();
        org.joda.time.DurationField durationField37 = zonedChronology31.centuries();
        org.joda.time.DurationField durationField38 = zonedChronology31.hours();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology31.era();
        org.joda.time.DateTimeZone dateTimeZone40 = zonedChronology31.getZone();
        org.joda.time.DateTime dateTime41 = localDateTime18.toDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test13245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13245");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        long long3 = property2.remainder();
        org.joda.time.DurationField durationField4 = property2.getDurationField();
        org.joda.time.LocalDateTime localDateTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime6 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.yearOfEra();
        int int21 = localDateTime15.size();
        int int22 = property2.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime24.getZone();
        long long30 = dateTimeZone26.convertLocalToUTC((long) 1390, false, 1876077150L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        int int35 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime32.toDateTime(readableInstant36);
        boolean boolean39 = dateTime37.equals((java.lang.Object) 'a');
        int int40 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean41 = localDateTime15.equals((java.lang.Object) dateTime37);
        int int42 = localDateTime15.getEra();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 4555041424L + "'", long3 == 4555041424L);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:17:21.424+10:00" + "'", str25, "2022-02-22T17:17:21.424+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-35998610L) + "'", long30 == (-35998610L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 36000000 + "'", int40 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test13246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13246");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.year();
        java.lang.String str25 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.hourOfHalfday();
        java.lang.String str29 = zonedChronology12.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str25, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str29, "ZonedChronology[ISOChronology[UTC], +10:00]");
    }

    @Test
    public void test13247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13247");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusDays(61973669);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test13248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13248");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale8 = new java.util.Locale("\uc6d4", "2022-02-22T17:11:55.350+10:00");
        java.util.Locale.setDefault(category0, locale8);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale8.toString(), "\uc6d4_2022-02-22T17:11:55.350+10:00");
    }

    @Test
    public void test13249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13249");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        long long35 = property34.remainder();
        int int36 = property34.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime37 = property34.withMaximumValue();
        long long39 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime37, (long) (short) 1);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology12.secondOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4555041561L + "'", long35 == 4555041561L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9223371990112641561L + "'", long39 == 9223371990112641561L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test13250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13250");
        java.util.Locale locale3 = new java.util.Locale("1970-01-01T09:59:59.996", "x-lvariant-2", "2022-02-21T17:16:39.809");
        org.junit.Assert.assertEquals(locale3.toString(), "1970-01-01t09:59:59.996_X-LVARIANT-2_2022-02-21T17:16:39.809");
    }

    @Test
    public void test13251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13251");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusHours(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localDateTime3.toString(dateTimeFormatter6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusYears(61705356);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks(0);
        int int16 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DurationField durationField26 = chronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str31 = dateTimeZone29.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone29);
        boolean boolean34 = zonedChronology32.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology32.dayOfYear();
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = dateTimeField36.getAsText(7, locale38);
        int int40 = property19.getMaximumShortTextLength(locale38);
        java.lang.String str41 = locale38.getDisplayVariant();
        java.lang.String str42 = property10.getAsText(locale38);
        org.joda.time.LocalDateTime localDateTime44 = property10.addToCopy((-39119));
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.DurationField durationField52 = chronology50.minutes();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str57 = dateTimeZone55.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology58 = org.joda.time.chrono.ZonedChronology.getInstance(chronology50, dateTimeZone55);
        org.joda.time.DurationField durationField59 = zonedChronology58.weeks();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology58.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology58.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        long long65 = zonedChronology58.add(readablePeriod62, 0L, 2);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology58.weekyearOfCentury();
        org.joda.time.DurationField durationField67 = zonedChronology58.centuries();
        org.joda.time.DurationField durationField68 = zonedChronology58.weekyears();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology58.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        int int72 = localDateTime71.getYear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.plusHours(2022);
        org.joda.time.LocalDateTime.Property property75 = localDateTime71.hourOfDay();
        java.util.Locale.Category category76 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category76, locale77);
        java.lang.String str79 = locale77.toLanguageTag();
        java.util.Locale.Category category80 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale81 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category80, locale81);
        java.lang.String str83 = locale81.toLanguageTag();
        java.lang.String str84 = locale77.getDisplayLanguage(locale81);
        java.util.Locale locale85 = locale77.stripExtensions();
        java.lang.String str86 = property75.getAsShortText(locale85);
        java.lang.String str87 = dateTimeField69.getAsShortText(1645427292133L, locale85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = localDateTime44.toString("2022-02-22T17:13:19.553+10:00", locale85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1397 + "'", int5 == 1397);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-05-17T23:17:21.615" + "'", str7, "2022-05-17T23:17:21.615");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7" + "'", str39, "7");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "615" + "'", str42, "615");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + category76 + "' != '" + java.util.Locale.Category.FORMAT + "'", category76.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "en-CA" + "'", str79, "en-CA");
        org.junit.Assert.assertTrue("'" + category80 + "' != '" + java.util.Locale.Category.FORMAT + "'", category80.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "en-CA" + "'", str83, "en-CA");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "English" + "'", str84, "English");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "17" + "'", str86, "17");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "12" + "'", str87, "12");
    }

    @Test
    public void test13252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13252");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) 4554852185L, dateTimeZone1);
    }

    @Test
    public void test13253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13253");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfEra();
        int int24 = dateTimeField23.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test13254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13254");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=gmt+00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13255");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int3 = dateTimeZone1.getOffsetFromLocal(4518471413L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str21 = dateTimeZone19.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone19);
        org.joda.time.DurationField durationField23 = zonedChronology22.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.year();
        org.joda.time.DateTimeZone dateTimeZone25 = zonedChronology22.getZone();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology22.millisOfSecond();
        org.joda.time.DurationField durationField27 = zonedChronology22.hours();
        org.joda.time.DurationField durationField28 = zonedChronology22.centuries();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology22.year();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology22.minuteOfHour();
        org.joda.time.DurationField durationField32 = zonedChronology22.hours();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology22.yearOfCentury();
        boolean boolean35 = localDateTime6.equals((java.lang.Object) dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test13256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13256");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        java.lang.String str14 = dateTimeZone10.getID();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(53L, dateTimeZone10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DurationField durationField17 = property16.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNull(durationField17);
    }

    @Test
    public void test13257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13257");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField23 = zonedChronology12.weeks();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test13258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13258");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        java.lang.String str22 = localDateTime13.toString();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.plus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        int int29 = property28.getMinimumValue();
        java.lang.String str30 = property28.getAsText();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = property28.getAsText(locale31);
        org.joda.time.DurationField durationField33 = property28.getLeapDurationField();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("292278993-02-22T17:07:53.990");
        java.util.Locale.setDefault(locale35);
        java.lang.String str37 = locale35.getScript();
        int int38 = property28.getMaximumShortTextLength(locale35);
        java.util.Set<java.lang.String> strSet39 = locale35.getUnicodeLocaleKeys();
        java.lang.String str40 = property25.getAsText(locale35);
        java.lang.Object obj41 = locale35.clone();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:17:21.853" + "'", str22, "2022-02-22T17:17:21.853");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Tuesday" + "'", str40, "Tuesday");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "");
    }

    @Test
    public void test13259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13259");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = property1.addToCopy((long) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime10.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMinutes(749);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readableDuration14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.weekOfWeekyear();
        org.joda.time.Chronology chronology20 = localDateTime17.getChronology();
        int int21 = localDateTime17.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.centuryOfEra();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((long) (short) 0);
        org.joda.time.DateTime dateTime28 = localDateTime27.toDateTime();
        org.joda.time.Instant instant29 = dateTime28.toInstant();
        long long30 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) instant29);
        int int31 = property16.getDifference((org.joda.time.ReadableInstant) instant29);
        int int32 = property6.getDifference((org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DurationField durationField40 = chronology38.minutes();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str45 = dateTimeZone43.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology46.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean51 = dateTimeZone49.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology52 = zonedChronology46.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology46.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology46.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology58 = zonedChronology46.withZone(dateTimeZone57);
        org.joda.time.DurationField durationField59 = zonedChronology46.years();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology46.dayOfYear();
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology46.millisOfDay();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology46.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 61685839, (org.joda.time.Chronology) zonedChronology46);
        org.joda.time.DateTimeField[] dateTimeFieldArray64 = localDateTime63.getFields();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusWeeks(0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.year();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localDateTime71.toDateTime(readableInstant73);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        int int76 = localDateTime75.getYear();
        int int77 = localDateTime75.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.year();
        int int79 = localDateTime75.get(dateTimeFieldType78);
        java.lang.String str80 = dateTimeFieldType78.getName();
        int int81 = dateTime74.get(dateTimeFieldType78);
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType78.getRangeDurationType();
        int int83 = localDateTime63.indexOf(dateTimeFieldType78);
        boolean boolean84 = instant29.isSupported(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeFieldArray64);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 17 + "'", int77 == 17);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "year" + "'", str80, "year");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 100 + "'", int81 == 100);
        org.junit.Assert.assertNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test13260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13260");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 'a');
        java.lang.String str9 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology10.add(readablePeriod11, 1645514076844L, 144);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:17:21.951+10:00" + "'", str9, "2022-02-22T17:17:21.951+10:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514076844L + "'", long14 == 1645514076844L);
    }

    @Test
    public void test13261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13261");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        int int5 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str21 = dateTimeZone19.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology28 = zonedChronology22.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology22.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology34 = zonedChronology22.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = zonedChronology22.years();
        org.joda.time.DurationField durationField36 = zonedChronology22.months();
        org.joda.time.DurationField durationField37 = zonedChronology22.seconds();
        boolean boolean38 = durationFieldType0.isSupported((org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology22.year();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology22.yearOfCentury();
        boolean boolean42 = zonedChronology22.equals((java.lang.Object) "2022-02-22T17:14:16.041");
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test13262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13262");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        long long5 = dateTimeZone2.adjustOffset((-16396339687200000L), true);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str17 = dateTimeZone15.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone15);
        org.joda.time.DurationField durationField19 = zonedChronology18.weeks();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology18.year();
        org.joda.time.DateTimeZone dateTimeZone21 = zonedChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology18.millisOfSecond();
        org.joda.time.DurationField durationField23 = zonedChronology18.hours();
        org.joda.time.DurationField durationField24 = zonedChronology18.centuries();
        org.joda.time.Chronology chronology25 = zonedChronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology18.dayOfYear();
        org.joda.time.Chronology chronology28 = zonedChronology18.withUTC();
        boolean boolean29 = dateTimeZone2.equals((java.lang.Object) zonedChronology18);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology18.yearOfCentury();
        long long32 = dateTimeField30.roundCeiling(4554687283L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-16396339687200000L) + "'", long5 == (-16396339687200000L));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 31500000000L + "'", long32 == 31500000000L);
    }

    @Test
    public void test13263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13263");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField22 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField26 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test13264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13264");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField21 = zonedChronology12.months();
        org.joda.time.DurationField durationField22 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test13265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13265");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        long long9 = property7.remainder();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4555042145L + "'", long9 == 4555042145L);
    }

    @Test
    public void test13266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13266");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        long long27 = zonedChronology12.add(1645427275536L, 0L, 8);
        org.joda.time.Chronology chronology28 = zonedChronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks(0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str40 = dateTimeZone38.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology41.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology47 = zonedChronology41.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology41.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone53 = zonedChronology41.getZone();
        org.joda.time.chrono.ZonedChronology zonedChronology54 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology54.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology54.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology54.minuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645427275536L + "'", long27 == 1645427275536L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(zonedChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test13267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13267");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.year();
        org.joda.time.DurationField durationField27 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.yearOfEra();
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = new java.util.Locale("");
        java.util.Locale.setDefault(category29, locale31);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("2022-02-22T07:10:22.330Z");
        java.util.Locale.setDefault(category29, locale34);
        int int36 = dateTimeField28.getMaximumTextLength(locale34);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category29.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
    }

    @Test
    public void test13268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13268");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.addUnicodeLocaleAttribute("seconds");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale.Builder builder12 = builder7.addUnicodeLocaleAttribute("utc");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = builder12.build();
        java.lang.String str15 = locale14.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test13269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13269");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        int int11 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test13270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13270");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.year();
        org.joda.time.DurationField durationField19 = zonedChronology12.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13271");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.stream.Stream<java.lang.Character> charStream10 = charSet4.stream();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.Object[] objArray13 = charSet12.toArray();
        org.joda.time.ReadableInstant[] readableInstantArray14 = new org.joda.time.ReadableInstant[] {};
        org.joda.time.ReadableInstant[] readableInstantArray15 = charSet12.toArray(readableInstantArray14);
        org.joda.time.DurationField[] durationFieldArray16 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray17 = charSet12.toArray(durationFieldArray16);
        boolean boolean18 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet12);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        int int21 = charSet20.size();
        boolean boolean22 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet20);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        int int25 = charSet24.size();
        boolean boolean26 = charSet20.containsAll((java.util.Collection<java.lang.Character>) charSet24);
        java.util.stream.Stream<java.lang.Character> charStream27 = charSet20.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charStream10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(readableInstantArray14);
        org.junit.Assert.assertNotNull(readableInstantArray15);
        org.junit.Assert.assertNotNull(durationFieldArray16);
        org.junit.Assert.assertNotNull(durationFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charStream27);
    }

    @Test
    public void test13272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13272");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4518470650L);
        java.util.TimeZone timeZone19 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        int int22 = localDateTime20.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.yearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.monthOfYear();
        long long30 = property29.remainder();
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category31, locale32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        int int37 = property36.getMinimumValue();
        java.lang.String str38 = property36.getAsText();
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.lang.String str40 = property36.getAsText(locale39);
        java.lang.String str41 = locale32.getDisplayCountry(locale39);
        java.lang.String str42 = property29.getAsShortText(locale39);
        java.lang.String str43 = locale39.getDisplayScript();
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category44, locale45);
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale48 = java.util.Locale.getDefault(category47);
        java.util.Locale.setDefault(category44, locale48);
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale39.getDisplayVariant(locale48);
        boolean boolean52 = localDateTime25.equals((java.lang.Object) str51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField54 = localDateTime25.getField(62158379);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 62158379");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1876642349L + "'", long30 == 1876642349L);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Canada" + "'", str41, "Canada");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "f\351vr." + "'", str42, "f\351vr.");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test13273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13273");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        java.lang.String str27 = dateTimeZone24.getID();
        long long30 = dateTimeZone24.convertLocalToUTC((long) (short) 1, false);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale35 = builder34.build();
        java.lang.String str36 = dateTimeZone24.getName((long) 749, locale35);
        java.util.TimeZone timeZone37 = dateTimeZone24.toTimeZone();
        org.joda.time.Chronology chronology38 = zonedChronology13.withZone(dateTimeZone24);
        long long40 = dateTimeZone24.previousTransition(36060001L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(52L, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks(0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.days();
        org.joda.time.DurationField durationField48 = chronology46.minutes();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str53 = dateTimeZone51.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology54 = org.joda.time.chrono.ZonedChronology.getInstance(chronology46, dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology54.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology54.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        int int61 = localDateTime58.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime58.isEqual((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusWeeks(0);
        int int68 = localDateTime62.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.dayOfWeek();
        org.joda.time.LocalDateTime.Property property70 = localDateTime65.yearOfEra();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.hourOfDay();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime65.withFields((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime65.minusMinutes((int) (short) -1);
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.lang.String str81 = locale79.getDisplayCountry(locale80);
        java.util.Locale locale82 = locale79.stripExtensions();
        java.lang.String str83 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) localDateTime65, locale82);
        org.joda.time.LocalDateTime.Property property84 = localDateTime65.monthOfYear();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime65.minusMonths(836);
        boolean boolean87 = dateTimeZone24.isLocalDateTimeGap(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-35999999L) + "'", long30 == (-35999999L));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 36060001L + "'", long40 == 36060001L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "62242387" + "'", str83, "62242387");
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test13274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13274");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        java.util.Date date24 = localDateTime21.toDate();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusMillis(749);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withWeekyear(17);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str32 = dateTimeFieldType31.getName();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        org.joda.time.DurationField durationField46 = zonedChronology45.weeks();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology45.year();
        org.joda.time.DurationField durationField48 = zonedChronology45.months();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str53 = dateTimeZone51.getShortName((long) 10);
        java.lang.String str54 = dateTimeZone51.getID();
        long long57 = dateTimeZone51.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        int int60 = dateTimeZone51.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology61 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology45, dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology45.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology45.weekyear();
        boolean boolean65 = dateTimeFieldType31.isSupported((org.joda.time.Chronology) zonedChronology45);
        java.lang.String str66 = dateTimeFieldType31.toString();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime26.withFieldAdded(durationFieldType67, 38);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withMillisOfSecond(659);
        org.joda.time.DateTime dateTime72 = localDateTime71.toDateTime();
        java.lang.String str73 = localDateTime71.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Feb 21 17:17:23 GMT+17:09 2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:00" + "'", str54, "+10:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-35999999L) + "'", long57 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 36000000 + "'", int60 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "millisOfSecond" + "'", str66, "millisOfSecond");
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-21T17:18:01.659" + "'", str73, "2022-02-21T17:18:01.659");
    }

    @Test
    public void test13275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13275");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        int int23 = dateTimeField8.getMaximumValue(69999L);
        org.joda.time.DurationField durationField24 = dateTimeField8.getDurationField();
        boolean boolean25 = durationField24.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 999 + "'", int23 == 999);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test13276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13276");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField21 = zonedChronology12.months();
        long long25 = zonedChronology12.add(4554484271L, (-312413760998998L), 591);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-184636528195923547L) + "'", long25 == (-184636528195923547L));
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test13277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13277");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.years();
        org.joda.time.DurationField durationField22 = zonedChronology12.seconds();
        long long25 = durationField22.getMillis(24, (long) 604);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 24000L + "'", long25 == 24000L);
    }

    @Test
    public void test13278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13278");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField26 = zonedChronology12.halfdays();
        org.joda.time.DurationField durationField27 = zonedChronology12.months();
        org.joda.time.DurationField durationField28 = zonedChronology12.weekyears();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test13279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13279");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.halfdayOfDay();
        org.joda.time.DurationField durationField24 = zonedChronology12.hours();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test13280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13280");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 1645427337785L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(125);
        java.lang.String str5 = localDateTime3.toString("23");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        int int10 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime(readableInstant11);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 'a');
        java.lang.String str15 = dateTime12.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        int int20 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime17.toDateTime(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        int int27 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        int int34 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property36 = localDateTime28.year();
        java.util.Locale locale39 = new java.util.Locale("", "\uce90\ub098\ub2e4");
        int int40 = property36.getMaximumShortTextLength(locale39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        int int45 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime42.toDateTime(readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.yearOfEra();
        int int51 = property50.getMinimumValue();
        boolean boolean52 = dateTime47.equals((java.lang.Object) int51);
        int int53 = property36.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks(0);
        int int58 = localDateTime57.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology62 = null;
        boolean boolean63 = dateTimeFieldType61.isSupported(chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusWeeks(0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType61.getField(chronology68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime60.withField(dateTimeFieldType61, (int) 'x');
        int int72 = dateTime47.get(dateTimeFieldType61);
        java.lang.String str73 = dateTime47.toString();
        boolean boolean74 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant75 = dateTime47.toInstant();
        org.joda.time.DateTime dateTime76 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) instant75);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "23" + "'", str5, "23");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:17:22.685+10:00" + "'", str15, "2022-02-22T17:17:22.685+10:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 22 + "'", int58 == 22);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 685 + "'", int72 == 685);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-22T17:17:22.685+10:00" + "'", str73, "2022-02-22T17:17:22.685+10:00");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test13281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13281");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        int int30 = property29.getMinimumValue();
        java.lang.String str31 = property29.getAsText();
        org.joda.time.LocalDateTime localDateTime32 = property29.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime33 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusMonths((int) '4');
        int int36 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35);
        java.util.Date date37 = localDateTime35.toDate();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withWeekyear(517);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusSeconds(749);
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-292275054) + "'", int36 == (-292275054));
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat May 01 00:00:00 GMT+17:09 2027");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test13282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13282");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.monthOfYear();
        org.joda.time.DurationField durationField24 = zonedChronology13.hours();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 19);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks(548);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.monthOfYear();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DurationField durationField40 = chronology38.minutes();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str45 = dateTimeZone43.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology46.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean51 = dateTimeZone49.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology52 = zonedChronology46.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology46.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        long long57 = zonedChronology46.add(readablePeriod54, (long) 53, (int) (byte) 0);
        org.joda.time.DurationField durationField58 = zonedChronology46.weeks();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = zonedChronology46.add(readablePeriod59, (long) 12, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology46.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology46.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Locale.Category category67 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category67, locale68);
        java.lang.String str70 = locale68.toLanguageTag();
        java.util.Locale.Category category71 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category71, locale72);
        java.lang.String str74 = locale72.toLanguageTag();
        java.lang.String str75 = locale68.getDisplayLanguage(locale72);
        java.lang.String str76 = locale66.getDisplayCountry(locale68);
        java.lang.String str77 = locale66.getISO3Language();
        java.lang.String str78 = dateTimeField64.getAsShortText(325, locale66);
        java.lang.String str79 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime33, locale66);
        long long81 = dateTimeField26.roundHalfFloor(1766L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 53L + "'", long57 == 53L);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 12L + "'", long62 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.FORMAT + "'", category67.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "en-CA" + "'", str70, "en-CA");
        org.junit.Assert.assertTrue("'" + category71 + "' != '" + java.util.Locale.Category.FORMAT + "'", category71.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "en-CA" + "'", str74, "en-CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "English" + "'", str75, "English");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "325" + "'", str78, "325");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-36000000L) + "'", long81 == (-36000000L));
    }

    @Test
    public void test13283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13283");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = zonedChronology12.getZone();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        java.lang.String str18 = timeZone17.getID();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = timeZone17.getOffset(62220788, 670, 61884444, 1, 27, 717);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT+10:00" + "'", str18, "GMT+10:00");
    }

    @Test
    public void test13284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13284");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField23 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str38 = dateTimeZone36.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone36);
        java.lang.String str40 = dateTimeZone36.getID();
        long long42 = dateTimeZone36.nextTransition((long) 1970);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(1970L, dateTimeZone36);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withDayOfMonth((-9));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -9 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1970L + "'", long42 == 1970L);
        org.junit.Assert.assertNotNull(zonedChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test13285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13285");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType23.getField(chronology30);
        java.lang.String str32 = dateTimeField31.getName();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 2, locale39);
        int int44 = dateTimeField31.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = dateTimeFieldType45.isSupported(chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType45.getField(chronology52);
        java.lang.String str54 = dateTimeField53.getName();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.lang.String str63 = locale61.getISO3Country();
        java.lang.String str64 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, 2, locale61);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plus(readableDuration67);
        int[] intArray73 = new int[] { 0, 292278993, 10, 'a' };
        int int74 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68, intArray73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        int int79 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime76.toDateTime(readableInstant80);
        boolean boolean83 = dateTime81.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime84 = localDateTime68.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        long long86 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime68, 10L);
        org.joda.time.DateTimeField dateTimeField87 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField88 = zonedChronology12.era();
        org.joda.time.DurationField durationField89 = zonedChronology12.halfdays();
        org.joda.time.LocalDateTime localDateTime90 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japanese" + "'", str40, "Japanese");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 999 + "'", int44 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "millisOfSecond" + "'", str54, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Japanese" + "'", str62, "Japanese");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2" + "'", str64, "2");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645427842897L + "'", long86 == 1645427842897L);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(localDateTime90);
    }

    @Test
    public void test13286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13286");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int25 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        int int31 = property30.getMinimumValue();
        boolean boolean32 = dateTime27.equals((java.lang.Object) int31);
        long long33 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime27.getZone();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale36.getDisplayCountry(locale37);
        java.util.Locale locale39 = locale36.stripExtensions();
        java.lang.String str40 = locale39.getDisplayVariant();
        boolean boolean41 = locale39.hasExtensions();
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = locale39.getDisplayScript(locale42);
        java.lang.String str44 = dateTimeZone34.getShortName((long) '4', locale42);
        java.util.TimeZone timeZone45 = dateTimeZone34.toTimeZone();
        long long47 = dateTimeZone34.nextTransition(1876124459L);
        java.util.TimeZone timeZone48 = dateTimeZone34.toTimeZone();
        timeZone48.setRawOffset(40460120);
        java.lang.String str51 = timeZone48.getID();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1876124459L + "'", long47 == 1876124459L);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GMT+10:00" + "'", str51, "GMT+10:00");
    }

    @Test
    public void test13287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13287");
        java.util.Locale locale3 = new java.util.Locale("2022-02-22T17:11:00.901+10:00", "2022-02-22T17:10:44.456+10:00", "2022-02-22T17:08:34.467+10:00");
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t17:11:00.901+10:00_2022-02-22T17:10:44.456+10:00_2022-02-22T17:08:34.467+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test13288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13288");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.addUnicodeLocaleAttribute("811");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        org.joda.time.DurationField durationField15 = durationFieldType5.getField(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        int int22 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.monthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DurationField durationField34 = chronology32.minutes();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str39 = dateTimeZone37.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology32, dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology40.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean45 = dateTimeZone43.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology46 = zonedChronology40.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology40.dayOfMonth();
        org.joda.time.DurationField durationField48 = zonedChronology40.seconds();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology40);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology40.secondOfDay();
        long long52 = dateTimeField50.remainder((-295200000L));
        org.joda.time.ReadablePartial readablePartial53 = null;
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.lang.String str57 = dateTimeField50.getAsText(readablePartial53, (int) (short) -1, locale55);
        java.lang.String str58 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, 433, locale55);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology60 = null;
        boolean boolean61 = dateTimeFieldType59.isSupported(chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusWeeks(0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType59.getField(chronology66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str72 = dateTimeZone70.getShortName((long) 10);
        java.lang.String str73 = dateTimeZone70.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.chrono.ZonedChronology zonedChronology75 = org.joda.time.chrono.ZonedChronology.getInstance(chronology66, dateTimeZone70);
        java.lang.String str77 = dateTimeZone70.getShortName(4518470650L);
        boolean boolean79 = dateTimeZone70.isStandardOffset((-36000000L));
        java.util.Locale locale81 = java.util.Locale.US;
        java.lang.String str82 = dateTimeZone70.getName((long) 23, locale81);
        java.lang.String str83 = locale55.getDisplayName(locale81);
        java.util.Locale.Builder builder84 = builder2.setLocale(locale55);
        java.util.Locale.Builder builder85 = builder84.clearExtensions();
        java.util.Locale.Builder builder86 = builder85.clear();
        java.util.Locale.Builder builder87 = builder86.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder89 = builder86.addUnicodeLocaleAttribute("23");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 23 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1" + "'", str57, "-1");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "433" + "'", str58, "433");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+10:00" + "'", str72, "+10:00");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+10:00" + "'", str73, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:00" + "'", str77, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+10:00" + "'", str82, "+10:00");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Chinese (Taiwan)" + "'", str83, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test13289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13289");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = zonedChronology12.add(readablePeriod16, 0L, 2);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = zonedChronology12.hours();
        org.joda.time.DurationField durationField22 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        int int35 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfWeek();
        int int37 = property36.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime38 = property36.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYear();
        int int41 = localDateTime39.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plus(readableDuration42);
        int int44 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray46 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime43, (-58376098292591L));
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology12.weekyear();
        int int53 = dateTimeField52.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 17 + "'", int41 == 17);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[120, 2, 20, 11307409]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
    }

    @Test
    public void test13290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13290");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        long long32 = zonedChronology28.add(1728000000L, (-62071851739911292L), (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.halfdayOfDay();
        org.joda.time.DurationField durationField34 = zonedChronology28.hours();
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 62071853467911292L + "'", long32 == 62071853467911292L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str35, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test13291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13291");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.hourOfHalfday();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField23 = chronology22.hours();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test13292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13292");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Country();
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = charSet4.add((java.lang.Character) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese" + "'", str1, "Japanese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test13293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13293");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int20 = localDateTime19.getEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.era();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusSeconds((-998));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, 417);
        int[] intArray29 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime27, 9L);
        org.joda.time.DurationField durationField30 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.secondOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 36000009]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test13294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13294");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.lang.Object[] objArray6 = charSet5.toArray();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        boolean boolean9 = charSet5.retainAll((java.util.Collection<java.lang.Character>) charSet8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        int int14 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime11.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.minusWeeks((int) (short) 1);
        boolean boolean19 = charSet5.remove((java.lang.Object) localDateTime18);
        boolean boolean20 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        boolean boolean23 = dateTimeFieldType21.isSupported(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType21.getField(chronology28);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.withFieldAdded(durationFieldType30, 712);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField34 = localDateTime18.getField(62028174);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 62028174");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test13295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13295");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int3 = dateTimeZone1.getOffsetFromLocal(4518471413L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear(583);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withMillisOfSecond(583);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        int int17 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = property20.addToCopy(12);
        org.joda.time.LocalDateTime localDateTime25 = property20.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        boolean boolean40 = zonedChronology38.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology38.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology38);
        org.joda.time.DateTime dateTime46 = localDateTime45.toDateTime();
        int int47 = property20.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime12.minusWeeks(126);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime12.withDurationAdded(readableDuration51, 989);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readableDuration54);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test13296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13296");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.Chronology chronology19 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfHour();
        int int22 = dateTimeField20.getMaximumValue(1645427348668L);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField20.set(4554728923L, "2022-02-22T17:13:04.992+10:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:13:04.992+10:00\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
    }

    @Test
    public void test13297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13297");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DurationField durationField22 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.year();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology12.add(readablePeriod24, 1645427332359L, 61703107);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DurationField durationField34 = chronology32.minutes();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str39 = dateTimeZone37.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology32, dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology40.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean45 = dateTimeZone43.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology46 = zonedChronology40.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology40.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = zonedChronology40.add(readablePeriod48, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology40.year();
        org.joda.time.DurationField durationField53 = zonedChronology40.weeks();
        boolean boolean54 = zonedChronology12.equals((java.lang.Object) zonedChronology40);
        // The following exception was thrown during execution in test generation
        try {
            long long60 = zonedChronology12.getDateTimeMillis((long) 263, 38, 61751964, 506, 793);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645427332359L + "'", long27 == 1645427332359L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 53L + "'", long51 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test13298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13298");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4518470650L);
        boolean boolean20 = dateTimeZone11.isStandardOffset((long) 999);
        java.lang.String str22 = dateTimeZone11.getName(1645513856065L);
        org.joda.time.tz.NameProvider nameProvider24 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str36 = dateTimeZone34.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone34);
        boolean boolean39 = zonedChronology37.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology37.hourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology37.dayOfYear();
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.lang.String str44 = dateTimeField41.getAsText(7, locale43);
        java.lang.String str47 = nameProvider24.getName(locale43, "f\351vr.", "1027");
        java.lang.String str48 = locale43.getCountry();
        java.util.Locale.Category category49 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category49, locale50);
        java.lang.String str52 = locale50.toLanguageTag();
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category53, locale54);
        java.lang.String str56 = locale54.toLanguageTag();
        java.lang.String str57 = locale50.getDisplayLanguage(locale54);
        java.lang.String str58 = locale54.getDisplayLanguage();
        java.lang.String str59 = locale43.getDisplayLanguage(locale54);
        java.lang.String str60 = dateTimeZone11.getName(1645427540151L, locale43);
        java.lang.String str61 = dateTimeZone11.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
        org.junit.Assert.assertNotNull(nameProvider24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7" + "'", str44, "7");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "CN" + "'", str48, "CN");
        org.junit.Assert.assertTrue("'" + category49 + "' != '" + java.util.Locale.Category.FORMAT + "'", category49.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en-CA" + "'", str52, "en-CA");
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.FORMAT + "'", category53.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en-CA" + "'", str56, "en-CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "English" + "'", str57, "English");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u82f1\u8a9e" + "'", str58, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese" + "'", str59, "Chinese");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
    }

    @Test
    public void test13299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13299");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = property1.addToCopy((long) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withCenturyOfEra(10);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.Object[] objArray13 = charSet12.toArray();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        boolean boolean16 = charSet12.retainAll((java.util.Collection<java.lang.Character>) charSet15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        boolean boolean20 = locale17.hasExtensions();
        boolean boolean21 = charSet15.remove((java.lang.Object) boolean20);
        boolean boolean22 = charSet15.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str34 = dateTimeZone32.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance(chronology27, dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean40 = dateTimeZone38.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology41 = zonedChronology35.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology35.weekyear();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology35.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone47 = zonedChronology35.getZone();
        boolean boolean48 = charSet15.contains((java.lang.Object) dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 0, dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYearOfEra(356);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks(0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.days();
        org.joda.time.DurationField durationField59 = chronology57.minutes();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str64 = dateTimeZone62.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology65 = org.joda.time.chrono.ZonedChronology.getInstance(chronology57, dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology65.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean70 = dateTimeZone68.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology71 = zonedChronology65.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology65.dayOfMonth();
        org.joda.time.DurationField durationField73 = zonedChronology65.seconds();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology65);
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology65.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField76 = zonedChronology65.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField77 = zonedChronology65.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = dateTimeField77.getType();
        boolean boolean79 = localDateTime49.isSupported(dateTimeFieldType78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime9.withField(dateTimeFieldType78, 453);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+10:00" + "'", str64, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test13300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13300");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology12.hourOfHalfday();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test13301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13301");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusWeeks(0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str16 = dateTimeZone14.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance(chronology9, dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology23 = zonedChronology17.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField26 = dateTimeField25.getLeapDurationField();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.util.Locale locale30 = locale27.stripExtensions();
        int int31 = dateTimeField25.getMaximumShortTextLength(locale30);
        java.lang.String str32 = dateTimeZone1.getName(4554472850L, locale30);
        java.lang.String str33 = locale30.getDisplayCountry();
        java.lang.String str34 = locale30.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.100" + "'", str32, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "de" + "'", str34, "de");
    }

    @Test
    public void test13302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13302");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond((int) (short) 0);
        int int7 = localDateTime3.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(0);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(4);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime14, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDateTime3.toDateTime(dateTimeZone17);
        long long22 = dateTimeZone17.adjustOffset((long) 791, false);
        java.lang.String str24 = dateTimeZone17.getShortName(1645468862280L);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekOfWeekyear();
        org.joda.time.Chronology chronology28 = localDateTime25.getChronology();
        int int29 = localDateTime25.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.weekOfWeekyear();
        org.joda.time.Chronology chronology35 = localDateTime32.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        boolean boolean38 = dateTimeFieldType36.isSupported(chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType36.getField(chronology43);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType36.getRangeDurationType();
        int int46 = localDateTime32.get(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime32.withSecondOfMinute(20);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusYears(61678279);
        int int51 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        int int52 = localDateTime48.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks(0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.days();
        org.joda.time.DurationField durationField59 = chronology57.minutes();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str64 = dateTimeZone62.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology65 = org.joda.time.chrono.ZonedChronology.getInstance(chronology57, dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology65.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean70 = dateTimeZone68.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology71 = zonedChronology65.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology65.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology65.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField74 = zonedChronology65.weekyear();
        org.joda.time.DurationField durationField75 = zonedChronology65.millis();
        org.joda.time.DateTimeZone dateTimeZone76 = zonedChronology65.getZone();
        org.joda.time.DateTime dateTime77 = localDateTime48.toDateTime(dateTimeZone76);
        int int78 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusWeeks(0);
        int int83 = localDateTime82.getYearOfCentury();
        int int84 = localDateTime82.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime82.withMillisOfDay(420);
        boolean boolean87 = dateTime77.equals((java.lang.Object) localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 504 + "'", int7 == 504);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 791L + "'", long22 == 791L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+04:00" + "'", str24, "+04:00");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 62243504 + "'", int29 == 62243504);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationFieldType45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 504 + "'", int46 == 504);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 62240504 + "'", int52 == 62240504);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+10:00" + "'", str64, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 14400000 + "'", int78 == 14400000);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 22 + "'", int83 == 22);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test13303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13303");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.millis();
        org.joda.time.DurationField durationField23 = zonedChronology12.years();
        org.joda.time.Chronology chronology24 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField25 = zonedChronology12.centuries();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test13304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13304");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        boolean boolean9 = dateTimeFieldType7.isSupported(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType7.getField(chronology14);
        java.lang.String str16 = dateTimeField15.getName();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.getISO3Country();
        java.lang.String str26 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime20, 2, locale23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        int int32 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime29.toDateTime(readableInstant33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        int int38 = property37.getMinimumValue();
        boolean boolean39 = dateTime34.equals((java.lang.Object) int38);
        long long40 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime34);
        int int41 = property2.getDifference((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.LocalDateTime localDateTime42 = property2.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        int int47 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime44.toDateTime(readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        int int54 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime51.isEqual((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusWeeks(0);
        int int61 = localDateTime55.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime.Property property63 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime44);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime44.plus(readableDuration65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        boolean boolean68 = localDateTime66.isSupported(durationFieldType67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.plusWeeks(170888);
        boolean boolean71 = localDateTime42.equals((java.lang.Object) localDateTime66);
        org.joda.time.LocalDateTime.Property property72 = localDateTime42.centuryOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfSecond" + "'", str16, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2" + "'", str26, "2");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test13305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13305");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int10 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property7.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str25 = dateTimeZone23.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone23);
        boolean boolean28 = zonedChronology26.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.year();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withDate(292278993, (int) (byte) 1, (int) (byte) 1);
        int int35 = localDateTime34.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minus(readablePeriod36);
        int int38 = localDateTime37.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.days();
        org.joda.time.DurationField durationField45 = chronology43.minutes();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str50 = dateTimeZone48.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology51 = org.joda.time.chrono.ZonedChronology.getInstance(chronology43, dateTimeZone48);
        org.joda.time.DurationField durationField52 = zonedChronology51.weeks();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology51.year();
        org.joda.time.DurationField durationField54 = zonedChronology51.months();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str59 = dateTimeZone57.getShortName((long) 10);
        java.lang.String str60 = dateTimeZone57.getID();
        long long63 = dateTimeZone57.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        int int66 = dateTimeZone57.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology67 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology51, dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology51.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone69 = zonedChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology51.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.yearOfEra();
        long long74 = property73.remainder();
        int int75 = property73.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime76 = property73.withMaximumValue();
        long long78 = zonedChronology51.set((org.joda.time.ReadablePartial) localDateTime76, (long) (short) 1);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.minusYears(776);
        org.joda.time.LocalDateTime.Property property81 = localDateTime76.year();
        int int82 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.millisOfSecond();
        org.joda.time.LocalDateTime.Property property85 = localDateTime83.weekOfWeekyear();
        org.joda.time.Chronology chronology86 = localDateTime83.getChronology();
        int int87 = localDateTime83.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime92 = localDateTime83.withTime(12, 10, 22, 749);
        org.joda.time.Chronology chronology93 = localDateTime83.getChronology();
        int int94 = localDateTime83.getCenturyOfEra();
        int int95 = localDateTime83.getYear();
        int int96 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime83);
        boolean boolean97 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime76);
        boolean boolean99 = localDateTime76.equals((java.lang.Object) "292278993-02-22T17:12:08.685+10:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 17 + "'", int38 == 17);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-35999999L) + "'", long63 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 36000000 + "'", int66 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 4555043695L + "'", long74 == 4555043695L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 292278993 + "'", int75 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 9223371990112643695L + "'", long78 == 9223371990112643695L);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(chronology86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 62243695 + "'", int87 == 62243695);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 20 + "'", int94 == 20);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2022 + "'", int95 == 2022);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test13306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13306");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.year();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.dayOfYear();
        org.joda.time.Chronology chronology23 = zonedChronology13.withUTC();
        org.joda.time.DurationField durationField24 = zonedChronology13.months();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.centuryOfEra();
        org.joda.time.DurationField durationField26 = zonedChronology13.centuries();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = zonedChronology13.add(readablePeriod27, 100L, 126);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology13.millisOfDay();
        org.joda.time.DurationField durationField32 = zonedChronology13.weeks();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(4554642118L, (org.joda.time.Chronology) zonedChronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType35 = localDateTime33.getFieldType(61794804);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 61794804");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test13307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13307");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.yearOfCentury();
        org.joda.time.DurationField durationField25 = zonedChronology12.months();
        boolean boolean26 = durationField25.isSupported();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test13308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13308");
        java.util.Locale locale2 = new java.util.Locale("11", "61777134");
        org.junit.Assert.assertEquals(locale2.toString(), "11_61777134");
    }

    @Test
    public void test13309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13309");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        org.joda.time.LocalDateTime.Property property21 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusDays(100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear(893);
        int int32 = localDateTime29.getMinuteOfHour();
        boolean boolean33 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime12.plusYears(868);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 17 + "'", int32 == 17);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test13310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13310");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.monthOfYear();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.util.Locale locale13 = locale10.stripExtensions();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime7, locale10);
        java.util.Locale.setDefault(locale10);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1037" + "'", str15, "1037");
    }

    @Test
    public void test13311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13311");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone39);
        org.joda.time.DurationField durationField43 = zonedChronology42.weeks();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology42.year();
        org.joda.time.DurationField durationField45 = zonedChronology42.months();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str50 = dateTimeZone48.getShortName((long) 10);
        java.lang.String str51 = dateTimeZone48.getID();
        long long54 = dateTimeZone48.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        int int57 = dateTimeZone48.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology58 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology42, dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology42.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone60 = zonedChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology42.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology42.weekyearOfCentury();
        boolean boolean64 = zonedChronology12.equals((java.lang.Object) zonedChronology42);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray68 = zonedChronology12.get(readablePeriod65, 4554684054L, (-61152892992692L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-35999999L) + "'", long54 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 36000000 + "'", int57 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test13312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13312");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        long long19 = zonedChronology12.getDateTimeMillis((int) (byte) 0, (int) (byte) 10, (int) (short) 10, 749);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.minuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62142803999251L) + "'", long19 == (-62142803999251L));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test13313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13313");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField25 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        int int31 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime28.isEqual((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        int int38 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.millisOfDay();
        long long41 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime35, 1876077150L);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology43 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField44 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology12.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514243956L + "'", long41 == 1645514243956L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test13314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13314");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-22T17:08:21.151");
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
    }

    @Test
    public void test13315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13315");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4518470650L);
        java.util.TimeZone timeZone19 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str32 = dateTimeZone30.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone30);
        long long36 = dateTimeZone30.adjustOffset(1645365600000L, false);
        long long38 = dateTimeZone11.getMillisKeepLocal(dateTimeZone30, 53L);
        long long40 = dateTimeZone30.convertUTCToLocal(4554570947L);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645365600000L + "'", long36 == 1645365600000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 53L + "'", long38 == 53L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 4590570947L + "'", long40 == 4590570947L);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test13316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13316");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        org.joda.time.ReadableInstant[] readableInstantArray3 = new org.joda.time.ReadableInstant[] {};
        org.joda.time.ReadableInstant[] readableInstantArray4 = charSet1.toArray(readableInstantArray3);
        org.joda.time.DurationField[] durationFieldArray5 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray6 = charSet1.toArray(durationFieldArray5);
        int int7 = charSet1.size();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int int12 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime9.toDateTime(readableInstant13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusWeeks((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime16.getFields();
        java.lang.Object[] objArray18 = charSet1.toArray((java.lang.Object[]) dateTimeFieldArray17);
        java.lang.Object[] objArray19 = charSet1.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(readableInstantArray3);
        org.junit.Assert.assertNotNull(readableInstantArray4);
        org.junit.Assert.assertNotNull(durationFieldArray5);
        org.junit.Assert.assertNotNull(durationFieldArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[null, DateTimeField[monthOfYear], DateTimeField[dayOfMonth], DateTimeField[millisOfDay]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[null, DateTimeField[monthOfYear], DateTimeField[dayOfMonth], DateTimeField[millisOfDay]]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
    }

    @Test
    public void test13317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13317");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("seconds");
        java.util.Locale.Builder builder7 = builder2.setLanguageTag("Kanada");
        java.util.Locale.Builder builder8 = builder2.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test13318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13318");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone16);
        org.joda.time.DurationField durationField20 = zonedChronology19.weeks();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology19.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology19.getZone();
        org.joda.time.DurationField durationField23 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology19.weekyearOfCentury();
        org.joda.time.DurationField durationField27 = zonedChronology19.weeks();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology19.year();
        boolean boolean31 = languageRange1.equals((java.lang.Object) zonedChronology19);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "utc" + "'", str4, "utc");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "utc" + "'", str6, "utc");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test13319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13319");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DurationField durationField23 = zonedChronology13.months();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.year();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        boolean boolean28 = dateTimeFieldType26.isSupported(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks(0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType26.getField(chronology33);
        java.lang.String str35 = dateTimeField34.getName();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.lang.String str43 = locale42.getDisplayLanguage();
        java.lang.String str44 = locale42.getISO3Country();
        java.lang.String str45 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, 2, locale42);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime39.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime.Property property51 = localDateTime39.property(dateTimeFieldType50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str53 = dateTimeFieldType52.getName();
        boolean boolean54 = localDateTime39.isSupported(dateTimeFieldType52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime39.withPeriodAdded(readablePeriod55, 444);
        int[] intArray59 = zonedChronology13.get((org.joda.time.ReadablePartial) localDateTime39, 7604873694L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "millisOfSecond" + "'", str35, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japanisch" + "'", str43, "Japanisch");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2" + "'", str45, "2");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "dayOfMonth" + "'", str53, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 3, 30, 37673694]");
    }

    @Test
    public void test13320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13320");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int3 = dateTimeZone1.getOffsetFromLocal(4518471413L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withYear(583);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withMillisOfSecond(583);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        int int17 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = property20.addToCopy(12);
        org.joda.time.LocalDateTime localDateTime25 = property20.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        boolean boolean40 = zonedChronology38.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology38.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology38);
        org.joda.time.DateTime dateTime46 = localDateTime45.toDateTime();
        int int47 = property20.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusWeeks(0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.days();
        org.joda.time.DurationField durationField56 = chronology54.minutes();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str61 = dateTimeZone59.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology62 = org.joda.time.chrono.ZonedChronology.getInstance(chronology54, dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology62.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean67 = dateTimeZone65.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology68 = zonedChronology62.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology62.dayOfMonth();
        org.joda.time.DurationField durationField70 = zonedChronology62.seconds();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology62);
        org.joda.time.DateTimeField dateTimeField72 = zonedChronology62.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology62.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField74 = zonedChronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology62.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField76 = zonedChronology62.hourOfDay();
        boolean boolean77 = dateTime48.equals((java.lang.Object) zonedChronology62);
        org.joda.time.DateTimeField dateTimeField78 = zonedChronology62.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test13321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13321");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        boolean boolean17 = dateTimeZone15.equals((java.lang.Object) "AD");
        long long19 = dateTimeZone15.convertUTCToLocal(162276229440000000L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 162276229476000000L + "'", long19 == 162276229476000000L);
    }

    @Test
    public void test13322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13322");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMinutes(749);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minus(readableDuration7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        int int10 = localDateTime8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks(0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.days();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str23 = dateTimeZone21.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology24 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology24.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean29 = dateTimeZone27.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology30 = zonedChronology24.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology24.dayOfMonth();
        org.joda.time.DurationField durationField32 = zonedChronology24.seconds();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology24);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology24.monthOfYear();
        int int36 = dateTimeField34.getMaximumValue((long) 56);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        int int41 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.monthOfYear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.year();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime51.toDateTime(readableInstant53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology57 = null;
        boolean boolean58 = dateTimeFieldType56.isSupported(chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusWeeks(0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType56.getField(chronology63);
        org.joda.time.DurationField durationField65 = durationFieldType55.getField(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.weeks();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = dateTimeField67.getType();
        boolean boolean69 = dateTime54.isSupported(dateTimeFieldType68);
        int int70 = localDateTime44.get(dateTimeFieldType68);
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime44, locale71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusWeeks(0);
        int int77 = localDateTime76.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology81 = null;
        boolean boolean82 = dateTimeFieldType80.isSupported(chronology81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(dateTimeZone83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusWeeks(0);
        org.joda.time.Chronology chronology87 = localDateTime86.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType80.getField(chronology87);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime79.withField(dateTimeFieldType80, (int) 'x');
        org.joda.time.LocalDateTime localDateTime91 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime79);
        int int92 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        int int93 = localDateTime79.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = localDateTime79.toString("2022-02-22T17:10:02.885+10:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "February" + "'", str72, "February");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 22 + "'", int77 == 22);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
    }

    @Test
    public void test13323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13323");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) ' ');
        int int22 = localDateTime19.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusHours(61685839);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        int int29 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime26.toDateTime(readableInstant30);
        boolean boolean33 = dateTime31.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime34 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        int int38 = property37.getMinimumValue();
        java.lang.String str39 = property37.getAsText();
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = property37.getAsText(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology43 = null;
        boolean boolean44 = dateTimeFieldType42.isSupported(chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType42.getField(chronology49);
        java.lang.String str51 = dateTimeField50.getName();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.lang.String str60 = locale58.getISO3Country();
        java.lang.String str61 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, 2, locale58);
        org.joda.time.LocalDateTime.Property property62 = localDateTime55.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone65);
        int int67 = localDateTime64.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime64.toDateTime(readableInstant68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(dateTimeZone70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.yearOfEra();
        int int73 = property72.getMinimumValue();
        boolean boolean74 = dateTime69.equals((java.lang.Object) int73);
        long long75 = property62.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime69);
        int int76 = property37.getDifference((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime69.getZone();
        int int78 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime69);
        long long79 = dateTime69.getMillis();
        boolean boolean81 = dateTime69.equals((java.lang.Object) "62034061");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "millisOfSecond" + "'", str51, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japanisch" + "'", str59, "Japanisch");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2" + "'", str61, "2");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1645514244273L + "'", long79 == 1645514244273L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test13324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13324");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.era();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        java.lang.String str25 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean43 = dateTimeZone41.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology44 = zonedChronology38.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology38.millisOfSecond();
        boolean boolean51 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology38);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology38.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "yearOfCentury" + "'", str25, "yearOfCentury");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test13325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13325");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.hourOfHalfday();
        boolean boolean25 = durationFieldType0.isSupported((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DurationField durationField26 = zonedChronology13.hours();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField28 = zonedChronology13.halfdays();
        java.lang.String str29 = zonedChronology13.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = zonedChronology13.getDateTimeMillis(1876470556L, 62091578, 61839999, 61884444, 115);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62091578 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str29, "ZonedChronology[ISOChronology[UTC], +10:00]");
    }

    @Test
    public void test13326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13326");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        int int20 = localDateTime12.getCenturyOfEra();
        int int21 = localDateTime12.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.millisOfDay();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test13327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13327");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime3.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
    }

    @Test
    public void test13328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13328");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField23 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField25 = zonedChronology12.years();
        org.joda.time.DurationField durationField26 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test13329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13329");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test13330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13330");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        int int8 = charSet7.size();
        boolean boolean9 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        java.util.Iterator<java.lang.Character> charItor10 = charSet7.iterator();
        java.util.Iterator<java.lang.Character> charItor11 = charSet7.iterator();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.util.Locale locale23 = locale20.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.lang.String str27 = locale20.getDisplayCountry(locale24);
        java.util.Locale.setDefault(category17, locale20);
        java.lang.String str29 = property16.getAsText(locale20);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean47 = dateTimeZone45.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology48 = zonedChronology42.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology42.weekOfWeekyear();
        org.joda.time.DurationField durationField51 = dateTimeField50.getLeapDurationField();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.util.Locale locale55 = locale52.stripExtensions();
        int int56 = dateTimeField50.getMaximumShortTextLength(locale55);
        java.util.Locale.Category category57 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale58 = java.util.Locale.getDefault(category57);
        java.lang.String str59 = locale55.getDisplayVariant(locale58);
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.lang.String str62 = locale60.getScript();
        java.lang.String str63 = locale55.getDisplayCountry(locale60);
        java.lang.String str64 = locale20.getDisplayCountry(locale55);
        java.util.Set<java.lang.Character> charSet65 = locale20.getExtensionKeys();
        boolean boolean66 = charSet7.containsAll((java.util.Collection<java.lang.Character>) charSet65);
        int int67 = charSet65.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charItor10);
        org.junit.Assert.assertNotNull(charItor11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "9" + "'", str29, "9");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.FORMAT + "'", category57.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test13331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13331");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMinutes(749);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withDayOfWeek(62172357);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62172357 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test13332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13332");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 10);
        java.lang.String str5 = dateTimeZone2.getID();
        long long8 = dateTimeZone2.convertLocalToUTC((long) (short) 1, false);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale13 = builder12.build();
        java.lang.String str14 = dateTimeZone2.getName((long) 749, locale13);
        java.util.TimeZone timeZone15 = dateTimeZone2.toTimeZone();
        long long18 = dateTimeZone2.adjustOffset((long) 61677168, false);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        int int23 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime20.toDateTime(readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        int int29 = property28.getMinimumValue();
        boolean boolean30 = dateTime25.equals((java.lang.Object) int29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology33 = null;
        boolean boolean34 = dateTimeFieldType32.isSupported(chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType32.getField(chronology39);
        org.joda.time.DurationField durationField41 = durationFieldType31.getField(chronology39);
        boolean boolean42 = dateTime25.equals((java.lang.Object) chronology39);
        int int43 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        boolean boolean46 = dateTimeFieldType44.isSupported(chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusWeeks(0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType44.getField(chronology51);
        java.lang.String str53 = dateTimeField52.getName();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks(0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.lang.String str62 = locale60.getISO3Country();
        java.lang.String str63 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDateTime57, 2, locale60);
        int int65 = dateTimeField52.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology67 = null;
        boolean boolean68 = dateTimeFieldType66.isSupported(chronology67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusWeeks(0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType66.getField(chronology73);
        java.lang.String str75 = dateTimeField74.getName();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusWeeks(0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        java.util.Locale locale82 = java.util.Locale.JAPANESE;
        java.lang.String str83 = locale82.getDisplayLanguage();
        java.lang.String str84 = locale82.getISO3Country();
        java.lang.String str85 = dateTimeField74.getAsShortText((org.joda.time.ReadablePartial) localDateTime79, 2, locale82);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime79.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.plus(readableDuration88);
        int[] intArray94 = new int[] { 0, 292278993, 10, 'a' };
        int int95 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDateTime89, intArray94);
        boolean boolean96 = dateTimeZone2.isLocalDateTimeGap(localDateTime89);
        long long98 = dateTimeZone2.convertUTCToLocal(4381774522L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-35999999L) + "'", long8 == (-35999999L));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 61677168L + "'", long18 == 61677168L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "millisOfSecond" + "'", str53, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Japanisch" + "'", str61, "Japanisch");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2" + "'", str63, "2");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 999 + "'", int65 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "millisOfSecond" + "'", str75, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Japanisch" + "'", str83, "Japanisch");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2" + "'", str85, "2");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 4417774522L + "'", long98 == 4417774522L);
    }

    @Test
    public void test13333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13333");
        java.util.Locale locale1 = new java.util.Locale("2022-02-22T17:09:16.086");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-22t17:09:16.086");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test13334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13334");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = zonedChronology12.getZone();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test13335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13335");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        int int2 = localDateTime1.getYearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = localDateTime1.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusWeeks(61764931);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int9 = localDateTime8.getEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYearOfCentury(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = dateTimeFieldType13.isSupported(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType13.getField(chronology20);
        long long27 = chronology20.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField28 = chronology20.minuteOfDay();
        long long30 = dateTimeField28.roundFloor((long) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        boolean boolean33 = dateTimeFieldType31.isSupported(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType31.getField(chronology38);
        java.lang.String str40 = dateTimeField39.getName();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.lang.String str49 = locale47.getISO3Country();
        java.lang.String str50 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDateTime44, 2, locale47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime44.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMinuteOfHour((int) '#');
        java.util.Date date55 = localDateTime52.toDate();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.minusSeconds(749);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology59 = null;
        boolean boolean60 = dateTimeFieldType58.isSupported(chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusWeeks(0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType58.getField(chronology65);
        java.lang.String str67 = dateTimeField66.getName();
        org.joda.time.ReadablePartial readablePartial68 = null;
        int[] intArray72 = new int[] { (short) -1, (byte) 10, ' ' };
        int int73 = dateTimeField66.getMaximumValue(readablePartial68, intArray72);
        int int74 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) localDateTime57, intArray72);
        boolean boolean75 = localDateTime8.equals((java.lang.Object) intArray72);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(dateTimeZone78);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.yearOfEra();
        org.joda.time.LocalDateTime.Property property81 = localDateTime79.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property81.getFieldType();
        boolean boolean83 = localDateTime76.isSupported(dateTimeFieldType82);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime76.withMillisOfDay(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean87 = localDateTime76.isSupported(dateTimeFieldType86);
        int int88 = localDateTime8.get(dateTimeFieldType86);
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType86.getDurationType();
        int int90 = localDateTime1.get(dateTimeFieldType86);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime1.plusDays(288);
        int int93 = localDateTime1.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property94 = localDateTime1.millisOfSecond();
        int int95 = localDateTime1.getWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 70001L + "'", long27 == 70001L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "millisOfSecond" + "'", str40, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Japanisch" + "'", str48, "Japanisch");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2" + "'", str50, "2");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Mon Feb 21 17:17:25 GMT+17:09 2022");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "millisOfSecond" + "'", str67, "millisOfSecond");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 32]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 999 + "'", int73 == 999);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 19 + "'", int88 == 19);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 20 + "'", int90 == 20);
        org.junit.Assert.assertNotNull(localDateTime92);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 62244667 + "'", int93 == 62244667);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2022 + "'", int95 == 2022);
    }

    @Test
    public void test13336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13336");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.hourOfHalfday();
        org.joda.time.Chronology chronology18 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.halfdayOfDay();
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = dateTimeField19.getAsText(376, locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 376");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test13337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13337");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        org.joda.time.LocalDateTime.Property property21 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusDays(100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear(893);
        int int32 = localDateTime29.getMinuteOfHour();
        boolean boolean33 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekyear(957);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.plus(readablePeriod38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYear(62228000);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 17 + "'", int32 == 17);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test13338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13338");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.minuteOfHour();
        long long22 = zonedChronology12.add(1645391275084L, (long) 61678279, 21);
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int27 = dateTimeZone25.getOffsetFromLocal(4518471413L);
        java.lang.String str29 = dateTimeZone25.getShortName(0L);
        org.joda.time.Chronology chronology30 = zonedChronology12.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.days();
        org.joda.time.DurationField durationField38 = chronology36.minutes();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str43 = dateTimeZone41.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology36, dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean49 = dateTimeZone47.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology50 = zonedChronology44.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology44.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology44.weekyear();
        org.joda.time.DateTimeZone dateTimeZone54 = zonedChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology44.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone58 = zonedChronology44.getZone();
        java.lang.String str60 = dateTimeZone58.getShortName(63036000000000L);
        org.joda.time.Chronology chronology61 = zonedChronology12.withZone(dateTimeZone58);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1646686518943L + "'", long22 == 1646686518943L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.100" + "'", str29, "+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test13339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13339");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4518470650L);
        java.util.TimeZone timeZone19 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        int int22 = localDateTime20.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.yearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.minusYears(61705356);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test13340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13340");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-22T17:09:01.292", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13341");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.dayOfWeek();
        org.joda.time.DurationField durationField24 = zonedChronology13.centuries();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology13.add(readablePeriod25, 1645427276162L, 12);
        org.joda.time.DurationField durationField29 = zonedChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = zonedChronology13.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = zonedChronology13.getZone();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology13.minuteOfDay();
        org.joda.time.DurationField durationField35 = zonedChronology13.months();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645427276162L + "'", long28 == 1645427276162L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test13342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13342");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale.setDefault(category0, locale4);
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.days();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str18 = dateTimeZone16.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone16);
        boolean boolean21 = zonedChronology19.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology19.dayOfYear();
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.lang.String str26 = dateTimeField23.getAsText(7, locale25);
        java.lang.String str29 = nameProvider6.getName(locale25, "f\351vr.", "1027");
        java.lang.String str30 = locale25.getCountry();
        java.lang.String str31 = locale25.getISO3Language();
        java.util.Set<java.lang.Character> charSet32 = locale25.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale25);
        java.util.Locale locale34 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.centuries();
        boolean boolean40 = property36.equals((java.lang.Object) durationFieldType39);
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category41, locale42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfEra();
        int int47 = property46.getMinimumValue();
        java.lang.String str48 = property46.getAsText();
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.lang.String str50 = property46.getAsText(locale49);
        java.lang.String str51 = locale42.getDisplayCountry(locale49);
        int int52 = property36.getMaximumShortTextLength(locale42);
        java.util.Locale.setDefault(category0, locale42);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        java.util.Locale locale57 = locale54.stripExtensions();
        java.lang.String str58 = locale57.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet59 = locale57.getExtensionKeys();
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale61 = locale60.stripExtensions();
        boolean boolean62 = charSet59.equals((java.lang.Object) locale61);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category64, locale65);
        java.lang.String str67 = locale65.toLanguageTag();
        java.util.Locale.Category category68 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category68, locale69);
        java.lang.String str71 = locale69.toLanguageTag();
        java.lang.String str72 = locale65.getDisplayLanguage(locale69);
        java.lang.String str73 = locale63.getDisplayCountry(locale65);
        java.util.Set<java.lang.String> strSet74 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str75 = locale61.getDisplayLanguage(locale63);
        java.util.Locale.setDefault(category0, locale61);
        java.util.Locale locale77 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "7" + "'", str26, "7");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CN" + "'", str30, "CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022" + "'", str50, "2022");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Canada" + "'", str51, "Canada");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.FORMAT + "'", category64.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "en-CA" + "'", str67, "en-CA");
        org.junit.Assert.assertTrue("'" + category68 + "' != '" + java.util.Locale.Category.FORMAT + "'", category68.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "en-CA" + "'", str71, "en-CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "English" + "'", str72, "English");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "French" + "'", str75, "French");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_CA");
    }

    @Test
    public void test13343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13343");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType25.getField(chronology32);
        java.lang.String str34 = dateTimeField33.getName();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks(0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str43 = locale41.getISO3Country();
        java.lang.String str44 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, 2, locale41);
        int int46 = dateTimeField33.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        boolean boolean49 = dateTimeFieldType47.isSupported(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusWeeks(0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType47.getField(chronology54);
        java.lang.String str56 = dateTimeField55.getName();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusWeeks(0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.lang.String str65 = locale63.getISO3Country();
        java.lang.String str66 = dateTimeField55.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, 2, locale63);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime60.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plus(readableDuration69);
        int[] intArray75 = new int[] { 0, 292278993, 10, 'a' };
        int int76 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime70, intArray75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(dateTimeZone79);
        int int81 = localDateTime78.compareTo((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = localDateTime78.toDateTime(readableInstant82);
        boolean boolean85 = dateTime83.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime86 = localDateTime70.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime70.withWeekyear((int) 'x');
        org.joda.time.LocalDateTime.Property property89 = localDateTime70.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone90 = null;
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime(dateTimeZone90);
        org.joda.time.LocalDateTime.Property property92 = localDateTime91.yearOfEra();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime91.plusSeconds(10);
        int[] intArray95 = localDateTime94.getValues();
        zonedChronology13.validate((org.joda.time.ReadablePartial) localDateTime70, intArray95);
        org.joda.time.DateTimeField dateTimeField97 = zonedChronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField98 = zonedChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField99 = zonedChronology13.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfSecond" + "'", str34, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "japonais" + "'", str42, "japonais");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "millisOfSecond" + "'", str56, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "japonais" + "'", str64, "japonais");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2" + "'", str66, "2");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(intArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[2022, 2, 22, 62254972]");
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(dateTimeField98);
        org.junit.Assert.assertNotNull(dateTimeField99);
    }

    @Test
    public void test13344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13344");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField24 = zonedChronology12.months();
        org.joda.time.Chronology chronology25 = zonedChronology12.withUTC();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test13345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13345");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        int int27 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime24.toDateTime(readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        int int34 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime31.isEqual((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        int int41 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property43 = localDateTime35.year();
        org.joda.time.LocalDateTime.Property property44 = localDateTime35.dayOfWeek();
        org.joda.time.LocalDateTime.Property property45 = localDateTime35.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusWeeks(0);
        int int50 = localDateTime49.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minusDays(100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withWeekyear(893);
        int int55 = localDateTime52.getMinuteOfHour();
        boolean boolean56 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime.Property property57 = localDateTime35.dayOfMonth();
        java.lang.String str58 = property57.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusWeeks(0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.days();
        org.joda.time.DurationField durationField65 = chronology63.minutes();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str70 = dateTimeZone68.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology71 = org.joda.time.chrono.ZonedChronology.getInstance(chronology63, dateTimeZone68);
        boolean boolean73 = zonedChronology71.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField74 = zonedChronology71.hourOfDay();
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology71.dayOfYear();
        java.util.Locale locale77 = java.util.Locale.PRC;
        java.lang.String str78 = dateTimeField75.getAsText(7, locale77);
        java.lang.String str79 = property57.getAsShortText(locale77);
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        java.lang.String str81 = property57.getAsText(locale80);
        java.util.Set<java.lang.String> strSet82 = locale80.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet83 = locale80.getExtensionKeys();
        java.util.Locale locale84 = locale80.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            long long85 = dateTimeField20.set((-29911481189867L), "2022-02-22T17:14:04.926+10:00", locale80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:14:04.926+10:00\" for hourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 17 + "'", int55 == 17);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Property[dayOfMonth]" + "'", str58, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:00" + "'", str70, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "7" + "'", str78, "7");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "22" + "'", str79, "22");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "22" + "'", str81, "22");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja");
    }

    @Test
    public void test13346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13346");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = dateTimeField19.getAsText(0L, locale21);
        org.joda.time.DurationField durationField25 = dateTimeField19.getDurationField();
        long long27 = durationField25.getMillis(20);
        long long30 = durationField25.subtract((long) (-1), 4554473673L);
        long long33 = durationField25.getDifferenceAsLong(9223371990106133424L, (long) 61893610);
        boolean boolean34 = durationField25.isSupported();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1728000000L + "'", long27 == 1728000000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-393506525347200001L) + "'", long30 == (-393506525347200001L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 106751990625L + "'", long33 == 106751990625L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test13347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13347");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField23 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test13348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13348");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguage("2022-02-22T17:10:44.456+10:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-22T17:10:44.456+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test13349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13349");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField29 = zonedChronology12.weekyears();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test13350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13350");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = zonedChronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        int int21 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime18.toDateTime(readableInstant22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        int int28 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        int int35 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property37 = localDateTime29.year();
        org.joda.time.LocalDateTime.Property property38 = localDateTime29.dayOfWeek();
        org.joda.time.LocalDateTime.Property property39 = localDateTime29.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(0);
        int int44 = localDateTime43.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusDays(100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withWeekyear(893);
        int int49 = localDateTime46.getMinuteOfHour();
        boolean boolean50 = localDateTime29.isAfter((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property51 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMillisOfSecond(480);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.weekyear();
        boolean boolean56 = dateTimeZone16.equals((java.lang.Object) property55);
        org.joda.time.LocalDateTime localDateTime58 = property55.addToCopy(0L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 17 + "'", int49 == 17);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test13351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13351");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("CAN");
        java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("61826795");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test13352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13352");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DurationField durationField23 = zonedChronology13.years();
        org.joda.time.DurationField durationField24 = zonedChronology13.weeks();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 61751964, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology13.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = zonedChronology13.getDateTimeMillis(62100076, 449, 2036, 369);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 449 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test13353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13353");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField15 = zonedChronology12.weekyears();
        org.joda.time.DurationField durationField16 = zonedChronology12.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField18 = zonedChronology12.millis();
        org.joda.time.DurationField durationField19 = zonedChronology12.months();
        java.lang.String str20 = zonedChronology12.toString();
        org.joda.time.DurationField durationField21 = zonedChronology12.millis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str20, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test13354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13354");
        java.util.Locale locale1 = new java.util.Locale("61957430");
        org.junit.Assert.assertEquals(locale1.toString(), "61957430");
    }

    @Test
    public void test13355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13355");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfDay();
        java.lang.String str10 = property9.getName();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfDay" + "'", str10, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test13356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13356");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        long long35 = property34.remainder();
        int int36 = property34.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime37 = property34.withMaximumValue();
        long long39 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime37, (long) (short) 1);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology12.dayOfMonth();
        boolean boolean42 = dateTimeField41.isLenient();
        long long44 = dateTimeField41.roundCeiling(1645427597167L);
        int int47 = dateTimeField41.getDifference(239000L, 1961046571436L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4555045353L + "'", long35 == 4555045353L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9223371990112645353L + "'", long39 == 9223371990112645353L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645452000000L + "'", long44 == 1645452000000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-22697) + "'", int47 == (-22697));
    }

    @Test
    public void test13357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13357");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        boolean boolean8 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean9 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.stream.Stream<java.lang.Character> charStream10 = charSet4.stream();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.Object[] objArray13 = charSet12.toArray();
        org.joda.time.ReadableInstant[] readableInstantArray14 = new org.joda.time.ReadableInstant[] {};
        org.joda.time.ReadableInstant[] readableInstantArray15 = charSet12.toArray(readableInstantArray14);
        org.joda.time.DurationField[] durationFieldArray16 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray17 = charSet12.toArray(durationFieldArray16);
        boolean boolean18 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet12);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str30 = dateTimeZone28.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology23, dateTimeZone28);
        org.joda.time.DurationField durationField32 = zonedChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology31.year();
        org.joda.time.DurationField durationField34 = zonedChronology31.months();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str39 = dateTimeZone37.getShortName((long) 10);
        java.lang.String str40 = dateTimeZone37.getID();
        long long43 = dateTimeZone37.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        int int46 = dateTimeZone37.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology47 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology31, dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology31.centuryOfEra();
        java.lang.String str50 = dateTimeField49.getName();
        boolean boolean51 = charSet4.equals((java.lang.Object) dateTimeField49);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet53 = locale52.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor54 = charSet53.iterator();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet56 = locale55.getExtensionKeys();
        java.lang.Object[] objArray57 = charSet56.toArray();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        boolean boolean60 = charSet56.retainAll((java.util.Collection<java.lang.Character>) charSet59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str63 = locale61.getDisplayCountry(locale62);
        boolean boolean64 = locale61.hasExtensions();
        boolean boolean65 = charSet59.remove((java.lang.Object) boolean64);
        boolean boolean66 = charSet59.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks(0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.days();
        org.joda.time.DurationField durationField73 = chronology71.minutes();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str78 = dateTimeZone76.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology79 = org.joda.time.chrono.ZonedChronology.getInstance(chronology71, dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology79.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean84 = dateTimeZone82.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology85 = zonedChronology79.withZone(dateTimeZone82);
        org.joda.time.DateTimeField dateTimeField86 = zonedChronology79.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField87 = zonedChronology79.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField88 = zonedChronology79.weekyear();
        org.joda.time.DateTimeField dateTimeField89 = zonedChronology79.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField90 = zonedChronology79.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone91 = zonedChronology79.getZone();
        boolean boolean92 = charSet59.contains((java.lang.Object) dateTimeZone91);
        boolean boolean93 = charSet53.containsAll((java.util.Collection<java.lang.Character>) charSet59);
        boolean boolean94 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet59);
        java.util.stream.Stream<java.lang.Character> charStream95 = charSet59.stream();
        java.util.Locale locale96 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet97 = locale96.getExtensionKeys();
        boolean boolean98 = charSet59.retainAll((java.util.Collection<java.lang.Character>) charSet97);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charStream10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(readableInstantArray14);
        org.junit.Assert.assertNotNull(readableInstantArray15);
        org.junit.Assert.assertNotNull(durationFieldArray16);
        org.junit.Assert.assertNotNull(durationFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-35999999L) + "'", long43 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 36000000 + "'", int46 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "centuryOfEra" + "'", str50, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertNotNull(charItor54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(charStream95);
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test13358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13358");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.millisOfSecond();
        long long27 = zonedChronology13.add((long) 20, 3124396800000L, 790);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology13.minuteOfDay();
        boolean boolean29 = dateTimeField28.isLenient();
        java.util.Locale locale31 = new java.util.Locale("secondOfMinute");
        int int32 = dateTimeField28.getMaximumShortTextLength(locale31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        boolean boolean47 = zonedChronology45.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        long long52 = zonedChronology45.getDateTimeMillis((int) (byte) 0, (int) (byte) 10, (int) (short) 10, 749);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology45.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone54 = zonedChronology45.getZone();
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.util.Locale.setDefault(locale57);
        java.lang.String str59 = dateTimeZone54.getShortName((long) 61677829, locale57);
        java.util.Locale.setDefault(locale57);
        java.lang.String str61 = locale31.getDisplayLanguage(locale57);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2468273472000020L + "'", long27 == 2468273472000020L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals(locale31.toString(), "secondofminute");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-62142803999251L) + "'", long52 == (-62142803999251L));
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "secondofminute" + "'", str61, "secondofminute");
    }

    @Test
    public void test13359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13359");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusMonths(2719);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusSeconds((-7));
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.era();
        long long10 = property9.remainder();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 56630683052480L + "'", long10 == 56630683052480L);
    }

    @Test
    public void test13360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13360");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("292278993-02-22T17:11:01.329");
        int int3 = timeZone1.getOffset((long) 159);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13361");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayCountry(locale28);
        java.lang.String str30 = property25.getAsText(locale27);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u6587" + "'", str17, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uce90\ub098\ub2e4" + "'", str29, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
    }

    @Test
    public void test13362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13362");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        java.lang.String str22 = localDateTime13.toString();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.plus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        int int29 = property28.getMinimumValue();
        java.lang.String str30 = property28.getAsText();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = property28.getAsText(locale31);
        org.joda.time.DurationField durationField33 = property28.getLeapDurationField();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("292278993-02-22T17:07:53.990");
        java.util.Locale.setDefault(locale35);
        java.lang.String str37 = locale35.getScript();
        int int38 = property28.getMaximumShortTextLength(locale35);
        java.util.Set<java.lang.String> strSet39 = locale35.getUnicodeLocaleKeys();
        java.lang.String str40 = property25.getAsText(locale35);
        java.lang.String str41 = property25.getName();
        boolean boolean42 = property25.isLeap();
        java.lang.String str43 = property25.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u6587" + "'", str17, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:17:25.546" + "'", str22, "2022-02-22T17:17:25.546");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Tuesday" + "'", str40, "Tuesday");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "dayOfWeek" + "'", str41, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Tue" + "'", str43, "Tue");
    }

    @Test
    public void test13363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13363");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        boolean boolean4 = localDateTime1.isSupported(durationFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.yearOfEra();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        int int7 = property5.getMaximumTextLength(locale6);
        java.lang.String str8 = locale6.getISO3Language();
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder14 = builder12.clear();
        java.util.Locale locale15 = builder12.build();
        java.lang.String str16 = locale9.getDisplayName(locale15);
        java.lang.String str17 = locale9.getDisplayVariant();
        java.lang.String str18 = locale9.getDisplayName();
        java.lang.String str19 = locale6.getDisplayCountry(locale9);
        java.lang.String str20 = locale9.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese (China)" + "'", str16, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (China)" + "'", str18, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test13364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13364");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        int int35 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime32.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        int int42 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.dayOfWeek();
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.yearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.minusYears((int) '#');
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = locale54.getDisplayScript();
        boolean boolean56 = locale54.hasExtensions();
        java.lang.String str57 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime52, 61690923, locale54);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime52.plusYears(10);
        java.lang.String str60 = localDateTime52.toString();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime52.toDateTime(readableInstant61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime52.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "61690923" + "'", str57, "61690923");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1935-01-01T09:59:59.999" + "'", str60, "1935-01-01T09:59:59.999");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test13365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13365");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.centuryOfEra();
        org.joda.time.DurationField durationField22 = zonedChronology12.millis();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = zonedChronology12.add(readablePeriod23, 1645427371496L, 289);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = zonedChronology12.add(readablePeriod27, (long) 62170980, 61767103);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645427371496L + "'", long26 == 1645427371496L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 62170980L + "'", long30 == 62170980L);
    }

    @Test
    public void test13366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13366");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.lang.Object[] objArray6 = charSet5.toArray();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        boolean boolean9 = charSet5.retainAll((java.util.Collection<java.lang.Character>) charSet8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        int int14 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime11.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.minusWeeks((int) (short) 1);
        boolean boolean19 = charSet5.remove((java.lang.Object) localDateTime18);
        boolean boolean20 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        java.util.Date date21 = localDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromDateFields(date21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfSecond();
        long long24 = property23.remainder();
        org.joda.time.LocalDateTime localDateTime26 = property23.setCopy(599);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusSeconds(330);
        org.joda.time.Chronology chronology29 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.minutes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 17:17:26 GMT+17:09 2022");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test13367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13367");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        int int29 = property28.getMinimumValue();
        java.lang.String str30 = property28.getAsText();
        org.joda.time.LocalDateTime localDateTime31 = property28.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.days();
        org.joda.time.DurationField durationField38 = chronology36.minutes();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str43 = dateTimeZone41.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology36, dateTimeZone41);
        boolean boolean46 = zonedChronology44.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology44.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        int int52 = localDateTime49.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        boolean boolean54 = localDateTime49.isEqual((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(0);
        int int59 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayCountry(locale62);
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder66 = builder64.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale67 = builder66.build();
        java.util.Locale.Builder builder68 = builder66.clear();
        java.util.Locale locale69 = builder66.build();
        java.lang.String str70 = locale62.getDisplayLanguage(locale69);
        java.lang.String str71 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) localDateTime53, 3, locale69);
        java.util.Set<java.lang.String> strSet72 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str73 = property28.getAsText(locale69);
        java.lang.String str74 = dateTimeField24.getAsText(1961046534809L, locale69);
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.lang.String str76 = locale75.getDisplayLanguage();
        java.util.Locale.setDefault(locale75);
        int int78 = dateTimeField24.getMaximumTextLength(locale75);
        java.lang.String str79 = locale75.getScript();
        java.lang.String str80 = locale75.getLanguage();
        java.util.Set<java.lang.Character> charSet81 = locale75.getExtensionKeys();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\uce90\ub098\ub2e4" + "'", str63, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Korean" + "'", str70, "Korean");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "3" + "'", str71, "3");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022" + "'", str73, "2022");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "54" + "'", str74, "54");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Korean" + "'", str76, "Korean");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ko" + "'", str80, "ko");
        org.junit.Assert.assertNotNull(charSet81);
    }

    @Test
    public void test13368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13368");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str14 = dateTimeZone12.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean20 = dateTimeZone18.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology21 = zonedChronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology15.year();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology15.dayOfMonth();
        org.joda.time.DurationField durationField25 = zonedChronology15.centuries();
        org.joda.time.DurationField durationField26 = zonedChronology15.weeks();
        org.joda.time.DurationField durationField27 = zonedChronology15.centuries();
        boolean boolean28 = dateTimeFieldType2.isSupported((org.joda.time.Chronology) zonedChronology15);
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology15);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str41 = dateTimeZone39.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology42 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone39);
        java.lang.String str43 = dateTimeZone39.getID();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        int int48 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime45.toDateTime(readableInstant49);
        boolean boolean52 = dateTime50.equals((java.lang.Object) 'a');
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        int int57 = localDateTime54.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime54.toDateTime(readableInstant58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.yearOfEra();
        int int63 = property62.getMinimumValue();
        boolean boolean64 = dateTime59.equals((java.lang.Object) int63);
        org.joda.time.Chronology chronology65 = dateTime59.getChronology();
        int int66 = dateTime50.compareTo((org.joda.time.ReadableInstant) dateTime59);
        int int67 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime59);
        long long68 = dateTime59.getMillis();
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime59.getZone();
        long long71 = dateTimeZone69.previousTransition(1644909031564L);
        long long74 = dateTimeZone69.adjustOffset((long) 61726969, false);
        org.joda.time.Chronology chronology75 = zonedChronology15.withZone(dateTimeZone69);
        org.joda.time.DurationField durationField76 = zonedChronology15.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645514245781L + "'", long68 == 1645514245781L);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1644909031564L + "'", long71 == 1644909031564L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 61726969L + "'", long74 == 61726969L);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
    }

    @Test
    public void test13369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13369");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        int int25 = localDateTime21.getMillisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime21.getFieldTypes();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, (int) (byte) 1, locale28);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int35 = dateTimeZone33.getOffsetFromLocal(4518471413L);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.days();
        org.joda.time.DurationField durationField47 = chronology45.minutes();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str52 = dateTimeZone50.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology53 = org.joda.time.chrono.ZonedChronology.getInstance(chronology45, dateTimeZone50);
        org.joda.time.DurationField durationField54 = zonedChronology53.weeks();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology53.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology53.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = zonedChronology53.add(readablePeriod57, 0L, 2);
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology53.weekyearOfCentury();
        org.joda.time.DurationField durationField62 = zonedChronology53.hours();
        org.joda.time.DurationField durationField63 = zonedChronology53.centuries();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology53.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone67);
        int int69 = localDateTime66.compareTo((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        boolean boolean71 = localDateTime66.isEqual((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(dateTimeZone72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusWeeks(0);
        int int76 = localDateTime70.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime.Property property77 = localDateTime73.dayOfWeek();
        int int78 = property77.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime79 = property77.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        int int81 = localDateTime80.getYear();
        int int82 = localDateTime80.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.plus(readableDuration83);
        int int85 = localDateTime79.compareTo((org.joda.time.ReadablePartial) localDateTime84);
        int[] intArray87 = zonedChronology53.get((org.joda.time.ReadablePartial) localDateTime84, (-58376098292591L));
        int int88 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray87);
        int int91 = dateTimeField20.getDifference((long) 11358787, 1876260765L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 62245829 + "'", int25 == 62245829);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uce90\ub098\ub2e4" + "'", str30, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2022 + "'", int81 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 17 + "'", int82 == 17);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[120, 2, 20, 11307409]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test13370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13370");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str21 = dateTimeZone19.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology28 = zonedChronology22.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology22.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology22.getZone();
        org.joda.time.DurationField durationField35 = durationFieldType9.getField((org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology22.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        int int39 = localDateTime38.getYear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusHours(2022);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.hourOfDay();
        java.util.Locale.Category category43 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category43, locale44);
        java.lang.String str46 = locale44.toLanguageTag();
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category47, locale48);
        java.lang.String str50 = locale48.toLanguageTag();
        java.lang.String str51 = locale44.getDisplayLanguage(locale48);
        java.util.Locale locale52 = locale44.stripExtensions();
        java.lang.String str53 = property42.getAsShortText(locale52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str56 = locale52.getDisplayName(locale54);
        java.lang.String str57 = dateTimeField36.getAsText((-295200000L), locale54);
        long long59 = dateTimeField36.roundHalfEven(1961046553295L);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime63 = property61.addToCopy((long) (short) 0);
        int int64 = property61.get();
        boolean boolean65 = property61.isLeap();
        org.joda.time.LocalDateTime localDateTime66 = property61.roundHalfEvenCopy();
        int int67 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.FORMAT + "'", category43.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "en-CA" + "'", str46, "en-CA");
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "en-CA" + "'", str50, "en-CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English" + "'", str51, "English");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "17" + "'", str53, "17");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str56, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "19" + "'", str57, "19");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 946648800000L + "'", long59 == 946648800000L);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 877 + "'", int64 == 877);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2922789 + "'", int67 == 2922789);
    }

    @Test
    public void test13371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13371");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        int int33 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        boolean boolean35 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(0);
        int int40 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        int int41 = localDateTime37.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.dayOfWeek();
        int int43 = property42.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime44 = property42.withMaximumValue();
        int int45 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusMinutes(566);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test13372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13372");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = zonedChronology12.getZone();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) (short) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYear(61767103);
        org.joda.time.DateTimeField dateTimeField30 = localDateTime26.getField(0);
        boolean boolean31 = dateTimeZone20.equals((java.lang.Object) localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test13373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13373");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.year();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        boolean boolean29 = dateTimeFieldType27.isSupported(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType27.getField(chronology34);
        java.lang.String str36 = dateTimeField35.getName();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale43.getDisplayLanguage();
        java.lang.String str45 = locale43.getISO3Country();
        java.lang.String str46 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, 2, locale43);
        int int48 = dateTimeField35.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        boolean boolean51 = dateTimeFieldType49.isSupported(chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType49.getField(chronology56);
        java.lang.String str58 = dateTimeField57.getName();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusWeeks(0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        java.util.Locale locale65 = java.util.Locale.JAPANESE;
        java.lang.String str66 = locale65.getDisplayLanguage();
        java.lang.String str67 = locale65.getISO3Country();
        java.lang.String str68 = dateTimeField57.getAsShortText((org.joda.time.ReadablePartial) localDateTime62, 2, locale65);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime62.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plus(readableDuration71);
        int[] intArray77 = new int[] { 0, 292278993, 10, 'a' };
        int int78 = dateTimeField35.getMinimumValue((org.joda.time.ReadablePartial) localDateTime72, intArray77);
        long long81 = dateTimeField35.getDifferenceAsLong(70001L, (long) 2);
        java.util.Locale locale82 = java.util.Locale.FRANCE;
        int int83 = dateTimeField35.getMaximumTextLength(locale82);
        java.lang.String str84 = locale82.getVariant();
        java.util.Set<java.lang.Character> charSet85 = locale82.getExtensionKeys();
        java.lang.String str86 = locale82.getVariant();
        java.lang.String str87 = dateTimeField25.getAsText((-2679551711999587L), locale82);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfSecond" + "'", str36, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str44, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2" + "'", str46, "2");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 999 + "'", int48 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "millisOfSecond" + "'", str58, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str66, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2" + "'", str68, "2");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 69999L + "'", long81 == 69999L);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(charSet85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "36000" + "'", str87, "36000");
    }

    @Test
    public void test13374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13374");
        java.util.Locale locale2 = new java.util.Locale("", "fr-FR");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category3, locale4);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale.setDefault(category3, locale7);
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.days();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str21 = dateTimeZone19.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone19);
        boolean boolean24 = zonedChronology22.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology22.dayOfYear();
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = dateTimeField26.getAsText(7, locale28);
        java.lang.String str32 = nameProvider9.getName(locale28, "f\351vr.", "1027");
        java.lang.String str33 = locale28.getCountry();
        java.lang.String str34 = locale28.getISO3Language();
        java.util.Set<java.lang.Character> charSet35 = locale28.getExtensionKeys();
        java.util.Locale.setDefault(category3, locale28);
        java.util.Locale locale37 = java.util.Locale.getDefault(category3);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.centuries();
        boolean boolean43 = property39.equals((java.lang.Object) durationFieldType42);
        java.util.Locale.Category category44 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category44, locale45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfEra();
        int int50 = property49.getMinimumValue();
        java.lang.String str51 = property49.getAsText();
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = property49.getAsText(locale52);
        java.lang.String str54 = locale45.getDisplayCountry(locale52);
        int int55 = property39.getMaximumShortTextLength(locale45);
        java.util.Locale.setDefault(category3, locale45);
        java.lang.String str57 = locale2.getDisplayName(locale45);
        org.junit.Assert.assertEquals(locale2.toString(), "_FR-FR");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "7" + "'", str29, "7");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CN" + "'", str33, "CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zho" + "'", str34, "zho");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.FORMAT + "'", category44.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022" + "'", str53, "2022");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Canada" + "'", str54, "Canada");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "FR-FR" + "'", str57, "FR-FR");
    }

    @Test
    public void test13375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13375");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.dayOfYear();
        long long20 = zonedChronology12.add(59940000L, 69999L, 10);
        org.joda.time.DurationField durationField21 = zonedChronology12.hours();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 60639990L + "'", long20 == 60639990L);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test13376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13376");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int20 = dateTimeZone18.getOffsetFromLocal(4518471413L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone18);
        long long23 = dateTimeZone18.nextTransition(60639990L);
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category25, locale26);
        java.lang.String str28 = locale26.toLanguageTag();
        java.util.Locale.Category category29 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category29, locale30);
        java.lang.String str32 = locale30.toLanguageTag();
        java.lang.String str33 = locale26.getDisplayLanguage(locale30);
        java.lang.String str34 = dateTimeZone18.getName(0L, locale26);
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField37 = zonedChronology12.years();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 60639990L + "'", long23 == 60639990L);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en-CA" + "'", str28, "en-CA");
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.FORMAT + "'", category29.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "en-CA" + "'", str32, "en-CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English" + "'", str33, "English");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.100" + "'", str34, "+00:00:00.100");
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test13377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13377");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusHours((int) '#');
        int[] intArray33 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime29, (long) 2022);
        long long37 = zonedChronology12.add((-58376098261318L), (long) 755, 0);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField39 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology12.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 36002022]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-58376098261318L) + "'", long37 == (-58376098261318L));
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test13378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13378");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readableDuration22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.minusHours(366);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType28.getField(chronology35);
        java.lang.String str37 = dateTimeField36.getName();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks(0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.lang.String str46 = locale44.getISO3Country();
        java.lang.String str47 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDateTime41, 2, locale44);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime41.withYearOfEra((int) (byte) 1);
        boolean boolean52 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "millisOfSecond" + "'", str37, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Japanese" + "'", str45, "Japanese");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2" + "'", str47, "2");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test13379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13379");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType23.getField(chronology30);
        java.lang.String str32 = dateTimeField31.getName();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 2, locale39);
        int int44 = dateTimeField31.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = dateTimeFieldType45.isSupported(chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType45.getField(chronology52);
        java.lang.String str54 = dateTimeField53.getName();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.lang.String str63 = locale61.getISO3Country();
        java.lang.String str64 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, 2, locale61);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plus(readableDuration67);
        int[] intArray73 = new int[] { 0, 292278993, 10, 'a' };
        int int74 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68, intArray73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        int int79 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime76.toDateTime(readableInstant80);
        boolean boolean83 = dateTime81.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime84 = localDateTime68.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        long long86 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime68, 10L);
        org.joda.time.DateTimeField dateTimeField87 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField88 = zonedChronology12.era();
        org.joda.time.DurationField durationField89 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField90 = zonedChronology12.centuryOfEra();
        org.joda.time.DurationField durationField91 = zonedChronology12.weeks();
        long long94 = durationField91.getDifferenceAsLong((long) 365, (-37356076799999955L));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japanese" + "'", str40, "Japanese");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 999 + "'", int44 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "millisOfSecond" + "'", str54, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Japanese" + "'", str62, "Japanese");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2" + "'", str64, "2");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645427846210L + "'", long86 == 1645427846210L);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 61766000L + "'", long94 == 61766000L);
    }

    @Test
    public void test13380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13380");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField20 = zonedChronology12.years();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField23 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test13381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13381");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = zonedChronology12.add(readablePeriod16, 0L, 2);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = zonedChronology12.months();
        org.joda.time.Chronology chronology22 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 19);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(38);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = property28.addToCopy((-16455250352946248L));
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, locale31);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10" + "'", str32, "10");
    }

    @Test
    public void test13382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13382");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("999");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(61718894);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = dateTimeFieldType4.isSupported(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType4.getField(chronology11);
        java.lang.String str13 = dateTimeField12.getName();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.getISO3Country();
        java.lang.String str23 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 2, locale20);
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.plusYears(65);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime26);
        int int28 = localDateTime27.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks(0);
        int int33 = localDateTime32.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMinutes(749);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.minusHours(852);
        boolean boolean38 = localDateTime27.equals((java.lang.Object) localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfSecond" + "'", str13, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanese" + "'", str21, "Japanese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2" + "'", str23, "2");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test13383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13383");
        java.util.Locale locale2 = new java.util.Locale("2022-02-22T17:09:53.068", "COORDINATED UNIVERSAL TIME");
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder7 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale.Builder builder10 = builder5.setVariant("CANADA");
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale14 = builder13.build();
        java.util.Locale.Builder builder15 = builder13.clear();
        java.util.Locale locale16 = builder13.build();
        java.util.Locale.Builder builder18 = builder13.addUnicodeLocaleAttribute("999");
        java.util.Locale.Builder builder20 = builder13.setRegion("");
        java.util.Locale.Builder builder22 = builder13.setLanguage("Japanese");
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology42 = zonedChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology36.dayOfMonth();
        org.joda.time.DurationField durationField44 = zonedChronology36.seconds();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology36);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology36.secondOfDay();
        long long48 = dateTimeField46.remainder((-295200000L));
        int int50 = dateTimeField46.getLeapAmount(60639990L);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks(0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.days();
        org.joda.time.DurationField durationField57 = chronology55.minutes();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str62 = dateTimeZone60.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology63 = org.joda.time.chrono.ZonedChronology.getInstance(chronology55, dateTimeZone60);
        org.joda.time.DurationField durationField64 = zonedChronology63.weeks();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology63.year();
        org.joda.time.DurationField durationField66 = zonedChronology63.months();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str71 = dateTimeZone69.getShortName((long) 10);
        java.lang.String str72 = dateTimeZone69.getID();
        long long75 = dateTimeZone69.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone69);
        int int78 = dateTimeZone69.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology79 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology63, dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology63.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField81 = zonedChronology63.centuryOfEra();
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        java.util.Locale locale84 = java.util.Locale.GERMAN;
        java.lang.String str85 = locale83.getDisplayCountry(locale84);
        boolean boolean86 = locale83.hasExtensions();
        java.lang.String str87 = dateTimeField81.getAsShortText((int) 'x', locale83);
        java.lang.String str88 = locale83.getDisplayScript();
        java.lang.String str89 = locale83.getISO3Language();
        int int90 = dateTimeField46.getMaximumTextLength(locale83);
        java.util.Locale.Builder builder91 = builder22.setLocale(locale83);
        java.lang.String str92 = locale83.getISO3Country();
        java.lang.String str93 = locale83.toLanguageTag();
        java.util.Locale.Builder builder94 = builder5.setLocale(locale83);
        java.lang.String str95 = locale2.getDisplayName(locale83);
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-22t17:09:53.068_COORDINATED UNIVERSAL TIME");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+10:00" + "'", str72, "+10:00");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-35999999L) + "'", long75 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "120" + "'", str87, "120");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "deu" + "'", str89, "deu");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 5 + "'", int90 == 5);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "de" + "'", str93, "de");
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-02-22t17:09:53.068 (COORDINATED UNIVERSAL TIME)" + "'", str95, "2022-02-22t17:09:53.068 (COORDINATED UNIVERSAL TIME)");
    }

    @Test
    public void test13384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13384");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.weekyear();
        int int8 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy((-18));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test13385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13385");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category3, locale4);
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category7, locale8);
        java.lang.String str10 = locale8.toLanguageTag();
        java.lang.String str11 = locale4.getDisplayLanguage(locale8);
        java.lang.String str12 = locale2.getDisplayCountry(locale4);
        java.lang.String str15 = nameProvider0.getName(locale2, "weekyears", "22");
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str21 = nameProvider0.getShortName(locale16, "", "minutes");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        int int27 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusWeeks(0);
        int int34 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfWeek();
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.yearOfEra();
        org.joda.time.LocalDateTime.Property property37 = localDateTime31.yearOfCentury();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("jpn");
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks(0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.days();
        org.joda.time.DurationField durationField48 = chronology46.minutes();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str53 = dateTimeZone51.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology54 = org.joda.time.chrono.ZonedChronology.getInstance(chronology46, dateTimeZone51);
        org.joda.time.DurationField durationField55 = zonedChronology54.weeks();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology54.year();
        org.joda.time.DateTimeZone dateTimeZone57 = zonedChronology54.getZone();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = dateTimeZone57.getShortName((long) '4', locale59);
        java.lang.String str61 = locale59.getDisplayCountry();
        java.lang.String str64 = nameProvider40.getName(locale59, "Japanese", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider40);
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.lang.String str68 = locale66.getDisplayCountry(locale67);
        java.util.Locale locale69 = locale66.stripExtensions();
        java.lang.String str70 = locale69.getDisplayVariant();
        boolean boolean71 = locale69.hasExtensions();
        java.util.Locale locale72 = java.util.Locale.GERMANY;
        java.lang.String str73 = locale69.getDisplayScript(locale72);
        java.lang.String str74 = locale72.getDisplayLanguage();
        java.lang.String str77 = nameProvider40.getShortName(locale72, "", "292278993-02-22T17:07:53.990");
        java.util.Locale locale80 = new java.util.Locale("17", "Etc/UTC");
        java.lang.String str83 = nameProvider40.getName(locale80, "CAN", "0");
        java.lang.String str84 = locale39.getDisplayName(locale80);
        java.lang.String str85 = property37.getAsShortText(locale39);
        java.util.Locale locale86 = locale39.stripExtensions();
        java.lang.String str89 = nameProvider0.getName(locale39, "3", "1970");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en-CA" + "'", str10, "en-CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English" + "'", str11, "English");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanese" + "'", str17, "Japanese");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "jpn");
        org.junit.Assert.assertNotNull(nameProvider40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "German" + "'", str74, "German");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals(locale80.toString(), "17_ETC/UTC");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Japanese" + "'", str84, "Japanese");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "22" + "'", str85, "22");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "jpn");
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test13386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13386");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test13387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13387");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField20 = dateTimeField19.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str32 = dateTimeZone30.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone30);
        boolean boolean35 = zonedChronology33.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withHourOfDay((int) (short) 10);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekyear();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale43.getDisplayCountry(locale44);
        boolean boolean46 = locale43.hasExtensions();
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale47.getDisplayCountry(locale48);
        java.util.Locale locale50 = locale47.stripExtensions();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale51.getDisplayCountry(locale52);
        java.lang.String str54 = locale47.getDisplayCountry(locale51);
        java.lang.String str55 = locale43.getDisplayVariant(locale51);
        java.lang.String str56 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, 61692116, locale43);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime40.minusMonths(61865041);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusYears(61888656);
        int int61 = localDateTime58.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+10:00" + "'", str32, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "61692116" + "'", str56, "61692116");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 98 + "'", int61 == 98);
    }

    @Test
    public void test13388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13388");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        org.joda.time.ReadableInstant[] readableInstantArray3 = new org.joda.time.ReadableInstant[] {};
        org.joda.time.ReadableInstant[] readableInstantArray4 = charSet1.toArray(readableInstantArray3);
        org.joda.time.DurationField[] durationFieldArray5 = new org.joda.time.DurationField[] {};
        org.joda.time.DurationField[] durationFieldArray6 = charSet1.toArray(durationFieldArray5);
        int int7 = charSet1.size();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int int12 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime9.toDateTime(readableInstant13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusWeeks((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime16.getFields();
        java.lang.Object[] objArray18 = charSet1.toArray((java.lang.Object[]) dateTimeFieldArray17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int21 = localDateTime20.getEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.monthOfYear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.era();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.era();
        boolean boolean25 = charSet1.remove((java.lang.Object) property24);
        java.lang.Object[] objArray26 = charSet1.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(readableInstantArray3);
        org.junit.Assert.assertNotNull(readableInstantArray4);
        org.junit.Assert.assertNotNull(durationFieldArray5);
        org.junit.Assert.assertNotNull(durationFieldArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[null, DateTimeField[monthOfYear], DateTimeField[dayOfMonth], DateTimeField[millisOfDay]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[null, DateTimeField[monthOfYear], DateTimeField[dayOfMonth], DateTimeField[millisOfDay]]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
    }

    @Test
    public void test13389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13389");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology13.weekyear();
        org.joda.time.DurationField durationField23 = zonedChronology13.years();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology29 = zonedChronology13.withZone(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 12, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYear((-1));
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime30.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test13390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13390");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology4 = null;
        boolean boolean5 = dateTimeFieldType3.isSupported(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType3.getField(chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str16 = dateTimeZone14.getShortName((long) 10);
        java.lang.String str17 = dateTimeZone14.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone14);
        java.lang.String str21 = dateTimeZone14.getShortName(4518470650L);
        long long23 = dateTimeZone2.getMillisKeepLocal(dateTimeZone14, 4518471600L);
        long long25 = dateTimeZone2.convertUTCToLocal((long) 36000000);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.year();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4518471600L + "'", long23 == 4518471600L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 72000000L + "'", long25 == 72000000L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test13391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13391");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.centuryOfEra();
        org.joda.time.DurationField durationField25 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField26 = zonedChronology12.centuries();
        long long29 = durationField26.subtract((-997199091L), 427);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1347482782799091L) + "'", long29 == (-1347482782799091L));
    }

    @Test
    public void test13392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13392");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.setScript("");
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.lang.String str8 = locale6.getISO3Country();
        java.lang.String str10 = locale6.getExtension('a');
        java.lang.String str11 = locale6.getDisplayLanguage();
        java.util.Locale.setDefault(locale6);
        java.util.Locale.Builder builder13 = builder2.setLocale(locale6);
        java.util.Locale.Builder builder15 = builder2.setLanguageTag("fra");
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("355");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale20 = builder18.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Japanese" + "'", str7, "Japanese");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Japanese" + "'", str11, "Japanese");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fra");
    }

    @Test
    public void test13393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13393");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        java.lang.String str14 = dateTimeZone11.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology7, dateTimeZone11);
        java.lang.String str18 = dateTimeZone11.getShortName(4518470650L);
        boolean boolean20 = dateTimeZone11.isStandardOffset((-36000000L));
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str23 = dateTimeZone11.getName((long) 23, locale22);
        java.lang.String str24 = locale22.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:00" + "'", str23, "+10:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en" + "'", str24, "en");
    }

    @Test
    public void test13394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13394");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.addUnicodeLocaleAttribute("999");
        java.util.Locale.Builder builder9 = builder7.setRegion("");
        java.util.Locale.Builder builder10 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder7.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13395");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        org.joda.time.Chronology chronology24 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField28 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test13396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13396");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField17 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test13397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13397");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        int int56 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(readableInstant57);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime.Property property62 = localDateTime45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime63 = property62.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = property62.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str17, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str39, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test13398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13398");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime.Property property25 = localDateTime13.property(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.withWeekyear(31);
        org.joda.time.LocalDateTime.Property property28 = localDateTime13.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str17, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test13399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13399");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusWeeks(401);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.withDurationAdded(readableDuration27, 61736892);
        org.joda.time.LocalDateTime.Property property30 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology51 = zonedChronology45.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology45.minuteOfHour();
        org.joda.time.Chronology chronology53 = zonedChronology45.withUTC();
        org.joda.time.DurationField durationField54 = zonedChronology45.years();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology45.minuteOfDay();
        org.joda.time.DurationField durationField56 = zonedChronology45.years();
        boolean boolean57 = property30.equals((java.lang.Object) durationField56);
        org.joda.time.Interval interval58 = property30.toInterval();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str17, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval58);
    }

    @Test
    public void test13400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13400");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.centuryOfEra();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category8, locale9);
        org.joda.time.LocalDateTime localDateTime11 = property6.setCopy("427", locale9);
        org.joda.time.LocalDateTime localDateTime12 = property6.withMinimumValue();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test13401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13401");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology12.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test13402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13402");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test13403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13403");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, 431);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks(0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology33 = zonedChronology27.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology27.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int39 = localDateTime38.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.seconds();
        boolean boolean41 = localDateTime38.isSupported(durationFieldType40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.yearOfEra();
        int[] intArray44 = new int[] { 'a' };
        int int45 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.minusDays(0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime38.withMinuteOfHour(9);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMillisOfSecond(20);
        boolean boolean52 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[97]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-292275054) + "'", int45 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test13404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13404");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField22 = zonedChronology12.months();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test13405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13405");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology13.era();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField28 = zonedChronology13.months();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        int int33 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime30.toDateTime(readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        int int40 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime37.isEqual((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks(0);
        int int47 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property49 = localDateTime41.year();
        org.joda.time.LocalDateTime.Property property50 = localDateTime41.dayOfWeek();
        org.joda.time.LocalDateTime.Property property51 = localDateTime41.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusWeeks(0);
        int int56 = localDateTime55.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusDays(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withWeekyear(893);
        int int61 = localDateTime58.getMinuteOfHour();
        boolean boolean62 = localDateTime41.isAfter((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.plusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusWeeks(61683951);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusWeeks((int) 'x');
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.dayOfWeek();
        long long71 = zonedChronology13.set((org.joda.time.ReadablePartial) localDateTime68, 9223371990112402561L);
        org.joda.time.DurationField durationField72 = zonedChronology13.years();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 17 + "'", int61 == 17);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 37308017863047085L + "'", long71 == 37308017863047085L);
        org.junit.Assert.assertNotNull(durationField72);
    }

    @Test
    public void test13406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13406");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime1.plusHours(100);
        java.lang.String str24 = localDateTime23.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-26T21:17:27.138" + "'", str24, "2022-02-26T21:17:27.138");
    }

    @Test
    public void test13407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13407");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusHours((int) '#');
        int[] intArray33 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime29, (long) 2022);
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.minusSeconds((-292275054));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusYears(1255);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plusYears(1439);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withMillisOfDay(643);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        int int44 = localDateTime40.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 36002022]");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
    }

    @Test
    public void test13408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13408");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (-61862));
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withPeriodAdded(readablePeriod2, 877);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test13409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13409");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test13410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13410");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(787);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13411");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.yearOfCentury();
        long long18 = dateTimeField16.remainder((long) 61820407);
        org.joda.time.DurationField durationField19 = dateTimeField16.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str33 = dateTimeZone31.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology26, dateTimeZone31);
        boolean boolean36 = zonedChronology34.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology34);
        org.joda.time.DateTimeZone dateTimeZone38 = zonedChronology34.getZone();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.yearOfEra();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property44.getFieldType();
        boolean boolean46 = localDateTime39.isSupported(dateTimeFieldType45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime39.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        int int53 = localDateTime50.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime50.toDateTime(readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone58);
        int int60 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime57.isEqual((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusWeeks(0);
        int int67 = localDateTime61.compareTo((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime.Property property69 = localDateTime50.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime50);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime50.plus(readableDuration71);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime50);
        long long75 = zonedChronology34.set((org.joda.time.ReadablePartial) localDateTime50, 60484158000L);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime50.minusMinutes(395);
        java.util.Locale.Category category79 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale80 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category79, locale80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime(dateTimeZone82);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.yearOfEra();
        int int85 = property84.getMinimumValue();
        java.lang.String str86 = property84.getAsText();
        java.util.Locale locale87 = java.util.Locale.FRANCE;
        java.lang.String str88 = property84.getAsText(locale87);
        java.lang.String str89 = locale80.getDisplayCountry(locale87);
        java.lang.String str90 = locale87.toLanguageTag();
        java.lang.String str91 = locale87.getISO3Language();
        java.lang.String str92 = localDateTime50.toString("1390", locale87);
        // The following exception was thrown during execution in test generation
        try {
            long long93 = dateTimeField16.set(1876533747L, "2022-02-22T17:11:53.177", locale87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:11:53.177\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97820407L + "'", long18 == 97820407L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645514247292L + "'", long75 == 1645514247292L);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + category79 + "' != '" + java.util.Locale.Category.FORMAT + "'", category79.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022" + "'", str86, "2022");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022" + "'", str88, "2022");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Canada" + "'", str89, "Canada");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "fr-FR" + "'", str90, "fr-FR");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "fra" + "'", str91, "fra");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1390" + "'", str92, "1390");
    }

    @Test
    public void test13412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13412");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.Chronology chronology20 = zonedChronology12.withUTC();
        org.joda.time.DurationField durationField21 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusHours((int) '#');
        int[] intArray33 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime29, (long) 2022);
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.minusSeconds((-292275054));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusYears(1255);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.monthOfYear();
        org.joda.time.DurationField durationField40 = property39.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 36002022]");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test13413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13413");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.year();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.DurationField durationField22 = zonedChronology12.halfdays();
        org.joda.time.DurationField durationField23 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology42 = zonedChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology36.weekyear();
        org.joda.time.DurationField durationField46 = zonedChronology36.years();
        org.joda.time.DurationFieldType durationFieldType47 = durationField46.getType();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.days();
        org.joda.time.DurationField durationField54 = chronology52.minutes();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str59 = dateTimeZone57.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology60 = org.joda.time.chrono.ZonedChronology.getInstance(chronology52, dateTimeZone57);
        org.joda.time.DurationField durationField61 = zonedChronology60.weeks();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology60.dayOfWeek();
        boolean boolean63 = durationFieldType47.isSupported((org.joda.time.Chronology) zonedChronology60);
        org.joda.time.DateTimeZone dateTimeZone64 = zonedChronology60.getZone();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone64);
        int[] intArray67 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime65, (long) 59);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:00" + "'", str59, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1970, 1, 1, 36000059]");
    }

    @Test
    public void test13414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13414");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = zonedChronology12.withUTC();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfDay();
        int int25 = dateTimeField24.getMaximumValue();
        long long28 = dateTimeField24.addWrapField(1645427626064L, (int) (byte) 100);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 86399999 + "'", int25 == 86399999);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645427626164L + "'", long28 == 1645427626164L);
    }

    @Test
    public void test13415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13415");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusHours(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.property(dateTimeFieldType7);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType7.getRangeDurationType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1397 + "'", int5 == 1397);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNull(durationFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationFieldType10);
    }

    @Test
    public void test13416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13416");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        int int20 = localDateTime19.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withHourOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMinutes(957);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        boolean boolean40 = zonedChronology38.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology38);
        org.joda.time.DateTimeZone dateTimeZone42 = zonedChronology38.getZone();
        int int44 = dateTimeZone42.getOffset(190L);
        org.joda.time.DateTime dateTime45 = localDateTime22.toDateTime(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 453 + "'", int20 == 453);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test13417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13417");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks(0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.days();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str13 = dateTimeZone11.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField15 = chronology6.weekyearOfCentury();
        boolean boolean16 = localDateTime1.equals((java.lang.Object) dateTimeField15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime1.plusDays(30);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays(618);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfWeek();
        java.lang.String str22 = property21.getName();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale26.getDisplayVariant();
        boolean boolean28 = locale26.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = locale26.getDisplayScript(locale29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        int int37 = property35.getMaximumShortTextLength(locale36);
        java.lang.String str38 = locale26.getDisplayCountry(locale36);
        java.lang.String str39 = property21.getAsText(locale36);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "dayOfWeek" + "'", str22, "dayOfWeek");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "luned\354" + "'", str39, "luned\354");
    }

    @Test
    public void test13418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13418");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField23 = zonedChronology12.hours();
        org.joda.time.DurationField durationField24 = zonedChronology12.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = durationField24.add(2440281600000L, 61940197);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 6194019700");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test13419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13419");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(100);
        int int8 = localDateTime5.getYearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 93 + "'", int8 == 93);
    }

    @Test
    public void test13420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13420");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str38 = dateTimeZone36.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology45 = zonedChronology39.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology39.weekOfWeekyear();
        org.joda.time.DurationField durationField48 = dateTimeField47.getLeapDurationField();
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale49.getDisplayCountry(locale50);
        java.util.Locale locale52 = locale49.stripExtensions();
        int int53 = dateTimeField47.getMaximumShortTextLength(locale52);
        java.lang.String str54 = dateTimeZone23.getName(4554472850L, locale52);
        org.joda.time.Chronology chronology55 = zonedChronology12.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField56 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology12.secondOfDay();
        long long61 = zonedChronology12.add(1876376753L, (long) 61984337, 61801529);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNull(durationField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.100" + "'", str54, "+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3830728677028026L + "'", long61 == 3830728677028026L);
    }

    @Test
    public void test13421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13421");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.era();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.era();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plus(readableDuration6);
        org.joda.time.Chronology chronology8 = localDateTime1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.lang.String str10 = dateTimeFieldType9.toString();
        boolean boolean11 = localDateTime1.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        int int15 = property14.getMinimumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = property14.getAsText(locale17);
        org.joda.time.LocalDateTime localDateTime19 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property14.getFieldType();
        boolean boolean21 = localDateTime1.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYear();
        int int24 = localDateTime22.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = localDateTime22.get(dateTimeFieldType25);
        java.lang.String str27 = dateTimeFieldType25.getName();
        boolean boolean28 = localDateTime1.isSupported(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks(0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str40 = dateTimeZone38.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology41.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology47 = zonedChronology41.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology41.year();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology41.dayOfMonth();
        org.joda.time.DurationField durationField51 = zonedChronology41.weeks();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology41.weekyearOfCentury();
        org.joda.time.DurationField durationField53 = zonedChronology41.seconds();
        boolean boolean54 = dateTimeFieldType25.isSupported((org.joda.time.Chronology) zonedChronology41);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekyearOfCentury" + "'", str10, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 17 + "'", int24 == 17);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "year" + "'", str27, "year");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test13422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13422");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        int int56 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(readableInstant57);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime45.withWeekyear((int) 'x');
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int67 = localDateTime66.getEra();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.monthOfYear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.withYearOfCentury(10);
        org.joda.time.DateTime dateTime71 = localDateTime66.toDateTime();
        long long72 = property64.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime71);
        java.lang.String str73 = property64.getAsText();
        org.joda.time.LocalDateTime localDateTime75 = property64.setCopy("8");
        long long76 = property64.remainder();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str17, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str39, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-58376097752363L) + "'", long72 == (-58376097752363L));
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "636" + "'", str73, "636");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test13423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13423");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.centuryOfEra();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category8, locale9);
        org.joda.time.LocalDateTime localDateTime11 = property6.setCopy("427", locale9);
        org.joda.time.LocalDateTime localDateTime12 = property6.withMinimumValue();
        java.lang.String str13 = property6.getAsString();
        int int14 = property6.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime15 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int18 = localDateTime17.getEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.monthOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYearOfCentury(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minusDays((int) (byte) 100);
        int int24 = localDateTime23.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusHours(5);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        int int31 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime28.toDateTime(readableInstant32);
        boolean boolean35 = dateTime33.equals((java.lang.Object) 'a');
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        int int40 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime37.toDateTime(readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.yearOfEra();
        int int46 = property45.getMinimumValue();
        boolean boolean47 = dateTime42.equals((java.lang.Object) int46);
        org.joda.time.Chronology chronology48 = dateTime42.getChronology();
        int int49 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        int int54 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime51.toDateTime(readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.yearOfEra();
        int int60 = property59.getMinimumValue();
        boolean boolean61 = dateTime56.equals((java.lang.Object) int60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int63 = dateTime56.get(dateTimeFieldType62);
        boolean boolean64 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime56);
        java.lang.String str65 = dateTime56.toString();
        org.joda.time.DateTime dateTime66 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime67 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Chronology chronology68 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.dayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2922789" + "'", str13, "2922789");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T17:17:27.673+10:00" + "'", str65, "2022-02-22T17:17:27.673+10:00");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test13424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13424");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        int int3 = property2.getMinimumValue();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalDateTime localDateTime5 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property2.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        boolean boolean9 = dateTimeFieldType7.isSupported(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType7.getField(chronology14);
        java.lang.String str16 = dateTimeField15.getName();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.getISO3Country();
        java.lang.String str26 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime20, 2, locale23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime20.yearOfCentury();
        boolean boolean30 = localDateTime6.equals((java.lang.Object) localDateTime20);
        int[] intArray31 = localDateTime20.getValues();
        java.lang.String str32 = localDateTime20.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfSecond" + "'", str16, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2" + "'", str26, "2");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 22, 62247716]");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:17:27.716" + "'", str32, "2022-02-22T17:17:27.716");
    }

    @Test
    public void test13425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13425");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        long long27 = zonedChronology12.add(1645427275536L, 0L, 8);
        org.joda.time.Chronology chronology28 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.weekyearOfCentury();
        long long33 = zonedChronology12.add((-295200000L), (long) 755, 433);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology12.minuteOfDay();
        org.joda.time.DurationField durationField36 = zonedChronology12.minutes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645427275536L + "'", long27 == 1645427275536L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-294873085L) + "'", long33 == (-294873085L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test13426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13426");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = zonedChronology12.getZone();
        java.lang.String str17 = zonedChronology12.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str17, "ZonedChronology[ISOChronology[UTC], +10:00]");
    }

    @Test
    public void test13427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13427");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(536);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test13428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13428");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField17 = zonedChronology12.hours();
        org.joda.time.DurationField durationField18 = zonedChronology12.centuries();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.millisOfDay();
        org.joda.time.DurationField durationField22 = zonedChronology12.millis();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test13429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13429");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str36 = dateTimeZone34.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology37.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology43 = zonedChronology37.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology37.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = zonedChronology37.add(readablePeriod45, (long) 53, (int) (byte) 0);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology37.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology37.weekyear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int54 = localDateTime53.getEra();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.monthOfYear();
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.era();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.minusSeconds((-998));
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withPeriodAdded(readablePeriod59, 417);
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localDateTime58, locale62);
        int int64 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localDateTime58);
        int int65 = localDateTime58.size();
        org.joda.time.LocalDateTime.Property property66 = localDateTime58.millisOfSecond();
        int int67 = property66.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 53L + "'", long48 == 53L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970" + "'", str63, "1970");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 999 + "'", int67 == 999);
    }

    @Test
    public void test13430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13430");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DurationField durationField24 = zonedChronology12.weeks();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.dayOfYear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.year();
        int int29 = localDateTime25.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withTime(83652323, 761, (-6503), 62043478);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83652323 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
    }

    @Test
    public void test13431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13431");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        long long27 = zonedChronology12.add(1645427275536L, 0L, 8);
        org.joda.time.Chronology chronology28 = zonedChronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.weekyearOfCentury();
        long long33 = zonedChronology12.add((-295200000L), (long) 755, 433);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology12.year();
        org.joda.time.DurationField durationField36 = zonedChronology12.halfdays();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        int int41 = localDateTime40.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMinutes(749);
        int int44 = localDateTime43.getMonthOfYear();
        long long46 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime43, 1645427417213L);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology12.halfdayOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645427275536L + "'", long27 == 1645427275536L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-294873085L) + "'", long33 == (-294873085L));
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645469307906L + "'", long46 == 1645469307906L);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test13432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13432");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.dayOfWeek();
        org.joda.time.DurationField durationField24 = zonedChronology13.centuries();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology13.add(readablePeriod25, 1645427276162L, 12);
        org.joda.time.DurationField durationField29 = zonedChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology13.clockhourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = locale31.getISO3Country();
        java.lang.String str35 = locale31.getExtension('a');
        java.lang.String str36 = locale31.getDisplayLanguage();
        int int37 = dateTimeField30.getMaximumShortTextLength(locale31);
        java.lang.String str38 = locale31.getISO3Language();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = locale39.getVariant();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        java.util.Locale.Category category46 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category46, locale47);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str51 = locale49.getDisplayCountry(locale50);
        java.util.Locale locale52 = locale49.stripExtensions();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        java.lang.String str56 = locale49.getDisplayCountry(locale53);
        java.util.Locale.setDefault(category46, locale49);
        java.lang.String str58 = property45.getAsText(locale49);
        java.util.Locale locale59 = java.util.Locale.PRC;
        java.lang.String str60 = locale49.getDisplayLanguage(locale59);
        java.lang.String str61 = locale39.getDisplayName(locale59);
        java.util.Set<java.lang.String> strSet62 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str63 = locale31.getDisplayVariant(locale59);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645427276162L + "'", long28 == 1645427276162L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str32, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str36, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "jpn" + "'", str38, "jpn");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + category46 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category46.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9" + "'", str58, "9");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u5fb7\u6587" + "'", str60, "\u5fb7\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str61, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test13433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13433");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        long long26 = zonedChronology12.add(1876103295L, (long) 356, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField28 = zonedChronology12.centuries();
        org.joda.time.DurationField durationField29 = zonedChronology12.years();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = zonedChronology12.getDateTimeMillis(616, 88, 0, 600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 88 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1876102939L + "'", long26 == 1876102939L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test13434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13434");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField24 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.era();
        java.lang.String str26 = zonedChronology12.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str26, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test13435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13435");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusYears(583);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        java.lang.String str12 = dateTimeZone9.getID();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        int int16 = localDateTime15.getYear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusHours(2022);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.hourOfDay();
        java.util.Locale locale22 = new java.util.Locale("292278993-02-22T17:08:02.695", "2022-02-22T17:07:54.303");
        java.lang.String str23 = property19.getAsText(locale22);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        java.lang.String str26 = dateTimeZone9.getShortName(1656740044800032L, locale24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DurationField durationField34 = chronology32.minutes();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str39 = dateTimeZone37.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology32, dateTimeZone37);
        boolean boolean42 = zonedChronology40.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology40.dayOfYear();
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.lang.String str47 = dateTimeField44.getAsText(7, locale46);
        java.lang.String str48 = locale46.toLanguageTag();
        java.lang.String str49 = locale46.getDisplayName();
        java.lang.String str50 = dateTimeZone9.getName((long) 11358787, locale46);
        java.lang.String str51 = dateTimeZone9.getID();
        org.joda.time.DateTime dateTime52 = localDateTime3.toDateTime(dateTimeZone9);
        java.util.TimeZone timeZone53 = dateTimeZone9.toTimeZone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale22.toString(), "292278993-02-22t17:08:02.695_2022-02-22T17:07:54.303");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "17" + "'", str23, "17");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "292278993-02-22t17:08:02.695 (2022-02-22T17:07:54.303)" + "'", str25, "292278993-02-22t17:08:02.695 (2022-02-22T17:07:54.303)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "7" + "'", str47, "7");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh-CN" + "'", str48, "zh-CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinesisch (China)" + "'", str49, "Chinesisch (China)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test13436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13436");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.era();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        int int29 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime26.toDateTime(readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        int int36 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime33.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        int int43 = localDateTime37.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime37);
        int int45 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime37.withMillisOfDay(761);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test13437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13437");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.yearOfCentury();
        org.joda.time.DurationField durationField15 = zonedChronology12.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test13438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13438");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str37 = dateTimeZone35.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology38.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean43 = dateTimeZone41.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology44 = zonedChronology38.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology38.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology38.weekyear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int50 = localDateTime49.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.seconds();
        boolean boolean52 = localDateTime49.isSupported(durationFieldType51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime49.yearOfEra();
        int[] intArray55 = new int[] { 'a' };
        int int56 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) localDateTime49, intArray55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime49.minusDays(0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime49.withMinuteOfHour(9);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withMillisOfSecond(20);
        long long64 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime60, (long) 525);
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[97]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-292275054) + "'", int56 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-3000001L) + "'", long64 == (-3000001L));
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test13439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13439");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.dayOfYear();
        org.joda.time.DurationField durationField22 = zonedChronology12.weekyears();
        org.joda.time.DateTimeZone dateTimeZone23 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField24 = zonedChronology12.millis();
        org.joda.time.DurationField durationField25 = zonedChronology12.weeks();
        boolean boolean26 = durationField25.isSupported();
        long long27 = durationField25.getUnitMillis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 604800000L + "'", long27 == 604800000L);
    }

    @Test
    public void test13440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13440");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("seconds");
        java.util.Locale.Builder builder7 = builder2.setLanguageTag("Kanada");
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("Tuesday");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setExtension('4', "2022-02-22T17:15:37.808");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test13441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13441");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DurationField durationField24 = zonedChronology12.weeks();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology12.add(readablePeriod25, (long) 12, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DurationField durationField37 = chronology35.minutes();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str42 = dateTimeZone40.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology43 = org.joda.time.chrono.ZonedChronology.getInstance(chronology35, dateTimeZone40);
        boolean boolean45 = zonedChronology43.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        long long50 = zonedChronology43.getDateTimeMillis((int) (byte) 0, (int) (byte) 10, (int) (short) 10, 749);
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology43.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone52 = zonedChronology43.getZone();
        long long55 = dateTimeZone52.convertLocalToUTC((-36000000L), true);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 61759134, dateTimeZone52);
        org.joda.time.Chronology chronology57 = zonedChronology12.withZone(dateTimeZone52);
        org.joda.time.ReadablePartial readablePartial58 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long60 = chronology57.set(readablePartial58, 4554558772L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 12L + "'", long28 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-62142803999251L) + "'", long50 == (-62142803999251L));
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-72000000L) + "'", long55 == (-72000000L));
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test13442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13442");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYearOfCentury(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        long long20 = chronology13.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = chronology13.minuteOfDay();
        long long23 = dateTimeField21.roundFloor((long) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        boolean boolean26 = dateTimeFieldType24.isSupported(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType24.getField(chronology31);
        java.lang.String str33 = dateTimeField32.getName();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = locale40.getISO3Country();
        java.lang.String str43 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, 2, locale40);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime37.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMinuteOfHour((int) '#');
        java.util.Date date48 = localDateTime45.toDate();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.minusSeconds(749);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology52 = null;
        boolean boolean53 = dateTimeFieldType51.isSupported(chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks(0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType51.getField(chronology58);
        java.lang.String str60 = dateTimeField59.getName();
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray65 = new int[] { (short) -1, (byte) 10, ' ' };
        int int66 = dateTimeField59.getMaximumValue(readablePartial61, intArray65);
        int int67 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50, intArray65);
        boolean boolean68 = localDateTime1.equals((java.lang.Object) intArray65);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime1.withDurationAdded(readableDuration69, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime1.minusMillis(19);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime1.minusWeeks(2);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime1.plus(readablePeriod76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusSeconds(566);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withMinuteOfHour(956);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 956 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 70001L + "'", long20 == 70001L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfSecond" + "'", str33, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Japanisch" + "'", str41, "Japanisch");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2" + "'", str43, "2");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Mon Feb 21 17:17:29 GMT+17:09 2022");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "millisOfSecond" + "'", str60, "millisOfSecond");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 32]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 999 + "'", int66 == 999);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test13443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13443");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        long long14 = chronology7.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = chronology7.minuteOfDay();
        long long17 = dateTimeField15.roundFloor((long) 'x');
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale21 = locale18.stripExtensions();
        java.lang.String str22 = locale21.getDisplayVariant();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale21.getDisplayCountry(locale23);
        java.lang.String str25 = locale23.getISO3Country();
        int int26 = dateTimeField15.getMaximumShortTextLength(locale23);
        java.util.Set<java.lang.Character> charSet27 = locale23.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream28 = charSet27.parallelStream();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 70001L + "'", long14 == 70001L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CAN" + "'", str25, "CAN");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(charStream28);
    }

    @Test
    public void test13444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13444");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test13445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13445");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.minuteOfHour();
        org.joda.time.DurationField durationField20 = zonedChronology12.hours();
        org.joda.time.DurationField durationField21 = zonedChronology12.centuries();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test13446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13446");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        boolean boolean7 = locale4.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = locale8.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale8.getDisplayCountry(locale12);
        java.lang.String str16 = locale4.getDisplayVariant(locale12);
        java.util.Set<java.lang.Character> charSet17 = locale12.getExtensionKeys();
        boolean boolean18 = charSet3.removeAll((java.util.Collection<java.lang.Character>) charSet17);
        java.util.stream.Stream<java.lang.Character> charStream19 = charSet3.stream();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        int int22 = charSet21.size();
        java.lang.Object[] objArray23 = charSet21.toArray();
        boolean boolean24 = charSet3.removeAll((java.util.Collection<java.lang.Character>) charSet21);
        java.lang.Character[] charArray27 = new java.lang.Character[] { 'x', 'x' };
        java.util.ArrayList<java.lang.Character> charList28 = new java.util.ArrayList<java.lang.Character>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charList28, charArray27);
        java.util.stream.Stream<java.lang.Character> charStream30 = charList28.stream();
        boolean boolean31 = charSet21.removeAll((java.util.Collection<java.lang.Character>) charList28);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        int int34 = charSet33.size();
        java.lang.Object[] objArray35 = charSet33.toArray();
        boolean boolean36 = charSet21.removeAll((java.util.Collection<java.lang.Character>) charSet33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks(0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DurationField durationField43 = chronology41.minutes();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str48 = dateTimeZone46.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology41, dateTimeZone46);
        boolean boolean51 = zonedChronology49.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology49);
        org.joda.time.DurationField durationField55 = zonedChronology49.weeks();
        boolean boolean56 = charSet33.remove((java.lang.Object) zonedChronology49);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology49.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone58 = zonedChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology49.hourOfHalfday();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanisch" + "'", str1, "Japanisch");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charStream19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(charStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:00" + "'", str48, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test13447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13447");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.dayOfWeek();
        org.joda.time.DurationField durationField24 = zonedChronology13.centuries();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology13.add(readablePeriod25, 1645427276162L, 12);
        org.joda.time.DurationField durationField29 = zonedChronology13.centuries();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology13.weekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645427276162L + "'", long28 == 1645427276162L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test13448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13448");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DurationField durationField21 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField22 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfHour();
        int int25 = dateTimeField23.getMinimumValue(9223371971788259169L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test13449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13449");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale4.getDisplayCountry(locale8);
        java.lang.String str12 = locale0.getDisplayVariant(locale8);
        java.util.Set<java.lang.Character> charSet13 = locale8.getExtensionKeys();
        java.lang.Object obj14 = null;
        boolean boolean15 = charSet13.remove(obj14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str27 = dateTimeZone25.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone25);
        org.joda.time.DurationField durationField29 = zonedChronology28.weeks();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology28.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = zonedChronology28.add(readablePeriod32, 0L, 2);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.weekyearOfCentury();
        java.lang.String str37 = zonedChronology28.toString();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.days();
        org.joda.time.DurationField durationField45 = chronology43.minutes();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str50 = dateTimeZone48.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology51 = org.joda.time.chrono.ZonedChronology.getInstance(chronology43, dateTimeZone48);
        java.lang.String str52 = dateTimeZone48.getID();
        long long54 = dateTimeZone48.nextTransition((long) 1970);
        org.joda.time.Chronology chronology55 = zonedChronology28.withZone(dateTimeZone48);
        long long57 = dateTimeZone48.previousTransition((long) 61685839);
        boolean boolean58 = charSet13.remove((java.lang.Object) dateTimeZone48);
        java.lang.Object[] objArray59 = charSet13.toArray();
        java.util.stream.Stream<java.lang.Character> charStream60 = charSet13.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str37, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1970L + "'", long54 == 1970L);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 61685839L + "'", long57 == 61685839L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(charStream60);
    }

    @Test
    public void test13450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13450");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DurationField durationField14 = zonedChronology12.hours();
        org.joda.time.DurationField durationField15 = zonedChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.era();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DurationField durationField26 = chronology24.minutes();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str31 = dateTimeZone29.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone29);
        boolean boolean34 = zonedChronology32.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.year();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.withDate(292278993, (int) (byte) 1, (int) (byte) 1);
        int int41 = localDateTime40.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minus(readablePeriod42);
        int int44 = localDateTime43.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withMillisOfDay((int) (short) 0);
        int[] intArray48 = zonedChronology12.get((org.joda.time.ReadablePartial) localDateTime46, 1668278253807L);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 93 + "'", int44 == 93);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[2022, 11, 13, 16653807]");
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test13451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13451");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime13.yearOfCentury();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DurationField durationField37 = zonedChronology36.weeks();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology36.year();
        org.joda.time.DurationField durationField39 = zonedChronology36.months();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        java.lang.String str45 = dateTimeZone42.getID();
        long long48 = dateTimeZone42.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        int int51 = dateTimeZone42.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology36, dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology36.centuryOfEra();
        boolean boolean54 = property22.equals((java.lang.Object) zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japanisch" + "'", str17, "Japanisch");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-35999999L) + "'", long48 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000000 + "'", int51 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test13452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13452");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType23.getField(chronology30);
        java.lang.String str32 = dateTimeField31.getName();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getISO3Country();
        java.lang.String str42 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 2, locale39);
        int int44 = dateTimeField31.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = dateTimeFieldType45.isSupported(chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks(0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType45.getField(chronology52);
        java.lang.String str54 = dateTimeField53.getName();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusWeeks(0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.lang.String str63 = locale61.getISO3Country();
        java.lang.String str64 = dateTimeField53.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, 2, locale61);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plus(readableDuration67);
        int[] intArray73 = new int[] { 0, 292278993, 10, 'a' };
        int int74 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68, intArray73);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone77);
        int int79 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime76.toDateTime(readableInstant80);
        boolean boolean83 = dateTime81.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime84 = localDateTime68.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        long long86 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime68, 10L);
        org.joda.time.DateTimeField dateTimeField87 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField88 = zonedChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField89 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField90 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField91 = zonedChronology12.era();
        org.joda.time.DurationField durationField92 = zonedChronology12.hours();
        long long95 = durationField92.subtract(1645513862623L, 928);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japanisch" + "'", str40, "Japanisch");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 999 + "'", int44 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "millisOfSecond" + "'", str54, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Japanisch" + "'", str62, "Japanisch");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2" + "'", str64, "2");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645427848608L + "'", long86 == 1645427848608L);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1642173062623L + "'", long95 == 1642173062623L);
    }

    @Test
    public void test13453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13453");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        org.joda.time.LocalDateTime.Property property21 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(848);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test13454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13454");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusYears(583);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str19 = dateTimeZone17.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology26 = zonedChronology20.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology20.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = dateTimeField28.getLeapDurationField();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        int int34 = dateTimeField28.getMaximumShortTextLength(locale33);
        java.lang.String str35 = locale33.getISO3Country();
        java.lang.String str36 = property7.getAsShortText(locale33);
        org.joda.time.LocalDateTime localDateTime38 = property7.setCopy(61927036);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1439" + "'", str36, "1439");
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test13455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13455");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DurationField durationField14 = zonedChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField((org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DurationField durationField16 = zonedChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test13456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13456");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        boolean boolean14 = zonedChronology12.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withHourOfDay((int) (short) 10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime19.getFields();
        java.lang.String str22 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMillis(755);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T10:17:28.732" + "'", str22, "2022-02-22T10:17:28.732");
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test13457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13457");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        org.joda.time.LocalDateTime.Property property21 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusDays(100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear(893);
        int int32 = localDateTime29.getMinuteOfHour();
        boolean boolean33 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks(0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DurationField durationField40 = chronology38.minutes();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str45 = dateTimeZone43.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone43);
        org.joda.time.DurationField durationField47 = zonedChronology46.weeks();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology46.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone49 = zonedChronology46.getZone();
        org.joda.time.DateTimeZone dateTimeZone50 = zonedChronology46.getZone();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(dateTimeZone53);
        int int55 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime52.toDateTime(readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone60);
        int int62 = localDateTime59.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime59.isEqual((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusWeeks(0);
        int int69 = localDateTime63.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime52.withFields((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime.Property property71 = localDateTime63.year();
        org.joda.time.LocalDateTime.Property property72 = localDateTime63.dayOfWeek();
        org.joda.time.LocalDateTime.Property property73 = localDateTime63.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusWeeks(0);
        int int78 = localDateTime77.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.minusDays(100);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withWeekyear(893);
        int int83 = localDateTime80.getMinuteOfHour();
        boolean boolean84 = localDateTime63.isAfter((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.LocalDateTime.Property property85 = localDateTime63.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime86 = property85.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.withMillisOfSecond(480);
        org.joda.time.LocalDateTime.Property property89 = localDateTime86.weekyear();
        boolean boolean90 = dateTimeZone50.equals((java.lang.Object) property89);
        boolean boolean91 = localDateTime12.equals((java.lang.Object) dateTimeZone50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray92 = localDateTime12.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 17 + "'", int32 == 17);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 22 + "'", int78 == 22);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 17 + "'", int83 == 17);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray92);
    }

    @Test
    public void test13458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13458");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusWeeks(0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.days();
        org.joda.time.DurationField durationField7 = chronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str12 = dateTimeZone10.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology19 = zonedChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology13.dayOfMonth();
        org.joda.time.DurationField durationField21 = zonedChronology13.seconds();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology13);
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology13.monthOfYear();
        org.joda.time.DurationField durationField26 = zonedChronology13.weekyears();
        org.joda.time.DurationField durationField27 = zonedChronology13.weekyears();
        java.lang.String str28 = durationField27.getName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyears" + "'", str28, "weekyears");
    }

    @Test
    public void test13459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13459");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.stream.Stream<java.lang.Character> charStream6 = charSet1.parallelStream();
        java.util.Spliterator<java.lang.Character> charSpliterator7 = charSet1.spliterator();
        int int8 = charSet1.size();
        java.util.Spliterator<java.lang.Character> charSpliterator9 = charSet1.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charStream6);
        org.junit.Assert.assertNotNull(charSpliterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(charSpliterator9);
    }

    @Test
    public void test13460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13460");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        int int10 = property9.getMinimumValue();
        boolean boolean11 = dateTime6.equals((java.lang.Object) int10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = dateTimeFieldType13.isSupported(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType13.getField(chronology20);
        org.joda.time.DurationField durationField22 = durationFieldType12.getField(chronology20);
        boolean boolean23 = dateTime6.equals((java.lang.Object) chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.days();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str36 = dateTimeZone34.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology37.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology43 = zonedChronology37.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology37.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        long long48 = zonedChronology37.add(readablePeriod45, (long) 53, (int) (byte) 0);
        long long52 = zonedChronology37.add(1645427275536L, 0L, 8);
        org.joda.time.Chronology chronology53 = zonedChronology37.withUTC();
        org.joda.time.DateTimeZone dateTimeZone54 = zonedChronology37.getZone();
        org.joda.time.chrono.ZonedChronology zonedChronology55 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology20.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 53L + "'", long48 == 53L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645427275536L + "'", long52 == 1645427275536L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(zonedChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test13461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13461");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("eras");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.setScript("");
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.lang.String str8 = locale6.getISO3Country();
        java.lang.String str10 = locale6.getExtension('a');
        java.lang.String str11 = locale6.getDisplayLanguage();
        java.util.Locale.setDefault(locale6);
        java.util.Locale.Builder builder13 = builder2.setLocale(locale6);
        java.util.Locale.Builder builder15 = builder2.setLanguageTag("fra");
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("355");
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder18.setUnicodeLocaleKeyword("292278993-02-22T17:13:11.410", "1466-06-06T04:39:07.918");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 292278993-02-22T17:13:11.410 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Japanisch" + "'", str7, "Japanisch");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Japanisch" + "'", str11, "Japanisch");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test13462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13462");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DurationField durationField23 = zonedChronology12.weeks();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology36.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology42 = zonedChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology36.weekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = zonedChronology36.getZone();
        org.joda.time.Chronology chronology47 = zonedChronology12.withZone(dateTimeZone46);
        long long51 = zonedChronology12.add(1645513695572L, (long) 0, 893);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology12.hourOfDay();
        org.joda.time.DurationField durationField54 = dateTimeField53.getRangeDurationField();
        long long56 = durationField54.getValueAsLong(0L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645513695572L + "'", long51 == 1645513695572L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test13463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13463");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str33 = dateTimeZone31.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology26, dateTimeZone31);
        org.joda.time.DurationField durationField35 = zonedChronology34.weeks();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology34.year();
        org.joda.time.DurationField durationField37 = zonedChronology34.months();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str42 = dateTimeZone40.getShortName((long) 10);
        java.lang.String str43 = dateTimeZone40.getID();
        long long46 = dateTimeZone40.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        int int49 = dateTimeZone40.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology50 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology34, dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology34.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone52 = zonedChronology34.getZone();
        long long54 = dateTimeZone52.convertUTCToLocal(9223371990106133424L);
        org.joda.time.Chronology chronology55 = zonedChronology12.withZone(dateTimeZone52);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-35999999L) + "'", long46 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 36000000 + "'", int49 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 9223371990142133424L + "'", long54 == 9223371990142133424L);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test13464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13464");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.lang.Object[] objArray6 = charSet5.toArray();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        boolean boolean9 = charSet5.retainAll((java.util.Collection<java.lang.Character>) charSet8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        int int14 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime11.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.minusWeeks((int) (short) 1);
        boolean boolean19 = charSet5.remove((java.lang.Object) localDateTime18);
        boolean boolean20 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        java.util.Date date21 = localDateTime1.toDate();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime1.withDurationAdded(readableDuration22, 942);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMillis(61820555);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withHourOfDay(999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 17:17:29 GMT+17:09 2022");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test13465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13465");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        long long14 = chronology7.getDateTimeMillis(100L, (int) (byte) 0, (int) (short) 1, 10, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField15 = chronology7.minuteOfDay();
        long long17 = dateTimeField15.roundFloor((long) 19);
        long long20 = dateTimeField15.add(1645427405419L, (long) 14);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        int int25 = localDateTime21.getMillisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime21.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withField(dateTimeFieldType31, (int) 'x');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean37 = localDateTime35.isSupported(dateTimeFieldType36);
        boolean boolean38 = localDateTime21.isSupported(dateTimeFieldType36);
        int int39 = localDateTime21.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.days();
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str51 = dateTimeZone49.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology44, dateTimeZone49);
        org.joda.time.DurationField durationField53 = zonedChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology52.year();
        org.joda.time.DurationField durationField55 = zonedChronology52.months();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str60 = dateTimeZone58.getShortName((long) 10);
        java.lang.String str61 = dateTimeZone58.getID();
        long long64 = dateTimeZone58.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        int int67 = dateTimeZone58.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology68 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology52, dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology52.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone70 = zonedChronology52.getZone();
        org.joda.time.DateTimeField dateTimeField71 = zonedChronology52.secondOfDay();
        org.joda.time.DurationField durationField72 = zonedChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField73 = zonedChronology52.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusWeeks(0);
        int int78 = localDateTime77.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = localDateTime77.getFieldTypes();
        int[] intArray81 = zonedChronology52.get((org.joda.time.ReadablePartial) localDateTime77, (long) 20);
        int[] intArray82 = localDateTime77.getValues();
        int int83 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime21, intArray82);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 70001L + "'", long14 == 70001L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645428245419L + "'", long20 == 1645428245419L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 62249014 + "'", int25 == 62249014);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:00" + "'", str60, "+10:00");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:00" + "'", str61, "+10:00");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-35999999L) + "'", long64 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 22 + "'", int78 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1970, 1, 1, 36000020]");
        org.junit.Assert.assertNotNull(intArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[2022, 2, 22, 62249014]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test13466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13466");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int25 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime22.toDateTime(readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        int int31 = property30.getMinimumValue();
        boolean boolean32 = dateTime27.equals((java.lang.Object) int31);
        long long33 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime27.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str17, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test13467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13467");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks(0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str9 = dateTimeField8.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime13, 2, locale16);
        int int21 = dateTimeField8.getMaximumValue(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType22.getField(chronology29);
        java.lang.String str31 = dateTimeField30.getName();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 2, locale38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.minusDays((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        int[] intArray50 = new int[] { 0, 292278993, 10, 'a' };
        int int51 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone54);
        int int56 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime53.toDateTime(readableInstant57);
        boolean boolean60 = dateTime58.equals((java.lang.Object) 'a');
        org.joda.time.DateTime dateTime61 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        int int62 = localDateTime45.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime45.withYear(3);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withWeekyear(36000000);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = localDateTime64.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.withPeriodAdded(readablePeriod68, 885);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusWeeks(663);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str74 = dateTimeFieldType73.getName();
        java.lang.String str75 = dateTimeFieldType73.getName();
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType73.getDurationType();
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType73.getDurationType();
        boolean boolean78 = localDateTime70.isSupported(durationFieldType77);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfSecond" + "'", str9, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str17, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 999 + "'", int21 == 999);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str39, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 292278993, 10, 97]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 17 + "'", int62 == 17);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "dayOfMonth" + "'", str74, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "dayOfMonth" + "'", str75, "dayOfMonth");
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test13468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13468");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1946718200433888000L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(538);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusYears(61758738);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test13469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13469");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = zonedChronology12.getZone();
        org.joda.time.DurationField durationField16 = zonedChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.year();
        org.joda.time.DurationField durationField20 = zonedChronology12.years();
        long long23 = durationField20.add(17861558400517L, 127);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 21869308800517L + "'", long23 == 21869308800517L);
    }

    @Test
    public void test13470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13470");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.getName();
        java.lang.String str3 = durationFieldType1.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "millis" + "'", str2, "millis");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "millis" + "'", str3, "millis");
    }

    @Test
    public void test13471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13471");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        java.lang.String str13 = dateTimeZone9.getID();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        int int18 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime15.toDateTime(readableInstant19);
        boolean boolean22 = dateTime20.equals((java.lang.Object) 'a');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        int int27 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime24.toDateTime(readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfEra();
        int int33 = property32.getMinimumValue();
        boolean boolean34 = dateTime29.equals((java.lang.Object) int33);
        org.joda.time.Chronology chronology35 = dateTime29.getChronology();
        int int36 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime29);
        int int37 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime29);
        java.lang.String str38 = dateTimeZone9.toString();
        long long40 = dateTimeZone9.previousTransition((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField43 = localDateTime41.getField(0);
        int int45 = dateTimeField43.get(4555040727L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
    }

    @Test
    public void test13472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13472");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        boolean boolean9 = locale6.hasExtensions();
        boolean boolean10 = charSet4.remove((java.lang.Object) boolean9);
        boolean boolean11 = charSet4.isEmpty();
        java.util.Iterator<java.lang.Character> charItor12 = charSet4.iterator();
        charSet4.clear();
        java.lang.Object[] objArray14 = charSet4.toArray();
        java.util.Collection<java.lang.Character> charCollection15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = charSet4.addAll(charCollection15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(charItor12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
    }

    @Test
    public void test13473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13473");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(4);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime6, dateTimeZone9);
        java.util.Date date11 = localDateTime10.toDate();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromDateFields(date11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = dateTimeFieldType13.isSupported(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType13.getField(chronology20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str26 = dateTimeZone24.getShortName((long) 10);
        java.lang.String str27 = dateTimeZone24.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone24);
        java.lang.String str31 = dateTimeZone24.getShortName(4518470650L);
        java.util.TimeZone timeZone32 = dateTimeZone24.toTimeZone();
        boolean boolean33 = timeZone32.observesDaylightTime();
        timeZone32.setRawOffset(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        boolean boolean38 = dateTimeFieldType36.isSupported(chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType36.getField(chronology43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str49 = dateTimeZone47.getShortName((long) 10);
        java.lang.String str50 = dateTimeZone47.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology43, dateTimeZone47);
        java.lang.String str54 = dateTimeZone47.getShortName(4518470650L);
        java.util.TimeZone timeZone55 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        int int58 = timeZone55.getOffset((long) 53);
        boolean boolean59 = timeZone32.hasSameRules(timeZone55);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        java.util.Locale locale65 = new java.util.Locale("30667", "1970-01-01T09:59:59.999", "IT");
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        java.lang.String str67 = dateTimeZone60.getName((long) 260, locale65);
        org.joda.time.DateTime dateTime68 = localDateTime12.toDateTime(dateTimeZone60);
        org.joda.time.Chronology chronology69 = localDateTime12.getChronology();
        int int70 = localDateTime12.getEra();
        org.joda.time.LocalDateTime.Property property71 = localDateTime12.era();
        java.lang.String str72 = property71.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Feb 22 17:17:29 GMT+17:09 2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+10:00" + "'", str49, "+10:00");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+10:00" + "'", str50, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:00" + "'", str54, "+10:00");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 36000000 + "'", int58 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals(locale65.toString(), "30667_1970-01-01T09:59:59.999_IT");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+10:00" + "'", str67, "+10:00");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u897f\u66a6" + "'", str72, "\u897f\u66a6");
    }

    @Test
    public void test13474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13474");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = zonedChronology12.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = zonedChronology12.add(readablePeriod16, 0L, 2);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.weekyearOfCentury();
        java.lang.String str21 = zonedChronology12.toString();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) zonedChronology12);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks(0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str40 = dateTimeZone38.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology41.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology47 = zonedChronology41.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology41.weekOfWeekyear();
        org.joda.time.DurationField durationField50 = dateTimeField49.getLeapDurationField();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale51.getDisplayCountry(locale52);
        java.util.Locale locale54 = locale51.stripExtensions();
        int int55 = dateTimeField49.getMaximumShortTextLength(locale54);
        java.lang.String str56 = dateTimeZone25.getName(4554472850L, locale54);
        java.lang.String str57 = dateTimeZone25.toString();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 9, dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withWeekyear(401);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = property61.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = property61.roundHalfCeilingCopy();
        boolean boolean64 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str21, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNull(durationField50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.100" + "'", str56, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.100" + "'", str57, "+00:00:00.100");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test13475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13475");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.lang.String str7 = locale0.getDisplayCountry(locale4);
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale4.getDisplayScript(locale8);
        java.lang.String str10 = locale4.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = locale4.getUnicodeLocaleType("2022-02-22T17:10:08.272");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T17:10:08.272");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str10, "\u30c9\u30a4\u30c4\u8a9e");
    }

    @Test
    public void test13476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13476");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.year();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test13477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13477");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        boolean boolean9 = dateTimeFieldType7.isSupported(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType7.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.withField(dateTimeFieldType7, (int) 'x');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        int int22 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime19.isEqual((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(0);
        int int29 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        int int30 = localDateTime26.getEra();
        int int31 = localDateTime26.getWeekyear();
        boolean boolean32 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str44 = dateTimeZone42.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone42);
        boolean boolean47 = zonedChronology45.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) zonedChronology45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.year();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusHours((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.dayOfWeek();
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet56 = locale53.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor57 = charSet56.iterator();
        boolean boolean58 = localDateTime51.equals((java.lang.Object) charSet56);
        int int59 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime51.withYear(819);
        int int62 = localDateTime61.getEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:00" + "'", str44, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str54, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(charItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test13478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13478");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test13479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13479");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = localDateTime0.getChronology();
        int int4 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekOfWeekyear();
        org.joda.time.Chronology chronology10 = localDateTime7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType11.isSupported(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType11.getField(chronology18);
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType11.getRangeDurationType();
        int int21 = localDateTime7.get(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withSecondOfMinute(20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusYears(61678279);
        int int26 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        int int27 = localDateTime23.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DurationField durationField34 = chronology32.minutes();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str39 = dateTimeZone37.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology32, dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology40.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean45 = dateTimeZone43.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology46 = zonedChronology40.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology40.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology40.weekyear();
        org.joda.time.DurationField durationField50 = zonedChronology40.millis();
        org.joda.time.DateTimeZone dateTimeZone51 = zonedChronology40.getZone();
        org.joda.time.DateTime dateTime52 = localDateTime23.toDateTime(dateTimeZone51);
        long long54 = dateTimeZone51.previousTransition(1365121220L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 62249447 + "'", int4 == 62249447);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 447 + "'", int21 == 447);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62240447 + "'", int27 == 62240447);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1365121220L + "'", long54 == 1365121220L);
    }

    @Test
    public void test13480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13480");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder2.addUnicodeLocaleAttribute("811");
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType6.getField(chronology13);
        org.joda.time.DurationField durationField15 = durationFieldType5.getField(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        int int22 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.monthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks(0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DurationField durationField34 = chronology32.minutes();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str39 = dateTimeZone37.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology32, dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology40.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean45 = dateTimeZone43.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology46 = zonedChronology40.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology40.dayOfMonth();
        org.joda.time.DurationField durationField48 = zonedChronology40.seconds();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(4518471600L, (org.joda.time.Chronology) zonedChronology40);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology40.secondOfDay();
        long long52 = dateTimeField50.remainder((-295200000L));
        org.joda.time.ReadablePartial readablePartial53 = null;
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.lang.String str57 = dateTimeField50.getAsText(readablePartial53, (int) (short) -1, locale55);
        java.lang.String str58 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, 433, locale55);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology60 = null;
        boolean boolean61 = dateTimeFieldType59.isSupported(chronology60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusWeeks(0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType59.getField(chronology66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str72 = dateTimeZone70.getShortName((long) 10);
        java.lang.String str73 = dateTimeZone70.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.chrono.ZonedChronology zonedChronology75 = org.joda.time.chrono.ZonedChronology.getInstance(chronology66, dateTimeZone70);
        java.lang.String str77 = dateTimeZone70.getShortName(4518470650L);
        boolean boolean79 = dateTimeZone70.isStandardOffset((-36000000L));
        java.util.Locale locale81 = java.util.Locale.US;
        java.lang.String str82 = dateTimeZone70.getName((long) 23, locale81);
        java.lang.String str83 = locale55.getDisplayName(locale81);
        java.util.Locale.Builder builder84 = builder2.setLocale(locale55);
        java.util.Locale.Builder builder85 = builder84.clearExtensions();
        java.util.Locale.Builder builder86 = builder85.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder89 = builder85.setUnicodeLocaleKeyword("2022-02-22T17:17:11.334+10:00", "294");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T17:17:11.334+10:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1" + "'", str57, "-1");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "433" + "'", str58, "433");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+10:00" + "'", str72, "+10:00");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+10:00" + "'", str73, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:00" + "'", str77, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+10:00" + "'", str82, "+10:00");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Chinese (Taiwan)" + "'", str83, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test13481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13481");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int24 = localDateTime23.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        boolean boolean26 = localDateTime23.isSupported(durationFieldType25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.yearOfEra();
        int[] intArray29 = new int[] { 'a' };
        int int30 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDateTime23, intArray29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime23.minusDays(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.centuryOfEra();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withMillisOfSecond(61968309);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61968309 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-292275054) + "'", int30 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test13482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13482");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks(0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str34 = dateTimeZone32.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance(chronology27, dateTimeZone32);
        boolean boolean37 = zonedChronology35.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology35.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks(0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.days();
        org.joda.time.DurationField durationField47 = chronology45.minutes();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str52 = dateTimeZone50.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology53 = org.joda.time.chrono.ZonedChronology.getInstance(chronology45, dateTimeZone50);
        org.joda.time.DurationField durationField54 = zonedChronology53.weeks();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology53.year();
        org.joda.time.DateTimeZone dateTimeZone56 = zonedChronology53.getZone();
        long long60 = dateTimeZone56.convertLocalToUTC(194160332853760L, true, (long) 360000000);
        org.joda.time.Chronology chronology61 = zonedChronology35.withZone(dateTimeZone56);
        org.joda.time.Chronology chronology62 = zonedChronology12.withZone(dateTimeZone56);
        long long64 = dateTimeZone56.previousTransition(1645513745062L);
        java.lang.String str65 = dateTimeZone56.getID();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+10:00" + "'", str52, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 194160296853760L + "'", long60 == 194160296853760L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645513745062L + "'", long64 == 1645513745062L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+10:00" + "'", str65, "+10:00");
    }

    @Test
    public void test13483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13483");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DurationField durationField22 = zonedChronology12.years();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (short) 0);
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) 61673414);
        org.joda.time.Chronology chronology28 = zonedChronology12.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField29.getType();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks(0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.days();
        org.joda.time.DurationField durationField38 = chronology36.minutes();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str43 = dateTimeZone41.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology36, dateTimeZone41);
        org.joda.time.DurationField durationField45 = zonedChronology44.weeks();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology44.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = zonedChronology44.add(readablePeriod48, 0L, 2);
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology44.weekyearOfCentury();
        org.joda.time.DurationField durationField53 = zonedChronology44.hours();
        org.joda.time.DurationField durationField54 = zonedChronology44.centuries();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology44.weekyearOfCentury();
        org.joda.time.DurationField durationField56 = zonedChronology44.weeks();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType30.getField((org.joda.time.Chronology) zonedChronology44);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test13484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13484");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.secondOfMinute();
        org.joda.time.DurationField durationField15 = zonedChronology12.years();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology12.year();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology12.getZone();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        int int23 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime20.isEqual((org.joda.time.ReadablePartial) localDateTime24);
        int int26 = localDateTime20.getDayOfYear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.plusDays((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays(0);
        boolean boolean32 = dateTimeZone17.isLocalDateTimeGap(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test13485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13485");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int24 = localDateTime23.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        boolean boolean26 = localDateTime23.isSupported(durationFieldType25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.yearOfEra();
        int[] intArray29 = new int[] { 'a' };
        int int30 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDateTime23, intArray29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime23.minusDays(0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime23.withMinuteOfHour(9);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfSecond(20);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withSecondOfMinute((int) (short) 0);
        int int39 = localDateTime34.getEra();
        org.joda.time.LocalDateTime.Property property40 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[97]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-292275054) + "'", int30 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test13486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13486");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        int int21 = localDateTime12.size();
        org.joda.time.LocalDateTime.Property property22 = localDateTime12.era();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = localDateTime12.isAfter(readablePartial23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test13487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13487");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        int int28 = dateTimeZone26.getOffsetFromLocal(4518471413L);
        boolean boolean30 = dateTimeZone26.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology31 = zonedChronology12.withZone(dateTimeZone26);
        long long33 = dateTimeZone26.previousTransition((long) 659);
        long long35 = dateTimeZone26.convertUTCToLocal(1645427359932L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 659L + "'", long33 == 659L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645427360032L + "'", long35 == 1645427360032L);
    }

    @Test
    public void test13488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13488");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = zonedChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology12.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.era();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusHours((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property33.addToCopy((long) (short) 0);
        boolean boolean36 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime35);
        int int37 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.days();
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str51 = dateTimeZone49.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology44, dateTimeZone49);
        boolean boolean54 = zonedChronology52.equals((java.lang.Object) "292278993-02-22T07:07:50.878");
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology52.hourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology52.dayOfYear();
        java.util.Locale locale58 = java.util.Locale.PRC;
        java.lang.String str59 = dateTimeField56.getAsText(7, locale58);
        java.lang.String str62 = nameProvider39.getName(locale58, "f\351vr.", "1027");
        java.lang.String str63 = locale58.getCountry();
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category64, locale65);
        java.lang.String str67 = locale65.toLanguageTag();
        java.util.Locale.Category category68 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category68, locale69);
        java.lang.String str71 = locale69.toLanguageTag();
        java.lang.String str72 = locale65.getDisplayLanguage(locale69);
        java.lang.String str73 = locale69.getDisplayLanguage();
        java.lang.String str74 = locale58.getDisplayLanguage(locale69);
        java.util.Locale locale75 = java.util.Locale.JAPANESE;
        java.lang.String str76 = locale75.getDisplayLanguage();
        java.lang.String str77 = locale75.getISO3Country();
        java.lang.String str78 = locale58.getDisplayScript(locale75);
        java.lang.String str79 = dateTimeField25.getAsShortText(1876201901L, locale75);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+10:00" + "'", str51, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "7" + "'", str59, "7");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "CN" + "'", str63, "CN");
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.FORMAT + "'", category64.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "en-CA" + "'", str67, "en-CA");
        org.junit.Assert.assertTrue("'" + category68 + "' != '" + java.util.Locale.Category.FORMAT + "'", category68.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "en-CA" + "'", str71, "en-CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "English" + "'", str72, "English");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u82f1\u8a9e" + "'", str73, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Chinese" + "'", str74, "Chinese");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str76, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
    }

    @Test
    public void test13489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13489");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        long long27 = zonedChronology12.add(1645427275536L, 0L, 8);
        org.joda.time.DurationField durationField28 = zonedChronology12.hours();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        org.joda.time.Chronology chronology31 = zonedChronology12.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology12.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645427275536L + "'", long27 == 1645427275536L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test13490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13490");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-22T17:10:02.885+10:00", (double) (-35999947L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-3.5999947E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13491");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object[] objArray2 = charSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone8);
        int int10 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime7.toDateTime(readableInstant11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusWeeks((int) (short) 1);
        boolean boolean15 = charSet1.remove((java.lang.Object) localDateTime14);
        int int16 = localDateTime14.getDayOfYear();
        int int17 = localDateTime14.getYear();
        int int18 = localDateTime14.getEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusDays(922);
        int int21 = localDateTime20.getDayOfWeek();
        int int22 = localDateTime20.getYearOfCentury();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 46 + "'", int16 == 46);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
    }

    @Test
    public void test13492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13492");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("61689044");
        int int2 = localDateTime1.getYear();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 61689044 + "'", int2 == 61689044);
    }

    @Test
    public void test13493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13493");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DurationField durationField13 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology12.year();
        org.joda.time.DurationField durationField15 = zonedChronology12.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str20 = dateTimeZone18.getShortName((long) 10);
        java.lang.String str21 = dateTimeZone18.getID();
        long long24 = dateTimeZone18.convertLocalToUTC((long) (short) 1, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        int int27 = dateTimeZone18.getStandardOffset(1L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology12, dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology12.dayOfMonth();
        org.joda.time.DurationField durationField33 = zonedChronology12.weeks();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology12.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:00" + "'", str21, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999999L) + "'", long24 == (-35999999L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test13494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13494");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusWeeks((int) (short) 1);
        int int9 = localDateTime1.getYearOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor14 = charSet13.iterator();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.Object[] objArray17 = charSet16.toArray();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        boolean boolean20 = charSet16.retainAll((java.util.Collection<java.lang.Character>) charSet19);
        boolean boolean21 = charSet13.containsAll((java.util.Collection<java.lang.Character>) charSet16);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean23 = charSet13.equals((java.lang.Object) dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int26 = localDateTime25.getEra();
        boolean boolean27 = charSet13.remove((java.lang.Object) localDateTime25);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plus(readableDuration28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(charItor14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test13495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13495");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = zonedChronology12.add(readablePeriod20, (long) 53, (int) (byte) 0);
        org.joda.time.DurationField durationField24 = zonedChronology12.weeks();
        org.joda.time.DurationField durationField25 = zonedChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology12.era();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology12.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        boolean boolean32 = dateTimeFieldType30.isSupported(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks(0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType30.getField(chronology37);
        java.lang.String str39 = dateTimeField38.getName();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusWeeks(0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getDisplayLanguage();
        java.lang.String str48 = locale46.getISO3Country();
        java.lang.String str49 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) localDateTime43, 2, locale46);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime43.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withMinuteOfHour((int) '#');
        org.joda.time.Chronology chronology54 = localDateTime51.getChronology();
        long long56 = zonedChronology12.set((org.joda.time.ReadablePartial) localDateTime51, 0L);
        org.joda.time.DurationField durationField57 = zonedChronology12.halfdays();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53L + "'", long23 == 53L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "millisOfSecond" + "'", str39, "millisOfSecond");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str47, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2" + "'", str49, "2");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645427849922L + "'", long56 == 1645427849922L);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test13496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13496");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str11 = dateTimeZone9.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) (short) 10);
        org.joda.time.Chronology chronology18 = zonedChronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks(0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str35 = dateTimeZone33.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField37 = chronology28.weekyearOfCentury();
        boolean boolean38 = localDateTime23.equals((java.lang.Object) dateTimeField37);
        boolean boolean39 = dateTimeField37.isSupported();
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.lang.String str42 = dateTimeField37.getAsShortText((long) (byte) 10, locale41);
        java.lang.String str43 = dateTimeField20.getAsShortText(61690923, locale41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = dateTimeField20.getType();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.days();
        org.joda.time.DurationField durationField51 = chronology49.minutes();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) (byte) 0);
        java.lang.String str56 = dateTimeZone54.getShortName((long) 10);
        org.joda.time.chrono.ZonedChronology zonedChronology57 = org.joda.time.chrono.ZonedChronology.getInstance(chronology49, dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology57.year();
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology57.year();
        java.lang.String str60 = zonedChronology57.toString();
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology57.millisOfDay();
        boolean boolean62 = dateTimeFieldType44.isSupported((org.joda.time.Chronology) zonedChronology57);
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology57.secondOfDay();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology57.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "70" + "'", str42, "70");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "61690923" + "'", str43, "61690923");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertNotNull(zonedChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:00]" + "'", str60, "ZonedChronology[ISOChronology[UTC], +10:00]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test13497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13497");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("seconds");
        timeZone1.setID("");
        // The following exception was thrown during execution in test generation
        try {
            int int10 = timeZone1.getOffset(44, (-4431727), 61704317, 1028, 62, 323);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test13498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13498");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYearOfCentury(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusDays((int) (byte) 100);
        int int8 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(61718894);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay(894);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test13499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13499");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int4 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime1.toDateTime(readableInstant5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        int int11 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        int int18 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withCenturyOfEra((int) ' ');
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.lang.Object[] objArray25 = charSet24.toArray();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        boolean boolean28 = charSet24.retainAll((java.util.Collection<java.lang.Character>) charSet27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        int int33 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime30.toDateTime(readableInstant34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minusWeeks((int) (short) 1);
        boolean boolean38 = charSet24.remove((java.lang.Object) localDateTime37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime37.getFieldTypes();
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.millisOfDay();
        java.lang.String str41 = property40.getAsText();
        java.lang.String str42 = property40.toString();
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks(0);
        int int48 = localDateTime47.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        boolean boolean52 = localDateTime43.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        int int53 = localDateTime50.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusYears(575);
        java.lang.String str56 = localDateTime50.toString();
        org.joda.time.LocalDateTime.Property property57 = localDateTime50.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours(502);
        long long62 = dateTimeZone59.convertLocalToUTC(5000L, false);
        org.joda.time.DateTime dateTime63 = localDateTime50.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime64 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "62250023" + "'", str41, "62250023");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Property[millisOfDay]" + "'", str42, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:17:30.000" + "'", str56, "2022-02-22T17:17:30.000");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1807195000L) + "'", long62 == (-1807195000L));
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test13500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13500");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks(0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.days();
        org.joda.time.DurationField durationField6 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.year();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, 431);
        int int15 = localDateTime11.getEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }
}

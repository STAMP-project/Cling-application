import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest11 {

    public static boolean debug = false;

    @Test
    public void test05501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05501");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        boolean boolean7 = localeList6.isEmpty();
        java.util.Iterator<java.util.Locale> localeItor8 = localeList6.iterator();
        java.lang.Object[] objArray9 = localeList6.toArray();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone12);
        calendar13.setTimeInMillis(31556952000L);
        java.util.Date date21 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromDateFields(date21);
        date21.setTime((-1L));
        java.util.Date date30 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int31 = date30.getSeconds();
        boolean boolean32 = date21.after(date30);
        calendar13.setTime(date30);
        calendar13.clear(8);
        boolean boolean36 = localeList6.equals((java.lang.Object) 8);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        boolean boolean44 = localeList43.isEmpty();
        java.util.stream.Stream<java.util.Locale> localeStream45 = localeList43.stream();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str49 = locale46.getDisplayVariant(locale48);
        boolean boolean50 = localeList43.add(locale48);
        java.lang.String[] strArray59 = new java.lang.String[] { "2022-02-21T00:52:52.000Z", "Korean (South Korea)", "1970", "hi!", "1970", "45", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        java.util.stream.Stream<java.util.Locale> localeStream69 = localeList68.parallelStream();
        boolean boolean70 = strSet60.retainAll((java.util.Collection<java.util.Locale>) localeList68);
        boolean boolean71 = localeList43.addAll((java.util.Collection<java.util.Locale>) localeList68);
        boolean boolean72 = localeList6.retainAll((java.util.Collection<java.util.Locale>) localeList43);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localeItor8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1899,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=69,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=35,SECOND=0,MILLISECOND=16,ZONE_OFFSET=16,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertNotNull(localDate22);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localeStream45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(localeStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test05502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05502");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusMonths(4);
        int int7 = localDateTime2.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMillisOfDay((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime2.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
    }

    @Test
    public void test05503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05503");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        mutableDateTime3.addWeekyears(0);
        mutableDateTime3.addHours(2);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.add((long) 3172001);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) mutableDateTime3);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime3.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.addWrapField(611);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.parse("00");
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 1899, dateTimeZone30);
        boolean boolean34 = dateMidnight26.equals((java.lang.Object) 1899);
        int int35 = dateMidnight26.getDayOfWeek();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant24, (org.joda.time.ReadableInstant) dateMidnight26, periodType36);
        int int38 = periodType36.size();
        org.joda.time.PeriodType periodType39 = periodType36.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period40 = new org.joda.time.Period((java.lang.Object) mutableDateTime23, periodType39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertNotNull(periodType39);
    }

    @Test
    public void test05504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05504");
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1899, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.Interval interval24 = yearMonthDay20.toInterval(dateTimeZone22);
        org.joda.time.Interval interval25 = yearMonthDay20.toInterval();
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        java.lang.String str30 = period29.toString();
        org.joda.time.Period period31 = period27.withFields((org.joda.time.ReadablePeriod) period29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay20.plus((org.joda.time.ReadablePeriod) period27);
        int int33 = yearMonthDay20.size();
        org.joda.time.Interval interval34 = yearMonthDay20.toInterval();
        boolean boolean35 = interval34.containsNow();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period37 = interval34.toPeriod(periodType36);
        org.joda.time.Interval interval38 = interval34.toInterval();
        java.lang.String str39 = interval38.toString();
        org.joda.time.Chronology chronology40 = interval38.getChronology();
        org.joda.time.Period period41 = new org.joda.time.Period((long) ' ', (long) (short) 100, chronology40);
        org.joda.time.Period period42 = new org.joda.time.Period(61725888000000L, (-1080000L), chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((int) (short) 1, 895, 32801, 56732221, 29, 292307824, 1722, chronology40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56732221 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT1M" + "'", str30, "PT1M");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-21T00:00:00.000+00:00:00.016/2022-02-22T00:00:00.000+00:00:00.016" + "'", str39, "2022-02-21T00:00:00.000+00:00:00.016/2022-02-22T00:00:00.000+00:00:00.016");
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test05505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05505");
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period6 = org.joda.time.Period.minutes(1);
        java.lang.String str7 = period6.toString();
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period10 = period4.normalizedStandard(periodType9);
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        int int15 = dateTimeZone13.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 1899, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Interval interval25 = yearMonthDay21.toInterval(dateTimeZone23);
        org.joda.time.Interval interval26 = yearMonthDay21.toInterval();
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        java.lang.String str31 = period30.toString();
        org.joda.time.Period period32 = period28.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay21.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        int int37 = dateTimeZone35.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 1899, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str46 = dateTimeZone45.getID();
        org.joda.time.Interval interval47 = yearMonthDay43.toInterval(dateTimeZone45);
        org.joda.time.MutableInterval mutableInterval48 = interval47.toMutableInterval();
        org.joda.time.Interval interval50 = interval47.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology51.getZone();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay33.withChronologyRetainFields(chronology51);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(chronology51);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField57 = chronology51.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 54, 16L, periodType9, chronology51);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((-1L), chronology51);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.withWeekyear(50);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight61.withDurationAdded((-77246989557630L), 100);
        org.joda.time.Interval interval65 = dateMidnight64.toInterval();
        org.joda.time.DateMidnight.Property property66 = dateMidnight64.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight68 = property66.addToCopy(57);
        java.util.Date date74 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate75 = org.joda.time.LocalDate.fromDateFields(date74);
        org.joda.time.LocalDate.Property property76 = localDate75.weekOfWeekyear();
        org.joda.time.LocalDate localDate78 = property76.setCopy(10);
        org.joda.time.LocalDate localDate80 = localDate78.withWeekyear(1970);
        org.joda.time.LocalDate localDate82 = localDate80.withWeekyear(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int84 = localDate82.get(dateTimeFieldType83);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod();
        mutablePeriod85.setYears(16);
        org.joda.time.LocalDate localDate89 = localDate82.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod85, (int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType91 = mutablePeriod85.getFieldType(7);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight68.withFieldAdded(durationFieldType91, 53848926);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT1M" + "'", str7, "PT1M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.016" + "'", str24, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT1M" + "'", str31, "PT1M");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.016" + "'", str46, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateMidnight68);
// flaky:         org.junit.Assert.assertEquals(date74.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertNotNull(dateMidnight93);
    }

    @Test
    public void test05506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05506");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withField(dateTimeFieldType11, 1899);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        int int15 = property14.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05507");
        org.joda.time.Period period2 = new org.joda.time.Period(31795199984L, (long) 952);
        int int3 = period2.getSeconds();
        int int4 = period2.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-59) + "'", int3 == (-59));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
    }

    @Test
    public void test05508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05508");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1899, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Interval interval15 = yearMonthDay11.toInterval(dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        org.joda.time.Interval interval18 = interval15.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType1, chronology19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 1899, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Interval interval36 = yearMonthDay32.toInterval(dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Interval interval39 = interval36.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(0L, chronology40);
        int int42 = dateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime41);
        int int43 = dateTime21.getMillisOfSecond();
        org.joda.time.DateTime.Property property44 = dateTime21.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod();
        java.lang.String str46 = mutablePeriod45.toString();
        mutablePeriod45.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str51 = dateTimeZone50.getID();
        org.joda.time.DateMidnight dateMidnight52 = org.joda.time.DateMidnight.now(dateTimeZone50);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = dateMidnight52.isBefore(readableInstant53);
        int int55 = dateMidnight52.getYearOfCentury();
        org.joda.time.DateMidnight.Property property56 = dateMidnight52.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight52.minusMonths(7);
        org.joda.time.Duration duration59 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Period period61 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period63 = org.joda.time.Period.minutes(1);
        java.lang.String str64 = period63.toString();
        org.joda.time.Period period65 = period61.withFields((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period68 = period65.withField(durationFieldType66, (int) 'a');
        org.joda.time.Period period70 = period68.withDays((int) (short) -1);
        org.joda.time.Period period72 = period68.minusHours(3172000);
        org.joda.time.Duration duration73 = period72.toStandardDuration();
        boolean boolean74 = duration59.isEqual((org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateTime dateTime76 = dateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration59, 741);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str79 = dateTimeZone78.getID();
        org.joda.time.DateMidnight dateMidnight80 = org.joda.time.DateMidnight.now(dateTimeZone78);
        org.joda.time.ReadableInstant readableInstant81 = null;
        boolean boolean82 = dateMidnight80.isBefore(readableInstant81);
        int int83 = dateMidnight80.getYearOfCentury();
        org.joda.time.DateMidnight.Property property84 = dateMidnight80.dayOfWeek();
        java.lang.String str85 = dateMidnight80.toString();
        boolean boolean86 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight80.minusYears(27409);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 322 + "'", int43 == 322);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0S" + "'", str46, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.016" + "'", str51, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT1M" + "'", str64, "PT1M");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.016" + "'", str79, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 22 + "'", int83 == 22);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-21T00:00:00.000+00:00:00.016" + "'", str85, "2022-02-21T00:00:00.000+00:00:00.016");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateMidnight88);
    }

    @Test
    public void test05509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05509");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(5, (int) (byte) 100, 1970, 52);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = timeOfDay9.getFields();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTimeToday(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime15 = dateTime12.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        int int18 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        org.joda.time.DateTime dateTime22 = dateTime15.withFieldAdded(durationFieldType20, (int) (byte) 1);
        int int23 = dateTime15.getMillisOfDay();
        org.joda.time.Duration duration24 = mutablePeriod4.toDurationTo((org.joda.time.ReadableInstant) dateTime15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime15.withMinuteOfHour(895);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 895 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3172001 + "'", int23 == 3172001);
        org.junit.Assert.assertNotNull(duration24);
    }

    @Test
    public void test05510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05510");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(934, 12, 53930246, (int) (short) 1, 2022, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05511");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        java.lang.String str1 = mutablePeriod0.toString();
        mutablePeriod0.setPeriod(0L);
        mutablePeriod0.setPeriod(100098651744000000L);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod0.copy();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0S" + "'", str1, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test05512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05512");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withMonthOfYear(44784);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44784 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
    }

    @Test
    public void test05513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05513");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 10, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 53);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfYear(45);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfSecond();
        java.lang.String str21 = property20.getAsString();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "556" + "'", str21, "556");
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test05514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05514");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.addWrapFieldToCopy(10);
        java.lang.String str17 = property14.getAsString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withLocale(locale19);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        boolean boolean30 = localeList29.isEmpty();
        java.util.stream.Stream<java.util.Locale> localeStream31 = localeList29.stream();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        boolean boolean36 = localeList29.add(locale34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str39 = dateTimeZone38.getID();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.lang.String str45 = dateTimeZone38.getName((long) 5, locale41);
        java.util.Set<java.lang.Character> charSet46 = locale41.getExtensionKeys();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str50 = locale47.getDisplayVariant(locale49);
        java.util.Date date56 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.fromDateFields(date56);
        org.joda.time.LocalDate.Property property58 = localDate57.weekOfWeekyear();
        org.joda.time.LocalDate localDate60 = property58.setCopy(10);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = property58.getAsText(locale61);
        java.lang.String str65 = locale49.getDisplayName(locale61);
        java.lang.String str66 = locale41.getDisplayName(locale49);
        java.lang.String str67 = locale34.getDisplayScript(locale49);
        java.lang.String str68 = locale21.getDisplayName(locale49);
        int int69 = property14.getMaximumTextLength(locale21);
        org.joda.time.YearMonthDay yearMonthDay71 = property14.addToCopy((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.withMonthOfYear(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "21" + "'", str17, "21");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeStream31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.016" + "'", str39, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.016" + "'", str45, "+00:00:00.016");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "10" + "'", str64, "10");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Korean" + "'", str66, "Korean");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Chinese" + "'", str68, "Chinese");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay71);
    }

    @Test
    public void test05515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05515");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-21T14:56:14.949+00:00:00.016");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:56:14.949+00:00:00.016\" is malformed at \"+00:00:00.016\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05516");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(4);
        int int11 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond(0);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str15 = durationFieldType14.toString();
        java.lang.String str16 = durationFieldType14.getName();
        boolean boolean17 = localDateTime6.isSupported(durationFieldType14);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weeks" + "'", str15, "weeks");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weeks" + "'", str16, "weeks");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test05517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05517");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        int int13 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateTime dateTime17 = dateTime10.withFieldAdded(durationFieldType15, (int) (byte) 1);
        int int18 = dateTime10.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((long) 45);
        boolean boolean25 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateTime dateTime26 = dateMidnight24.toDateTime();
        org.joda.time.DateMidnight.Property property27 = dateMidnight24.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight29 = property27.setCopy(375);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 375 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3172001 + "'", int18 == 3172001);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.016" + "'", str21, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test05518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05518");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        mutablePeriod1.addWeeks((int) (byte) 100);
        org.joda.time.Interval interval4 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod1);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod();
        java.lang.String str6 = mutablePeriod5.toString();
        mutablePeriod5.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 1899, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.Interval interval22 = yearMonthDay18.toInterval(dateTimeZone20);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.Interval interval25 = interval22.withStartMillis((long) 32769);
        org.joda.time.Duration duration26 = interval25.toDuration();
        java.lang.String str27 = duration26.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        int int31 = dateTimeZone29.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 1899, dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        int int35 = dateTimeZone33.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime36 = localDate32.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str40 = dateTimeZone39.getID();
        org.joda.time.Interval interval41 = yearMonthDay37.toInterval(dateTimeZone39);
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.Interval interval44 = interval41.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology45.getZone();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.monthOfYear();
        org.joda.time.Period period49 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period51 = org.joda.time.Period.minutes(1);
        java.lang.String str52 = period51.toString();
        org.joda.time.Period period53 = period49.withFields((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period55 = period53.plusMillis(100);
        org.joda.time.Period period56 = period53.negated();
        org.joda.time.Period period58 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period60 = org.joda.time.Period.minutes(1);
        java.lang.String str61 = period60.toString();
        org.joda.time.Period period62 = period58.withFields((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period64 = period62.plusMillis(100);
        boolean boolean65 = period56.equals((java.lang.Object) period64);
        long long68 = chronology45.add((org.joda.time.ReadablePeriod) period56, 31556952000L, (int) '4');
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration26, chronology45);
        org.joda.time.Interval interval70 = interval4.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration71 = duration26.toDuration();
        java.lang.String str72 = duration71.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.016" + "'", str21, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1645487967.215S" + "'", str27, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.016" + "'", str40, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT1M" + "'", str52, "PT1M");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT1M" + "'", str61, "PT1M");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 31553832000L + "'", long68 == 31553832000L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT1645487967.215S" + "'", str72, "PT1645487967.215S");
    }

    @Test
    public void test05519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05519");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime4 = dateTime1.withYearOfCentury(16);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 1899, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.Interval interval18 = yearMonthDay14.toInterval(dateTimeZone16);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Interval interval21 = interval18.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.DateTime dateTime24 = dateTime1.toDateTime(dateTimeZone23);
        org.joda.time.DateTime.Property property25 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        int int27 = dateTime26.getMillisOfSecond();
        org.joda.time.DateTime dateTime29 = dateTime26.minusWeeks(817);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.016" + "'", str17, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 601 + "'", int27 == 601);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test05520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05520");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime6 = dateTime3.withField(dateTimeFieldType4, 44);
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType4.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 1899, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        int int15 = dateTimeZone13.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str20 = dateTimeZone19.getID();
        org.joda.time.Interval interval21 = yearMonthDay17.toInterval(dateTimeZone19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.Interval interval23 = interval21.toInterval();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType25 = periodType24.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 1899, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        int int33 = dateTimeZone31.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.Interval interval39 = yearMonthDay35.toInterval(dateTimeZone37);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.Interval interval42 = interval39.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.monthOfYear();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.DurationField durationField47 = chronology43.millis();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.dayOfMonth();
        org.joda.time.Period period49 = new org.joda.time.Period((java.lang.Object) interval21, periodType25, chronology43);
        org.joda.time.DateTimeField dateTimeField50 = chronology43.dayOfYear();
        org.joda.time.DurationField durationField51 = durationFieldType7.getField(chronology43);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTimeZone dateTimeZone53 = chronology43.getZone();
        boolean boolean54 = dateTimeZone53.isFixed();
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeZone53.getShortName((long) (byte) 100, locale56);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.016" + "'", str20, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.016" + "'", str38, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.016" + "'", str57, "+00:00:00.016");
    }

    @Test
    public void test05521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05521");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        int int13 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateTime dateTime17 = dateTime10.withFieldAdded(durationFieldType15, (int) (byte) 1);
        int int18 = dateTime10.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plus((long) 45);
        boolean boolean25 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight28 = dateMidnight24.withEra(35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3172001 + "'", int18 == 3172001);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.016" + "'", str21, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test05522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05522");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime6 = dateTime3.withField(dateTimeFieldType4, 44);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = timeOfDay13.getFields();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTimeToday(dateTimeZone15);
        org.joda.time.DateTime.Property property17 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        int int22 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.DateTime dateTime26 = dateTime19.withFieldAdded(durationFieldType24, (int) (byte) 1);
        int int27 = dateTime19.getMillisOfDay();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime19, periodType28);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = timeOfDay40.toDateTimeToday(dateTimeZone41);
        mutableDateTime35.setZoneRetainFields(dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime35, readableDuration44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getRangeDurationType();
        mutableDateTime35.add(durationFieldType47, 14);
        int int50 = periodType30.indexOf(durationFieldType47);
        boolean boolean51 = periodType28.isSupported(durationFieldType47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DurationField durationField53 = durationFieldType47.getField(chronology52);
        int int56 = durationField53.getDifference((long) 366, (long) 53750385);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3172001 + "'", int27 == 3172001);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test05523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05523");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDurationAdded(readableDuration11, (int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 10, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays(10);
        org.joda.time.DateTime dateTime23 = localDateTime20.toDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime20);
        int int25 = localDateTime4.size();
        int int26 = localDateTime4.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test05524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05524");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 17);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay9.plusMonths(11);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths(1900);
        int int18 = yearMonthDay17.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay17.plusYears(87);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test05525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05525");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.LocalTime localTime9 = localTime0.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(0);
        org.joda.time.LocalTime.Property property12 = localTime9.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfMinute();
        java.lang.String str16 = property15.getAsText();
        org.joda.time.DateTime dateTime18 = property15.addToCopy(0L);
        long long19 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeField dateTimeField20 = property12.getField();
        org.joda.time.LocalTime localTime21 = property12.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "56" + "'", str16, "56");
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1645369196740L) + "'", long19 == (-1645369196740L));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test05526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05526");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks((int) (short) 0);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 2, periodType9);
        org.joda.time.LocalDate localDate11 = localDate6.minus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfMonth((int) (byte) 10);
        int int14 = localDate11.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
    }

    @Test
    public void test05527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05527");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        int int11 = yearMonthDay10.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 1899, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.Interval interval26 = yearMonthDay22.toInterval(dateTimeZone24);
        org.joda.time.Interval interval27 = yearMonthDay22.toInterval();
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        java.lang.String str32 = period31.toString();
        org.joda.time.Period period33 = period29.withFields((org.joda.time.ReadablePeriod) period31);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay22.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        int int38 = dateTimeZone36.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 1899, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        int int42 = dateTimeZone40.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime43 = localDate39.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str47 = dateTimeZone46.getID();
        org.joda.time.Interval interval48 = yearMonthDay44.toInterval(dateTimeZone46);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Interval interval51 = interval48.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay34.withChronologyRetainFields(chronology52);
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay34.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        int int60 = dateTimeZone58.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 1899, dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        int int64 = dateTimeZone62.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime65 = localDate61.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight66 = yearMonthDay34.toDateMidnight(dateTimeZone62);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 895, dateTimeZone62);
        org.joda.time.Interval interval68 = yearMonthDay10.toInterval(dateTimeZone62);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(28847544980650L, dateTimeZone62);
        org.joda.time.DateTime.Property property70 = dateTime69.millisOfSecond();
        org.joda.time.ReadableInstant readableInstant71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime69, readableInstant71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.016" + "'", str25, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT1M" + "'", str32, "PT1M");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.016" + "'", str47, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 16 + "'", int60 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 16 + "'", int64 == 16);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test05528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05528");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05529");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2021, (-1645369173459L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05530");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDurationAdded(readableDuration11, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.monthOfYear();
        int int15 = localDateTime4.getMillisOfSecond();
        int int16 = localDateTime4.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26 + "'", int15 == 26);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test05531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05531");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        java.lang.Object obj8 = date5.clone();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "Fri Mar 10 01:35:00 GMT+00:00 1899");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "Fri Mar 10 01:35:00 GMT+00:00 1899");
    }

    @Test
    public void test05532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05532");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        mutableDateTime3.addWeekyears(0);
        mutableDateTime3.addHours(2);
        mutableDateTime3.addYears(50);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.era();
        java.util.Date date25 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekOfWeekyear();
        org.joda.time.LocalDate localDate29 = property27.setCopy("46");
        org.joda.time.DateTimeField dateTimeField30 = property27.getField();
        mutableDateTime3.setRounding(dateTimeField30);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDayOfYear(967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 967 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test05533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05533");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateElementParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(395);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(dateTimePrinter3);
    }

    @Test
    public void test05534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05534");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = dateMidnight3.isBefore(readableInstant4);
        int int6 = dateMidnight3.getYearOfCentury();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.minusMonths(7);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        java.lang.String str11 = mutablePeriod10.toString();
        mutablePeriod10.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 1899, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Interval interval27 = yearMonthDay23.toInterval(dateTimeZone25);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.Interval interval30 = interval27.withStartMillis((long) 32769);
        org.joda.time.Duration duration31 = interval30.toDuration();
        java.lang.String str32 = duration31.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        int int36 = dateTimeZone34.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 1899, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Interval interval46 = yearMonthDay42.toInterval(dateTimeZone44);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Interval interval49 = interval46.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.monthOfYear();
        org.joda.time.Period period54 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period56 = org.joda.time.Period.minutes(1);
        java.lang.String str57 = period56.toString();
        org.joda.time.Period period58 = period54.withFields((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period60 = period58.plusMillis(100);
        org.joda.time.Period period61 = period58.negated();
        org.joda.time.Period period63 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period65 = org.joda.time.Period.minutes(1);
        java.lang.String str66 = period65.toString();
        org.joda.time.Period period67 = period63.withFields((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period69 = period67.plusMillis(100);
        boolean boolean70 = period61.equals((java.lang.Object) period69);
        long long73 = chronology50.add((org.joda.time.ReadablePeriod) period61, 31556952000L, (int) '4');
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration31, chronology50);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period76 = duration31.toPeriod();
        org.joda.time.Period period78 = period76.minusMinutes(35365);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.016" + "'", str26, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT1645487967.215S" + "'", str32, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.016" + "'", str45, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT1M" + "'", str57, "PT1M");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT1M" + "'", str66, "PT1M");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 31553832000L + "'", long73 == 31553832000L);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test05535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05535");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay11 = property10.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay13 = property10.addNoWrapToCopy(15);
        org.joda.time.TimeOfDay timeOfDay14 = property10.getTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = localTime1.withField(dateTimeFieldType15, (-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test05536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05536");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 32769);
        org.joda.time.Duration duration18 = interval17.toDuration();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray26 = new org.joda.time.DurationFieldType[] { durationFieldType25 };
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.forFields(durationFieldTypeArray26);
        org.joda.time.Period period28 = new org.joda.time.Period((long) ' ', periodType27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime22, periodType27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str32 = dateTimeZone31.getID();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(dateTimeZone31);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        int int38 = dateTimeZone36.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 1899, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        int int42 = dateTimeZone40.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime43 = localDate39.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str47 = dateTimeZone46.getID();
        org.joda.time.Interval interval48 = yearMonthDay44.toInterval(dateTimeZone46);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.Interval interval50 = interval34.withChronology(chronology49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(chronology49);
        org.joda.time.DurationField durationField53 = chronology49.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((java.lang.Object) "\u97d3\u6587\u5357\u97d3) (13)", chronology49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"?? (??) (13)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.016" + "'", str21, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(durationFieldTypeArray26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.016" + "'", str32, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.016" + "'", str47, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test05537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05537");
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period7 = period3.withFields((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period9 = period7.plusMillis(100);
        org.joda.time.Period period10 = period7.negated();
        int int12 = period10.getValue(3);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 1899, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.Interval interval29 = yearMonthDay25.toInterval(dateTimeZone27);
        org.joda.time.MutableInterval mutableInterval30 = interval29.toMutableInterval();
        org.joda.time.Interval interval32 = interval29.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.monthOfYear();
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        java.lang.String str40 = period39.toString();
        org.joda.time.Period period41 = period37.withFields((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period43 = period41.plusMillis(100);
        org.joda.time.Period period44 = period41.negated();
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period50 = period46.withFields((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period52 = period50.plusMillis(100);
        boolean boolean53 = period44.equals((java.lang.Object) period52);
        long long56 = chronology33.add((org.joda.time.ReadablePeriod) period44, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField57 = chronology33.dayOfYear();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 2, (long) 4, periodType15, chronology33);
        org.joda.time.Period period59 = period10.withPeriodType(periodType15);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 3, (long) 21, periodType15);
        org.joda.time.PeriodType periodType61 = mutablePeriod60.getPeriodType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT1M" + "'", str6, "PT1M");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.016" + "'", str28, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT1M" + "'", str40, "PT1M");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT1M" + "'", str49, "PT1M");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 31553832000L + "'", long56 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(periodType61);
    }

    @Test
    public void test05538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05538");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(59);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMinuteOfHour(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 10, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay((int) (byte) 1);
        java.lang.String str21 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDateTime20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withTime(458, 68, 0, 32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 458 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0000-W01-4T00:00:00.001" + "'", str21, "0000-W01-4T00:00:00.001");
    }

    @Test
    public void test05539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05539");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        org.joda.time.Period period21 = period18.negated();
        org.joda.time.Period period23 = period21.withMillis(1899);
        org.joda.time.Period period25 = period23.plusMillis(0);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime27 = mutableDateTime3.toDateTime();
        mutableDateTime3.setWeekyear(1970);
        org.joda.time.DateTimeField dateTimeField30 = mutableDateTime3.getRoundingField();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = timeOfDay35.getFields();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTimeToday(dateTimeZone37);
        org.joda.time.DateTime.Property property39 = dateTime38.monthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime38.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str44 = dateTimeZone43.getID();
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(dateTimeZone43);
        boolean boolean46 = dateTime41.equals((java.lang.Object) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.plusMonths(10);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.yearOfEra();
        org.joda.time.DateMidnight.Property property51 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight52 = property51.roundHalfEvenCopy();
        int int53 = mutableDateTime3.compareTo((org.joda.time.ReadableInstant) dateMidnight52);
        mutableDateTime3.add((long) 25);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime3.toMutableDateTime();
        org.joda.time.DateTime dateTime57 = mutableDateTime56.toDateTime();
        org.joda.time.DateTime.Property property58 = dateTime57.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.016" + "'", str44, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test05540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05540");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        java.lang.String str1 = mutablePeriod0.toString();
        mutablePeriod0.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 1899, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.Interval interval17 = yearMonthDay13.toInterval(dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Interval interval20 = interval17.withStartMillis((long) 32769);
        org.joda.time.Duration duration21 = interval20.toDuration();
        java.lang.String str22 = duration21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 1899, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Interval interval36 = yearMonthDay32.toInterval(dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Interval interval39 = interval36.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.monthOfYear();
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        java.lang.String str47 = period46.toString();
        org.joda.time.Period period48 = period44.withFields((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period50 = period48.plusMillis(100);
        org.joda.time.Period period51 = period48.negated();
        org.joda.time.Period period53 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period55 = org.joda.time.Period.minutes(1);
        java.lang.String str56 = period55.toString();
        org.joda.time.Period period57 = period53.withFields((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period59 = period57.plusMillis(100);
        boolean boolean60 = period51.equals((java.lang.Object) period59);
        long long63 = chronology40.add((org.joda.time.ReadablePeriod) period51, 31556952000L, (int) '4');
        mutablePeriod0.setPeriod((org.joda.time.ReadableDuration) duration21, chronology40);
        org.joda.time.DateMidnight dateMidnight65 = org.joda.time.DateMidnight.now(chronology40);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.withYear(2022);
        int int68 = dateMidnight65.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        int int72 = dateTimeZone70.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 1899, dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        int int76 = dateTimeZone74.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime77 = localDate73.toDateTimeAtCurrentTime(dateTimeZone74);
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(dateTimeZone74);
        boolean boolean80 = dateTimeZone74.isStandardOffset((long) 32);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight65, dateTimeZone74);
        org.joda.time.LocalDate localDate83 = localDate81.plusWeeks(56);
        int int84 = localDate83.getDayOfYear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0S" + "'", str1, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1645487967.215S" + "'", str22, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT1M" + "'", str47, "PT1M");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT1M" + "'", str56, "PT1M");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 31553832000L + "'", long63 == 31553832000L);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 16 + "'", int72 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 16 + "'", int76 == 16);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localDate83);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 79 + "'", int84 == 79);
    }

    @Test
    public void test05541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05541");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.lang.String str3 = locale1.getVariant();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test05542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05542");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.lang.Object[] objArray7 = localeList4.toArray();
        java.util.Date date13 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = localDate14.toInterval(dateTimeZone15);
        int int17 = localDate14.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 1899, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str30 = dateTimeZone29.getID();
        org.joda.time.Interval interval31 = yearMonthDay27.toInterval(dateTimeZone29);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Interval interval34 = interval31.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.monthOfYear();
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period41 = org.joda.time.Period.minutes(1);
        java.lang.String str42 = period41.toString();
        org.joda.time.Period period43 = period39.withFields((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period45 = period43.plusMillis(100);
        org.joda.time.Period period46 = period43.negated();
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period50 = org.joda.time.Period.minutes(1);
        java.lang.String str51 = period50.toString();
        org.joda.time.Period period52 = period48.withFields((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period54 = period52.plusMillis(100);
        boolean boolean55 = period46.equals((java.lang.Object) period54);
        long long58 = chronology35.add((org.joda.time.ReadablePeriod) period46, 31556952000L, (int) '4');
        int[] intArray59 = period46.getValues();
        org.joda.time.LocalDate localDate61 = localDate14.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 24);
        boolean boolean62 = localeList4.remove((java.lang.Object) localDate14);
        org.joda.time.LocalDate.Property property63 = localDate14.centuryOfEra();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1M" + "'", str42, "PT1M");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT1M" + "'", str51, "PT1M");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 31553832000L + "'", long58 == 31553832000L);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, -1, 0, 0]");
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test05543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05543");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property1.addCopy((long) 'a');
        org.joda.time.LocalTime localTime4 = property1.withMinimumValue();
        int int5 = localTime4.getMillisOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50457488 + "'", int5 == 50457488);
    }

    @Test
    public void test05544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05544");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        int int13 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateTime dateTime17 = dateTime10.withFieldAdded(durationFieldType15, (int) (byte) 1);
        int int18 = dateTime17.getYear();
        int int19 = dateTime17.getMonthOfYear();
        org.joda.time.DateTime.Property property20 = dateTime17.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = timeOfDay26.toDateTimeToday(dateTimeZone27);
        org.joda.time.TimeOfDay.Property property29 = timeOfDay26.secondOfMinute();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        int int34 = property29.getMaximumTextLength(locale32);
        java.lang.String str35 = dateTime17.toString("\ud1a0\uc694\uc77c", locale32);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = timeOfDay40.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.minus((long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property46 = dateTime42.property(dateTimeFieldType45);
        org.joda.time.DateTime dateTime48 = dateTime42.plusDays(59);
        org.joda.time.DateTime dateTime51 = dateTime48.withDurationAdded(315705601970L, 21);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(6);
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = timeOfDay59.getFields();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = timeOfDay59.toDateTimeToday(dateTimeZone61);
        org.joda.time.DateTime.Property property63 = dateTime62.monthOfYear();
        org.joda.time.DateTime dateTime65 = dateTime62.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.toDateTime(chronology66);
        int int68 = dateTime65.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType69.getDurationType();
        org.joda.time.DateTime dateTime72 = dateTime65.withFieldAdded(durationFieldType70, (int) (byte) 1);
        org.joda.time.DateTime dateTime74 = dateTime72.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime74.getZone();
        long long79 = dateTimeZone75.convertLocalToUTC(31556952000L, false, (-1L));
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((java.lang.Object) "T17:00:01", dateTimeZone75);
        org.joda.time.DateTime dateTime81 = dateTime51.withZone(dateTimeZone75);
        int int82 = dateTime81.getWeekOfWeekyear();
        int int83 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime.Property property84 = dateTime81.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud1a0\uc694\uc77c" + "'", str35, "\ud1a0\uc694\uc77c");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 31556951984L + "'", long79 == 31556951984L);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 21 + "'", int82 == 21);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test05545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05545");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1899, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Interval interval35 = yearMonthDay31.toInterval(dateTimeZone33);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Interval interval38 = interval35.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay21.withChronologyRetainFields(chronology39);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(chronology39);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology39);
        mutableDateTime44.setDate((long) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime44.getZone();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime44.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test05546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05546");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(91515160800000L);
    }

    @Test
    public void test05547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05547");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay7 = property6.withMinimumValue();
        java.lang.String str8 = property6.getName();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.withHourOfDay(3);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfDay();
        org.joda.time.DurationField durationField15 = property14.getDurationField();
        org.joda.time.DateTime dateTime17 = property14.addToCopy((long) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds(12);
        org.joda.time.DateTime dateTime21 = dateTime17.minus(1645455242370L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        int int24 = dateTimeZone22.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = timeOfDay30.toDateTimeToday(dateTimeZone31);
        mutableDateTime25.setZoneRetainFields(dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime25, readableDuration34);
        mutableDateTime25.setMillisOfDay(10);
        mutableDateTime25.setSecondOfDay(1970);
        int int40 = mutableDateTime25.getMinuteOfDay();
        int int41 = mutableDateTime25.getWeekyear();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = timeOfDay46.getFields();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = timeOfDay46.toDateTimeToday(dateTimeZone48);
        org.joda.time.DateTime.Property property50 = dateTime49.monthOfYear();
        org.joda.time.DateTime dateTime52 = dateTime49.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str55 = dateTimeZone54.getID();
        org.joda.time.DateMidnight dateMidnight56 = org.joda.time.DateMidnight.now(dateTimeZone54);
        boolean boolean57 = dateTime52.equals((java.lang.Object) dateMidnight56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight56.plusMonths(10);
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.dayOfYear();
        org.joda.time.DateMidnight dateMidnight61 = property60.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight61.withDurationAdded((long) 400, 20);
        mutableDateTime25.setMillis((org.joda.time.ReadableInstant) dateMidnight64);
        int int66 = mutableDateTime25.getMonthOfYear();
        mutableDateTime25.setTime(1277592045000L);
        boolean boolean69 = dateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime25.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime72 = property70.addWrapField(43);
        int int73 = property6.compareTo((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.DateTimeField dateTimeField74 = property6.getField();
        int int76 = dateTimeField74.getMaximumValue(0L);
        int int77 = dateTimeField74.getMaximumValue();
        long long80 = dateTimeField74.add((long) 956, (long) 897);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfSecond" + "'", str8, "millisOfSecond");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 57 + "'", int13 == 57);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.016" + "'", str55, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 999 + "'", int76 == 999);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 999 + "'", int77 == 999);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1853L + "'", long80 == 1853L);
    }

    @Test
    public void test05548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05548");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1899, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Interval interval35 = yearMonthDay31.toInterval(dateTimeZone33);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Interval interval38 = interval35.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay21.withChronologyRetainFields(chronology39);
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay21.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        int int47 = dateTimeZone45.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 1899, dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        int int51 = dateTimeZone49.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime52 = localDate48.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight53 = yearMonthDay21.toDateMidnight(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.withWeekOfWeekyear(32);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight53.withWeekOfWeekyear(17);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        int int60 = dateTimeZone58.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone58);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime61.property(dateTimeFieldType62);
        org.joda.time.DateTimeZone dateTimeZone64 = mutableDateTime61.getZone();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight53.withZoneRetainFields(dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plusYears(817);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16 + "'", int47 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 16 + "'", int51 == 16);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 16 + "'", int60 == 16);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test05549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05549");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("556");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '556' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05550");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 1899, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.Interval interval18 = yearMonthDay14.toInterval(dateTimeZone16);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Interval interval21 = interval18.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType4, chronology22);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.Interval interval25 = new org.joda.time.Interval(56L, (long) 58, chronology22);
        org.joda.time.Period period26 = new org.joda.time.Period(31553832000L, chronology22);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.016" + "'", str17, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test05551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05551");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getName((long) (-1));
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str11 = locale8.getExtension('a');
        java.lang.String str12 = dateTimeZone1.getShortName((long) 8, locale8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 10, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMinuteOfHour(0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 10, chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.withDurationAdded(readableDuration24, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property27 = localDateTime17.monthOfYear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMaximumValue();
        int int30 = property28.getMaximumValueOverall();
        java.util.Locale locale31 = java.util.Locale.US;
        int int32 = property28.getMaximumTextLength(locale31);
        java.lang.String str33 = locale8.getDisplayScript(locale31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = locale31.getUnicodeLocaleType("1969");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1969");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.016" + "'", str5, "+00:00:00.016");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test05552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05552");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDateTime5.getFields();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1899, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Interval interval23 = yearMonthDay19.toInterval(dateTimeZone21);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.Interval interval26 = interval23.withStartMillis((long) 32769);
        boolean boolean28 = interval23.isBefore(1L);
        org.joda.time.MutableInterval mutableInterval29 = interval23.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        int int33 = dateTimeZone31.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 1899, dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        int int37 = dateTimeZone35.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str42 = dateTimeZone41.getID();
        org.joda.time.Interval interval43 = yearMonthDay39.toInterval(dateTimeZone41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        boolean boolean45 = interval23.contains((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 1899, dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        int int53 = dateTimeZone51.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime54 = localDate50.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str58 = dateTimeZone57.getID();
        org.joda.time.Interval interval59 = yearMonthDay55.toInterval(dateTimeZone57);
        org.joda.time.MutableInterval mutableInterval60 = interval59.toMutableInterval();
        org.joda.time.Interval interval62 = interval59.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.DateMidnight dateMidnight64 = org.joda.time.DateMidnight.now(chronology63);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology63);
        boolean boolean66 = interval43.equals((java.lang.Object) dateTime65);
        org.joda.time.Period period67 = interval43.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str70 = dateTimeZone69.getID();
        org.joda.time.DateMidnight dateMidnight71 = org.joda.time.DateMidnight.now(dateTimeZone69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getDurationType();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight71.withField(dateTimeFieldType72, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight71.minusYears((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        int int81 = dateTimeZone79.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) 1899, dateTimeZone79);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        int int85 = dateTimeZone83.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime86 = localDate82.toDateTimeAtCurrentTime(dateTimeZone83);
        org.joda.time.YearMonthDay yearMonthDay87 = new org.joda.time.YearMonthDay(dateTimeZone83);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str90 = dateTimeZone89.getID();
        org.joda.time.Interval interval91 = yearMonthDay87.toInterval(dateTimeZone89);
        org.joda.time.MutableInterval mutableInterval92 = interval91.toMutableInterval();
        org.joda.time.Interval interval94 = interval91.withStartMillis((long) 32769);
        org.joda.time.Duration duration95 = interval94.toDuration();
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight71, (org.joda.time.ReadableDuration) duration95);
        org.joda.time.Interval interval97 = interval43.withDurationAfterStart((org.joda.time.ReadableDuration) duration95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime99 = localDateTime5.withDurationAdded((org.joda.time.ReadableDuration) duration95, 53858123);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645487967215 * 53858123");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.016" + "'", str22, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.016" + "'", str42, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.016" + "'", str58, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.016" + "'", str70, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 16 + "'", int81 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 16 + "'", int85 == 16);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.016" + "'", str90, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(mutableInterval92);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(interval97);
    }

    @Test
    public void test05553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05553");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTime();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        mutableDateTime4.setZoneRetainFields(dateTimeZone10);
        boolean boolean13 = mutableDateTime4.isEqualNow();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.monthOfYear();
        boolean boolean23 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int26 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "eng", 46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period37 = period33.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period39 = period35.minusSeconds((int) (short) 100);
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        java.lang.String str45 = period44.toString();
        org.joda.time.Period period46 = period42.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period48 = period46.plusMillis(100);
        org.joda.time.Period period49 = period46.negated();
        org.joda.time.Period period51 = period49.withMillis(1899);
        org.joda.time.Period period53 = period51.plusMillis(0);
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime55 = mutableDateTime31.toDateTime();
        mutableDateTime31.setWeekyear(1970);
        org.joda.time.DateTimeField dateTimeField58 = mutableDateTime31.getRoundingField();
        org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray64 = timeOfDay63.getFields();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = timeOfDay63.toDateTimeToday(dateTimeZone65);
        org.joda.time.DateTime.Property property67 = dateTime66.monthOfYear();
        org.joda.time.DateTime dateTime69 = dateTime66.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str72 = dateTimeZone71.getID();
        org.joda.time.DateMidnight dateMidnight73 = org.joda.time.DateMidnight.now(dateTimeZone71);
        boolean boolean74 = dateTime69.equals((java.lang.Object) dateMidnight73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight73.plusMonths(10);
        org.joda.time.DateMidnight.Property property77 = dateMidnight76.dayOfYear();
        org.joda.time.DateMidnight.Property property78 = dateMidnight76.yearOfEra();
        org.joda.time.DateMidnight.Property property79 = dateMidnight76.dayOfYear();
        org.joda.time.DateMidnight dateMidnight80 = property79.roundHalfEvenCopy();
        int int81 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) dateMidnight80);
        mutableDateTime31.add((long) 25);
        int int86 = dateTimeFormatter27.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime31, "Property[dayOfMonth]", 46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter27.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long89 = dateTimeFormatter87.parseMillis("P1D");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P1D\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-47) + "'", int26 == (-47));
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT1M" + "'", str36, "PT1M");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT1M" + "'", str45, "PT1M");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFieldArray64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.016" + "'", str72, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-47) + "'", int86 == (-47));
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
    }

    @Test
    public void test05554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05554");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.stream.Stream<java.util.Locale> localeStream7 = localeList4.parallelStream();
        java.lang.String[] strArray16 = new java.lang.String[] { "2022-02-21T00:52:52.000Z", "Korean (South Korea)", "1970", "hi!", "1970", "45", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale[] localeArray22 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.stream.Stream<java.util.Locale> localeStream26 = localeList25.parallelStream();
        boolean boolean27 = strSet17.retainAll((java.util.Collection<java.util.Locale>) localeList25);
        java.util.Iterator<java.util.Locale> localeItor28 = localeList25.iterator();
        boolean boolean29 = localeList4.retainAll((java.util.Collection<java.util.Locale>) localeList25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 10, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMinuteOfHour(0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 10, chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusMillis(3);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.centuryOfEra();
        int int47 = localDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getDurationType();
        org.joda.time.LocalDateTime.Property property50 = localDateTime42.property(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime42.minusMillis(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter53.withOffsetParsed();
        java.lang.String str55 = localDateTime42.toString(dateTimeFormatter54);
        org.joda.time.Chronology chronology56 = dateTimeFormatter54.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 45, dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (short) 10);
        java.lang.String str62 = dateTimeFormatter54.print((org.joda.time.ReadablePartial) localDateTime61);
        boolean boolean63 = localeList25.contains((java.lang.Object) localDateTime61);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.monthOfYear();
        int int65 = localDateTime61.getMinuteOfHour();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(localeStream7);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localeItor28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0000-W01-4T00:00:00.026" + "'", str55, "0000-W01-4T00:00:00.026");
        org.junit.Assert.assertNull(chronology56);
        org.junit.Assert.assertNotNull(localDateTime61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-W11-4T00:00:00.061" + "'", str62, "1970-W11-4T00:00:00.061");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test05555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05555");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setYear(20);
        mutableDateTime3.addWeekyears(5872);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime3.copy();
        mutableDateTime18.setDate((long) 8);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test05556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05556");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusDays(8);
        org.joda.time.LocalDate localDate4 = localDate2.withCenturyOfEra((int) 'a');
        int int5 = localDate2.getEra();
        java.lang.String str6 = localDate2.toString();
        java.lang.String str7 = localDate2.toString();
        int int8 = localDate2.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-03-01" + "'", str6, "2022-03-01");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-03-01" + "'", str7, "2022-03-01");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test05557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05557");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:55:34.849+00:00:00.016");
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1);
        int int4 = calendar3.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = calendar3.getGreatestMinimum(3112);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3112");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455538149,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=149,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
    }

    @Test
    public void test05558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05558");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str5 = dateTimeZone4.getID();
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone4);
        int int8 = dateTimeZone4.getOffset((long) 1);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale10.getDisplayScript();
        java.lang.String str12 = locale10.getISO3Country();
        java.lang.String str13 = dateTimeZone4.getShortName(8281233356125457L, locale10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((int) (short) 100, 40080984, 50, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40080984 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.016" + "'", str5, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
    }

    @Test
    public void test05559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05559");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.addWrapFieldToCopy(10);
        java.lang.String str17 = property14.getAsString();
        org.joda.time.YearMonthDay yearMonthDay19 = property14.addWrapFieldToCopy(3172);
        int int20 = yearMonthDay19.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "21" + "'", str17, "21");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test05560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05560");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1899, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Interval interval35 = yearMonthDay31.toInterval(dateTimeZone33);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Interval interval38 = interval35.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay21.withChronologyRetainFields(chronology39);
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay21.toDateMidnight();
        int int44 = yearMonthDay21.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay21.withYear(55);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateMidnight dateMidnight49 = org.joda.time.DateMidnight.parse("00");
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        int int55 = dateTimeZone53.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 1899, dateTimeZone53);
        boolean boolean57 = dateMidnight49.equals((java.lang.Object) 1899);
        int int58 = dateMidnight49.getDayOfWeek();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period60 = new org.joda.time.Period(readableInstant47, (org.joda.time.ReadableInstant) dateMidnight49, periodType59);
        int int61 = periodType59.size();
        org.joda.time.PeriodType periodType62 = periodType59.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(periodType62);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod63, 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.TimeOfDay timeOfDay69 = new org.joda.time.TimeOfDay(0, (int) '4', chronology68);
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay69.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property72 = timeOfDay69.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay73 = property72.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField74 = property72.getField();
        org.joda.time.DurationField durationField75 = property72.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property72.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property77 = yearMonthDay21.property(dateTimeFieldType76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 16 + "'", int55 == 16);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
    }

    @Test
    public void test05561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05561");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.monthOfYear();
        org.joda.time.LocalDate localDate9 = property8.withMinimumValue();
        int int10 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate12 = property8.addToCopy((int) '#');
        long long13 = property8.remainder();
        org.joda.time.LocalDate localDate14 = property8.roundCeilingCopy();
        org.joda.time.DurationField durationField15 = property8.getRangeDurationField();
        org.joda.time.LocalDate localDate17 = property8.addToCopy(0);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 777600000L + "'", long13 == 777600000L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test05562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05562");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1899, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval(dateTimeZone14);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Interval interval19 = interval16.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.monthOfYear();
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        java.lang.String str27 = period26.toString();
        org.joda.time.Period period28 = period24.withFields((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period30 = period28.plusMillis(100);
        org.joda.time.Period period31 = period28.negated();
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period37 = period33.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period39 = period37.plusMillis(100);
        boolean boolean40 = period31.equals((java.lang.Object) period39);
        long long43 = chronology20.add((org.joda.time.ReadablePeriod) period31, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField44 = chronology20.dayOfYear();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 2, (long) 4, periodType2, chronology20);
        org.joda.time.DateTimeField dateTimeField46 = chronology20.millisOfDay();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period49 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period51 = org.joda.time.Period.minutes(1);
        java.lang.String str52 = period51.toString();
        org.joda.time.Period period53 = period49.withFields((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period55 = period53.plusMillis(100);
        org.joda.time.LocalTime localTime56 = localTime47.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.LocalTime localTime58 = localTime56.withMinuteOfHour(0);
        org.joda.time.tz.NameProvider nameProvider60 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str66 = nameProvider60.getName(locale61, "Korean", "58");
        java.util.Set<java.lang.Character> charSet67 = locale61.getExtensionKeys();
        java.lang.String str68 = localTime56.toString("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd", locale61);
        org.joda.time.TimeOfDay timeOfDay74 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray75 = timeOfDay74.getFields();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = timeOfDay74.toDateTimeToday(dateTimeZone76);
        int[] intArray78 = timeOfDay74.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField46.add((org.joda.time.ReadablePartial) localTime56, 2194, intArray78, 53785619);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.016" + "'", str15, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M" + "'", str27, "PT1M");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT1M" + "'", str36, "PT1M");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 31553832000L + "'", long43 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT1M" + "'", str52, "PT1M");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(nameProvider60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str68, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFieldArray75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 52, 52, 0]");
    }

    @Test
    public void test05563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05563");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = date5.getDate();
        java.lang.String str8 = date5.toLocaleString();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc624\uc804 1:35:00" + "'", str8, "\uc624\uc804 1:35:00");
    }

    @Test
    public void test05564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05564");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        java.lang.String str25 = period24.toString();
        org.joda.time.Period period26 = period22.withFields((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period28 = period26.plusMillis(100);
        long long31 = chronology17.add((org.joda.time.ReadablePeriod) period28, (long) 535, (int) 'u');
        org.joda.time.Period period33 = period28.plusMonths((int) 'x');
        int int34 = period28.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT1M" + "'", str25, "PT1M");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 7032235L + "'", long31 == 7032235L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
    }

    @Test
    public void test05565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05565");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-259200016L));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks(295);
        int int4 = localDateTime3.size();
        java.util.Date date10 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date10);
        int int12 = localDate11.getWeekyear();
        org.joda.time.LocalDate.Property property13 = localDate11.dayOfMonth();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        int int15 = localDate14.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDate14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1899 + "'", int12 == 1899);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1899 + "'", int15 == 1899);
    }

    @Test
    public void test05566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05566");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.centuryOfEra();
        int int17 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minusMonths(17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withMonthOfYear(21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26 + "'", int17 == 26);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test05567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05567");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime3.property(dateTimeFieldType4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add((long) 9);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test05568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05568");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(23, 817, 741);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 817 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05569");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getDurationType();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withField(dateTimeFieldType4, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.minusYears((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1899, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Interval interval23 = yearMonthDay19.toInterval(dateTimeZone21);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.Interval interval26 = interval23.withStartMillis((long) 32769);
        org.joda.time.Duration duration27 = interval26.toDuration();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period30 = period28.withSeconds((-1000));
        int int31 = period28.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.016" + "'", str22, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
    }

    @Test
    public void test05570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05570");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        int int6 = period1.getMinutes();
        org.joda.time.Period period7 = period1.toPeriod();
        int[] intArray8 = period1.getValues();
        org.joda.time.Period period10 = period1.withMinutes(53803354);
        org.joda.time.Period period12 = period10.minusMonths(86340000);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str15 = localTime13.toString(dateTimeFormatter14);
        org.joda.time.LocalTime localTime17 = localTime13.minusSeconds((int) (short) -1);
        org.joda.time.LocalTime.Property property18 = localTime13.hourOfDay();
        int int19 = localTime13.size();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        boolean boolean21 = localTime13.isSupported(durationFieldType20);
        boolean boolean22 = period12.isSupported(durationFieldType20);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str15, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test05571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05571");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay15 = property14.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay17 = property14.addWrapFieldToCopy(47);
        org.joda.time.YearMonthDay yearMonthDay18 = property14.withMaximumValue();
        int int19 = property14.get();
        org.joda.time.YearMonthDay yearMonthDay20 = property14.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay21 = property14.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21 + "'", int19 == 21);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test05572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05572");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.halfdayOfDay();
        java.lang.String str18 = dateTimeField17.toString();
        long long20 = dateTimeField17.roundHalfFloor((long) 181);
        int int22 = dateTimeField17.get((long) 53930297);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str18, "DateTimeField[halfdayOfDay]");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-16L) + "'", long20 == (-16L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test05573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05573");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusDays(8);
        org.joda.time.LocalDate localDate4 = localDate2.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDate localDate6 = localDate2.plusDays((int) (short) 0);
        java.util.Date date12 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromDateFields(date12);
        org.joda.time.LocalDate.Property property14 = localDate13.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = property14.setCopy(10);
        org.joda.time.LocalDate localDate18 = localDate16.withWeekyear(1970);
        org.joda.time.LocalDate localDate20 = localDate18.withWeekyear(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int22 = localDate20.get(dateTimeFieldType21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        mutablePeriod23.setYears(16);
        org.joda.time.LocalDate localDate27 = localDate20.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod23, (int) (byte) -1);
        boolean boolean28 = localDate2.isAfter((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate30 = localDate20.plusMonths((-45));
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        int int35 = dateTimeZone33.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 1899, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        int int39 = dateTimeZone37.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str44 = dateTimeZone43.getID();
        org.joda.time.Interval interval45 = yearMonthDay41.toInterval(dateTimeZone43);
        org.joda.time.MutableInterval mutableInterval46 = interval45.toMutableInterval();
        org.joda.time.Interval interval48 = interval45.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology49.getZone();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.monthOfYear();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DurationField durationField53 = chronology49.millis();
        boolean boolean54 = dateTimeFieldType31.isSupported(chronology49);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        int int59 = dateTimeZone57.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 1899, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        int int63 = dateTimeZone61.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime64 = localDate60.toDateTimeAtCurrentTime(dateTimeZone61);
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str68 = dateTimeZone67.getID();
        org.joda.time.Interval interval69 = yearMonthDay65.toInterval(dateTimeZone67);
        org.joda.time.MutableInterval mutableInterval70 = interval69.toMutableInterval();
        org.joda.time.Interval interval72 = interval69.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone74 = chronology73.getZone();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.centuryOfEra();
        long long80 = chronology73.add((long) (-1), (-1073174400016L), (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(1645401599984L, chronology73);
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType31.getField(chronology73);
        org.joda.time.LocalDate.Property property83 = localDate30.property(dateTimeFieldType31);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = localDate30.getValue(1926);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1926");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 16 + "'", int39 == 16);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.016" + "'", str44, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 16 + "'", int59 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 16 + "'", int63 == 16);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.016" + "'", str68, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1073174400017L) + "'", long80 == (-1073174400017L));
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test05574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05574");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        java.lang.String str2 = mutablePeriod1.toString();
        mutablePeriod1.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 1899, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.Interval interval18 = yearMonthDay14.toInterval(dateTimeZone16);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Interval interval21 = interval18.withStartMillis((long) 32769);
        org.joda.time.Duration duration22 = interval21.toDuration();
        java.lang.String str23 = duration22.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        int int27 = dateTimeZone25.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 1899, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        int int31 = dateTimeZone29.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str36 = dateTimeZone35.getID();
        org.joda.time.Interval interval37 = yearMonthDay33.toInterval(dateTimeZone35);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Interval interval40 = interval37.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.monthOfYear();
        org.joda.time.Period period45 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period47 = org.joda.time.Period.minutes(1);
        java.lang.String str48 = period47.toString();
        org.joda.time.Period period49 = period45.withFields((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period51 = period49.plusMillis(100);
        org.joda.time.Period period52 = period49.negated();
        org.joda.time.Period period54 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period56 = org.joda.time.Period.minutes(1);
        java.lang.String str57 = period56.toString();
        org.joda.time.Period period58 = period54.withFields((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period60 = period58.plusMillis(100);
        boolean boolean61 = period52.equals((java.lang.Object) period60);
        long long64 = chronology41.add((org.joda.time.ReadablePeriod) period52, 31556952000L, (int) '4');
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration22, chronology41);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(0L, chronology41);
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(chronology41);
        int int68 = mutableDateTime67.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime67.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime71 = property69.set("2022-02-21T14:54:55.163Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:54:55.163Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.016" + "'", str17, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1645487967.215S" + "'", str23, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.016" + "'", str36, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT1M" + "'", str48, "PT1M");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT1M" + "'", str57, "PT1M");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 31553832000L + "'", long64 == 31553832000L);
        org.junit.Assert.assertNotNull(mutableDateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 58 + "'", int68 == 58);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test05575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05575");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period10.minusSeconds((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = period10.toDurationFrom(readableInstant15);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime3.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone20);
        int int24 = dateTimeZone20.getOffset((long) 1);
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = dateTimeZone20.getShortName(31553832000L, locale26);
        long long30 = dateTimeZone20.convertLocalToUTC((long) 32770, false);
        mutableDateTime3.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((long) 45);
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.weekyear();
        int int39 = dateMidnight35.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight35.minusWeeks((-292275054));
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight35.withFieldAdded(durationFieldType42, (int) 'u');
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minus((long) 535);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight44.minusWeeks(54);
        org.joda.time.DateMidnight.Property property49 = dateMidnight44.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        int int53 = dateTimeZone51.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 1899, dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        int int57 = dateTimeZone55.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime58 = localDate54.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone55);
        int int60 = yearMonthDay59.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight44.withFields((org.joda.time.ReadablePartial) yearMonthDay59);
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) dateMidnight61);
        int int63 = dateMidnight61.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.016" + "'", str21, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.016" + "'", str27, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32754L + "'", long30 == 32754L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 21 + "'", int60 == 21);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test05576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05576");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.LocalTime localTime9 = localTime0.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(0);
        org.joda.time.LocalTime.Property property12 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property12.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime15 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime16 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime18 = property12.setCopy(74);
        org.joda.time.LocalTime localTime20 = property12.addCopy((long) 2922789);
        org.joda.time.LocalTime.Property property21 = localTime20.secondOfMinute();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test05577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05577");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setMillisOfDay(10);
        mutableDateTime3.setSecondOfDay(1970);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str31 = dateTimeZone30.getID();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(dateTimeZone30);
        boolean boolean33 = dateTime28.equals((java.lang.Object) dateMidnight32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.plusMonths(10);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfYear();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray41 = new org.joda.time.DurationFieldType[] { durationFieldType40 };
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.forFields(durationFieldTypeArray41);
        org.joda.time.Period period43 = new org.joda.time.Period((long) ' ', periodType42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.months();
        int int45 = periodType42.indexOf(durationFieldType44);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) dateMidnight35, periodType42);
        org.joda.time.PeriodType periodType47 = periodType42.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType49 = periodType42.getFieldType(53673521);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53673521");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.016" + "'", str31, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(durationFieldTypeArray41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(periodType47);
    }

    @Test
    public void test05578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05578");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-1000L));
    }

    @Test
    public void test05579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05579");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 7);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.lang.String str6 = localDateTime1.toString("5", locale3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.dayOfYear();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "5" + "'", str6, "5");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test05580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05580");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str2 = localTime0.toString(dateTimeFormatter1);
        org.joda.time.LocalTime localTime4 = localTime0.minusSeconds((int) (short) -1);
        org.joda.time.LocalTime localTime6 = localTime4.plusHours(100);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime9 = property7.setCopy(46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = property7.setCopy("00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"00:00\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str2, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test05581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05581");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.add((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.lang.String str18 = dateTimeZone11.getName((long) 5, locale14);
        java.lang.String str19 = locale14.getISO3Country();
        java.util.Calendar calendar20 = mutableDateTime9.toCalendar(locale14);
        calendar20.setFirstDayOfWeek(53781743);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 10, chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMinuteOfHour(0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 10, chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusMillis(3);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(7);
        boolean boolean43 = calendar20.before((java.lang.Object) localDateTime42);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale47.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = calendar20.getDisplayName(19043, 2025, locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645455538878,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=53781743,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=58,MILLISECOND=894,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test05582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05582");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        boolean boolean12 = dateTime7.isAfter((long) '#');
        java.lang.String str13 = dateTime7.toString();
        org.joda.time.DateTime dateTime15 = dateTime7.minusSeconds(292278993);
        org.joda.time.DateTime dateTime17 = dateTime7.withMillis((long) 16);
        boolean boolean18 = dateTime7.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime7.plusDays(2);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        org.joda.time.DateTime dateTime23 = dateTime20.plusSeconds(10);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 1899, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str39 = dateTimeZone38.getID();
        org.joda.time.Interval interval40 = yearMonthDay36.toInterval(dateTimeZone38);
        org.joda.time.Interval interval41 = yearMonthDay36.toInterval();
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.Chronology chronology43 = interval41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (-2013), periodType26, chronology43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) int24, chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T00:52:52.000+00:00:00.016" + "'", str13, "2022-02-21T00:52:52.000+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.016" + "'", str39, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test05583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05583");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYearOfCentury(16);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 1899, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Interval interval19 = yearMonthDay15.toInterval(dateTimeZone17);
        org.joda.time.MutableInterval mutableInterval20 = interval19.toMutableInterval();
        org.joda.time.Interval interval22 = interval19.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        org.joda.time.DateTime dateTime25 = dateTime2.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 1899, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str39 = dateTimeZone38.getID();
        org.joda.time.Interval interval40 = yearMonthDay36.toInterval(dateTimeZone38);
        org.joda.time.MutableInterval mutableInterval41 = interval40.toMutableInterval();
        org.joda.time.Interval interval43 = interval40.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(0L, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime25.toDateTime(chronology44);
        boolean boolean47 = durationFieldType0.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.dayOfMonth();
        long long51 = dateTimeField48.add((long) 934, (-365931L));
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.016" + "'", str39, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-31616438399066L) + "'", long51 == (-31616438399066L));
    }

    @Test
    public void test05584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05584");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test05585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05585");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1899, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval(dateTimeZone14);
        org.joda.time.Interval interval17 = yearMonthDay12.toInterval();
        org.joda.time.DateTime dateTime18 = yearMonthDay12.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime19 = yearMonthDay12.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology20 = yearMonthDay12.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((-609), 27, 2044, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.016" + "'", str15, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test05586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05586");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMinuteOfHour(9);
        int int20 = localDateTime19.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter22.withPivotYear((java.lang.Integer) (-1));
        java.lang.String str25 = localDateTime19.toString(dateTimeFormatter24);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((int) (byte) 0, (int) (byte) 0, (int) (short) 10, 1970, 32, 167, 15, (-1962));
        org.joda.time.LocalDateTime localDateTime36 = localDateTime19.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod34, 27424799);
        mutablePeriod34.setWeeks((int) (byte) -1);
        int int39 = mutablePeriod34.getYears();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "00" + "'", str25, "00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test05587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05587");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getDays();
        java.util.Date date9 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date9);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property11.setCopy("45");
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime20 = dateTime17.withField(dateTimeFieldType18, 44);
        boolean boolean21 = localDate13.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1899, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Interval interval35 = yearMonthDay31.toInterval(dateTimeZone33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        long long40 = chronology36.add((long) 18, (long) 6, 58);
        boolean boolean41 = dateTimeFieldType18.isSupported(chronology36);
        mutablePeriod0.setPeriod((long) 32, (long) 53, chronology36);
        org.joda.time.DateTimeField dateTimeField43 = chronology36.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField44 = chronology36.dayOfMonth();
        long long47 = dateTimeField44.add(1646092800284L, (long) 2025);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 366L + "'", long40 == 366L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1821052800284L + "'", long47 == 1821052800284L);
    }

    @Test
    public void test05588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05588");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(491);
        int int2 = period1.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 491 + "'", int2 == 491);
    }

    @Test
    public void test05589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05589");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy("45");
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        org.joda.time.LocalDate.Property property11 = localDate10.centuryOfEra();
        boolean boolean12 = property11.isLeap();
        org.joda.time.LocalDate localDate13 = property11.roundCeilingCopy();
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfEra(456);
        int int16 = localDate13.size();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test05590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05590");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str8 = locale5.getDisplayVariant(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale4.getDisplayName(locale7);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int13 = calendar11.getMaximum((int) (short) 0);
        calendar11.setLenient(false);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromCalendarFields(calendar11);
        java.util.Date date18 = new java.util.Date((long) 2012);
        calendar11.setTime(date18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455539171,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=187,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (Taiwan)" + "'", str10, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=2012,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=2,MILLISECOND=28,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:02 GMT 1970");
    }

    @Test
    public void test05591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05591");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        date5.setTime((-1L));
        java.util.Date date14 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int15 = date14.getSeconds();
        boolean boolean16 = date5.after(date14);
        date14.setMonth(2022);
        int int19 = date14.getTimezoneOffset();
        java.lang.String str20 = date14.toLocaleString();
        date14.setDate(999);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Mar 25 01:35:00 GMT 2070");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc624\uc804 1:35:00" + "'", str20, "\uc624\uc804 1:35:00");
    }

    @Test
    public void test05592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05592");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 10, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMinuteOfHour(0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 10, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.withDurationAdded(readableDuration13, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 10, chronology17);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTime dateTime20 = dateTime1.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime6.minusDays(89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date23 = localDateTime22.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -974 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test05593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05593");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        boolean boolean12 = mutableDateTime3.isEqualNow();
        org.joda.time.DateTimeField dateTimeField13 = mutableDateTime3.getRoundingField();
        mutableDateTime3.addSeconds(0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        java.lang.String str25 = period24.toString();
        org.joda.time.Period period26 = period22.withFields((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period28 = period24.minusSeconds((int) (short) 100);
        mutableDateTime20.add((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = period35.plusMillis(100);
        org.joda.time.Period period38 = period35.negated();
        org.joda.time.Period period40 = period38.withMillis(1899);
        org.joda.time.Period period42 = period40.plusMillis(0);
        mutableDateTime20.add((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime44 = mutableDateTime20.toDateTime();
        mutableDateTime20.setWeekyear(1970);
        org.joda.time.DateTimeField dateTimeField47 = mutableDateTime20.getRoundingField();
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray53 = timeOfDay52.getFields();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = timeOfDay52.toDateTimeToday(dateTimeZone54);
        org.joda.time.DateTime.Property property56 = dateTime55.monthOfYear();
        org.joda.time.DateTime dateTime58 = dateTime55.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str61 = dateTimeZone60.getID();
        org.joda.time.DateMidnight dateMidnight62 = org.joda.time.DateMidnight.now(dateTimeZone60);
        boolean boolean63 = dateTime58.equals((java.lang.Object) dateMidnight62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight62.plusMonths(10);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.dayOfYear();
        org.joda.time.DateMidnight.Property property67 = dateMidnight65.yearOfEra();
        org.joda.time.DateMidnight.Property property68 = dateMidnight65.dayOfYear();
        org.joda.time.DateMidnight dateMidnight69 = property68.roundHalfEvenCopy();
        int int70 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) dateMidnight69);
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime3.weekyear();
        org.joda.time.MutableDateTime mutableDateTime74 = property72.addWrapField(6);
        org.joda.time.TimeOfDay timeOfDay79 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = timeOfDay79.toDateTimeToday(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime81.minus((long) (short) 0);
        org.joda.time.DateTime dateTime84 = dateTime83.toDateTimeISO();
        org.joda.time.DateTime dateTime86 = dateTime84.minus(315705601970L);
        org.joda.time.DateTime.Property property87 = dateTime84.era();
        int int88 = dateTime84.getWeekyear();
        mutableDateTime74.setMillis((org.joda.time.ReadableInstant) dateTime84);
        int int90 = mutableDateTime74.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT1M" + "'", str25, "PT1M");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldArray53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.016" + "'", str61, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2022 + "'", int88 == 2022);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
    }

    @Test
    public void test05594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05594");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.util.Locale.setDefault(locale0);
        java.lang.String str4 = locale0.getISO3Country();
        java.lang.String str5 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ko" + "'", str5, "ko");
    }

    @Test
    public void test05595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05595");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1899, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.Interval interval24 = yearMonthDay20.toInterval(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) -1, dateTimeZone22);
        org.joda.time.DateTime dateTime26 = localDate7.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 10, dateTimeZone22);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime28.withEra(860);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 860 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test05596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05596");
        java.util.Date date5 = new java.util.Date(54, 24, 53710900, 1, 52);
        long long6 = date5.getTime();
        date5.setTime((long) 19);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4640179830720000L + "'", long6 == 4640179830720000L);
    }

    @Test
    public void test05597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05597");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.setTimeInMillis((long) 59);
        java.util.Date date12 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromDateFields(date12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        boolean boolean17 = calendar4.before((java.lang.Object) dateTime16);
        int int18 = dateTime16.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=59,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=75,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date12.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test05598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05598");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) 100);
        mutablePeriod0.setYears(50);
        org.joda.time.Period period6 = org.joda.time.Period.minutes(54);
        mutablePeriod0.mergePeriod((org.joda.time.ReadablePeriod) period6);
        mutablePeriod0.addDays(19043);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test05599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05599");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy("46");
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate12 = localDate9.withYearOfEra(53660892);
        org.joda.time.LocalDate localDate14 = localDate9.plusDays(14);
        org.joda.time.LocalDate.Property property15 = localDate9.era();
        org.joda.time.LocalDate localDate16 = property15.withMaximumValue();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test05600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05600");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        int int4 = calendar3.getWeekYear();
        calendar3.setMinimalDaysInFirstWeek((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        calendar3.set(400, 32772, 5, 2194, 36);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = calendar3.isSet(53760278);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53760278");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=400,MONTH=32772,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=5,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=2194,MINUTE=36,SECOND=59,MILLISECOND=532,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test05601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05601");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        java.lang.String str15 = dateTimeZone11.getNameKey((long) (byte) 10);
        org.joda.time.DateTime dateTime16 = timeOfDay10.toDateTimeToday(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        java.util.TimeZone timeZone18 = dateTimeZone11.toTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        java.time.Instant instant20 = calendar19.toInstant();
        java.util.Date date21 = java.util.Date.from(instant20);
        date21.setMinutes(395);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455539547,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=59,MILLISECOND=563,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Feb 21 20:35:59 GMT+00:00 2022");
    }

    @Test
    public void test05602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05602");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusDays(17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        java.lang.Integer int18 = dateTimeFormatter17.getPivotYear();
        java.lang.String str19 = localDateTime12.toString(dateTimeFormatter17);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = dateTimeFormatter17.parseMillis("P-47M");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P-47M\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0000-006" + "'", str19, "0000-006");
    }

    @Test
    public void test05603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05603");
        long long6 = java.util.Date.UTC(47016, 47, 379, 690, 465, (-81));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1481631356619000L + "'", long6 == 1481631356619000L);
    }

    @Test
    public void test05604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05604");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        int int13 = dateTimeZone9.getOffset((-16L));
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    }

    @Test
    public void test05605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05605");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((long) 45);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) '4', chronology10);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.secondOfMinute();
        int[] intArray14 = new int[] { 21 };
        int int15 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay11, intArray14);
        boolean boolean16 = dateTimeField7.isLenient();
        boolean boolean18 = dateTimeField7.isLeap(10L);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.lang.String str26 = nameProvider20.getName(locale21, "Korean", "58");
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = timeOfDay31.toDateTimeToday(dateTimeZone32);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay31.secondOfMinute();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str38 = locale35.getDisplayVariant(locale37);
        int int39 = property34.getMaximumTextLength(locale37);
        java.lang.String str42 = nameProvider20.getName(locale37, "1", "\uae08");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider20);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.lang.String str50 = nameProvider20.getName(locale46, "hi!", "ISOChronology[+00:00:00.016]");
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = locale46.getDisplayVariant(locale51);
        java.lang.String str53 = dateTimeField7.getAsShortText((long) 10, locale46);
        long long55 = dateTimeField7.roundHalfEven(32785L);
        int int57 = dateTimeField7.get((long) 974);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[21]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970" + "'", str53, "1970");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-259200016L) + "'", long55 == (-259200016L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
    }

    @Test
    public void test05606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05606");
        org.joda.time.Period period1 = org.joda.time.Period.years(18);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test05607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05607");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1899, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval(dateTimeZone14);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Interval interval19 = interval16.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.monthOfYear();
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        java.lang.String str27 = period26.toString();
        org.joda.time.Period period28 = period24.withFields((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period30 = period28.plusMillis(100);
        org.joda.time.Period period31 = period28.negated();
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period37 = period33.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period39 = period37.plusMillis(100);
        boolean boolean40 = period31.equals((java.lang.Object) period39);
        long long43 = chronology20.add((org.joda.time.ReadablePeriod) period31, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField44 = chronology20.dayOfYear();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 2, (long) 4, periodType2, chronology20);
        org.joda.time.Period period47 = period45.minusHours(1200000);
        org.joda.time.PeriodType periodType48 = period45.getPeriodType();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.016" + "'", str15, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M" + "'", str27, "PT1M");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT1M" + "'", str36, "PT1M");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 31553832000L + "'", long43 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
    }

    @Test
    public void test05608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05608");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 1899, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.Interval interval17 = yearMonthDay13.toInterval(dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Interval interval20 = interval17.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.Period period25 = new org.joda.time.Period(0L, (long) 794, chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-865L), (long) 35365, chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test05609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05609");
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        java.lang.String str7 = mutablePeriod6.toString();
        mutablePeriod6.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1899, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Interval interval23 = yearMonthDay19.toInterval(dateTimeZone21);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.Interval interval26 = interval23.withStartMillis((long) 32769);
        org.joda.time.Duration duration27 = interval26.toDuration();
        java.lang.String str28 = duration27.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 1899, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        int int36 = dateTimeZone34.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime37 = localDate33.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str41 = dateTimeZone40.getID();
        org.joda.time.Interval interval42 = yearMonthDay38.toInterval(dateTimeZone40);
        org.joda.time.MutableInterval mutableInterval43 = interval42.toMutableInterval();
        org.joda.time.Interval interval45 = interval42.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = chronology46.getZone();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.monthOfYear();
        org.joda.time.Period period50 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period52 = org.joda.time.Period.minutes(1);
        java.lang.String str53 = period52.toString();
        org.joda.time.Period period54 = period50.withFields((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period56 = period54.plusMillis(100);
        org.joda.time.Period period57 = period54.negated();
        org.joda.time.Period period59 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period61 = org.joda.time.Period.minutes(1);
        java.lang.String str62 = period61.toString();
        org.joda.time.Period period63 = period59.withFields((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period65 = period63.plusMillis(100);
        boolean boolean66 = period57.equals((java.lang.Object) period65);
        long long69 = chronology46.add((org.joda.time.ReadablePeriod) period57, 31556952000L, (int) '4');
        mutablePeriod6.setPeriod((org.joda.time.ReadableDuration) duration27, chronology46);
        org.joda.time.DateMidnight dateMidnight71 = org.joda.time.DateMidnight.now(chronology46);
        org.joda.time.DateTimeField dateTimeField72 = chronology46.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(999, 2012, 26, 10, 53803354, 30, chronology46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53803354 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0S" + "'", str7, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.016" + "'", str22, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT1645487967.215S" + "'", str28, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.016" + "'", str41, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT1M" + "'", str53, "PT1M");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT1M" + "'", str62, "PT1M");
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 31553832000L + "'", long69 == 31553832000L);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test05610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05610");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        int int8 = property7.getMinimumValue();
        int int9 = property7.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.DurationField durationField11 = property7.getRangeDurationField();
        int int12 = property7.getMinimumValueOverall();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period17 = org.joda.time.Period.minutes(1);
        java.lang.String str18 = period17.toString();
        org.joda.time.Period period19 = period15.withFields((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period21 = period19.plusMillis(100);
        org.joda.time.LocalTime localTime22 = localTime13.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.LocalTime localTime24 = localTime22.minusMinutes(0);
        org.joda.time.LocalTime.Property property25 = localTime22.millisOfSecond();
        org.joda.time.LocalTime localTime27 = property25.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime28 = property25.withMinimumValue();
        java.util.Date date30 = new java.util.Date(0L);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromDateFields(date30);
        int int32 = property25.compareTo((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalTime localTime35 = localTime31.withPeriodAdded(readablePeriod33, (-5));
        int int36 = property7.compareTo((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 10, chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime43 = property42.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime45 = property42.setCopy(59);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime52 = dateTime49.withField(dateTimeFieldType50, 44);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType50.getRangeDurationType();
        boolean boolean54 = localDateTime45.isSupported(durationFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime56 = localTime35.withFieldAdded(durationFieldType53, 322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT1M" + "'", str18, "PT1M");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.016" + "'", str48, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test05611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05611");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("T00:52:53.000", (double) 1671580799984L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.671580799984E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05612");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        int int18 = property16.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test05613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05613");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays(10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.year();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.dayOfMonth();
        boolean boolean11 = property10.isLeap();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05614");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        java.lang.String str3 = mutablePeriod2.toString();
        mutablePeriod2.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 1899, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Interval interval19 = yearMonthDay15.toInterval(dateTimeZone17);
        org.joda.time.MutableInterval mutableInterval20 = interval19.toMutableInterval();
        org.joda.time.Interval interval22 = interval19.withStartMillis((long) 32769);
        org.joda.time.Duration duration23 = interval22.toDuration();
        java.lang.String str24 = duration23.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 1899, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str37 = dateTimeZone36.getID();
        org.joda.time.Interval interval38 = yearMonthDay34.toInterval(dateTimeZone36);
        org.joda.time.MutableInterval mutableInterval39 = interval38.toMutableInterval();
        org.joda.time.Interval interval41 = interval38.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.monthOfYear();
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period50 = period46.withFields((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period52 = period50.plusMillis(100);
        org.joda.time.Period period53 = period50.negated();
        org.joda.time.Period period55 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period57 = org.joda.time.Period.minutes(1);
        java.lang.String str58 = period57.toString();
        org.joda.time.Period period59 = period55.withFields((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period61 = period59.plusMillis(100);
        boolean boolean62 = period53.equals((java.lang.Object) period61);
        long long65 = chronology42.add((org.joda.time.ReadablePeriod) period53, 31556952000L, (int) '4');
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration23, chronology42);
        org.joda.time.DateTimeField dateTimeField67 = chronology42.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(32801, 3390, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32801 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT0S" + "'", str3, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT1645487967.215S" + "'", str24, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.016" + "'", str37, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT1M" + "'", str49, "PT1M");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT1M" + "'", str58, "PT1M");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 31553832000L + "'", long65 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test05615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05615");
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType10 = periodType9.withMillisRemoved();
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        java.lang.String str15 = period14.toString();
        org.joda.time.Period period16 = period12.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period18 = period16.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.months();
        int int20 = period18.get(durationFieldType19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        int int24 = dateTimeZone22.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 1899, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.Interval interval34 = yearMonthDay30.toInterval(dateTimeZone32);
        org.joda.time.Interval interval35 = yearMonthDay30.toInterval();
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        boolean boolean37 = durationFieldType19.isSupported(chronology36);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(2246400052L, periodType9, chronology36);
        java.lang.String str39 = periodType9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(3112, (int) (byte) 10, 15, 56557725, 117, 0, 35, 144, periodType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT1M" + "'", str15, "PT1M");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PeriodType[Hours]" + "'", str39, "PeriodType[Hours]");
    }

    @Test
    public void test05616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05616");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getDays();
        java.util.Date date9 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date9);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property11.setCopy("45");
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime20 = dateTime17.withField(dateTimeFieldType18, 44);
        boolean boolean21 = localDate13.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1899, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Interval interval35 = yearMonthDay31.toInterval(dateTimeZone33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        long long40 = chronology36.add((long) 18, (long) 6, 58);
        boolean boolean41 = dateTimeFieldType18.isSupported(chronology36);
        mutablePeriod0.setPeriod((long) 32, (long) 53, chronology36);
        org.joda.time.DateTimeField dateTimeField43 = chronology36.minuteOfHour();
        int int46 = dateTimeField43.getDifference((-1602086161000L), (long) 421);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 366L + "'", long40 == 366L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-26701436) + "'", int46 == (-26701436));
    }

    @Test
    public void test05617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05617");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.util.Date date6 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime16 = dateTime13.withField(dateTimeFieldType14, 44);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType14.getRangeDurationType();
        int int18 = localDate7.get(dateTimeFieldType14);
        org.joda.time.LocalDate.Property property19 = localDate0.property(dateTimeFieldType14);
        java.lang.String str20 = dateTimeFieldType14.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        int int24 = dateTimeZone22.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 1899, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.Interval interval34 = yearMonthDay30.toInterval(dateTimeZone32);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Interval interval37 = interval34.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType14.getField(chronology38);
        long long42 = dateTimeField40.remainder(31556951L);
        long long44 = dateTimeField40.roundHalfEven(86400000L);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weekyearOfCentury" + "'", str20, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 31556967L + "'", long42 == 31556967L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-16L) + "'", long44 == (-16L));
    }

    @Test
    public void test05618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05618");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.Interval interval15 = interval13.toInterval();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 1899, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.Interval interval29 = yearMonthDay25.toInterval(dateTimeZone27);
        org.joda.time.Interval interval30 = yearMonthDay25.toInterval();
        org.joda.time.Period period31 = interval30.toPeriod();
        org.joda.time.Interval interval32 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.Interval interval34 = interval15.overlap(readableInterval33);
        boolean boolean36 = interval34.isAfter((long) 2012);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.016" + "'", str28, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test05619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05619");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1899, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Interval interval15 = yearMonthDay11.toInterval(dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        org.joda.time.Interval interval18 = interval15.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(obj0, chronology19);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0S");
    }

    @Test
    public void test05620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05620");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 1899, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Interval interval19 = yearMonthDay15.toInterval(dateTimeZone17);
        org.joda.time.MutableInterval mutableInterval20 = interval19.toMutableInterval();
        org.joda.time.Interval interval22 = interval19.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(677, 50412038, 125, 56557725, 322, 23, chronology23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56557725 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test05621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05621");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays(10);
        int int9 = localDateTime8.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withDate(144, 3172000, (-34537737));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3172000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test05622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05622");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy("45");
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate12 = localDate10.withYear((int) 'a');
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        org.joda.time.Period period21 = period18.negated();
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period25 = org.joda.time.Period.minutes(1);
        java.lang.String str26 = period25.toString();
        org.joda.time.Period period27 = period23.withFields((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period29 = period27.plusMillis(100);
        boolean boolean30 = period21.equals((java.lang.Object) period29);
        org.joda.time.Period period32 = period21.minusMillis((int) (short) 10);
        org.joda.time.Period period33 = period32.normalizedStandard();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(536468184000L, periodType35);
        org.joda.time.Period period37 = period32.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.LocalDate localDate38 = localDate12.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod();
        java.lang.String str40 = mutablePeriod39.toString();
        org.joda.time.Period period41 = period37.withFields((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod39.setPeriod((-1645368974538L));
        mutablePeriod39.setYears(897);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT1M" + "'", str26, "PT1M");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0S" + "'", str40, "PT0S");
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test05623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05623");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str11 = dateTimeZone10.getID();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str16 = locale13.getDisplayVariant(locale15);
        java.lang.String str17 = dateTimeZone10.getName((long) 5, locale13);
        int int18 = property7.getMaximumTextLength(locale13);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Set<java.lang.Character> charSet22 = locale20.getExtensionKeys();
        java.util.Set<java.lang.String> strSet23 = locale20.getUnicodeLocaleAttributes();
        int int24 = property7.getMaximumTextLength(locale20);
        int int25 = property7.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.016" + "'", str11, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.016" + "'", str17, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test05624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05624");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((long) 45);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.weekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.withDurationAdded(readableDuration7, 32769);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight3.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight3.plusYears(2922789);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test05625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05625");
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period7 = period3.withFields((org.joda.time.ReadablePeriod) period5);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period9 = period3.normalizedStandard(periodType8);
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1899, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.Interval interval24 = yearMonthDay20.toInterval(dateTimeZone22);
        org.joda.time.Interval interval25 = yearMonthDay20.toInterval();
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        java.lang.String str30 = period29.toString();
        org.joda.time.Period period31 = period27.withFields((org.joda.time.ReadablePeriod) period29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay20.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        int int36 = dateTimeZone34.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 1899, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Interval interval46 = yearMonthDay42.toInterval(dateTimeZone44);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Interval interval49 = interval46.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay32.withChronologyRetainFields(chronology50);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(chronology50);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 54, 16L, periodType8, chronology50);
        mutablePeriod57.add((long) (-47));
        int int60 = mutablePeriod57.getSeconds();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT1M" + "'", str6, "PT1M");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT1M" + "'", str30, "PT1M");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.016" + "'", str45, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test05626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05626");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        java.lang.String str1 = mutablePeriod0.toString();
        mutablePeriod0.setPeriod(0L);
        mutablePeriod0.addMonths(11);
        mutablePeriod0.addMinutes((int) (short) 1);
        mutablePeriod0.add((-27112862L));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0S" + "'", str1, "PT0S");
    }

    @Test
    public void test05627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05627");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withWeekyear(57);
        int int4 = localDate1.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 70 + "'", int4 == 70);
    }

    @Test
    public void test05628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05628");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfYear(39);
        org.joda.time.LocalDate localDate4 = localDate2.minusDays(433);
        int int5 = localDate4.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 337 + "'", int5 == 337);
    }

    @Test
    public void test05629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05629");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(32772, 17, (int) (short) 1, 64, 17, (int) '#', (-2195), 284);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod8.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setValue(35, 295);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test05630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05630");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        int int8 = property7.getMinimumValue();
        int int9 = property7.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property7.addWrapFieldToCopy((-1901));
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale13.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = property7.setCopy("dayOfWeek", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfWeek\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str14, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test05631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05631");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.minus(315705601970L);
        org.joda.time.DateTime.Property property12 = dateTime9.era();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period21.minusSeconds((int) (short) 100);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        java.lang.String str31 = period30.toString();
        org.joda.time.Period period32 = period28.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period34 = period32.plusMillis(100);
        org.joda.time.Period period35 = period32.negated();
        org.joda.time.Period period37 = period35.withMillis(1899);
        org.joda.time.Period period39 = period37.plusMillis(0);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime41 = mutableDateTime17.toDateTime();
        mutableDateTime17.setWeekyear(1970);
        org.joda.time.DateTimeField dateTimeField44 = mutableDateTime17.getRoundingField();
        int int45 = property12.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.addWeekyears(2720);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT1M" + "'", str31, "PT1M");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test05632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05632");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setMillisOfDay(10);
        mutableDateTime3.setSecondOfDay(1970);
        int int18 = mutableDateTime3.getMinuteOfDay();
        int int19 = mutableDateTime3.getWeekyear();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = timeOfDay24.getFields();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTime.Property property28 = dateTime27.monthOfYear();
        org.joda.time.DateTime dateTime30 = dateTime27.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(dateTimeZone32);
        boolean boolean35 = dateTime30.equals((java.lang.Object) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.plusMonths(10);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfYear();
        org.joda.time.DateMidnight dateMidnight39 = property38.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.withDurationAdded((long) 400, 20);
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateMidnight42);
        int int44 = mutableDateTime3.getMonthOfYear();
        mutableDateTime3.setTime(1277592045000L);
        org.joda.time.DateTimeField dateTimeField47 = mutableDateTime3.getRoundingField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertNull(dateTimeField47);
    }

    @Test
    public void test05633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05633");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        boolean boolean15 = dateTime10.equals((java.lang.Object) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(32772);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.Period period26 = period23.negated();
        int int28 = period26.getValue(3);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight14.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withCenturyOfEra(24);
        int int32 = dateMidnight31.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test05634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05634");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime6 = dateTime3.withField(dateTimeFieldType4, 44);
        int int7 = dateTime3.getHourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime3.plusWeeks((int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test05635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05635");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setID("2022-02-21T14:58:42.269+00:00:00.016");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455540783,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T14:58:42.269+00:00:00.016\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=0,MILLISECOND=783,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05636");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTime();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        mutableDateTime4.setZoneRetainFields(dateTimeZone10);
        boolean boolean13 = mutableDateTime4.isEqualNow();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.monthOfYear();
        boolean boolean23 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int26 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "eng", 46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter0.withOffsetParsed();
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withLocale(locale28);
        java.io.Writer writer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(writer30, 61914844800024L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-47) + "'", int26 == (-47));
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test05637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05637");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period10.minusSeconds((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = period10.toDurationFrom(readableInstant15);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime3.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone20);
        int int24 = dateTimeZone20.getOffset((long) 1);
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = dateTimeZone20.getShortName(31553832000L, locale26);
        long long30 = dateTimeZone20.convertLocalToUTC((long) 32770, false);
        mutableDateTime3.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plus((long) 45);
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.weekyear();
        int int39 = dateMidnight35.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight35.minusWeeks((-292275054));
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight35.withFieldAdded(durationFieldType42, (int) 'u');
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minus((long) 535);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight44.minusWeeks(54);
        org.joda.time.DateMidnight.Property property49 = dateMidnight44.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        int int53 = dateTimeZone51.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 1899, dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        int int57 = dateTimeZone55.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime58 = localDate54.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone55);
        int int60 = yearMonthDay59.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight44.withFields((org.joda.time.ReadablePartial) yearMonthDay59);
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight61.withYearOfEra(32730);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.016" + "'", str21, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.016" + "'", str27, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32754L + "'", long30 == 32754L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 21 + "'", int60 == 21);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight64);
    }

    @Test
    public void test05638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05638");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime14.withYearOfCentury(16);
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant19 = mutableDateTime3.toInstant();
        int int20 = mutableDateTime3.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test05639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05639");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        date5.setMinutes(17);
        int int9 = date5.getMinutes();
        int int10 = date5.getDate();
        date5.setSeconds(375);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:23:15 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 17 + "'", int9 == 17);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test05640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05640");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTime(readableInstant1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay0.minusYears(29);
        int int6 = yearMonthDay4.getValue(0);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1993 + "'", int6 == 1993);
    }

    @Test
    public void test05641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05641");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy((int) (byte) 1);
        java.util.Locale locale11 = null;
        int int12 = property7.getMaximumTextLength(locale11);
        org.joda.time.TimeOfDay timeOfDay14 = property7.setCopy(17);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusSeconds((-52));
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withSecondOfMinute(40);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test05642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05642");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay3.plusSeconds(11);
        org.joda.time.DateTime dateTime9 = timeOfDay3.toDateTimeToday();
        java.lang.String str11 = timeOfDay3.toString("20");
        org.joda.time.Chronology chronology12 = timeOfDay3.getChronology();
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "20" + "'", str11, "20");
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test05643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05643");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(53709910L);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(0L);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.minusDays(17);
        int int6 = dateMidnight5.getEra();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test05644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05644");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(3172001, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3172001 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05645");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10, chronology1);
        org.joda.time.Chronology chronology4 = null;
        mutablePeriod2.setPeriod((long) 0, chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutablePeriod2.setPeriod(readableDuration6);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        java.lang.String str12 = period11.toString();
        org.joda.time.Period period13 = period9.withFields((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period15 = period13.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.months();
        int int17 = period15.get(durationFieldType16);
        boolean boolean18 = mutablePeriod2.isSupported(durationFieldType16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 10, chronology20);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod21.setPeriod((long) 0, chronology23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutablePeriod21.setPeriod(readableDuration25);
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        java.lang.String str31 = period30.toString();
        org.joda.time.Period period32 = period28.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period34 = period32.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.months();
        int int36 = period34.get(durationFieldType35);
        boolean boolean37 = mutablePeriod21.isSupported(durationFieldType35);
        int int38 = mutablePeriod2.get(durationFieldType35);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod2.copy();
        mutablePeriod2.addDays(56);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT1M" + "'", str12, "PT1M");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT1M" + "'", str31, "PT1M");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod39);
    }

    @Test
    public void test05646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05646");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((-5), 2025, 68, 16, 1900, 0, 125);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05647");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays(10);
        int int9 = localDateTime8.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMillisOfSecond((-636));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -636 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test05648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05648");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfMinute();
        boolean boolean3 = property2.isLeap();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime7.add(readableDuration12);
        long long14 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundCeiling();
        int int17 = mutableDateTime16.getDayOfYear();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime16.weekOfWeekyear();
        int int19 = mutableDateTime16.getMinuteOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05649");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(536468184000L, periodType1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1899, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval(dateTimeZone14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.Interval interval18 = interval16.toInterval();
        org.joda.time.Interval interval19 = interval16.toInterval();
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval16);
        long long21 = interval16.toDurationMillis();
        org.joda.time.Interval interval22 = interval16.toInterval();
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        java.lang.String str29 = period28.toString();
        org.joda.time.Period period30 = period26.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period32 = period30.plusMillis(100);
        org.joda.time.Period period33 = period30.negated();
        int int35 = period33.getValue(3);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        int int42 = dateTimeZone40.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 1899, dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        int int46 = dateTimeZone44.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str51 = dateTimeZone50.getID();
        org.joda.time.Interval interval52 = yearMonthDay48.toInterval(dateTimeZone50);
        org.joda.time.MutableInterval mutableInterval53 = interval52.toMutableInterval();
        org.joda.time.Interval interval55 = interval52.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology56.getZone();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.monthOfYear();
        org.joda.time.Period period60 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period62 = org.joda.time.Period.minutes(1);
        java.lang.String str63 = period62.toString();
        org.joda.time.Period period64 = period60.withFields((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Period period66 = period64.plusMillis(100);
        org.joda.time.Period period67 = period64.negated();
        org.joda.time.Period period69 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period71 = org.joda.time.Period.minutes(1);
        java.lang.String str72 = period71.toString();
        org.joda.time.Period period73 = period69.withFields((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Period period75 = period73.plusMillis(100);
        boolean boolean76 = period67.equals((java.lang.Object) period75);
        long long79 = chronology56.add((org.joda.time.ReadablePeriod) period67, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField80 = chronology56.dayOfYear();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 2, (long) 4, periodType38, chronology56);
        org.joda.time.Period period82 = period33.withPeriodType(periodType38);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) 3, (long) 21, periodType38);
        org.joda.time.Period period84 = interval22.toPeriod(periodType38);
        org.joda.time.Interval interval85 = interval22.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval87 = interval22.withEndMillis(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.016" + "'", str15, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86400000L + "'", long21 == 86400000L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT1M" + "'", str29, "PT1M");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.016" + "'", str51, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT1M" + "'", str63, "PT1M");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT1M" + "'", str72, "PT1M");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 31553832000L + "'", long79 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval85);
    }

    @Test
    public void test05650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05650");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = period1.plusWeeks(58);
        org.joda.time.Minutes minutes4 = period3.toStandardMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(minutes4);
    }

    @Test
    public void test05651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05651");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = localDate6.toInterval(dateTimeZone7);
        org.joda.time.MutableInterval mutableInterval9 = interval8.toMutableInterval();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(18000059L, periodType11);
        java.lang.String str13 = periodType11.getName();
        org.joda.time.Period period14 = interval8.toPeriod(periodType11);
        int int15 = period14.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType17 = period14.getFieldType(53834288);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "YearMonthDayTime" + "'", str13, "YearMonthDayTime");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test05652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05652");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getDurationType();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withField(dateTimeFieldType4, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight3.minusYears((int) 'u');
        java.util.GregorianCalendar gregorianCalendar10 = dateMidnight9.toGregorianCalendar();
        int int12 = gregorianCalendar10.getGreatestMinimum(0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar10);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        timeZone14.setID("DurationField[seconds]");
        gregorianCalendar10.setTimeZone(timeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'DurationField[seconds]' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05653");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1899-03-10");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = timeOfDay10.toDateTimeToday(dateTimeZone11);
        mutableDateTime5.setZoneRetainFields(dateTimeZone11);
        boolean boolean14 = mutableDateTime5.isEqualNow();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = timeOfDay19.getFields();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTimeToday(dateTimeZone21);
        org.joda.time.DateTime.Property property23 = dateTime22.monthOfYear();
        boolean boolean24 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property25 = dateTime22.weekOfWeekyear();
        boolean boolean26 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime22);
        mutableDateTime1.addWeekyears(32772);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfHour(3390);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3390 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test05654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05654");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.centuryOfEra();
        long long24 = chronology17.add((long) (-1), (-1073174400016L), (int) (byte) 1);
        org.joda.time.DurationField durationField25 = chronology17.centuries();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DurationField durationField28 = chronology17.eras();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1073174400017L) + "'", long24 == (-1073174400017L));
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test05655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05655");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withHourOfDay(3);
        int int4 = dateTime3.getSecondOfMinute();
        int int5 = dateTime3.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 1899, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Interval interval19 = yearMonthDay15.toInterval(dateTimeZone17);
        org.joda.time.MutableInterval mutableInterval20 = interval19.toMutableInterval();
        org.joda.time.Interval interval22 = interval19.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime3.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test05656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05656");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDurationAdded(readableDuration11, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withCenturyOfEra(32772);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.withCenturyOfEra(32769);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths(47016);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        int int21 = localDateTime19.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26 + "'", int21 == 26);
    }

    @Test
    public void test05657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05657");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        long long8 = property7.remainder();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = property7.add(125);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 53941321L + "'", long8 == 53941321L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test05658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05658");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 17);
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        java.lang.String str23 = period22.toString();
        org.joda.time.Period period24 = period20.withFields((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period26 = period22.minusSeconds((int) (short) 100);
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period22);
        mutableDateTime18.addWeekyears(0);
        mutableDateTime18.addHours(2);
        mutableDateTime18.addYears(50);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime18.era();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(18);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 10, chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withMinuteOfHour(0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 10, chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str51 = dateTimeZone50.getID();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime55 = dateTime52.withField(dateTimeFieldType53, 44);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType53.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property57 = localDateTime47.property(dateTimeFieldType53);
        mutableDateTime36.set(dateTimeFieldType53, 49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property60 = yearMonthDay9.property(dateTimeFieldType53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1M" + "'", str23, "PT1M");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.016" + "'", str51, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test05659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05659");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        java.util.Date date9 = dateTime8.toDate();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks(2025);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear(952);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Feb 15 00:52:52 GMT+00:00 1022");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test05660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05660");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1899, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Interval interval15 = yearMonthDay11.toInterval(dateTimeZone13);
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (-2013), periodType1, chronology18);
        org.joda.time.Period period22 = mutablePeriod21.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test05661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05661");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.LocalTime localTime9 = localTime0.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localTime9.getFieldTypes();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.LocalTime localTime16 = property14.addCopy((long) 47);
        int int17 = localTime9.compareTo((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        int int22 = calendar21.getWeekYear();
        java.lang.String str23 = calendar21.getCalendarType();
        java.util.Date date24 = calendar21.getTime();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((java.lang.Object) date24);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        java.lang.String str32 = period31.toString();
        org.joda.time.Period period33 = period29.withFields((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period35 = period33.plusMillis(100);
        org.joda.time.Period period36 = period33.negated();
        int int38 = period36.getValue(3);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 1899, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str54 = dateTimeZone53.getID();
        org.joda.time.Interval interval55 = yearMonthDay51.toInterval(dateTimeZone53);
        org.joda.time.MutableInterval mutableInterval56 = interval55.toMutableInterval();
        org.joda.time.Interval interval58 = interval55.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.monthOfYear();
        org.joda.time.Period period63 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period65 = org.joda.time.Period.minutes(1);
        java.lang.String str66 = period65.toString();
        org.joda.time.Period period67 = period63.withFields((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period69 = period67.plusMillis(100);
        org.joda.time.Period period70 = period67.negated();
        org.joda.time.Period period72 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period74 = org.joda.time.Period.minutes(1);
        java.lang.String str75 = period74.toString();
        org.joda.time.Period period76 = period72.withFields((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Period period78 = period76.plusMillis(100);
        boolean boolean79 = period70.equals((java.lang.Object) period78);
        long long82 = chronology59.add((org.joda.time.ReadablePeriod) period70, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField83 = chronology59.dayOfYear();
        org.joda.time.Period period84 = new org.joda.time.Period((long) 2, (long) 4, periodType41, chronology59);
        org.joda.time.Period period85 = period36.withPeriodType(periodType41);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 3, (long) 21, periodType41);
        org.joda.time.DurationFieldType durationFieldType87 = org.joda.time.DurationFieldType.eras();
        java.lang.String str88 = durationFieldType87.toString();
        boolean boolean89 = mutablePeriod86.isSupported(durationFieldType87);
        int[] intArray90 = mutablePeriod86.getValues();
        org.joda.time.PeriodType periodType91 = mutablePeriod86.getPeriodType();
        org.joda.time.PeriodType periodType92 = periodType91.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period93 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) yearMonthDay25, periodType91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455541438,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=1,MILLISECOND=454,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "gregory" + "'", str23, "gregory");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Feb 21 14:59:01 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT1M" + "'", str32, "PT1M");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.016" + "'", str54, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT1M" + "'", str66, "PT1M");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT1M" + "'", str75, "PT1M");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 31553832000L + "'", long82 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "eras" + "'", str88, "eras");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0, 0, 0, 0, 18]");
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType92);
    }

    @Test
    public void test05662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05662");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.Interval interval15 = interval13.toInterval();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 1899, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str30 = dateTimeZone29.getID();
        org.joda.time.Interval interval31 = yearMonthDay27.toInterval(dateTimeZone29);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Interval interval34 = interval31.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.monthOfYear();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.millis();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.dayOfMonth();
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) interval13, periodType17, chronology35);
        org.joda.time.PeriodType periodType42 = periodType17.withYearsRemoved();
        java.lang.String str43 = periodType17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PeriodType[YearDayTime]" + "'", str43, "PeriodType[YearDayTime]");
    }

    @Test
    public void test05663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05663");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDateTime5.getFields();
        int int10 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.minusYears(295);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test05664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05664");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.halfdayOfDay();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.plusDays(8);
        org.joda.time.LocalDate localDate25 = localDate23.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDate localDate27 = localDate23.plusDays((int) (short) 0);
        int int28 = localDate23.getYear();
        org.joda.time.LocalDate localDate30 = localDate23.minusYears(16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 1899, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        int int38 = dateTimeZone36.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = localDate30.toDateTimeAtMidnight(dateTimeZone36);
        int int42 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDate30);
        boolean boolean43 = dateTimeField20.isSupported();
        long long46 = dateTimeField20.addWrapField((long) 1900, 53710900);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1900L + "'", long46 == 1900L);
    }

    @Test
    public void test05665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05665");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 53);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test05666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05666");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.centuryOfEra();
        int int17 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.minusSeconds(17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.withCenturyOfEra(52);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMonths(32785);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks(53882433);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26 + "'", int17 == 26);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test05667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05667");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 10, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMinuteOfHour(0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 10, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay((int) (byte) 1);
        org.joda.time.Chronology chronology20 = localDateTime17.getChronology();
        boolean boolean21 = dateTimeZone1.isLocalDateTimeGap(localDateTime17);
        mutableDateTime0.setZone(dateTimeZone1);
        mutableDateTime0.setMinuteOfDay(3);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime0.centuryOfEra();
        java.lang.String str26 = property25.getName();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.set(895);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.era();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "centuryOfEra" + "'", str26, "centuryOfEra");
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test05668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05668");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str2 = localTime0.toString(dateTimeFormatter1);
        org.joda.time.LocalTime localTime4 = localTime0.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalTime localTime7 = localTime4.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        int int9 = localTime4.compareTo((org.joda.time.ReadablePartial) localTime8);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localTime8.getValue((-1962));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1962");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str2, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test05669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05669");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        int int5 = property4.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.TimeOfDay timeOfDay7 = property4.withMinimumValue();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = property4.setCopy("ko", locale9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ko\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
    }

    @Test
    public void test05670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05670");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy("45");
        org.joda.time.LocalDate localDate11 = localDate9.minusDays((int) (short) 10);
        org.joda.time.LocalDate.Property property12 = localDate9.dayOfMonth();
        org.joda.time.LocalDate localDate13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = localDate13.withYear(35);
        java.lang.String str16 = localDate13.toString();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1899-11-10" + "'", str16, "1899-11-10");
    }

    @Test
    public void test05671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05671");
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period7 = period3.withFields((org.joda.time.ReadablePeriod) period5);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period9 = period3.normalizedStandard(periodType8);
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1899, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.Interval interval24 = yearMonthDay20.toInterval(dateTimeZone22);
        org.joda.time.Interval interval25 = yearMonthDay20.toInterval();
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        java.lang.String str30 = period29.toString();
        org.joda.time.Period period31 = period27.withFields((org.joda.time.ReadablePeriod) period29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay20.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        int int36 = dateTimeZone34.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 1899, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Interval interval46 = yearMonthDay42.toInterval(dateTimeZone44);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Interval interval49 = interval46.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay32.withChronologyRetainFields(chronology50);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(chronology50);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 54, 16L, periodType8, chronology50);
        org.joda.time.Chronology chronology58 = chronology50.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long66 = chronology50.getDateTimeMillis(29, 4, (-5), 3125, 0, 496, 53711602);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3125 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT1M" + "'", str6, "PT1M");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT1M" + "'", str30, "PT1M");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.016" + "'", str45, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test05672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05672");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        int int13 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime10.withYearOfEra(39);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test05673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05673");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Date date6 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = property8.setCopy(10);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.lang.String str14 = property8.getAsText(locale11);
        java.lang.String str17 = nameProvider0.getShortName(locale11, "PeriodType[Weeks]", "Fri Mar 10 01:35:00 GMT+00:00 1899");
        java.util.Locale locale18 = null;
        java.lang.String str21 = nameProvider0.getName(locale18, "58", "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "10" + "'", str14, "10");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test05674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05674");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(3172000);
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        java.lang.StringBuffer stringBuffer6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = timeOfDay15.toDateTimeToday(dateTimeZone16);
        mutableDateTime10.setZoneRetainFields(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, readableDuration19);
        mutableDateTime10.setMillisOfDay(10);
        mutableDateTime10.setSecondOfDay(1970);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = timeOfDay29.getFields();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTime.Property property33 = dateTime32.monthOfYear();
        org.joda.time.DateTime dateTime35 = dateTime32.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(dateTimeZone37);
        boolean boolean40 = dateTime35.equals((java.lang.Object) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.plusMonths(10);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfYear();
        org.joda.time.DateMidnight.Property property44 = dateMidnight42.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray48 = new org.joda.time.DurationFieldType[] { durationFieldType47 };
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.forFields(durationFieldTypeArray48);
        org.joda.time.Period period50 = new org.joda.time.Period((long) ' ', periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.months();
        int int52 = periodType49.indexOf(durationFieldType51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime10, (org.joda.time.ReadableInstant) dateMidnight42, periodType49);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight42.withYearOfEra(53711602);
        org.joda.time.DateMidnight.Property property56 = dateMidnight42.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer6, (org.joda.time.ReadableInstant) dateMidnight42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.016" + "'", str38, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(durationFieldTypeArray48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test05675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05675");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDurationAdded(readableDuration11, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy((int) 'a');
        org.joda.time.LocalDateTime localDateTime19 = property15.addToCopy(1926);
        org.joda.time.LocalDateTime localDateTime20 = property15.roundCeilingCopy();
        int int21 = localDateTime20.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test05676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05676");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) 100);
        mutablePeriod0.setYears(50);
        org.joda.time.Period period6 = org.joda.time.Period.minutes(54);
        mutablePeriod0.mergePeriod((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Days days8 = period6.toStandardDays();
        org.joda.time.Period period9 = period6.normalizedStandard();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test05677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05677");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period8 = period5.negated();
        int int9 = period8.getMillis();
        org.joda.time.Period period11 = period8.minusDays(32);
        org.joda.time.Period period13 = period11.withSeconds(53870654);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test05678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05678");
        java.util.Date date6 = new java.util.Date((-609), 50412038, 1, 51, 86383026, 0);
        org.junit.Assert.assertEquals(date6.toString(), "Thu May 30 08:06:00 GMT+00:00 4202458");
    }

    @Test
    public void test05679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05679");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.lang.Object[] objArray7 = localeList4.toArray();
        java.util.Date date13 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = localDate14.toInterval(dateTimeZone15);
        int int17 = localDate14.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 1899, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str30 = dateTimeZone29.getID();
        org.joda.time.Interval interval31 = yearMonthDay27.toInterval(dateTimeZone29);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Interval interval34 = interval31.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.monthOfYear();
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period41 = org.joda.time.Period.minutes(1);
        java.lang.String str42 = period41.toString();
        org.joda.time.Period period43 = period39.withFields((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period45 = period43.plusMillis(100);
        org.joda.time.Period period46 = period43.negated();
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period50 = org.joda.time.Period.minutes(1);
        java.lang.String str51 = period50.toString();
        org.joda.time.Period period52 = period48.withFields((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period54 = period52.plusMillis(100);
        boolean boolean55 = period46.equals((java.lang.Object) period54);
        long long58 = chronology35.add((org.joda.time.ReadablePeriod) period46, 31556952000L, (int) '4');
        int[] intArray59 = period46.getValues();
        org.joda.time.LocalDate localDate61 = localDate14.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 24);
        boolean boolean62 = localeList4.remove((java.lang.Object) localDate14);
        int int63 = localDate14.getYearOfEra();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals(date13.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1M" + "'", str42, "PT1M");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT1M" + "'", str51, "PT1M");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 31553832000L + "'", long58 == 31553832000L);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, -1, 0, 0]");
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1899 + "'", int63 == 1899);
    }

    @Test
    public void test05680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.centuryOfEra();
        int int17 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.minusSeconds(17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.withCenturyOfEra(52);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.withMillisOfDay(59);
        java.util.Date date29 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date29);
        int int31 = localDate30.getWeekyear();
        org.joda.time.LocalDate.Property property32 = localDate30.monthOfYear();
        org.joda.time.LocalDate localDate33 = property32.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDate33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26 + "'", int17 == 26);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1899 + "'", int31 == 1899);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test05681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05681");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(74, 14, 99, 122, 29, 0, 899);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05682");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        int int2 = localTime1.getHourOfDay();
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = localTime1.toString("\uae08", locale4);
        org.joda.time.Chronology chronology6 = localTime1.getChronology();
        int int7 = localTime1.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.seconds();
        boolean boolean9 = localTime1.isSupported(durationFieldType8);
        org.joda.time.LocalTime localTime11 = localTime1.minusMillis(1);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localTime1.getValue(379);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 379");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uae08" + "'", str5, "\uae08");
        org.junit.Assert.assertNotNull(chronology6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 116 + "'", int7 == 116);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test05683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05683");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withHourOfDay(3);
        int int4 = dateTime3.getSecondOfMinute();
        int int5 = dateTime3.getMinuteOfHour();
        int int6 = dateTime3.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test05684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05684");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        mutableDateTime4.setZoneRetainFields(dateTimeZone10);
        boolean boolean13 = mutableDateTime4.isEqualNow();
        org.joda.time.DateTimeField dateTimeField14 = mutableDateTime4.getRoundingField();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime4.setSecondOfDay(54);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period25 = org.joda.time.Period.minutes(1);
        java.lang.String str26 = period25.toString();
        org.joda.time.Period period27 = period23.withFields((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period29 = period25.minusSeconds((int) (short) 100);
        mutableDateTime21.add((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period32 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        java.lang.String str35 = period34.toString();
        org.joda.time.Period period36 = period32.withFields((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period38 = period36.plusMillis(100);
        org.joda.time.Period period39 = period36.negated();
        org.joda.time.Period period41 = period39.withMillis(1899);
        org.joda.time.Period period43 = period41.plusMillis(0);
        mutableDateTime21.add((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime45 = mutableDateTime21.toDateTime();
        mutableDateTime21.setWeekyear(1970);
        org.joda.time.DateTimeField dateTimeField48 = mutableDateTime21.getRoundingField();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = timeOfDay53.getFields();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTimeToday(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime56.monthOfYear();
        org.joda.time.DateTime dateTime59 = dateTime56.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str62 = dateTimeZone61.getID();
        org.joda.time.DateMidnight dateMidnight63 = org.joda.time.DateMidnight.now(dateTimeZone61);
        boolean boolean64 = dateTime59.equals((java.lang.Object) dateMidnight63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.plusMonths(10);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfYear();
        org.joda.time.DateMidnight.Property property68 = dateMidnight66.yearOfEra();
        org.joda.time.DateMidnight.Property property69 = dateMidnight66.dayOfYear();
        org.joda.time.DateMidnight dateMidnight70 = property69.roundHalfEvenCopy();
        int int71 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) dateMidnight70);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) dateMidnight70);
        mutableDateTime4.setMillisOfDay(27);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime4.era();
        mutableDateTime4.addYears(25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT1M" + "'", str26, "PT1M");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT1M" + "'", str35, "PT1M");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.016" + "'", str62, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test05685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05685");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1899, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval(dateTimeZone14);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Interval interval19 = interval16.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekyear();
        org.joda.time.DurationField durationField24 = chronology20.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(915, (-14), 17, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -14 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.016" + "'", str15, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test05686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05686");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str6 = dateTimeZone5.getID();
        org.joda.time.DateMidnight dateMidnight7 = org.joda.time.DateMidnight.now(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 1899, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        int int15 = dateTimeZone13.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str20 = dateTimeZone19.getID();
        org.joda.time.Interval interval21 = yearMonthDay17.toInterval(dateTimeZone19);
        long long23 = dateTimeZone5.getMillisKeepLocal(dateTimeZone19, (long) 16);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(dateTimeZone19);
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(974, (int) 'u', 372, 956, chronology26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 974 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.016" + "'", str6, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.016" + "'", str20, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 16L + "'", long23 == 16L);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test05687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05687");
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.PeriodType periodType14 = periodType12.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 1899, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str27 = dateTimeZone26.getID();
        org.joda.time.Interval interval28 = yearMonthDay24.toInterval(dateTimeZone26);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Interval interval31 = interval28.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.hourOfHalfday();
        org.joda.time.Period period36 = new org.joda.time.Period(0L, periodType14, chronology32);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 30, 1645455387509L, periodType10, chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((-292275054), 47, 39, (int) (short) 0, 2025, 86383026, 50, chronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2025 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.016" + "'", str27, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test05688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05688");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 1899, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Interval interval20 = yearMonthDay16.toInterval(dateTimeZone18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.Interval interval22 = interval20.toInterval();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 1899, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str37 = dateTimeZone36.getID();
        org.joda.time.Interval interval38 = yearMonthDay34.toInterval(dateTimeZone36);
        org.joda.time.MutableInterval mutableInterval39 = interval38.toMutableInterval();
        org.joda.time.Interval interval41 = interval38.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.monthOfYear();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DurationField durationField46 = chronology42.millis();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.dayOfMonth();
        org.joda.time.Period period48 = new org.joda.time.Period((java.lang.Object) interval20, periodType24, chronology42);
        org.joda.time.Interval interval50 = interval20.withStartMillis(52L);
        long long51 = interval20.getStartMillis();
        org.joda.time.DateTime dateTime52 = interval20.getStart();
        org.joda.time.Period period57 = new org.joda.time.Period(7, (-1), 3, 26);
        org.joda.time.DateTime dateTime58 = dateTime52.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime58.getZone();
        int int61 = dateTimeZone59.getStandardOffset((-2142575976000L));
        java.lang.String str63 = dateTimeZone59.getShortName((-1645369062981L));
        java.lang.String str65 = dateTimeZone59.getShortName((long) 53710900);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone59);
        java.lang.String str68 = dateTimeZone59.getName(53780650L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(58, (int) (short) 100, 0, 960000, 915, 575, (-59), dateTimeZone59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 960000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.016" + "'", str19, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.016" + "'", str37, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645401599984L + "'", long51 == 1645401599984L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 16 + "'", int61 == 16);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.016" + "'", str63, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.016" + "'", str65, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.016" + "'", str68, "+00:00:00.016");
    }

    @Test
    public void test05689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05689");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setWeekDate(45, 1900, (int) 'u');
        java.util.Calendar.Builder builder7 = builder0.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone10);
        timeZone10.setID("1970");
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        boolean boolean17 = timeZone16.observesDaylightTime();
        boolean boolean18 = timeZone10.hasSameRules(timeZone16);
        java.util.Calendar.Builder builder19 = builder7.setTimeZone(timeZone10);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = timeZone10.getOffset(956, 433, 337, (-57), 0, 1969);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 956");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455542430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=2,MILLISECOND=446,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test05690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05690");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.monthOfYear();
        org.joda.time.LocalDate localDate10 = localDate6.plusYears(861);
        int int11 = localDate10.getDayOfMonth();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test05691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05691");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setYears(16);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period13.minusSeconds((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period13.toDurationFrom(readableInstant18);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration19);
        mutablePeriod0.add((org.joda.time.ReadableDuration) duration19);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod0.copy();
        mutablePeriod22.addMillis(601);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(mutablePeriod22);
    }

    @Test
    public void test05692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05692");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str2 = localTime0.toString(dateTimeFormatter1);
        org.joda.time.LocalTime localTime4 = localTime0.minusSeconds((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.lang.String str6 = localTime0.toString(dateTimeFormatter5);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        java.lang.String str9 = period8.toString();
        org.joda.time.LocalTime localTime11 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, 12);
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusSeconds(3);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        java.lang.String str24 = period23.toString();
        org.joda.time.Period period25 = period21.withFields((org.joda.time.ReadablePeriod) period23);
        int int26 = period21.getMinutes();
        org.joda.time.Period period27 = period21.toPeriod();
        int[] intArray28 = period21.getValues();
        org.joda.time.Period period30 = period21.plusMillis(3172000);
        org.joda.time.Period period32 = period21.multipliedBy(58);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay19.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.LocalTime localTime34 = timeOfDay33.toLocalTime();
        org.joda.time.LocalTime localTime35 = localTime11.withFields((org.joda.time.ReadablePartial) localTime34);
        int int36 = localTime35.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str2, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T00:00:00.000" + "'", str6, "T00:00:00.000");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT1M" + "'", str9, "PT1M");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT1M" + "'", str24, "PT1M");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
    }

    @Test
    public void test05693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05693");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Calendar.Builder builder3 = builder0.setLocale(locale1);
        java.util.Calendar calendar4 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setLenient(false);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod();
        mutablePeriod8.addWeeks((int) (byte) 100);
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 1899, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.Interval interval26 = yearMonthDay22.toInterval(dateTimeZone24);
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        org.joda.time.Interval interval29 = interval26.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.monthOfYear();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        java.lang.String str38 = period37.toString();
        org.joda.time.Period period39 = period35.withFields((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period41 = period39.plusMillis(100);
        long long44 = chronology30.add((org.joda.time.ReadablePeriod) period41, (long) 535, (int) 'u');
        mutablePeriod8.setPeriod((long) 2194, chronology30);
        org.joda.time.Period period47 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period49 = org.joda.time.Period.minutes(1);
        java.lang.String str50 = period49.toString();
        org.joda.time.Period period51 = period47.withFields((org.joda.time.ReadablePeriod) period49);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period53 = period47.normalizedStandard(periodType52);
        org.joda.time.format.PeriodFormatter periodFormatter54 = null;
        java.lang.String str55 = period53.toString(periodFormatter54);
        int int56 = period53.getSeconds();
        int[] intArray58 = chronology30.get((org.joda.time.ReadablePeriod) period53, (long) 210);
        java.util.Calendar.Builder builder59 = builder0.setFields(intArray58);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.016" + "'", str25, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT1M" + "'", str38, "PT1M");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 7032235L + "'", long44 == 7032235L);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT1M" + "'", str50, "PT1M");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "P0D" + "'", str55, "P0D");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0]");
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test05694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05694");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(491, 2021, 1900, 50412038, 874);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50412038 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05695");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = timeOfDay5.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) (short) 0);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime9.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone11);
        long long15 = dateTimeZone11.previousTransition((long) 47);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 9, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusDays(53785619);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 47L + "'", long15 == 47L);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test05696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05696");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.LocalDate localDate11 = property7.setCopy((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtStartOfDay();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test05697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05697");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusSeconds((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusMinutes(56557725);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.plusSeconds(1993);
        int int15 = timeOfDay14.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 1899, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.Interval interval29 = yearMonthDay25.toInterval(dateTimeZone27);
        org.joda.time.Interval interval30 = yearMonthDay25.toInterval();
        org.joda.time.Period period32 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        java.lang.String str35 = period34.toString();
        org.joda.time.Period period36 = period32.withFields((org.joda.time.ReadablePeriod) period34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay25.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 1899, dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str50 = dateTimeZone49.getID();
        org.joda.time.Interval interval51 = yearMonthDay47.toInterval(dateTimeZone49);
        org.joda.time.MutableInterval mutableInterval52 = interval51.toMutableInterval();
        org.joda.time.Interval interval54 = interval51.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology55.getZone();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay37.withChronologyRetainFields(chronology55);
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(chronology55);
        org.joda.time.LocalDate.Property property60 = localDate59.centuryOfEra();
        int int61 = localDate59.size();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str64 = dateTimeZone63.getID();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime68 = dateTime65.withField(dateTimeFieldType66, 44);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType66.getRangeDurationType();
        java.lang.String str70 = dateTimeFieldType66.toString();
        int int71 = localDate59.get(dateTimeFieldType66);
        java.lang.String str72 = dateTimeFieldType66.getName();
        // The following exception was thrown during execution in test generation
        try {
            int int73 = timeOfDay14.get(dateTimeFieldType66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.016" + "'", str28, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT1M" + "'", str35, "PT1M");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.016" + "'", str50, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.016" + "'", str64, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "weekyearOfCentury" + "'", str70, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 22 + "'", int71 == 22);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "weekyearOfCentury" + "'", str72, "weekyearOfCentury");
    }

    @Test
    public void test05698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05698");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        calendar3.setTimeInMillis(31556952000L);
        calendar3.clear(7);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar3);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period18.minusSeconds((int) (short) 100);
        mutableDateTime14.add((org.joda.time.ReadablePeriod) period18);
        mutableDateTime14.addWeekyears(0);
        mutableDateTime14.addHours(2);
        mutableDateTime14.addYears(50);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime14.era();
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime14.copy();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = timeOfDay36.getFields();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTimeToday(dateTimeZone38);
        org.joda.time.DateTime.Property property40 = dateTime39.monthOfYear();
        org.joda.time.DateTime dateTime41 = property40.withMinimumValue();
        org.joda.time.DateTime dateTime42 = property40.roundFloorCopy();
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = timeOfDay49.toDateTimeToday(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minus((long) (short) 0);
        org.joda.time.DateTime dateTime54 = dateTime53.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime53.getZone();
        java.lang.String str56 = dateTimeZone55.getID();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(dateTimeZone55);
        long long59 = dateTimeZone55.previousTransition((long) 47);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 9, dateTimeZone55);
        org.joda.time.DateTime dateTime61 = dateTime42.withZone(dateTimeZone55);
        org.joda.time.Chronology chronology62 = chronology9.withZone(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=31556952000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=49,SECOND=12,MILLISECOND=16,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.016" + "'", str56, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 47L + "'", long59 == 47L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
    }

    @Test
    public void test05699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05699");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMinuteOfHour(9);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusMillis(0);
        int int22 = localDateTime17.size();
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.dayOfWeek();
        int int24 = localDateTime17.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minusDays(999);
        org.joda.time.LocalDateTime.Property property27 = localDateTime17.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test05700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05700");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        boolean boolean11 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.withYearOfCentury(10);
        org.joda.time.DateTime dateTime15 = dateTime13.minus((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime13.minusWeeks(2022);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        java.lang.String str27 = period26.toString();
        org.joda.time.Period period28 = period24.withFields((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period30 = period26.minusSeconds((int) (short) 100);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period37 = period33.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period39 = period37.plusMillis(100);
        org.joda.time.Period period40 = period37.negated();
        org.joda.time.Period period42 = period40.withMillis(1899);
        org.joda.time.Period period44 = period42.plusMillis(0);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime46 = mutableDateTime22.toDateTime();
        mutableDateTime22.setWeekyear(1970);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime22.yearOfCentury();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime22.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.set(32770);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isBefore(readableInstant53);
        int int55 = dateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime52);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime52.setSecondOfMinute((-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M" + "'", str27, "PT1M");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT1M" + "'", str36, "PT1M");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test05701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05701");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime4 = dateTime1.withYearOfCentury(16);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 1899, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.Interval interval19 = yearMonthDay15.toInterval(dateTimeZone17);
        org.joda.time.MutableInterval mutableInterval20 = interval19.toMutableInterval();
        org.joda.time.Interval interval22 = interval19.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.Period period25 = new org.joda.time.Period((long) 3, chronology23);
        org.joda.time.Period period27 = period25.minusDays(11);
        org.joda.time.DateTime dateTime28 = dateTime1.minus((org.joda.time.ReadablePeriod) period27);
        int int29 = period27.size();
        org.joda.time.MutablePeriod mutablePeriod30 = period27.toMutablePeriod();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod30);
    }

    @Test
    public void test05702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05702");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withField(dateTimeFieldType11, 1899);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(1900);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.centuryOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test05703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05703");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Duration duration17 = interval16.toDuration();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str20 = dateTimeZone19.getID();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray25 = new org.joda.time.DurationFieldType[] { durationFieldType24 };
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.forFields(durationFieldTypeArray25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) ' ', periodType26);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime21, periodType26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str31 = dateTimeZone30.getID();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(dateTimeZone30);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        int int37 = dateTimeZone35.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 1899, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str46 = dateTimeZone45.getID();
        org.joda.time.Interval interval47 = yearMonthDay43.toInterval(dateTimeZone45);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.Interval interval49 = interval33.withChronology(chronology48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        int int53 = dateTimeZone51.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 1899, dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        int int57 = dateTimeZone55.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime58 = localDate54.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str62 = dateTimeZone61.getID();
        org.joda.time.Interval interval63 = yearMonthDay59.toInterval(dateTimeZone61);
        org.joda.time.Interval interval64 = yearMonthDay59.toInterval();
        boolean boolean65 = interval49.isBefore((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Interval interval66 = interval49.toInterval();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) 2022);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.plusWeeks(11);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 10, chronology72);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Chronology chronology75 = null;
        mutablePeriod73.setPeriod(readableDuration74, chronology75);
        mutablePeriod73.setWeeks(47);
        org.joda.time.ReadableInterval readableInterval79 = null;
        mutablePeriod73.add(readableInterval79);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight68.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod73, 535);
        org.joda.time.Interval interval83 = interval66.withEnd((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.DateTime dateTime84 = interval83.getStart();
        boolean boolean86 = interval83.contains((long) 53875974);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.016" + "'", str20, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationFieldTypeArray25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.016" + "'", str31, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.016" + "'", str46, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.016" + "'", str62, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test05704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05704");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withHourOfDay(3);
        int int4 = dateTime3.getSecondOfMinute();
        int int5 = dateTime3.getMinuteOfHour();
        boolean boolean6 = dateTime3.isEqualNow();
        org.joda.time.DateTime dateTime8 = dateTime3.minusMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13, 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = timeOfDay24.toDateTimeToday(dateTimeZone25);
        mutableDateTime19.setZoneRetainFields(dateTimeZone25);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(dateTimeZone25);
        mutableDateTime12.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, dateTimeZone25);
        int int31 = dateTime8.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
    }

    @Test
    public void test05705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05705");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = new org.joda.time.DurationFieldType[] { durationFieldType1 };
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.forFields(durationFieldTypeArray2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.forFields(durationFieldTypeArray2);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.forFields(durationFieldTypeArray2);
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        java.lang.String str7 = periodType6.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PeriodType[Minutes]" + "'", str7, "PeriodType[Minutes]");
    }

    @Test
    public void test05706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05706");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str2 = localTime0.toString(dateTimeFormatter1);
        org.joda.time.LocalTime localTime4 = localTime0.minusSeconds((int) (short) -1);
        org.joda.time.LocalTime.Property property5 = localTime0.hourOfDay();
        int int6 = localTime0.size();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = localTime0.isSupported(durationFieldType7);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period15.plusMillis(100);
        org.joda.time.LocalTime localTime18 = localTime9.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.LocalTime localTime20 = localTime18.minusMinutes(0);
        org.joda.time.LocalTime.Property property21 = localTime18.millisOfSecond();
        org.joda.time.LocalTime localTime22 = property21.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = localTime22.toDateTimeToday();
        int int24 = localTime0.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.Chronology chronology25 = localTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfDay();
        org.joda.time.tz.NameProvider nameProvider28 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str34 = nameProvider28.getName(locale29, "Korean", "58");
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = timeOfDay39.toDateTimeToday(dateTimeZone40);
        org.joda.time.TimeOfDay.Property property42 = timeOfDay39.secondOfMinute();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        int int47 = property42.getMaximumTextLength(locale45);
        java.lang.String str50 = nameProvider28.getName(locale45, "1", "\uae08");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider28);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str55 = locale52.getDisplayVariant(locale54);
        java.lang.String str58 = nameProvider28.getName(locale54, "hi!", "ISOChronology[+00:00:00.016]");
        java.lang.String str59 = locale54.getDisplayScript();
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder60.clearExtensions();
        java.util.Locale.Builder builder63 = builder61.setVariant("");
        java.util.Locale locale64 = builder63.build();
        java.lang.String str65 = locale54.getDisplayScript(locale64);
        java.lang.String str66 = locale54.getCountry();
        java.lang.String str67 = dateTimeField26.getAsShortText(71L, locale54);
        java.lang.String str68 = locale54.getVariant();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str2, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(nameProvider28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test05707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05707");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        int int6 = period1.getMinutes();
        org.joda.time.Period period8 = period1.minusDays(1900);
        int int9 = period1.getHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05708");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.LocalDate localDate11 = localDate9.withWeekyear(1970);
        org.joda.time.LocalDate localDate13 = localDate11.withWeekyear(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDate13.get(dateTimeFieldType14);
        java.lang.String str16 = dateTimeFieldType14.toString();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType14.getRangeDurationType();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekOfWeekyear" + "'", str16, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(durationFieldType17);
    }

    @Test
    public void test05709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05709");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfYear();
        org.joda.time.DateTime dateTime9 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = property8.setCopy(34);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test05710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05710");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.minus(readablePeriod6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusMillis(12);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period18 = period15.withField(durationFieldType16, (int) 'a');
        org.joda.time.Period period20 = period18.withDays((int) (short) -1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 10, chronology22);
        org.joda.time.Chronology chronology25 = null;
        mutablePeriod23.setPeriod((long) 0, chronology25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutablePeriod23.setPeriod(readableDuration27);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period32 = org.joda.time.Period.minutes(1);
        java.lang.String str33 = period32.toString();
        org.joda.time.Period period34 = period30.withFields((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period36 = period34.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.months();
        int int38 = period36.get(durationFieldType37);
        boolean boolean39 = mutablePeriod23.isSupported(durationFieldType37);
        org.joda.time.Period period41 = period20.withField(durationFieldType37, 12);
        org.joda.time.Period period43 = period41.minusHours((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay45 = timeOfDay3.withPeriodAdded((org.joda.time.ReadablePeriod) period43, 53891306);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -52 * 53891306");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT1M" + "'", str33, "PT1M");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
    }

    @Test
    public void test05711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05711");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        java.lang.String str2 = mutablePeriod1.toString();
        mutablePeriod1.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 1899, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.Interval interval18 = yearMonthDay14.toInterval(dateTimeZone16);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Interval interval21 = interval18.withStartMillis((long) 32769);
        org.joda.time.Duration duration22 = interval21.toDuration();
        java.lang.String str23 = duration22.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        int int27 = dateTimeZone25.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 1899, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        int int31 = dateTimeZone29.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str36 = dateTimeZone35.getID();
        org.joda.time.Interval interval37 = yearMonthDay33.toInterval(dateTimeZone35);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Interval interval40 = interval37.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.monthOfYear();
        org.joda.time.Period period45 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period47 = org.joda.time.Period.minutes(1);
        java.lang.String str48 = period47.toString();
        org.joda.time.Period period49 = period45.withFields((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period51 = period49.plusMillis(100);
        org.joda.time.Period period52 = period49.negated();
        org.joda.time.Period period54 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period56 = org.joda.time.Period.minutes(1);
        java.lang.String str57 = period56.toString();
        org.joda.time.Period period58 = period54.withFields((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period60 = period58.plusMillis(100);
        boolean boolean61 = period52.equals((java.lang.Object) period60);
        long long64 = chronology41.add((org.joda.time.ReadablePeriod) period52, 31556952000L, (int) '4');
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration22, chronology41);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(0L, chronology41);
        mutablePeriod66.setHours(51);
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder70 = builder69.clearExtensions();
        java.util.Locale.Builder builder72 = builder70.removeUnicodeLocaleAttribute("eng");
        boolean boolean73 = mutablePeriod66.equals((java.lang.Object) builder72);
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("2022-02-21T14:57:16.851+00:00:00.016");
        java.util.Locale.Builder builder76 = builder72.setLocale(locale75);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder78 = builder76.removeUnicodeLocaleAttribute("Property[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Property[hourOfDay] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.016" + "'", str17, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1645487967.215S" + "'", str23, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.016" + "'", str36, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT1M" + "'", str48, "PT1M");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT1M" + "'", str57, "PT1M");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 31553832000L + "'", long64 == 31553832000L);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test05712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05712");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 50);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1899, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Interval interval15 = yearMonthDay11.toInterval(dateTimeZone13);
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 1899, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        int int27 = dateTimeZone25.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str32 = dateTimeZone31.getID();
        org.joda.time.Interval interval33 = yearMonthDay29.toInterval(dateTimeZone31);
        org.joda.time.MutableInterval mutableInterval34 = interval33.toMutableInterval();
        org.joda.time.Interval interval36 = interval33.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now(chronology37);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 3, chronology37);
        int[] intArray41 = chronology17.get((org.joda.time.ReadablePeriod) period39, (long) 21);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay1.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period44 = period39.withSeconds(22);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        int int48 = dateTimeZone46.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 1899, dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        int int52 = dateTimeZone50.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str57 = dateTimeZone56.getID();
        org.joda.time.Interval interval58 = yearMonthDay54.toInterval(dateTimeZone56);
        org.joda.time.Interval interval59 = yearMonthDay54.toInterval();
        org.joda.time.DateTime dateTime60 = yearMonthDay54.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime61 = yearMonthDay54.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime63 = dateTime61.withMillisOfDay(167);
        int int64 = dateTime63.getEra();
        int int65 = dateTime63.getDayOfMonth();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period44, (org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.016" + "'", str32, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 21]");
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 16 + "'", int52 == 16);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.016" + "'", str57, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
    }

    @Test
    public void test05713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05713");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay7 = property6.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.DurationField durationField9 = property6.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay11 = property6.addWrapFieldToCopy(1439);
        int int12 = timeOfDay11.size();
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test05714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05714");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.Interval interval15 = yearMonthDay10.toInterval();
        org.joda.time.Period period17 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period21 = period17.withFields((org.joda.time.ReadablePeriod) period19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 1899, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Interval interval36 = yearMonthDay32.toInterval(dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Interval interval39 = interval36.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay22.withChronologyRetainFields(chronology40);
        org.joda.time.DateMidnight dateMidnight44 = yearMonthDay22.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        int int48 = dateTimeZone46.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 1899, dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        int int52 = dateTimeZone50.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime53 = localDate49.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay22.toDateMidnight(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 895, dateTimeZone50);
        boolean boolean56 = dateTime55.isEqualNow();
        java.util.Date date57 = dateTime55.toDate();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getISO3Country();
        java.util.Calendar calendar60 = dateTime55.toCalendar(locale58);
        java.lang.String str61 = calendar60.getCalendarType();
        long long62 = calendar60.getTimeInMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT1M" + "'", str20, "PT1M");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 16 + "'", int52 == 16);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=895,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=911,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "gregory" + "'", str61, "gregory");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 895L + "'", long62 == 895L);
    }

    @Test
    public void test05715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05715");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeElementParser();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 10, chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusMinutes(4);
        java.util.Date date12 = localDateTime7.toDate();
        java.lang.String str13 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDateTime7);
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer14, 1853L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Aug 06 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00" + "'", str13, "00");
    }

    @Test
    public void test05716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05716");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.add((int) ' ');
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.lang.String str15 = property7.getAsShortText(locale11);
        org.joda.time.MutableDateTime mutableDateTime16 = property7.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setDate(5, 134, 365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 134 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uae08" + "'", str15, "\uae08");
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test05717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05717");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = property11.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test05718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05718");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusHours(27);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusHours(35365);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra(3125);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test05719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05719");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 2022);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusWeeks(11);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10, chronology5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Chronology chronology8 = null;
        mutablePeriod6.setPeriod(readableDuration7, chronology8);
        mutablePeriod6.setWeeks(47);
        org.joda.time.ReadableInterval readableInterval12 = null;
        mutablePeriod6.add(readableInterval12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod6, 535);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateMidnight15, dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = timeOfDay22.toDateTimeToday(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minus((long) (short) 0);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.minus(315705601970L);
        org.joda.time.DateTime dateTime31 = dateTime27.plusHours(53);
        int int32 = dateMidnight15.compareTo((org.joda.time.ReadableInstant) dateTime27);
        int int33 = dateMidnight15.getSecondOfDay();
        org.joda.time.DateMidnight.Property property34 = dateMidnight15.monthOfYear();
        java.lang.String str35 = property34.toString();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Property[monthOfYear]" + "'", str35, "Property[monthOfYear]");
    }

    @Test
    public void test05720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05720");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.LocalDate localDate11 = localDate9.withWeekyear(1970);
        org.joda.time.LocalDate localDate13 = localDate11.withWeekyear(53);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(54);
        org.joda.time.Period period16 = period15.normalizedStandard();
        org.joda.time.Period period17 = period15.toPeriod();
        org.joda.time.LocalDate localDate18 = localDate11.minus((org.joda.time.ReadablePeriod) period15);
        int[] intArray19 = localDate18.getValues();
        int int20 = localDate18.getYear();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 3, 6]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
    }

    @Test
    public void test05721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05721");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property7.withMinimumValue();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType12 = periodType10.withWeeksRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withMinutesRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 1899, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str27 = dateTimeZone26.getID();
        org.joda.time.Interval interval28 = yearMonthDay24.toInterval(dateTimeZone26);
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.Interval interval31 = interval28.withStartMillis((long) 32769);
        boolean boolean33 = interval28.isBefore(1L);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = interval28.isAfter(readableInterval34);
        org.joda.time.Chronology chronology36 = interval28.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) timeOfDay9, periodType14, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.016" + "'", str27, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test05722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05722");
        java.util.Date date5 = new java.util.Date(12, 18, (int) '#', (int) '4', 11);
        int int6 = date5.getSeconds();
        date5.setMonth(6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 10, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusMinutes(4);
        java.util.Date date20 = localDateTime15.toDate();
        int int21 = date20.getMinutes();
        boolean boolean22 = date5.before(date20);
        long long23 = date20.getTime();
        org.junit.Assert.assertEquals(date5.toString(), "Sun Jul 06 04:11:00 GMT+00:00 1913");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Thu Aug 06 00:00:01 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 18748801010L + "'", long23 == 18748801010L);
    }

    @Test
    public void test05723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05723");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        java.lang.String str2 = mutablePeriod1.toString();
        mutablePeriod1.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 1899, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtCurrentTime(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.Interval interval18 = yearMonthDay14.toInterval(dateTimeZone16);
        org.joda.time.MutableInterval mutableInterval19 = interval18.toMutableInterval();
        org.joda.time.Interval interval21 = interval18.withStartMillis((long) 32769);
        org.joda.time.Duration duration22 = interval21.toDuration();
        java.lang.String str23 = duration22.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        int int27 = dateTimeZone25.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 1899, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        int int31 = dateTimeZone29.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str36 = dateTimeZone35.getID();
        org.joda.time.Interval interval37 = yearMonthDay33.toInterval(dateTimeZone35);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Interval interval40 = interval37.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.monthOfYear();
        org.joda.time.Period period45 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period47 = org.joda.time.Period.minutes(1);
        java.lang.String str48 = period47.toString();
        org.joda.time.Period period49 = period45.withFields((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period51 = period49.plusMillis(100);
        org.joda.time.Period period52 = period49.negated();
        org.joda.time.Period period54 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period56 = org.joda.time.Period.minutes(1);
        java.lang.String str57 = period56.toString();
        org.joda.time.Period period58 = period54.withFields((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period60 = period58.plusMillis(100);
        boolean boolean61 = period52.equals((java.lang.Object) period60);
        long long64 = chronology41.add((org.joda.time.ReadablePeriod) period52, 31556952000L, (int) '4');
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration22, chronology41);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(0L, chronology41);
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(chronology41);
        org.joda.time.DurationField durationField68 = chronology41.millis();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT0S" + "'", str2, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.016" + "'", str17, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1645487967.215S" + "'", str23, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.016" + "'", str36, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT1M" + "'", str48, "PT1M");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT1M" + "'", str57, "PT1M");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 31553832000L + "'", long64 == 31553832000L);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test05724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05724");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Chronology chronology15 = yearMonthDay9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfMonth();
        java.lang.String str18 = dateTimeField16.getAsShortText((long) 3);
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Date date25 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekOfWeekyear();
        org.joda.time.LocalDate localDate29 = property27.setCopy(10);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = property27.getAsText(locale30);
        java.lang.String str36 = nameProvider19.getShortName(locale30, "PeriodType[Weeks]", "Fri Mar 10 01:35:00 GMT+00:00 1899");
        int int37 = dateTimeField16.getMaximumShortTextLength(locale30);
        long long39 = dateTimeField16.roundFloor((long) 295);
        java.lang.String str40 = dateTimeField16.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "10" + "'", str33, "10");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "dayOfMonth" + "'", str40, "dayOfMonth");
    }

    @Test
    public void test05725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05725");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusDays(8);
        org.joda.time.LocalDate localDate4 = localDate2.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDate localDate6 = localDate2.plusDays((int) (short) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfCentury((int) (short) 1);
        org.joda.time.LocalDate localDate10 = localDate6.withMonthOfYear(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(31556);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31556 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test05726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05726");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        boolean boolean15 = dateTime10.equals((java.lang.Object) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.plusMonths(10);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfYear();
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.yearOfEra();
        org.joda.time.DateMidnight.Property property20 = dateMidnight17.dayOfYear();
        org.joda.time.DateMidnight dateMidnight21 = property20.roundHalfEvenCopy();
        int int22 = property20.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight23 = property20.roundHalfFloorCopy();
        org.joda.time.Interval interval24 = property20.toInterval();
        org.joda.time.DateMidnight dateMidnight25 = property20.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withYearOfCentury((-81));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -81 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test05727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05727");
        org.joda.time.Period period1 = org.joda.time.Period.millis(53834288);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test05728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05728");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        calendar3.set(0, 52, (int) '#', 10, 0, 9);
        calendar3.set(22, 59, 3, 2022, 5, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str26 = dateTimeZone22.getName((long) (-1));
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale29.getExtension('a');
        java.lang.String str33 = dateTimeZone22.getShortName((long) 8, locale29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 10, chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMinuteOfHour(0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 10, chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.withDurationAdded(readableDuration45, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime38.monthOfYear();
        org.joda.time.LocalDateTime.Property property49 = localDateTime38.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMaximumValue();
        int int51 = property49.getMaximumValueOverall();
        java.util.Locale locale52 = java.util.Locale.US;
        int int53 = property49.getMaximumTextLength(locale52);
        java.lang.String str54 = locale29.getDisplayScript(locale52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = calendar3.getDisplayName((int) (byte) -1, 56637944, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=22,MONTH=59,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=3,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=2022,MINUTE=5,SECOND=1,MILLISECOND=613,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.016" + "'", str26, "+00:00:00.016");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test05729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05729");
        long long6 = java.util.Date.UTC((-503385), 322, 86399, 535, 895, 898);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-15879516832202000L) + "'", long6 == (-15879516832202000L));
    }

    @Test
    public void test05730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05730");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        org.joda.time.Period period21 = period18.negated();
        org.joda.time.Period period23 = period21.withMillis(1899);
        org.joda.time.Period period25 = period23.plusMillis(0);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period28 = period23.plusMinutes(50);
        int int29 = period23.getYears();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test05731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05731");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = localDateTime14.toString("2022-02-21T14:54:40.898Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test05732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05732");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        int int8 = property7.getMinimumValue();
        int int9 = property7.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay11 = property7.addToCopy(57);
        org.joda.time.TimeOfDay timeOfDay12 = property7.getTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 1899, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.Interval interval26 = yearMonthDay22.toInterval(dateTimeZone24);
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        org.joda.time.Interval interval29 = interval26.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        org.joda.time.DurationField durationField32 = chronology30.centuries();
        org.joda.time.DurationFieldType durationFieldType33 = durationField32.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay35 = timeOfDay12.withFieldAdded(durationFieldType33, 27424799);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.016" + "'", str25, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationFieldType33);
    }

    @Test
    public void test05733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05733");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setMillisOfDay(10);
        mutableDateTime3.setSecondOfDay(1970);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str31 = dateTimeZone30.getID();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(dateTimeZone30);
        boolean boolean33 = dateTime28.equals((java.lang.Object) dateMidnight32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.plusMonths(10);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfYear();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray41 = new org.joda.time.DurationFieldType[] { durationFieldType40 };
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.forFields(durationFieldTypeArray41);
        org.joda.time.Period period43 = new org.joda.time.Period((long) ' ', periodType42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.months();
        int int45 = periodType42.indexOf(durationFieldType44);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) dateMidnight35, periodType42);
        org.joda.time.DateMidnight.Property property47 = dateMidnight35.era();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight35.withMillis((long) 61162834);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight35.withCenturyOfEra(22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.016" + "'", str31, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(durationFieldTypeArray41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test05734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05734");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusDays(8);
        org.joda.time.LocalDate localDate4 = localDate2.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDate localDate6 = localDate2.plusDays((int) (short) 0);
        int int7 = localDate2.getYear();
        org.joda.time.LocalDate localDate9 = localDate2.minusYears(16);
        org.joda.time.LocalDate.Property property10 = localDate9.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate13 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate14 = property12.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test05735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05735");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str2 = localTime0.toString(dateTimeFormatter1);
        int int3 = localTime0.getMinuteOfHour();
        org.joda.time.LocalTime localTime5 = localTime0.withSecondOfMinute(44);
        org.joda.time.LocalTime localTime7 = localTime0.plusMillis(37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = localTime7.toString("PT0S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str2, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test05736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05736");
        java.io.IOException iOException4 = new java.io.IOException("Korean");
        java.io.IOException iOException5 = new java.io.IOException("Korean", (java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("53", (java.lang.Throwable) iOException4);
        java.io.IOException iOException9 = new java.io.IOException("45");
        java.lang.Throwable[] throwableArray10 = iOException9.getSuppressed();
        java.io.IOException iOException11 = new java.io.IOException("10", (java.lang.Throwable) iOException9);
        java.io.IOException iOException13 = new java.io.IOException("45");
        java.lang.Throwable[] throwableArray14 = iOException13.getSuppressed();
        iOException9.addSuppressed((java.lang.Throwable) iOException13);
        iOException6.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException17 = new java.io.IOException("coreano (Corea del Sud)", (java.lang.Throwable) iOException13);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test05737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05737");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.LocalTime localTime9 = localTime0.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(0);
        org.joda.time.LocalTime localTime13 = localTime9.plusHours(13);
        org.joda.time.LocalTime.Property property14 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = localTime16.withMillisOfSecond((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test05738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05738");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        int int10 = yearMonthDay9.getMonthOfYear();
        int int11 = yearMonthDay9.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = yearMonthDay9.getField(25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test05739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05739");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        boolean boolean15 = dateTime10.equals((java.lang.Object) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.plusMonths(10);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.monthOfYear();
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        java.lang.String str23 = period22.toString();
        org.joda.time.Period period24 = period20.withFields((org.joda.time.ReadablePeriod) period22);
        int int25 = period20.getMinutes();
        org.joda.time.Period period26 = period20.toPeriod();
        int int27 = period26.getSeconds();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight17.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 5);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight31 = property30.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateMidnight31.toString("gregory");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: g");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1M" + "'", str23, "PT1M");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
    }

    @Test
    public void test05740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05740");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfWeek();
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfCentury();
        long long13 = dateTimeField11.roundFloor((long) (-1739755));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31536000000L) + "'", long13 == (-31536000000L));
    }

    @Test
    public void test05741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05741");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy(15);
        org.joda.time.TimeOfDay timeOfDay11 = property7.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withMinuteOfHour(53);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withSecondOfMinute(43);
        org.joda.time.LocalTime localTime16 = timeOfDay15.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = localTime16.withSecondOfMinute(328);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 328 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test05742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05742");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Chronology chronology15 = yearMonthDay9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        long long19 = dateTimeField16.addWrapField((long) 16, (int) (short) 100);
        boolean boolean20 = dateTimeField16.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 14400016L + "'", long19 == 14400016L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test05743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05743");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1899, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval(dateTimeZone14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.Interval interval18 = interval16.toInterval();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        int int24 = dateTimeZone22.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 1899, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.Interval interval34 = yearMonthDay30.toInterval(dateTimeZone32);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Interval interval37 = interval34.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.monthOfYear();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.millis();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.dayOfMonth();
        org.joda.time.Period period44 = new org.joda.time.Period((java.lang.Object) interval16, periodType20, chronology38);
        org.joda.time.PeriodType periodType45 = periodType20.withMillisRemoved();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 47016, (long) 535, periodType45);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        int int52 = dateTimeZone50.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 1899, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        int int56 = dateTimeZone54.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str61 = dateTimeZone60.getID();
        org.joda.time.Interval interval62 = yearMonthDay58.toInterval(dateTimeZone60);
        org.joda.time.MutableInterval mutableInterval63 = interval62.toMutableInterval();
        org.joda.time.Interval interval65 = interval62.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) (byte) -1, periodType48, chronology66);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology66);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(36L, periodType45, chronology66);
        org.joda.time.DurationField durationField70 = chronology66.centuries();
        long long71 = durationField70.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.016" + "'", str15, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 16 + "'", int52 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.016" + "'", str61, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3155695200000L + "'", long71 == 3155695200000L);
    }

    @Test
    public void test05744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05744");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.DurationField durationField10 = property7.getRangeDurationField();
        org.joda.time.LocalDate localDate11 = property7.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField12 = property7.getField();
        org.joda.time.LocalDate localDate13 = property7.withMaximumValue();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test05745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05745");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.LocalDate.Property property11 = localDate4.dayOfMonth();
        org.joda.time.DateTime dateTime12 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(48);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis((-2448L));
        org.joda.time.DateTime dateTime18 = dateTime14.plusMillis(45);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test05746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05746");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(295, (int) (byte) -1, 53815647, 0, (-1739755), 53821118, 1200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1739755 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05747");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy(29);
        java.lang.String str11 = localDateTime10.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localDateTime10.getValue(53915739);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53915739");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.029" + "'", str11, "1970-01-01T00:00:00.029");
    }

    @Test
    public void test05748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05748");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDurationAdded(readableDuration11, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime4.monthOfYear();
        int int16 = localDateTime4.getYearOfCentury();
        int int17 = localDateTime4.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
    }

    @Test
    public void test05749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05749");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.withField(dateTimeFieldType14, (int) (short) 10);
        int int18 = property8.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.LocalDateTime localDateTime19 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property8.getField();
        org.joda.time.LocalDateTime localDateTime22 = property8.setCopy(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test05750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05750");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        int int16 = localDateTime12.getEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test05751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05751");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = timeOfDay5.getFields();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTimeToday(dateTimeZone7);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period16 = period10.normalizedStandard(periodType15);
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateTime8, periodType15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime8.withChronology(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.minus((long) (byte) 100);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfDay();
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test05752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05752");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(chronology16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusYears(32770);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test05753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05753");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        boolean boolean12 = dateTime7.isAfter((long) '#');
        java.lang.String str13 = dateTime7.toString();
        org.joda.time.DateTime dateTime15 = dateTime7.minusSeconds(292278993);
        org.joda.time.DateTime dateTime17 = dateTime7.withMillis((long) 16);
        boolean boolean18 = dateTime7.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime7.plusDays(2);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        org.joda.time.DateTime dateTime23 = dateTime20.plusSeconds(10);
        org.joda.time.DateTime dateTime25 = dateTime20.withWeekOfWeekyear(24);
        org.joda.time.DateTime dateTime27 = dateTime20.minusDays(2044);
        org.joda.time.DateTime dateTime29 = dateTime20.minusHours(2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T00:52:52.000+00:00:00.016" + "'", str13, "2022-02-21T00:52:52.000+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test05754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05754");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1899, dateTimeZone3);
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtCurrentTime(dateTimeZone10);
        int int14 = dateTimeZone10.getOffsetFromLocal((long) 100);
        java.lang.String str16 = dateTimeZone10.getNameKey((long) 999);
        long long20 = dateTimeZone10.convertLocalToUTC((long) '4', false, (long) 52);
        int int22 = dateTimeZone10.getStandardOffset(16L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval23 = new org.joda.time.Interval(1000L, (long) 144, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 36L + "'", long20 == 36L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
    }

    @Test
    public void test05755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05755");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        java.lang.String str1 = mutablePeriod0.toString();
        mutablePeriod0.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 1899, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.Interval interval17 = yearMonthDay13.toInterval(dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Interval interval20 = interval17.withStartMillis((long) 32769);
        org.joda.time.Duration duration21 = interval20.toDuration();
        java.lang.String str22 = duration21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 1899, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Interval interval36 = yearMonthDay32.toInterval(dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Interval interval39 = interval36.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.monthOfYear();
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        java.lang.String str47 = period46.toString();
        org.joda.time.Period period48 = period44.withFields((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period50 = period48.plusMillis(100);
        org.joda.time.Period period51 = period48.negated();
        org.joda.time.Period period53 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period55 = org.joda.time.Period.minutes(1);
        java.lang.String str56 = period55.toString();
        org.joda.time.Period period57 = period53.withFields((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period59 = period57.plusMillis(100);
        boolean boolean60 = period51.equals((java.lang.Object) period59);
        long long63 = chronology40.add((org.joda.time.ReadablePeriod) period51, 31556952000L, (int) '4');
        mutablePeriod0.setPeriod((org.joda.time.ReadableDuration) duration21, chronology40);
        org.joda.time.DateMidnight dateMidnight65 = org.joda.time.DateMidnight.now(chronology40);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.withYear(2022);
        int int68 = dateMidnight67.getEra();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0S" + "'", str1, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1645487967.215S" + "'", str22, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT1M" + "'", str47, "PT1M");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT1M" + "'", str56, "PT1M");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 31553832000L + "'", long63 == 31553832000L);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test05756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05756");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        int int4 = dateTime3.getDayOfWeek();
        int int5 = dateTime3.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test05757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05757");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(117L);
    }

    @Test
    public void test05758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05758");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.LocalDate.Property property8 = localDate6.monthOfYear();
        org.joda.time.LocalDate localDate10 = property8.addToCopy(21);
        org.joda.time.LocalDate localDate12 = property8.setCopy(9);
        org.joda.time.LocalDate localDate14 = localDate12.withWeekyear(52);
        org.joda.time.LocalDate localDate16 = localDate14.plusMonths(53750385);
        org.joda.time.LocalDate.Property property17 = localDate14.era();
        org.joda.time.Chronology chronology18 = localDate14.getChronology();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test05759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05759");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy("45");
        org.joda.time.LocalDate localDate11 = property7.addToCopy((int) '4');
        org.joda.time.LocalDate localDate12 = property7.roundFloorCopy();
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfCentury();
        org.joda.time.LocalDate localDate15 = localDate12.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(dateTimeZone17);
        int int21 = dateTimeZone17.getOffset((long) 1);
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = dateTimeZone17.getShortName(31553832000L, locale23);
        long long27 = dateTimeZone17.convertLocalToUTC((long) 32770, false);
        long long30 = dateTimeZone17.convertLocalToUTC(4406400000L, false);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight32 = localDate12.toDateMidnight(dateTimeZone17);
        int int33 = dateMidnight32.getSecondOfDay();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.016" + "'", str24, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32754L + "'", long27 == 32754L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 4406399984L + "'", long30 == 4406399984L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test05760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05760");
        java.util.Date date3 = new java.util.Date((int) (short) 10, (int) (short) 100, (int) '#');
        int int4 = date3.getMinutes();
        int int5 = date3.getSeconds();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate6.withFieldAdded(durationFieldType8, 759);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'eras' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Tue Jun 04 00:00:00 GMT+00:00 1918");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
    }

    @Test
    public void test05761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05761");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        mutableDateTime3.addWeekyears(0);
        mutableDateTime3.addHours(2);
        mutableDateTime3.addYears(50);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.era();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        mutableDateTime3.setZone(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setMinuteOfHour((-2447));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2447 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test05762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05762");
        java.util.Locale locale1 = new java.util.Locale("2022-02-21T14:57:56.282+00:00:00.016");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale1.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 2022-02-21t14:57:56.282+00:00:00.016");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-21t14:57:56.282+00:00:00.016");
    }

    @Test
    public void test05763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05763");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        java.lang.String str14 = dateTimeZone11.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
    }

    @Test
    public void test05764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05764");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        org.joda.time.Period period21 = period18.negated();
        org.joda.time.Period period23 = period21.withMillis(1899);
        org.joda.time.Period period25 = period23.plusMillis(0);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime27 = mutableDateTime3.toDateTime();
        mutableDateTime3.setWeekyear(1970);
        org.joda.time.DateTimeField dateTimeField30 = mutableDateTime3.getRoundingField();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = timeOfDay35.getFields();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTimeToday(dateTimeZone37);
        org.joda.time.DateTime.Property property39 = dateTime38.monthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime38.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str44 = dateTimeZone43.getID();
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(dateTimeZone43);
        boolean boolean46 = dateTime41.equals((java.lang.Object) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.plusMonths(10);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.yearOfEra();
        org.joda.time.DateMidnight.Property property51 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight52 = property51.roundHalfEvenCopy();
        int int53 = mutableDateTime3.compareTo((org.joda.time.ReadableInstant) dateMidnight52);
        boolean boolean55 = mutableDateTime3.isBefore((long) 535);
        org.joda.time.DateTime dateTime56 = mutableDateTime3.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = timeOfDay61.toDateTimeToday(dateTimeZone62);
        org.joda.time.TimeOfDay.Property property64 = timeOfDay61.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay65 = property64.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        int int70 = dateTimeZone68.getStandardOffset((long) 100);
        java.lang.String str72 = dateTimeZone68.getNameKey((long) (byte) 10);
        org.joda.time.DateTime dateTime73 = timeOfDay67.toDateTimeToday(dateTimeZone68);
        boolean boolean75 = dateTime73.isAfter((long) 56);
        boolean boolean76 = mutableDateTime3.isAfter((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTimeZone dateTimeZone77 = mutableDateTime3.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.016" + "'", str44, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 16 + "'", int70 == 16);
// flaky:         org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeZone77);
    }

    @Test
    public void test05765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05765");
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1899, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Interval interval23 = yearMonthDay19.toInterval(dateTimeZone21);
        org.joda.time.Interval interval24 = yearMonthDay19.toInterval();
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.Chronology chronology26 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (-2013), periodType9, chronology26);
        org.joda.time.PeriodType periodType30 = mutablePeriod29.getPeriodType();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 1899, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        int int38 = dateTimeZone36.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str43 = dateTimeZone42.getID();
        org.joda.time.Interval interval44 = yearMonthDay40.toInterval(dateTimeZone42);
        org.joda.time.Interval interval45 = yearMonthDay40.toInterval();
        org.joda.time.Period period47 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period49 = org.joda.time.Period.minutes(1);
        java.lang.String str50 = period49.toString();
        org.joda.time.Period period51 = period47.withFields((org.joda.time.ReadablePeriod) period49);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay40.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        int int56 = dateTimeZone54.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 1899, dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        int int60 = dateTimeZone58.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime61 = localDate57.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str65 = dateTimeZone64.getID();
        org.joda.time.Interval interval66 = yearMonthDay62.toInterval(dateTimeZone64);
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        org.joda.time.Interval interval69 = interval66.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = chronology70.getZone();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay52.withChronologyRetainFields(chronology70);
        org.joda.time.DurationField durationField74 = chronology70.halfdays();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.year();
        org.joda.time.Period period76 = new org.joda.time.Period(0L, (long) 30, periodType30, chronology70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(2720, 2720, 16, (-26701436), 47032, 32769, chronology70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -26701436 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.016" + "'", str22, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.016" + "'", str43, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT1M" + "'", str50, "PT1M");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 16 + "'", int60 == 16);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.016" + "'", str65, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test05766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05766");
        java.util.Locale locale0 = java.util.Locale.UK;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay10.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay17 = property15.addWrapFieldToCopy(10);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        java.util.Date date24 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate28 = property26.setCopy("45");
        org.joda.time.LocalDate localDate30 = localDate28.minusDays((int) (short) 10);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDate30, 292278993, locale32);
        java.lang.String str34 = locale0.getDisplayLanguage(locale32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals(date24.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "292278993" + "'", str33, "292278993");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uc601\uc5b4" + "'", str34, "\uc601\uc5b4");
    }

    @Test
    public void test05767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05767");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(43);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test05768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05768");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone4);
        int int8 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) mutableDateTime7);
        java.lang.String str9 = mutableDateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1899, dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.Interval interval23 = yearMonthDay19.toInterval(dateTimeZone21);
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.Interval interval26 = interval23.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology27.getZone();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.monthOfYear();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.Period period32 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        java.lang.String str35 = period34.toString();
        org.joda.time.Period period36 = period32.withFields((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period38 = period36.plusMillis(100);
        long long41 = chronology27.add((org.joda.time.ReadablePeriod) period38, (long) 535, (int) 'u');
        org.joda.time.DateTimeField dateTimeField42 = chronology27.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology27.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setMonthOfYear(1200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1200000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:59:04.780+00:00:00.016" + "'", str9, "2022-02-21T14:59:04.780+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.016" + "'", str22, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT1M" + "'", str35, "PT1M");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 7032235L + "'", long41 == 7032235L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
    }

    @Test
    public void test05769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05769");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        boolean boolean15 = dateTime10.equals((java.lang.Object) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.plusMonths(10);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withCenturyOfEra(17);
        int int20 = dateMidnight14.getMillisOfDay();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight14.withYearOfCentury(0);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusDays((-1));
        int int25 = dateMidnight24.getDayOfMonth();
        org.joda.time.DateMidnight.Property property26 = dateMidnight24.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight24.minusMonths((-26701436));
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test05770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05770");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime10.getZone();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime10.add(readableDuration12, 9);
        mutableDateTime10.setMillisOfDay(690);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test05771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05771");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        java.lang.String str15 = dateTimeZone11.getNameKey((long) (byte) 10);
        org.joda.time.DateTime dateTime16 = timeOfDay10.toDateTimeToday(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        java.util.TimeZone timeZone18 = dateTimeZone11.toTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(dateTimeZone21);
        int int25 = dateTimeZone21.getOffset((long) 1);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        java.util.TimeZone timeZone27 = dateTimeZone21.toTimeZone();
        timeZone27.setID("\uae08");
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.lang.String str31 = timeZone27.getID();
        calendar19.setTimeZone(timeZone27);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period40 = period38.plusMillis(100);
        org.joda.time.Period period41 = period38.negated();
        int int42 = period41.getMillis();
        org.joda.time.Period period44 = period41.minusDays(32);
        org.joda.time.Period period46 = period44.plusDays(59);
        boolean boolean47 = calendar19.before((java.lang.Object) period46);
        int int49 = calendar19.getMaximum(0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "\uae08,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=171,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.016" + "'", str22, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "\uae08,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=171,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uae08" + "'", str31, "\uae08");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test05772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05772");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        int int4 = calendar3.getWeekYear();
        java.lang.String str5 = calendar3.getCalendarType();
        java.util.Date date6 = calendar3.getTime();
        int int7 = date6.getDate();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date6);
        java.time.Instant instant9 = date6.toInstant();
        int int10 = date6.getSeconds();
        date6.setYear(376);
        int int13 = date6.getDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455545178,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=194,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gregory" + "'", str5, "gregory");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 14:59:05 GMT+00:00 2276");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(instant9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test05773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05773");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.addWrapFieldToCopy(10);
        org.joda.time.DateTimeField dateTimeField17 = property14.getField();
        java.util.Date date23 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        org.joda.time.LocalDate.Property property25 = localDate24.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property25.setCopy("45");
        org.joda.time.LocalDate localDate29 = localDate27.minusDays((int) (short) 10);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDate29, 292278993, locale31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDate29.getFieldTypes();
        org.joda.time.LocalDate localDate35 = localDate29.withWeekyear(3232002);
        org.joda.time.LocalDate.Property property36 = localDate35.yearOfEra();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 10, chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withMinuteOfHour(0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 10, chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusDays(17);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withMillisOfDay(32772);
        int int56 = localDateTime49.getYearOfEra();
        org.joda.time.LocalDateTime.Property property57 = localDateTime49.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period59 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDateTime58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "292278993" + "'", str32, "292278993");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test05774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05774");
        org.joda.time.Period period1 = org.joda.time.Period.days(2027);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test05775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05775");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        org.joda.time.Period period21 = period18.negated();
        org.joda.time.Period period23 = period21.withMillis(1899);
        org.joda.time.Period period25 = period23.plusMillis(0);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime27 = mutableDateTime3.toDateTime();
        mutableDateTime3.setWeekyear(1970);
        org.joda.time.DateTimeField dateTimeField30 = mutableDateTime3.getRoundingField();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = timeOfDay35.getFields();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTimeToday(dateTimeZone37);
        org.joda.time.DateTime.Property property39 = dateTime38.monthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime38.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str44 = dateTimeZone43.getID();
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(dateTimeZone43);
        boolean boolean46 = dateTime41.equals((java.lang.Object) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.plusMonths(10);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight.Property property50 = dateMidnight48.yearOfEra();
        org.joda.time.DateMidnight.Property property51 = dateMidnight48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight52 = property51.roundHalfEvenCopy();
        int int53 = mutableDateTime3.compareTo((org.joda.time.ReadableInstant) dateMidnight52);
        mutableDateTime3.add((long) 25);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime3.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime56.setMinuteOfHour(491);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 491 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.016" + "'", str44, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime56);
    }

    @Test
    public void test05776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05776");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property1.addCopy((long) 'a');
        org.joda.time.LocalTime localTime4 = property1.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property1.getField();
        org.joda.time.LocalTime localTime6 = property1.roundHalfFloorCopy();
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test05777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05777");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period23 = period16.withMillis(491);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test05778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05778");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.DurationField durationField10 = property7.getRangeDurationField();
        java.lang.String str11 = durationField10.toString();
        long long14 = durationField10.add((long) 1970, (int) (short) 10);
        java.util.Date date20 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date20);
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.joda.time.LocalDate localDate24 = property22.setCopy(10);
        org.joda.time.DurationField durationField25 = property22.getRangeDurationField();
        int int26 = durationField10.compareTo(durationField25);
        long long29 = durationField10.subtract((-1L), 36L);
        java.lang.String str30 = durationField10.toString();
        long long33 = durationField10.subtract((long) (short) 0, 99);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = durationField10.getMillis(276998233620000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 276998233620000000 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[weekyears]" + "'", str11, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 315705601970L + "'", long14 == 315705601970L);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1135814400001L) + "'", long29 == (-1135814400001L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DurationField[weekyears]" + "'", str30, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3123792000000L) + "'", long33 == (-3123792000000L));
    }

    @Test
    public void test05779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05779");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setMillisOfDay(10);
        mutableDateTime3.setSecondOfDay(1970);
        int int18 = mutableDateTime3.getMinuteOfDay();
        mutableDateTime3.setMinuteOfDay(44);
        mutableDateTime3.add((long) 860);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = timeOfDay27.toDateTimeToday(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minus((long) (short) 0);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        int int35 = dateTimeZone33.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = dateTime32.withZone(dateTimeZone33);
        org.joda.time.DateTime.Property property38 = dateTime37.millisOfDay();
        org.joda.time.DateTime.Property property39 = dateTime37.monthOfYear();
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) dateTime37);
        java.util.Locale.Category category42 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale43 = java.util.Locale.getDefault(category42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str46 = dateTimeZone45.getID();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.lang.String str52 = dateTimeZone45.getName((long) 5, locale48);
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = timeOfDay57.toDateTimeToday(dateTimeZone58);
        org.joda.time.TimeOfDay.Property property60 = timeOfDay57.secondOfMinute();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str64 = locale61.getDisplayVariant(locale63);
        int int65 = property60.getMaximumTextLength(locale63);
        java.lang.String str66 = locale48.getDisplayCountry(locale63);
        java.util.Locale.setDefault(category42, locale48);
        java.util.Locale locale68 = java.util.Locale.getDefault(category42);
        java.util.Locale locale69 = java.util.Locale.getDefault(category42);
        java.lang.String str70 = dateTime37.toString("9", locale69);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.FORMAT + "'", category42.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.016" + "'", str46, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.016" + "'", str52, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "9" + "'", str70, "9");
    }

    @Test
    public void test05780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05780");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay3.plusSeconds(11);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = timeOfDay13.toDateTimeToday(dateTimeZone14);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay13.secondOfMinute();
        int int17 = property16.getMinimumValue();
        int int18 = property16.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay19 = property16.getTimeOfDay();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay3, (org.joda.time.ReadablePartial) timeOfDay19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.withMillisOfSecond(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = timeOfDay22.getField(601);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 601");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test05781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05781");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone11);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.monthOfYear();
        org.joda.time.DateMidnight dateMidnight16 = property15.withMinimumValue();
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05782");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        int int4 = dateMidnight3.getMinuteOfDay();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight7 = property5.addToCopy(473558400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 473558400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test05783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05783");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.halfdayOfDay();
        java.lang.String str18 = dateTimeField17.toString();
        long long21 = dateTimeField17.addWrapField((-1073174400016L), 40);
        long long23 = dateTimeField17.remainder(9172000L);
        java.util.Date date29 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date29);
        org.joda.time.LocalDate.Property property31 = localDate30.weekOfWeekyear();
        org.joda.time.LocalDate localDate33 = property31.setCopy(10);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = property31.getAsText(locale34);
        int int38 = dateTimeField17.getMaximumShortTextLength(locale34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = locale34.getUnicodeLocaleType("2022-02-21T14:57:11.518+00:00:00.016");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-21T14:57:11.518+00:00:00.016");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DateTimeField[halfdayOfDay]" + "'", str18, "DateTimeField[halfdayOfDay]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1073174400016L) + "'", long21 == (-1073174400016L));
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9172016L + "'", long23 == 9172016L);
        org.junit.Assert.assertEquals(date29.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "10" + "'", str37, "10");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test05784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05784");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(1899);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str7 = timeOfDay3.toString(dateTimeFormatter6);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        java.lang.String str12 = period11.toString();
        org.joda.time.Period period13 = period9.withFields((org.joda.time.ReadablePeriod) period11);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay3.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.minusMillis(47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = timeOfDay14.getFieldType(1905);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1905");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00" + "'", str7, "00");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT1M" + "'", str12, "PT1M");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test05785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05785");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setScript("32");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 32 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test05786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05786");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period3.minusSeconds((int) (short) 100);
        org.joda.time.Period period9 = period7.plusMonths(18);
        java.lang.String str10 = period9.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "P18MT1M-100S" + "'", str10, "P18MT1M-100S");
    }

    @Test
    public void test05787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05787");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period15.plusMillis(100);
        org.joda.time.Period period18 = period15.negated();
        org.joda.time.Period period20 = period18.withMillis(1899);
        org.joda.time.Minutes minutes21 = period18.toStandardMinutes();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Period period23 = period18.minus(readablePeriod22);
        boolean boolean24 = property9.equals((java.lang.Object) readablePeriod22);
        org.joda.time.DateTimeField dateTimeField25 = property9.getField();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Set<java.lang.Character> charSet31 = locale29.getExtensionKeys();
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((long) 45);
        org.joda.time.DateMidnight.Property property39 = dateMidnight36.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) '4', chronology43);
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.secondOfMinute();
        int[] intArray47 = new int[] { 21 };
        int int48 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay44, intArray47);
        long long50 = dateTimeField40.roundCeiling(10L);
        long long52 = dateTimeField40.roundFloor((long) 3);
        java.lang.String str53 = dateTimeField40.toString();
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = locale54.getScript();
        int int57 = dateTimeField40.getMaximumShortTextLength(locale54);
        java.lang.String str58 = locale29.getDisplayLanguage(locale54);
        long long59 = dateTimeField25.set((-220751999992L), "13", locale54);
        java.lang.Object obj60 = null;
        boolean boolean61 = locale54.equals(obj60);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[21]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 31795199984L + "'", long50 == 31795199984L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-259200016L) + "'", long52 == (-259200016L));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DateTimeField[weekyear]" + "'", str53, "DateTimeField[weekyear]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str55, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-220751986992L) + "'", long59 == (-220751986992L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test05788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05788");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period17 = org.joda.time.Period.minutes(1);
        java.lang.String str18 = period17.toString();
        org.joda.time.Period period19 = period15.withFields((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period21 = period17.minusSeconds((int) (short) 100);
        mutableDateTime13.add((org.joda.time.ReadablePeriod) period17);
        mutableDateTime13.addWeekyears(0);
        mutableDateTime13.addHours(2);
        mutableDateTime13.addYears(50);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime13.era();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.addWrapField(18);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 10, chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMinuteOfHour(0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 10, chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str46 = dateTimeZone45.getID();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime50 = dateTime47.withField(dateTimeFieldType48, 44);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType48.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property52 = localDateTime42.property(dateTimeFieldType48);
        mutableDateTime31.set(dateTimeFieldType48, 49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime56 = localTime9.withField(dateTimeFieldType48, (-57));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT1M" + "'", str18, "PT1M");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.016" + "'", str46, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test05789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05789");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property10 = dateTime6.property(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((java.lang.Object) property10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05790");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = timeOfDay15.toDateTimeToday(dateTimeZone16);
        mutableDateTime10.setZoneRetainFields(dateTimeZone16);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone16);
        mutableDateTime3.setZoneRetainFields(dateTimeZone16);
        mutableDateTime3.addMinutes(999);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime27 = property23.set(40);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime27.copy();
        mutableDateTime27.setTime(31556951L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test05791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05791");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        org.joda.time.YearMonthDay yearMonthDay18 = property14.addToCopy(2194);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTimeAtMidnight(dateTimeZone20);
        boolean boolean22 = dateTime21.isBeforeNow();
        org.joda.time.DateTime dateTime23 = dateTime21.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "21" + "'", str15, "21");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test05792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05792");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(1899);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str7 = timeOfDay3.toString(dateTimeFormatter6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.withMinuteOfHour(4);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay3.plusMinutes(1971);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00" + "'", str7, "00");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test05793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05793");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        int int4 = dateTime3.getDayOfWeek();
        org.joda.time.DateTime dateTime6 = dateTime3.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withEra(41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test05794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05794");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10, chronology1);
        org.joda.time.Chronology chronology4 = null;
        mutablePeriod2.setPeriod((long) 0, chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutablePeriod2.setPeriod(readableDuration6);
        int int8 = mutablePeriod2.getMinutes();
        int int9 = mutablePeriod2.getMillis();
        org.joda.time.format.PeriodFormatter periodFormatter10 = null;
        java.lang.String str11 = mutablePeriod2.toString(periodFormatter10);
        mutablePeriod2.setPeriod(12L, (long) ' ');
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
    }

    @Test
    public void test05795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05795");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(54);
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.joda.time.Period period4 = period2.withHours(3);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.Period period15 = period12.negated();
        int int17 = period15.getValue(3);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        int int24 = dateTimeZone22.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 1899, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.Interval interval34 = yearMonthDay30.toInterval(dateTimeZone32);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Interval interval37 = interval34.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.monthOfYear();
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        java.lang.String str45 = period44.toString();
        org.joda.time.Period period46 = period42.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period48 = period46.plusMillis(100);
        org.joda.time.Period period49 = period46.negated();
        org.joda.time.Period period51 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period53 = org.joda.time.Period.minutes(1);
        java.lang.String str54 = period53.toString();
        org.joda.time.Period period55 = period51.withFields((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period57 = period55.plusMillis(100);
        boolean boolean58 = period49.equals((java.lang.Object) period57);
        long long61 = chronology38.add((org.joda.time.ReadablePeriod) period49, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField62 = chronology38.dayOfYear();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 2, (long) 4, periodType20, chronology38);
        org.joda.time.Period period64 = period15.withPeriodType(periodType20);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 3, (long) 21, periodType20);
        org.joda.time.Period period66 = period2.normalizedStandard(periodType20);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT1M" + "'", str45, "PT1M");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT1M" + "'", str54, "PT1M");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 31553832000L + "'", long61 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    public void test05796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05796");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        calendar3.setTimeInMillis(31556952000L);
        java.util.Date date11 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.fromDateFields(date11);
        date11.setTime((-1L));
        java.util.Date date20 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int21 = date20.getSeconds();
        boolean boolean22 = date11.after(date20);
        calendar3.setTime(date20);
        calendar3.clear(8);
        java.util.Date date31 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        java.time.Instant instant32 = date31.toInstant();
        calendar3.setTime(date31);
        java.lang.String[] strArray43 = new java.lang.String[] { "+00:00:00.016", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "46", "hi!", "45", "00", "45", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        strSet44.clear();
        boolean boolean47 = strSet44.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        int int51 = dateTimeZone49.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 1899, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        int int55 = dateTimeZone53.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime56 = localDate52.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str60 = dateTimeZone59.getID();
        org.joda.time.Interval interval61 = yearMonthDay57.toInterval(dateTimeZone59);
        org.joda.time.Interval interval62 = yearMonthDay57.toInterval();
        org.joda.time.Chronology chronology63 = yearMonthDay57.getChronology();
        long long67 = chronology63.add((long) 535, 366L, 11);
        org.joda.time.DateTimeField dateTimeField68 = chronology63.dayOfYear();
        boolean boolean69 = strSet44.contains((java.lang.Object) dateTimeField68);
        java.util.Iterator<java.lang.String> strItor70 = strSet44.iterator();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
        java.lang.Integer int72 = dateTimeFormatter71.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone73 = dateTimeFormatter71.getZone();
        boolean boolean74 = strSet44.contains((java.lang.Object) dateTimeZone73);
        boolean boolean75 = calendar3.before((java.lang.Object) strSet44);
        java.lang.Object obj76 = calendar3.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-2234643900016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1899,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=69,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=35,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals(date31.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 16 + "'", int51 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 16 + "'", int55 == 16);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.016" + "'", str60, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 4561L + "'", long67 == 4561L);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "java.util.GregorianCalendar[time=-2234643900016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1899,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=69,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=35,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "java.util.GregorianCalendar[time=-2234643900016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1899,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=69,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=35,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "java.util.GregorianCalendar[time=-2234643900016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1899,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=69,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=35,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
    }

    @Test
    public void test05797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05797");
        java.util.Locale locale3 = new java.util.Locale("2022-02-21T14:54:17.223Z", "ko", "2022-02-21T14:55:18.137+00:00:00.016");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-21t14:54:17.223z_KO_2022-02-21T14:55:18.137+00:00:00.016");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test05798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05798");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.DurationField durationField10 = property7.getRangeDurationField();
        org.joda.time.LocalDate localDate11 = property7.roundHalfEvenCopy();
        java.lang.String str12 = property7.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property7.getField();
        org.joda.time.LocalDate localDate14 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test05799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05799");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((int) (byte) 100, 769, 365, (int) 'u', 898, 56586397, 874);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05800");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1899, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Interval interval35 = yearMonthDay31.toInterval(dateTimeZone33);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Interval interval38 = interval35.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay21.withChronologyRetainFields(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.year();
        org.joda.time.DurationField durationField45 = chronology39.halfdays();
        org.joda.time.DurationField durationField46 = chronology39.days();
        long long49 = durationField46.getDifferenceAsLong(895L, 24L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test05801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05801");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        boolean boolean9 = dateTime6.isBeforeNow();
        org.joda.time.DateTime dateTime11 = dateTime6.minusMonths((-292275054));
        org.joda.time.DateTime dateTime13 = dateTime6.withSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, dateTimeZone16);
        boolean boolean20 = dateTimeZone16.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) (short) 0, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.016" + "'", str17, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test05802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05802");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(9125135385000L, chronology18);
        boolean boolean23 = mutableDateTime21.isAfter((long) (-609));
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test05803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05803");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        boolean boolean12 = mutableDateTime3.isEqualNow();
        org.joda.time.DateTimeField dateTimeField13 = mutableDateTime3.getRoundingField();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18, 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.secondOfDay();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) mutableDateTime17, periodType23);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.secondOfDay();
        long long28 = mutableDateTime26.getMillis();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.millis();
        mutableDateTime26.add(durationFieldType29, (-45));
        int int32 = mutableDateTime26.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645455545960L + "'", long28 == 1645455545960L);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
    }

    @Test
    public void test05804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05804");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        boolean boolean3 = timeZone2.observesDaylightTime();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str6 = locale4.getCountry();
        java.lang.String str7 = locale4.getScript();
        java.lang.String str8 = locale4.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455545978,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=994,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr-CA" + "'", str8, "fr-CA");
    }

    @Test
    public void test05805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05805");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1899, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Interval interval15 = yearMonthDay11.toInterval(dateTimeZone13);
        org.joda.time.Interval interval16 = yearMonthDay11.toInterval();
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        java.lang.String str21 = period20.toString();
        org.joda.time.Period period22 = period18.withFields((org.joda.time.ReadablePeriod) period20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay11.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        int int27 = dateTimeZone25.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 1899, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        int int31 = dateTimeZone29.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str36 = dateTimeZone35.getID();
        org.joda.time.Interval interval37 = yearMonthDay33.toInterval(dateTimeZone35);
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        org.joda.time.Interval interval40 = interval37.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay23.withChronologyRetainFields(chronology41);
        org.joda.time.DurationField durationField45 = chronology41.halfdays();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter1.withChronology(chronology41);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT1M" + "'", str21, "PT1M");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.016" + "'", str36, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test05806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05806");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod();
        mutablePeriod11.addWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod11, (int) 'u');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes((int) (byte) 10);
        int int18 = localDateTime15.getWeekyear();
        int int19 = localDateTime15.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMinuteOfHour(967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 967 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2194 + "'", int18 == 2194);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2194 + "'", int19 == 2194);
    }

    @Test
    public void test05807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05807");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 1899, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str19 = dateTimeZone18.getID();
        org.joda.time.Interval interval20 = yearMonthDay16.toInterval(dateTimeZone18);
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        org.joda.time.Interval interval23 = interval20.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str30 = dateTimeZone29.getID();
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(dateTimeZone29);
        int int33 = dateTimeZone29.getOffset((long) 1);
        java.util.Locale locale35 = java.util.Locale.PRC;
        java.lang.String str36 = dateTimeZone29.getShortName(31553832000L, locale35);
        long long39 = dateTimeZone29.convertLocalToUTC((long) 32770, false);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight27.withZoneRetainFields(dateTimeZone29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(219, 60, 32770, 984, 86383026, 53673521, 1905, dateTimeZone29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 984 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.016" + "'", str19, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.016" + "'", str36, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 32754L + "'", long39 == 32754L);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test05808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05808");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-1645369107901L));
    }

    @Test
    public void test05809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05809");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDate4.toDateTimeAtCurrentTime(dateTimeZone8);
        int int11 = dateTime10.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        int int15 = dateTimeZone13.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 1899, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Interval interval25 = yearMonthDay21.toInterval(dateTimeZone23);
        org.joda.time.Interval interval26 = yearMonthDay21.toInterval();
        org.joda.time.Chronology chronology27 = yearMonthDay21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime10.toMutableDateTime(chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.secondOfMinute();
        org.joda.time.DateTime dateTime34 = dateTime31.withYearOfCentury(16);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        int int39 = dateTimeZone37.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 1899, dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        int int43 = dateTimeZone41.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime44 = localDate40.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.Interval interval49 = yearMonthDay45.toInterval(dateTimeZone47);
        org.joda.time.MutableInterval mutableInterval50 = interval49.toMutableInterval();
        org.joda.time.Interval interval52 = interval49.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.DateMidnight dateMidnight54 = org.joda.time.DateMidnight.now(chronology53);
        org.joda.time.Period period55 = new org.joda.time.Period((long) 3, chronology53);
        org.joda.time.Period period57 = period55.minusDays(11);
        org.joda.time.DateTime dateTime58 = dateTime31.minus((org.joda.time.ReadablePeriod) period57);
        mutableDateTime29.add((org.joda.time.ReadablePeriod) period57);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = period57.getValue(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.016" + "'", str24, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 16 + "'", int39 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.016" + "'", str48, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test05810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05810");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 53, (long) 100, chronology2);
        mutablePeriod3.add((long) 37);
        mutablePeriod3.setMillis(47);
        int int8 = mutablePeriod3.getMinutes();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test05811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05811");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period7 = period1.normalizedStandard(periodType6);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period12.minusSeconds((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period12.toDurationFrom(readableInstant17);
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        java.lang.String str23 = period22.toString();
        org.joda.time.Period period24 = period20.withFields((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period27 = period24.withField(durationFieldType25, (int) 'a');
        boolean boolean28 = period12.isSupported(durationFieldType25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = period8.withFieldAdded(durationFieldType25, 936);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1M" + "'", str23, "PT1M");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test05812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05812");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(0);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withMillisOfDay(19);
        int int11 = localDateTime7.getMillisOfDay();
        org.joda.time.Chronology chronology12 = localDateTime7.getChronology();
        int int13 = localDateTime7.size();
        int int14 = localDateTime7.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime7.withYearOfCentury(53930297);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53930297 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1900 + "'", int8 == 1900);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test05813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05813");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.year();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.withHourOfDay(3);
        int int11 = dateTime10.getSecondOfMinute();
        int int12 = dateTime10.getMinuteOfHour();
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime.Property property14 = dateTime10.hourOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(21);
        int int17 = property6.getDifference((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime localDateTime18 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withWeekyear(2022);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-52) + "'", int17 == (-52));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test05814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05814");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(32);
        java.lang.String str4 = dateTimeFormatter0.print((-60652367995439L));
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter0.getZone();
        boolean boolean6 = dateTimeFormatter0.isPrinter();
        org.joda.time.Chronology chronology7 = dateTimeFormatter0.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0048-01-02T00:00:04.577" + "'", str4, "0048-01-02T00:00:04.577");
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(chronology7);
    }

    @Test
    public void test05815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05815");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        int int4 = dateTime3.getDayOfWeek();
        org.joda.time.DateTime dateTime6 = dateTime3.minusWeeks(0);
        org.joda.time.DateTime dateTime7 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = timeOfDay12.getFields();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) '4');
        int int18 = dateTime15.getMonthOfYear();
        org.joda.time.DateTime dateTime20 = dateTime15.withYearOfCentury(37);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test05816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05816");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(934, 1905, 400, (int) ' ', 379, 64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05817");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, chronology18);
        mutableDateTime19.setSecondOfDay(59);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1899, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Interval interval35 = yearMonthDay31.toInterval(dateTimeZone33);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Interval interval38 = interval35.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.monthOfYear();
        org.joda.time.Period period43 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period45 = org.joda.time.Period.minutes(1);
        java.lang.String str46 = period45.toString();
        org.joda.time.Period period47 = period43.withFields((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period49 = period47.plusMillis(100);
        org.joda.time.Period period50 = period47.negated();
        org.joda.time.Period period52 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period54 = org.joda.time.Period.minutes(1);
        java.lang.String str55 = period54.toString();
        org.joda.time.Period period56 = period52.withFields((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period58 = period56.plusMillis(100);
        boolean boolean59 = period50.equals((java.lang.Object) period58);
        long long62 = chronology39.add((org.joda.time.ReadablePeriod) period50, 31556952000L, (int) '4');
        org.joda.time.Period period64 = period50.plusWeeks(3172001);
        org.joda.time.Period period65 = period50.toPeriod();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType71.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray73 = new org.joda.time.DurationFieldType[] { durationFieldType72 };
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.forFields(durationFieldTypeArray73);
        org.joda.time.Period period75 = new org.joda.time.Period((long) ' ', periodType74);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.months();
        int int77 = periodType74.indexOf(durationFieldType76);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(periodType74);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 951, periodType74);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1645455377857L, 0L, periodType74);
        org.joda.time.Period period81 = period50.normalizedStandard(periodType74);
        org.joda.time.Days days82 = period50.toStandardDays();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT1M" + "'", str46, "PT1M");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT1M" + "'", str55, "PT1M");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 31553832000L + "'", long62 == 31553832000L);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(durationFieldTypeArray73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(days82);
    }

    @Test
    public void test05818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05818");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder8 = builder7.clear();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = timeOfDay13.toDateTimeToday(dateTimeZone14);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay13.secondOfMinute();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str20 = locale17.getDisplayVariant(locale19);
        int int21 = property16.getMaximumTextLength(locale19);
        java.util.Locale.Builder builder22 = builder7.setLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setLanguage("2022-02-21T14:57:29.051+00:00:00.016");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-21T14:57:29.051+00:00:00.016 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test05819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05819");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1899, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.Interval interval15 = yearMonthDay11.toInterval(dateTimeZone13);
        org.joda.time.MutableInterval mutableInterval16 = interval15.toMutableInterval();
        org.joda.time.Interval interval18 = interval15.withStartMillis((long) 32769);
        org.joda.time.Duration duration19 = interval18.toDuration();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str22 = dateTimeZone21.getID();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray27 = new org.joda.time.DurationFieldType[] { durationFieldType26 };
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.forFields(durationFieldTypeArray27);
        org.joda.time.Period period29 = new org.joda.time.Period((long) ' ', periodType28);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime23, periodType28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(dateTimeZone32);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateMidnight34);
        boolean boolean36 = interval35.isBeforeNow();
        org.joda.time.Period period38 = org.joda.time.Period.weeks(19);
        org.joda.time.PeriodType periodType39 = period38.getPeriodType();
        org.joda.time.Period period40 = interval35.toPeriod(periodType39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str44 = dateTimeZone43.getID();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime48 = dateTime45.withField(dateTimeFieldType46, 44);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType46.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        int int53 = dateTimeZone51.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 1899, dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        int int57 = dateTimeZone55.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime58 = localDate54.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str62 = dateTimeZone61.getID();
        org.joda.time.Interval interval63 = yearMonthDay59.toInterval(dateTimeZone61);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.Interval interval65 = interval63.toInterval();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType67 = periodType66.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        int int71 = dateTimeZone69.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) 1899, dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        int int75 = dateTimeZone73.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime76 = localDate72.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str80 = dateTimeZone79.getID();
        org.joda.time.Interval interval81 = yearMonthDay77.toInterval(dateTimeZone79);
        org.joda.time.MutableInterval mutableInterval82 = interval81.toMutableInterval();
        org.joda.time.Interval interval84 = interval81.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology85 = interval84.getChronology();
        org.joda.time.DateTimeZone dateTimeZone86 = chronology85.getZone();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.monthOfYear();
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight(chronology85);
        org.joda.time.DurationField durationField89 = chronology85.millis();
        org.joda.time.DateTimeField dateTimeField90 = chronology85.dayOfMonth();
        org.joda.time.Period period91 = new org.joda.time.Period((java.lang.Object) interval63, periodType67, chronology85);
        org.joda.time.DateTimeField dateTimeField92 = chronology85.dayOfYear();
        org.joda.time.DurationField durationField93 = durationFieldType49.getField(chronology85);
        boolean boolean94 = durationFieldType41.isSupported(chronology85);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod(0L, (long) 15, periodType39, chronology85);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.016" + "'", str22, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(durationFieldTypeArray27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.016" + "'", str44, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.016" + "'", str62, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 16 + "'", int71 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 16 + "'", int75 == 16);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:00.016" + "'", str80, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(mutableInterval82);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test05820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05820");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        boolean boolean15 = dateTime10.equals((java.lang.Object) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.plusMonths(10);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfYear();
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.yearOfEra();
        org.joda.time.DateMidnight dateMidnight21 = property19.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight22 = property19.getDateMidnight();
        org.joda.time.DateTimeField dateTimeField23 = property19.getField();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test05821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05821");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfCentury();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField20.set((long) 1993, "PT0.090S", locale23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT0.090S\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
    }

    @Test
    public void test05822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05822");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withYearOfEra(52);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.monthOfYear();
        org.joda.time.DateMidnight.Property property7 = dateMidnight5.era();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight5.toMutableDateTime(chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05823");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.centuryOfEra();
        long long24 = chronology17.add((long) (-1), (-1073174400016L), (int) (byte) 1);
        org.joda.time.DurationField durationField25 = chronology17.centuries();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(210);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1073174400017L) + "'", long24 == (-1073174400017L));
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test05824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05824");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("zho");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        java.util.Locale.Builder builder14 = builder7.setLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder7.setRegion("1899");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 1899 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455546501,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=6,MILLISECOND=517,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test05825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05825");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setWeekDate(45, 1900, (int) 'u');
        java.util.Calendar.Builder builder7 = builder0.setLenient(false);
        java.util.Calendar.Builder builder11 = builder7.setDate((int) (byte) 1, 2194, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        boolean boolean15 = timeZone14.observesDaylightTime();
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 10, chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusMinutes(4);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.lang.String str40 = dateTimeZone33.getName((long) 5, locale36);
        java.lang.String str41 = localDateTime30.toString("1970", locale36);
        java.lang.String str42 = locale16.getDisplayName(locale36);
        java.util.Calendar.Builder builder43 = builder7.setLocale(locale36);
        java.util.Calendar.Builder builder47 = builder7.setTimeOfDay(11, 40, 952);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder50 = builder47.setWeekDefinition(372, (-2447));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455546512,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=6,MILLISECOND=528,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.016" + "'", str40, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970" + "'", str41, "1970");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test05826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05826");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        boolean boolean12 = dateTime10.isEqual(1645455242370L);
        java.util.Date date19 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.fromDateFields(date19);
        org.joda.time.LocalDate.Property property21 = localDate20.weekOfWeekyear();
        org.joda.time.LocalDate localDate23 = property21.setCopy("46");
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        long long26 = dateTimeField24.roundHalfCeiling(9172000L);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(8);
        org.joda.time.LocalDate localDate31 = localDate29.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDate localDate33 = localDate29.plusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str36 = dateTimeZone35.getID();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime40 = dateTime37.withField(dateTimeFieldType38, 44);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType38.getRangeDurationType();
        boolean boolean42 = localDate33.isSupported(dateTimeFieldType38);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.DateMidnight dateMidnight46 = org.joda.time.DateMidnight.now(dateTimeZone44);
        int int48 = dateTimeZone44.getOffset((long) 1);
        java.util.Locale locale50 = java.util.Locale.PRC;
        java.lang.String str51 = dateTimeZone44.getShortName(31553832000L, locale50);
        java.lang.String str52 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDate33, locale50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = dateTime10.toString("Sat Dec 06 11:59:00 GMT+00:00 1947", locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(date19.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-259200000L) + "'", long26 == (-259200000L));
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.016" + "'", str36, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.016" + "'", str45, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.016" + "'", str51, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "9" + "'", str52, "9");
    }

    @Test
    public void test05827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05827");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str2 = localTime0.toString(dateTimeFormatter1);
        org.joda.time.LocalTime localTime4 = localTime0.minusSeconds((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.lang.String str6 = localTime0.toString(dateTimeFormatter5);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        java.lang.String str9 = period8.toString();
        org.joda.time.LocalTime localTime11 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, 12);
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localTime11.getFieldTypes();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        java.util.Date date20 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date20);
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime27.withField(dateTimeFieldType28, 44);
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType28.getRangeDurationType();
        int int32 = localDate21.get(dateTimeFieldType28);
        org.joda.time.LocalDate.Property property33 = localDate14.property(dateTimeFieldType28);
        java.lang.String str34 = dateTimeFieldType28.toString();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        int int38 = dateTimeZone36.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 1899, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        int int42 = dateTimeZone40.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime43 = localDate39.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str47 = dateTimeZone46.getID();
        org.joda.time.Interval interval48 = yearMonthDay44.toInterval(dateTimeZone46);
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        org.joda.time.Interval interval51 = interval48.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology52.getZone();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType28.getField(chronology52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property55 = localTime11.property(dateTimeFieldType28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str2, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T00:00:00.000" + "'", str6, "T00:00:00.000");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT1M" + "'", str9, "PT1M");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.016" + "'", str26, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 99 + "'", int32 == 99);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyearOfCentury" + "'", str34, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.016" + "'", str47, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test05828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05828");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        java.lang.String str1 = mutablePeriod0.toString();
        mutablePeriod0.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 1899, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.Interval interval17 = yearMonthDay13.toInterval(dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Interval interval20 = interval17.withStartMillis((long) 32769);
        org.joda.time.Duration duration21 = interval20.toDuration();
        java.lang.String str22 = duration21.toString();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 1899, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Interval interval36 = yearMonthDay32.toInterval(dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Interval interval39 = interval36.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.monthOfYear();
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        java.lang.String str47 = period46.toString();
        org.joda.time.Period period48 = period44.withFields((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period50 = period48.plusMillis(100);
        org.joda.time.Period period51 = period48.negated();
        org.joda.time.Period period53 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period55 = org.joda.time.Period.minutes(1);
        java.lang.String str56 = period55.toString();
        org.joda.time.Period period57 = period53.withFields((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period59 = period57.plusMillis(100);
        boolean boolean60 = period51.equals((java.lang.Object) period59);
        long long63 = chronology40.add((org.joda.time.ReadablePeriod) period51, 31556952000L, (int) '4');
        mutablePeriod0.setPeriod((org.joda.time.ReadableDuration) duration21, chronology40);
        org.joda.time.DateMidnight dateMidnight65 = org.joda.time.DateMidnight.now(chronology40);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.withYear(2022);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusDays(974);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight67.plusMonths(53848926);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0S" + "'", str1, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1645487967.215S" + "'", str22, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT1M" + "'", str47, "PT1M");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT1M" + "'", str56, "PT1M");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 31553832000L + "'", long63 == 31553832000L);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
    }

    @Test
    public void test05829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05829");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = timeOfDay3.getFieldType(1);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withMillisOfSecond((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withMillisOfSecond(59);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusMinutes(1);
        int int12 = timeOfDay11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05830");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears(32730);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime18.getFieldType(181);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 181");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test05831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05831");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        boolean boolean12 = mutableDateTime3.isEqualNow();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = timeOfDay17.getFields();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTimeToday(dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime20.monthOfYear();
        boolean boolean22 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = property23.set("00:00:00.116");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"00:00:00.116\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test05832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05832");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property10 = dateTime6.property(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        boolean boolean15 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withChronology(chronology16);
        org.joda.time.Interval interval18 = dateMidnight17.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withMonthOfYear((-26701436));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -26701436 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(interval18);
    }

    @Test
    public void test05833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05833");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = dateMidnight3.isBefore(readableInstant4);
        int int6 = dateMidnight3.getYearOfCentury();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusYears(10);
        org.joda.time.DateTime dateTime11 = dateMidnight10.toDateTime();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withWeekyear(284);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 1899, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Interval interval27 = yearMonthDay23.toInterval(dateTimeZone25);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.Interval interval30 = interval27.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(chronology31);
        org.joda.time.Chronology chronology34 = chronology31.withUTC();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight13.withChronology(chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight37 = dateMidnight13.withMonthOfYear((-953));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -953 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.016" + "'", str26, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test05834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05834");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str11 = dateTimeZone10.getID();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str16 = locale13.getDisplayVariant(locale15);
        java.lang.String str17 = dateTimeZone10.getName((long) 5, locale13);
        int int18 = property7.getMaximumTextLength(locale13);
        int int19 = property7.getMinimumValueOverall();
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale20.getISO3Country();
        java.lang.String str22 = property7.getAsText(locale20);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.016" + "'", str11, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.016" + "'", str17, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "KOR" + "'", str21, "KOR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52" + "'", str22, "52");
    }

    @Test
    public void test05835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05835");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.minus(315705601970L);
        org.joda.time.DateTime.Property property12 = dateTime9.era();
        org.joda.time.LocalTime localTime13 = dateTime9.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.monthOfYear();
        org.joda.time.DateTime dateTime24 = dateTime21.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str27 = dateTimeZone26.getID();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(dateTimeZone26);
        boolean boolean29 = dateTime24.equals((java.lang.Object) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.plusMonths(10);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        int int39 = period34.getMinutes();
        org.joda.time.Period period40 = period34.toPeriod();
        int int41 = period40.getSeconds();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight31.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 5);
        int int44 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTime dateTime46 = dateTime9.plusYears(22);
        org.joda.time.DateTime dateTime48 = dateTime9.withYear(17);
        org.joda.time.TimeOfDay timeOfDay49 = dateTime48.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.minusSeconds((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay51.withMillisOfSecond(89);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.016" + "'", str27, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay53);
    }

    @Test
    public void test05836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05836");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 10, chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusMinutes(4);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 10, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.year();
        org.joda.time.LocalDateTime localDateTime37 = property36.getLocalDateTime();
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period41 = org.joda.time.Period.minutes(1);
        java.lang.String str42 = period41.toString();
        org.joda.time.Period period43 = period39.withFields((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period45 = period43.plusMillis(100);
        org.joda.time.Period period47 = period43.plusYears(4);
        org.joda.time.Period period48 = period47.negated();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime37.withPeriodAdded((org.joda.time.ReadablePeriod) period48, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime25.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 3172001);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime52);
        int int54 = localDateTime52.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1M" + "'", str42, "PT1M");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7 + "'", int54 == 7);
    }

    @Test
    public void test05837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05837");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType11 = periodType10.withDaysRemoved();
        org.joda.time.PeriodType periodType12 = periodType10.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 3112, 34244889436800000L, periodType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period14 = new org.joda.time.Period(1993, 53785619, 68, 13, 898, (int) (short) 1, 1905, 33, periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test05838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05838");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(29, 89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05839");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = timeOfDay16.toDateTimeToday(dateTimeZone17);
        mutableDateTime11.setZoneRetainFields(dateTimeZone17);
        int int20 = mutableDateTime11.getYear();
        int int21 = property7.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime mutableDateTime22 = property7.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = property7.set("1899-03-10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1899-03-10\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test05840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05840");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str3 = dateTimeZone2.getID();
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(0L, dateTimeZone2);
        boolean boolean6 = dateTimeZone2.isFixed();
        java.lang.String str7 = dateTimeZone2.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.016" + "'", str3, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.016" + "'", str7, "+00:00:00.016");
    }

    @Test
    public void test05841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05841");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 1899, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.Interval interval29 = yearMonthDay25.toInterval(dateTimeZone27);
        org.joda.time.Interval interval30 = yearMonthDay25.toInterval();
        org.joda.time.Period period32 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        java.lang.String str35 = period34.toString();
        org.joda.time.Period period36 = period32.withFields((org.joda.time.ReadablePeriod) period34);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay25.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 1899, dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str50 = dateTimeZone49.getID();
        org.joda.time.Interval interval51 = yearMonthDay47.toInterval(dateTimeZone49);
        org.joda.time.MutableInterval mutableInterval52 = interval51.toMutableInterval();
        org.joda.time.Interval interval54 = interval51.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology55.getZone();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay37.withChronologyRetainFields(chronology55);
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay37.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        int int63 = dateTimeZone61.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 1899, dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        int int67 = dateTimeZone65.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime68 = localDate64.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight69 = yearMonthDay37.toDateMidnight(dateTimeZone65);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        int int73 = dateTimeZone71.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone71);
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime74.add(readableDuration75, 0);
        mutableDateTime74.addDays(1899);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean81 = mutableDateTime74.isSupported(dateTimeFieldType80);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight69.withField(dateTimeFieldType80, 40);
        org.joda.time.DateMidnight.Property property84 = dateMidnight83.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight86 = dateMidnight83.withDayOfMonth((-34537737));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -34537737 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.016" + "'", str28, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT1M" + "'", str35, "PT1M");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.016" + "'", str50, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 16 + "'", int63 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 16 + "'", int67 == 16);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 16 + "'", int73 == 16);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test05842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05842");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        boolean boolean15 = dateTime10.equals((java.lang.Object) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(32772);
        org.joda.time.DateMidnight.Property property18 = dateMidnight14.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy((-870307199819L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -870307199819");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test05843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05843");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        mutableDateTime3.addWeekyears(0);
        mutableDateTime3.addHours(2);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.addWrapField(690);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test05844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05844");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        date5.setTime((-1L));
        java.util.Date date14 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int15 = date14.getSeconds();
        boolean boolean16 = date5.after(date14);
        long long17 = date14.getTime();
        date14.setYear(759);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Mar 10 01:35:00 GMT+00:00 2659");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2234643900016L) + "'", long17 == (-2234643900016L));
    }

    @Test
    public void test05845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05845");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withHourOfDay(3);
        int int4 = dateTime3.getSecondOfMinute();
        int int5 = dateTime3.getMinuteOfHour();
        int int6 = dateTime3.getEra();
        org.joda.time.DateTime.Property property7 = dateTime3.monthOfYear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test05846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05846");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1645455242370L);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths(896);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period9.plusMillis(100);
        org.joda.time.Period period12 = period9.negated();
        org.joda.time.Period period14 = period12.withMillis(1899);
        org.joda.time.Period period16 = period14.plusMillis(0);
        int int17 = period16.getMillis();
        org.joda.time.Period period19 = period16.withHours((int) 'a');
        org.joda.time.LocalDate localDate20 = localDate1.plus((org.joda.time.ReadablePeriod) period16);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1899 + "'", int17 == 1899);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test05847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05847");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
        org.joda.time.format.DateTimeParser dateTimeParser1 = dateTimeFormatter0.getParser();
        int int2 = dateTimeParser1.estimateParsedLength();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket3 = null;
        int int6 = dateTimeParser1.parseInto(dateTimeParserBucket3, "00:52", 1970);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeParser1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 24 + "'", int2 == 24);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1971) + "'", int6 == (-1971));
    }

    @Test
    public void test05848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05848");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale[] localeArray5 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.List<java.util.Locale> localeList8 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList6);
        java.util.stream.Stream<java.util.Locale> localeStream9 = localeList8.stream();
        boolean boolean10 = strSet1.containsAll((java.util.Collection<java.util.Locale>) localeList8);
        java.lang.Object[] objArray11 = localeList8.toArray();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localeList8);
        org.junit.Assert.assertNotNull(localeStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test05849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05849");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        java.lang.String str24 = period23.toString();
        org.joda.time.Period period25 = period21.withFields((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period27 = period25.plusMillis(100);
        org.joda.time.Period period28 = period25.negated();
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period32 = org.joda.time.Period.minutes(1);
        java.lang.String str33 = period32.toString();
        org.joda.time.Period period34 = period30.withFields((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period36 = period34.plusMillis(100);
        boolean boolean37 = period28.equals((java.lang.Object) period36);
        long long40 = chronology17.add((org.joda.time.ReadablePeriod) period28, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField41 = chronology17.dayOfYear();
        org.joda.time.DurationField durationField42 = chronology17.days();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        int int46 = dateTimeZone44.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 1899, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        int int50 = dateTimeZone48.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime51 = localDate47.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(dateTimeZone48);
        org.joda.time.Chronology chronology53 = chronology17.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField54 = chronology17.secondOfDay();
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        int int59 = dateTimeZone57.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 1899, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        int int63 = dateTimeZone61.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime64 = localDate60.toDateTimeAtCurrentTime(dateTimeZone61);
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str68 = dateTimeZone67.getID();
        org.joda.time.Interval interval69 = yearMonthDay65.toInterval(dateTimeZone67);
        org.joda.time.YearMonthDay.Property property70 = yearMonthDay65.dayOfMonth();
        java.lang.String str71 = property70.getAsText();
        org.joda.time.YearMonthDay yearMonthDay72 = property70.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay74 = property70.addWrapFieldToCopy(22);
        org.joda.time.Period period76 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period78 = org.joda.time.Period.minutes(1);
        java.lang.String str79 = period78.toString();
        org.joda.time.Period period80 = period76.withFields((org.joda.time.ReadablePeriod) period78);
        int int81 = period76.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay74.withPeriodAdded((org.joda.time.ReadablePeriod) period76, 32769);
        int int84 = yearMonthDay83.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight85 = yearMonthDay83.toDateMidnight();
        long long87 = chronology17.set((org.joda.time.ReadablePartial) yearMonthDay83, (-294179792138L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT1M" + "'", str24, "PT1M");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT1M" + "'", str33, "PT1M");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 31553832000L + "'", long40 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 16 + "'", int50 == 16);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 16 + "'", int59 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 16 + "'", int63 == 16);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.016" + "'", str68, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "21" + "'", str71, "21");
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT1M" + "'", str79, "PT1M");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 15 + "'", int84 == 15);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1644895407862L + "'", long87 == 1644895407862L);
    }

    @Test
    public void test05850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05850");
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period7 = period3.withFields((org.joda.time.ReadablePeriod) period5);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period9 = period3.normalizedStandard(periodType8);
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1899, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.Interval interval24 = yearMonthDay20.toInterval(dateTimeZone22);
        org.joda.time.Interval interval25 = yearMonthDay20.toInterval();
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        java.lang.String str30 = period29.toString();
        org.joda.time.Period period31 = period27.withFields((org.joda.time.ReadablePeriod) period29);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay20.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        int int36 = dateTimeZone34.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 1899, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.Interval interval46 = yearMonthDay42.toInterval(dateTimeZone44);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.joda.time.Interval interval49 = interval46.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay32.withChronologyRetainFields(chronology50);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(chronology50);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 54, 16L, periodType8, chronology50);
        mutablePeriod57.add((long) (-47));
        org.joda.time.MutablePeriod mutablePeriod60 = mutablePeriod57.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod57.addMillis(53930297);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT1M" + "'", str6, "PT1M");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT1M" + "'", str30, "PT1M");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.016" + "'", str45, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(mutablePeriod60);
    }

    @Test
    public void test05851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05851");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        java.util.Calendar.Builder builder5 = builder0.setTimeZone(timeZone3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 10, chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMinuteOfHour(0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 10, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        boolean boolean22 = localDateTime16.equals((java.lang.Object) timeZone21);
        java.util.Calendar.Builder builder23 = builder5.setTimeZone(timeZone21);
        java.util.Calendar.Builder builder25 = builder5.setLenient(false);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale.setDefault(locale26);
        java.lang.String str30 = locale26.getISO3Country();
        java.util.Calendar.Builder builder31 = builder5.setLocale(locale26);
        java.util.Calendar calendar32 = builder31.build();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) calendar32, dateTimeZone34);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455547200,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=7,MILLISECOND=216,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-16,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
    }

    @Test
    public void test05852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05852");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) '4');
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime9.plusSeconds(936);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test05853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05853");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        java.lang.String str2 = period1.toString();
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period6 = org.joda.time.Period.minutes(1);
        java.lang.String str7 = period6.toString();
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period10 = period8.plusMillis(100);
        org.joda.time.Period period11 = period8.negated();
        int int12 = period11.getMillis();
        org.joda.time.Period period14 = period11.minusDays(32);
        org.joda.time.DurationFieldType durationFieldType16 = period14.getFieldType(0);
        java.lang.String str17 = durationFieldType16.getName();
        int int18 = period1.get(durationFieldType16);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod();
        java.lang.String str20 = mutablePeriod19.toString();
        mutablePeriod19.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 1899, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Interval interval36 = yearMonthDay32.toInterval(dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Interval interval39 = interval36.withStartMillis((long) 32769);
        org.joda.time.Duration duration40 = interval39.toDuration();
        java.lang.String str41 = duration40.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 1899, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str54 = dateTimeZone53.getID();
        org.joda.time.Interval interval55 = yearMonthDay51.toInterval(dateTimeZone53);
        org.joda.time.MutableInterval mutableInterval56 = interval55.toMutableInterval();
        org.joda.time.Interval interval58 = interval55.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.monthOfYear();
        org.joda.time.Period period63 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period65 = org.joda.time.Period.minutes(1);
        java.lang.String str66 = period65.toString();
        org.joda.time.Period period67 = period63.withFields((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period69 = period67.plusMillis(100);
        org.joda.time.Period period70 = period67.negated();
        org.joda.time.Period period72 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period74 = org.joda.time.Period.minutes(1);
        java.lang.String str75 = period74.toString();
        org.joda.time.Period period76 = period72.withFields((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Period period78 = period76.plusMillis(100);
        boolean boolean79 = period70.equals((java.lang.Object) period78);
        long long82 = chronology59.add((org.joda.time.ReadablePeriod) period70, 31556952000L, (int) '4');
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration40, chronology59);
        org.joda.time.DateTimeField dateTimeField84 = chronology59.dayOfMonth();
        org.joda.time.Chronology chronology85 = chronology59.withUTC();
        boolean boolean86 = durationFieldType16.isSupported(chronology85);
        org.joda.time.DurationField durationField87 = chronology85.years();
        org.joda.time.DurationField durationField88 = chronology85.halfdays();
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str93 = dateTimeZone92.getID();
        org.joda.time.DateMidnight dateMidnight94 = org.joda.time.DateMidnight.now(dateTimeZone92);
        org.joda.time.Interval interval95 = new org.joda.time.Interval((long) (-1), (long) 'a', dateTimeZone92);
        org.joda.time.Chronology chronology96 = chronology85.withZone(dateTimeZone92);
        java.lang.Class<?> wildcardClass97 = chronology85.getClass();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT1M" + "'", str2, "PT1M");
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT1M" + "'", str7, "PT1M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "years" + "'", str17, "years");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT1645487967.215S" + "'", str41, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.016" + "'", str54, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT1M" + "'", str66, "PT1M");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT1M" + "'", str75, "PT1M");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 31553832000L + "'", long82 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00:00.016" + "'", str93, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test05854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05854");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        calendar3.setTimeInMillis(31556952000L);
        java.util.Date date6 = calendar3.getTime();
        calendar3.setMinimalDaysInFirstWeek(100);
        java.util.Date date9 = calendar3.getTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add((int) ' ');
        org.joda.time.DateTimeField dateTimeField22 = property19.getField();
        int int23 = dateTimeField22.getMinimumValue();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        boolean boolean32 = localeList31.isEmpty();
        java.util.stream.Stream<java.util.Locale> localeStream33 = localeList31.stream();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        boolean boolean38 = localeList31.add(locale36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withLocale(locale40);
        java.lang.String str42 = locale36.getDisplayVariant(locale40);
        java.lang.String str43 = dateTimeField22.getAsShortText((long) (byte) 1, locale40);
        java.util.Date date49 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.fromDateFields(date49);
        org.joda.time.LocalDate.Property property51 = localDate50.weekOfWeekyear();
        org.joda.time.LocalDate localDate53 = property51.setCopy(10);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = property51.getAsText(locale54);
        java.lang.String str58 = locale40.getDisplayLanguage(locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap59 = calendar3.getDisplayNames(7, 53882551, locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=31556952000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=100,ERA=1,YEAR=1971,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=49,SECOND=12,MILLISECOND=16,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 01 05:49:12 GMT+00:00 1971");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Jan 01 05:49:12 GMT+00:00 1971");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localeStream33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Thu" + "'", str43, "Thu");
        org.junit.Assert.assertEquals(date49.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10" + "'", str57, "10");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\uc601\uc5b4" + "'", str58, "\uc601\uc5b4");
    }

    @Test
    public void test05855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05855");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 52);
        int int2 = localDate1.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test05856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05856");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        boolean boolean12 = mutableDateTime3.isEqualNow();
        org.joda.time.DateTimeField dateTimeField13 = mutableDateTime3.getRoundingField();
        mutableDateTime3.setDate(0L);
        mutableDateTime3.setSecondOfDay(15);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime3.monthOfYear();
        int int19 = mutableDateTime3.getDayOfMonth();
        mutableDateTime3.setWeekOfWeekyear(25);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime3.yearOfEra();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str27 = locale24.getDisplayVariant(locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime29 = property22.set("Etc/UTC", locale26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Etc/UTC\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455547388,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=7,MILLISECOND=404,ZONE_OFFSET=16,DST_OFFSET=0]");
    }

    @Test
    public void test05857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05857");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Chronology chronology12 = timeOfDay8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.minutes();
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(31556952000L, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((-5), 86400, 15, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86400 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test05858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05858");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((long) 45);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) '4', chronology10);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.secondOfMinute();
        int[] intArray14 = new int[] { 21 };
        int int15 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay11, intArray14);
        java.lang.String str17 = dateTimeField7.getAsText((long) 3172000);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) '4', chronology20);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay21.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay21.plusSeconds(11);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay26);
        int int28 = timeOfDay26.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay26.minusSeconds(74);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withYearOfEra(52);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.monthOfYear();
        org.joda.time.DateMidnight.Property property38 = dateMidnight36.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis();
        java.lang.String str40 = dateMidnight36.toString(dateTimeFormatter39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight36.plusYears(90);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean44 = dateMidnight36.isSupported(dateTimeFieldType43);
        boolean boolean45 = timeOfDay26.isSupported(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[21]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-292275054) + "'", int27 == (-292275054));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0052-02-21T00:00:00+00:00:00.016" + "'", str40, "0052-02-21T00:00:00+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test05859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05859");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromDateFields(date5);
        int int10 = date5.getTimezoneOffset();
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test05860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05860");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (-51));
        int int2 = localDate1.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
    }

    @Test
    public void test05861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05861");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getDays();
        java.util.Date date9 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date9);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property11.setCopy("45");
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime20 = dateTime17.withField(dateTimeFieldType18, 44);
        boolean boolean21 = localDate13.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1899, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Interval interval35 = yearMonthDay31.toInterval(dateTimeZone33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        long long40 = chronology36.add((long) 18, (long) 6, 58);
        boolean boolean41 = dateTimeFieldType18.isSupported(chronology36);
        mutablePeriod0.setPeriod((long) 32, (long) 53, chronology36);
        org.joda.time.MutablePeriod mutablePeriod43 = mutablePeriod0.copy();
        mutablePeriod0.setWeeks(20);
        int int46 = mutablePeriod0.getDays();
        int int47 = mutablePeriod0.getHours();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 366L + "'", long40 == 366L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test05862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05862");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(4);
        int int11 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond(0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 1899, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str30 = dateTimeZone29.getID();
        org.joda.time.Interval interval31 = yearMonthDay27.toInterval(dateTimeZone29);
        org.joda.time.Interval interval32 = yearMonthDay27.toInterval();
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay27.plus((org.joda.time.ReadablePeriod) period34);
        int int40 = yearMonthDay27.size();
        org.joda.time.Interval interval41 = yearMonthDay27.toInterval();
        boolean boolean42 = interval41.containsNow();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period44 = interval41.toPeriod(periodType43);
        org.joda.time.Interval interval45 = interval41.toInterval();
        java.lang.String str46 = interval45.toString();
        org.joda.time.Chronology chronology47 = interval45.getChronology();
        org.joda.time.Period period48 = new org.joda.time.Period((long) ' ', (long) (short) 100, chronology47);
        org.joda.time.Period period49 = new org.joda.time.Period(61725888000000L, (-1080000L), chronology47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) localDateTime13, chronology47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-21T00:00:00.000+00:00:00.016/2022-02-22T00:00:00.000+00:00:00.016" + "'", str46, "2022-02-21T00:00:00.000+00:00:00.016/2022-02-22T00:00:00.000+00:00:00.016");
        org.junit.Assert.assertNotNull(chronology47);
    }

    @Test
    public void test05863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05863");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str8 = locale5.getDisplayVariant(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale4.getDisplayName(locale7);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str12 = timeZone2.getID();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId13 = timeZone2.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: +00:00:00.016");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455547612,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=7,MILLISECOND=628,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (Taiwan)" + "'", str10, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455547612,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=7,MILLISECOND=628,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
    }

    @Test
    public void test05864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05864");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 860, chronology18);
        org.joda.time.DurationField durationField20 = chronology18.hours();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test05865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05865");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.add((int) ' ');
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.lang.String str15 = property7.getAsShortText(locale11);
        org.joda.time.MutableDateTime mutableDateTime16 = property7.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime18 = property7.add(960000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime20 = property7.set("1970-01-01T00:00:00.016Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.016Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uae08" + "'", str15, "\uae08");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test05866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05866");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = localTime10.plusMinutes(25);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = timeOfDay17.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        int int22 = dateTime19.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime.Property property24 = dateTime19.property(dateTimeFieldType23);
        org.joda.time.LocalTime.Property property25 = localTime12.property(dateTimeFieldType23);
        org.joda.time.LocalTime localTime26 = property25.roundFloorCopy();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test05867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05867");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime9.withZone(dateTimeZone10);
        int int16 = dateTimeZone10.getOffsetFromLocal(1645455347144L);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    }

    @Test
    public void test05868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05868");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.minus(315705601970L);
        org.joda.time.DateTime.Property property12 = dateTime9.era();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period21.minusSeconds((int) (short) 100);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        java.lang.String str31 = period30.toString();
        org.joda.time.Period period32 = period28.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period34 = period32.plusMillis(100);
        org.joda.time.Period period35 = period32.negated();
        org.joda.time.Period period37 = period35.withMillis(1899);
        org.joda.time.Period period39 = period37.plusMillis(0);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime41 = mutableDateTime17.toDateTime();
        mutableDateTime17.setWeekyear(1970);
        org.joda.time.DateTimeField dateTimeField44 = mutableDateTime17.getRoundingField();
        int int45 = property12.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTime dateTime46 = property12.withMaximumValue();
        org.joda.time.DateTime.Property property47 = dateTime46.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT1M" + "'", str31, "PT1M");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test05869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05869");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1970);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1899, dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone7);
        boolean boolean13 = dateTimeZone7.isStandardOffset((long) 32);
        org.joda.time.DateTime dateTime14 = localDate1.toDateTimeAtStartOfDay(dateTimeZone7);
        org.joda.time.LocalDate.Property property15 = localDate1.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = property15.setCopy("2022-02-21T14:54:22.537Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:54:22.537Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05870");
        org.joda.time.Period period1 = org.joda.time.Period.years(21);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test05871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05871");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 50412038);
    }

    @Test
    public void test05872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05872");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod();
        mutablePeriod11.addWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod11, (int) 'u');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes((int) (byte) 10);
        int int18 = localDateTime15.getWeekyear();
        int int19 = localDateTime15.getYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.year();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale22.getUnicodeLocaleType("45");
        java.lang.String str25 = locale22.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = localDateTime15.toString("DurationField[centuries]", locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: u");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2194 + "'", int18 == 2194);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2194 + "'", int19 == 2194);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test05873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05873");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        long long19 = chronology15.add((long) 18, (long) 6, 58);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField22 = chronology15.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 366L + "'", long19 == 366L);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test05874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05874");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = timeOfDay3.getFieldType(1);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withMillisOfSecond((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withMillisOfSecond(59);
        int int10 = timeOfDay7.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay7.plusHours(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test05875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05875");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period15.plusMillis(100);
        org.joda.time.Period period18 = period15.negated();
        org.joda.time.Period period20 = period18.withMillis(1899);
        org.joda.time.Minutes minutes21 = period18.toStandardMinutes();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Period period23 = period18.minus(readablePeriod22);
        boolean boolean24 = property9.equals((java.lang.Object) readablePeriod22);
        org.joda.time.LocalTime localTime25 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime26 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime27 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime28 = property9.roundFloorCopy();
        int int29 = localTime28.getMillisOfSecond();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test05876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05876");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2043-02-16T16:58:50.032+00:00:00.016");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test05877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05877");
        org.joda.time.Period period1 = new org.joda.time.Period((-65727338365000L));
    }

    @Test
    public void test05878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05878");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMonths(58);
        org.joda.time.DateTime dateTime16 = dateTime10.plusMinutes(45);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTimeToday(dateTimeZone24);
        org.joda.time.Chronology chronology26 = timeOfDay22.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.years();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay((long) 23, chronology26);
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology26);
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test05879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05879");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.DurationField durationField10 = property7.getRangeDurationField();
        java.lang.String str11 = durationField10.toString();
        long long14 = durationField10.add((long) 1970, (int) (short) 10);
        java.util.Date date20 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date20);
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.joda.time.LocalDate localDate24 = property22.setCopy(10);
        org.joda.time.DurationField durationField25 = property22.getRangeDurationField();
        int int26 = durationField10.compareTo(durationField25);
        long long29 = durationField10.subtract((-1L), 36L);
        java.lang.String str30 = durationField10.toString();
        int int33 = durationField10.getValue(18000059L, (long) 44);
        int int36 = durationField10.getDifference((-1640822399992L), (long) 'u');
        java.lang.String str37 = durationField10.toString();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[weekyears]" + "'", str11, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 315705601970L + "'", long14 == 315705601970L);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1135814400001L) + "'", long29 == (-1135814400001L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DurationField[weekyears]" + "'", str30, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-52) + "'", int36 == (-52));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DurationField[weekyears]" + "'", str37, "DurationField[weekyears]");
    }

    @Test
    public void test05880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05880");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        int int4 = calendar3.getWeekYear();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromCalendarFields(calendar3);
        java.util.TimeZone timeZone6 = calendar3.getTimeZone();
        timeZone6.setRawOffset(2012);
        timeZone6.setRawOffset(21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = timeZone6.getDisplayName(false, 1823);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 1823");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455547898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=21,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=7,MILLISECOND=914,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05881");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(3120000L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusYears(56621841);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.withMonthOfYear(53828498);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53828498 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
    }

    @Test
    public void test05882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05882");
        java.util.Date date6 = new java.util.Date(2022, 18, 895, (int) (short) 0, (int) (byte) 100, 11);
        date6.setHours(0);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((java.lang.Object) date6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.dayOfWeek();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.millisOfDay();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = timeOfDay28.toDateTimeToday(dateTimeZone29);
        mutableDateTime23.setZoneRetainFields(dateTimeZone29);
        boolean boolean32 = mutableDateTime23.isEqualNow();
        org.joda.time.DateTimeField dateTimeField33 = mutableDateTime23.getRoundingField();
        mutableDateTime23.addSeconds(18);
        mutableDateTime23.setYear(2000);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        mutableDateTime23.add(durationFieldType39, (-376));
        mutableDateTime13.add(durationFieldType39, 28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime45 = localTime9.withFieldAdded(durationFieldType39, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Fri Dec 11 00:40:11 GMT+00:00 3925");
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
    }

    @Test
    public void test05883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05883");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = date5.getMonth();
        int int8 = date5.getYear();
        long long9 = date5.getTime();
        java.util.Date date15 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromDateFields(date15);
        date15.setTime((-1L));
        java.util.Date date24 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int25 = date24.getSeconds();
        boolean boolean26 = date15.after(date24);
        date24.setMonth(2022);
        int int29 = date24.getTimezoneOffset();
        boolean boolean30 = date5.before(date24);
        java.util.Date date36 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.fromDateFields(date36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtCurrentTime(dateTimeZone38);
        java.util.Date date40 = localDate37.toDate();
        boolean boolean41 = date5.before(date40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.fromDateFields(date40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-2234643900016L) + "'", long9 == (-2234643900016L));
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Jul 10 01:35:00 GMT+00:00 2067");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Fri Mar 10 00:00:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test05884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05884");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusDays(17);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withMillisOfDay(32772);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withWeekOfWeekyear(1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.plusMillis(58);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekyear(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = property25.setCopy((-51));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -51 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test05885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05885");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay9.toDateMidnight();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period18.minusSeconds((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight14.withPeriodAdded((org.joda.time.ReadablePeriod) period18, (-292275054));
        org.joda.time.DateMidnight.Property property25 = dateMidnight14.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test05886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05886");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1899, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval(dateTimeZone14);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Interval interval19 = interval16.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.monthOfYear();
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        java.lang.String str27 = period26.toString();
        org.joda.time.Period period28 = period24.withFields((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period30 = period28.plusMillis(100);
        org.joda.time.Period period31 = period28.negated();
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period37 = period33.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period39 = period37.plusMillis(100);
        boolean boolean40 = period31.equals((java.lang.Object) period39);
        long long43 = chronology20.add((org.joda.time.ReadablePeriod) period31, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField44 = chronology20.dayOfYear();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 2, (long) 4, periodType2, chronology20);
        java.lang.String str46 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology20.centuryOfEra();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(chronology20);
        org.joda.time.DateTimeField dateTimeField49 = chronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField50 = chronology20.weekOfWeekyear();
        java.lang.String str51 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology20.minuteOfDay();
        java.lang.String str54 = dateTimeField52.getAsShortText((long) 379);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.016" + "'", str15, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M" + "'", str27, "PT1M");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT1M" + "'", str36, "PT1M");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 31553832000L + "'", long43 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[+00:00:00.016]" + "'", str46, "ISOChronology[+00:00:00.016]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[+00:00:00.016]" + "'", str51, "ISOChronology[+00:00:00.016]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
    }

    @Test
    public void test05887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05887");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.DurationField durationField10 = property7.getRangeDurationField();
        java.lang.String str11 = durationField10.toString();
        long long14 = durationField10.add((long) 1970, (int) (short) 10);
        java.util.Date date20 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date20);
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.joda.time.LocalDate localDate24 = property22.setCopy(10);
        org.joda.time.DurationField durationField25 = property22.getRangeDurationField();
        int int26 = durationField10.compareTo(durationField25);
        long long29 = durationField10.subtract((-1L), 36L);
        java.lang.String str30 = durationField10.toString();
        int int33 = durationField10.getValue(18000059L, (long) 44);
        int int35 = durationField10.getValue((long) 55);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 1899, dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str50 = dateTimeZone49.getID();
        org.joda.time.Interval interval51 = yearMonthDay47.toInterval(dateTimeZone49);
        org.joda.time.Interval interval52 = yearMonthDay47.toInterval();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.parse("00");
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        int int61 = dateTimeZone59.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 1899, dateTimeZone59);
        boolean boolean63 = dateMidnight55.equals((java.lang.Object) 1899);
        int int64 = dateMidnight55.getDayOfWeek();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period66 = new org.joda.time.Period(readableInstant53, (org.joda.time.ReadableInstant) dateMidnight55, periodType65);
        int int67 = periodType65.size();
        org.joda.time.PeriodType periodType68 = periodType65.withDaysRemoved();
        boolean boolean69 = interval52.equals((java.lang.Object) periodType65);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getDurationType();
        int int72 = periodType65.indexOf(durationFieldType71);
        boolean boolean73 = periodType37.isSupported(durationFieldType71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((java.lang.Object) durationField10, periodType37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[weekyears]" + "'", str11, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 315705601970L + "'", long14 == 315705601970L);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1135814400001L) + "'", long29 == (-1135814400001L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DurationField[weekyears]" + "'", str30, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.016" + "'", str50, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 16 + "'", int61 == 16);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 7 + "'", int67 == 7);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test05888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05888");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        long long19 = chronology15.add((long) 18, (long) 6, 58);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(obj0, chronology15);
        mutablePeriod21.setWeeks(7);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 366L + "'", long19 == 366L);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test05889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05889");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setMillisOfDay(10);
        mutableDateTime3.setSecondOfDay(1970);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = timeOfDay22.getFields();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str31 = dateTimeZone30.getID();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(dateTimeZone30);
        boolean boolean33 = dateTime28.equals((java.lang.Object) dateMidnight32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.plusMonths(10);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfYear();
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray41 = new org.joda.time.DurationFieldType[] { durationFieldType40 };
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.forFields(durationFieldTypeArray41);
        org.joda.time.Period period43 = new org.joda.time.Period((long) ' ', periodType42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.months();
        int int45 = periodType42.indexOf(durationFieldType44);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) dateMidnight35, periodType42);
        boolean boolean48 = mutableDateTime3.isAfter(53709910L);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = timeOfDay55.toDateTimeToday(dateTimeZone56);
        org.joda.time.TimeOfDay.Property property58 = timeOfDay55.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay59 = property58.withMaximumValue();
        int int60 = timeOfDay59.getHourOfDay();
        org.joda.time.TimeOfDay.Property property61 = timeOfDay59.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay62 = property61.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay64 = property61.addWrapFieldToCopy(53660892);
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.lang.String str67 = locale66.getISO3Language();
        java.lang.String str68 = dateTimeField50.getAsText((org.joda.time.ReadablePartial) timeOfDay64, 53104586, locale66);
        java.lang.String str69 = locale66.getISO3Country();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.016" + "'", str31, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(durationFieldTypeArray41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "eng" + "'", str67, "eng");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "53104586" + "'", str68, "53104586");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test05890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05890");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime8.withMinuteOfHour(87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 87 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test05891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05891");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1899, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval(dateTimeZone14);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Interval interval19 = interval16.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.centuryOfEra();
        long long27 = chronology20.add((long) (-1), (-1073174400016L), (int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1645401599984L, chronology20);
        org.joda.time.DurationField durationField29 = chronology20.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((-52), 32770, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.016" + "'", str15, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1073174400017L) + "'", long27 == (-1073174400017L));
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test05892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05892");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfCentury(0);
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMillisOfDay(19);
        int int12 = localDateTime8.getMillisOfDay();
        org.joda.time.Chronology chronology13 = localDateTime8.getChronology();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 2025, chronology13);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology13.getDateTimeMillis(1645455422139L, 56557725, 218, (-292275054), 38059635);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56557725 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1900 + "'", int9 == 1900);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test05893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05893");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        boolean boolean12 = mutableDateTime3.isEqualNow();
        org.joda.time.DateTimeField dateTimeField13 = mutableDateTime3.getRoundingField();
        mutableDateTime3.setDate(0L);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime3.minuteOfHour();
        int int17 = mutableDateTime3.getDayOfWeek();
        mutableDateTime3.setMillisOfSecond(0);
        mutableDateTime3.addMonths(1905);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test05894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05894");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setMillisOfDay(10);
        mutableDateTime3.setSecondOfDay(1970);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime3.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField(3172000);
        org.joda.time.MutableDateTime mutableDateTime21 = property18.roundHalfEven();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test05895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05895");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType0.getField(chronology20);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 1899, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime35 = localDate31.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str39 = dateTimeZone38.getID();
        org.joda.time.Interval interval40 = yearMonthDay36.toInterval(dateTimeZone38);
        org.joda.time.MutableInterval mutableInterval41 = interval40.toMutableInterval();
        org.joda.time.Interval interval43 = interval40.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology44.getZone();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.monthOfYear();
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period50 = org.joda.time.Period.minutes(1);
        java.lang.String str51 = period50.toString();
        org.joda.time.Period period52 = period48.withFields((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period54 = period52.plusMillis(100);
        org.joda.time.Period period55 = period52.negated();
        org.joda.time.Period period57 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period59 = org.joda.time.Period.minutes(1);
        java.lang.String str60 = period59.toString();
        org.joda.time.Period period61 = period57.withFields((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period63 = period61.plusMillis(100);
        boolean boolean64 = period55.equals((java.lang.Object) period63);
        long long67 = chronology44.add((org.joda.time.ReadablePeriod) period55, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField68 = chronology44.dayOfYear();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 2, (long) 4, periodType26, chronology44);
        java.lang.String str70 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField71 = chronology44.year();
        org.joda.time.DateTimeField dateTimeField72 = chronology44.millisOfDay();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType0.getField(chronology44);
        long long75 = dateTimeField73.roundHalfCeiling((long) 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.016" + "'", str39, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT1M" + "'", str51, "PT1M");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT1M" + "'", str60, "PT1M");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 31553832000L + "'", long67 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ISOChronology[+00:00:00.016]" + "'", str70, "ISOChronology[+00:00:00.016]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-16L) + "'", long75 == (-16L));
    }

    @Test
    public void test05896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05896");
        org.joda.time.Period period2 = new org.joda.time.Period(31795199984L, (long) 952);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration15 = period2.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        int int16 = dateTime13.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3172000 + "'", int16 == 3172000);
    }

    @Test
    public void test05897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05897");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str7 = locale4.getDisplayVariant(locale6);
        java.lang.String str8 = dateTimeZone1.getName((long) 5, locale4);
        java.util.Set<java.lang.Character> charSet9 = locale4.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.util.Date date19 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.fromDateFields(date19);
        org.joda.time.LocalDate.Property property21 = localDate20.weekOfWeekyear();
        org.joda.time.LocalDate localDate23 = property21.setCopy(10);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = property21.getAsText(locale24);
        java.lang.String str28 = locale12.getDisplayName(locale24);
        java.lang.String str29 = locale4.getDisplayName(locale12);
        java.lang.String str30 = locale12.getISO3Language();
        java.util.Set<java.lang.String> strSet31 = locale12.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = strSet31.add("ko_KR");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.016" + "'", str8, "+00:00:00.016");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(date19.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
    }

    @Test
    public void test05898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05898");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        int int4 = dateTime3.getDayOfWeek();
        org.joda.time.DateTime dateTime6 = dateTime3.minusWeeks(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime3.withTime((int) (short) -1, 376, (int) (short) 100, 53896);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test05899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05899");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period8 = period5.negated();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        boolean boolean17 = period8.equals((java.lang.Object) period16);
        org.joda.time.Period period19 = period8.minusMillis((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
    }

    @Test
    public void test05900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05900");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology17.years();
        int int21 = durationField19.getValue((long) 37);
        long long22 = durationField19.getUnitMillis();
        int int25 = durationField19.getDifference((long) 167, (-365931L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 31556952000L + "'", long22 == 31556952000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test05901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05901");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(18000059L, periodType1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withHourOfDay(3);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfMonth(1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str11 = dateTimeZone10.getID();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = dateMidnight12.isBefore(readableInstant13);
        int int15 = dateMidnight12.getYearOfCentury();
        org.joda.time.DateMidnight.Property property16 = dateMidnight12.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight12.minusMonths(7);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod();
        java.lang.String str20 = mutablePeriod19.toString();
        mutablePeriod19.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 1899, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Interval interval36 = yearMonthDay32.toInterval(dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Interval interval39 = interval36.withStartMillis((long) 32769);
        org.joda.time.Duration duration40 = interval39.toDuration();
        java.lang.String str41 = duration40.toString();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 1899, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str54 = dateTimeZone53.getID();
        org.joda.time.Interval interval55 = yearMonthDay51.toInterval(dateTimeZone53);
        org.joda.time.MutableInterval mutableInterval56 = interval55.toMutableInterval();
        org.joda.time.Interval interval58 = interval55.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.monthOfYear();
        org.joda.time.Period period63 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period65 = org.joda.time.Period.minutes(1);
        java.lang.String str66 = period65.toString();
        org.joda.time.Period period67 = period63.withFields((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period69 = period67.plusMillis(100);
        org.joda.time.Period period70 = period67.negated();
        org.joda.time.Period period72 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period74 = org.joda.time.Period.minutes(1);
        java.lang.String str75 = period74.toString();
        org.joda.time.Period period76 = period72.withFields((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Period period78 = period76.plusMillis(100);
        boolean boolean79 = period70.equals((java.lang.Object) period78);
        long long82 = chronology59.add((org.joda.time.ReadablePeriod) period70, 31556952000L, (int) '4');
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration40, chronology59);
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableDuration) duration40);
        boolean boolean86 = duration40.equals((java.lang.Object) "Korean");
        org.joda.time.DateTime dateTime87 = dateTime8.minus((org.joda.time.ReadableDuration) duration40);
        java.lang.String str89 = dateTime87.toString("10");
        boolean boolean90 = mutablePeriod2.equals((java.lang.Object) str89);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.016" + "'", str11, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT1645487967.215S" + "'", str41, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.016" + "'", str54, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT1M" + "'", str66, "PT1M");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT1M" + "'", str75, "PT1M");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 31553832000L + "'", long82 == 31553832000L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "10" + "'", str89, "10");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05902");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.centuryOfEra();
        java.lang.String str22 = dateTimeField20.getAsText((long) 2022);
        int int25 = dateTimeField20.getDifference(4561L, 3226904580000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "19" + "'", str22, "19");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test05903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05903");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.Interval interval15 = yearMonthDay10.toInterval();
        org.joda.time.Period period17 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period21 = period17.withFields((org.joda.time.ReadablePeriod) period19);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 1899, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.Interval interval36 = yearMonthDay32.toInterval(dateTimeZone34);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.joda.time.Interval interval39 = interval36.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay22.withChronologyRetainFields(chronology40);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(chronology40);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.DateTimeField dateTimeField46 = chronology40.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField48 = chronology40.dayOfYear();
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(4640179830720000L, chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT1M" + "'", str20, "PT1M");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test05904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05904");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.Interval interval14 = yearMonthDay9.toInterval();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1899, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.Interval interval35 = yearMonthDay31.toInterval(dateTimeZone33);
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        org.joda.time.Interval interval38 = interval35.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay21.withChronologyRetainFields(chronology39);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(chronology39);
        org.joda.time.LocalDate.Property property44 = localDate43.centuryOfEra();
        int int45 = localDate43.size();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 1899, dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        int int53 = dateTimeZone51.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime54 = localDate50.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str58 = dateTimeZone57.getID();
        org.joda.time.Interval interval59 = yearMonthDay55.toInterval(dateTimeZone57);
        org.joda.time.MutableInterval mutableInterval60 = interval59.toMutableInterval();
        org.joda.time.Interval interval62 = interval59.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = chronology63.getZone();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.monthOfYear();
        org.joda.time.Period period67 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period69 = org.joda.time.Period.minutes(1);
        java.lang.String str70 = period69.toString();
        org.joda.time.Period period71 = period67.withFields((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period73 = period71.plusMillis(100);
        org.joda.time.Period period74 = period71.negated();
        org.joda.time.Period period76 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period78 = org.joda.time.Period.minutes(1);
        java.lang.String str79 = period78.toString();
        org.joda.time.Period period80 = period76.withFields((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period82 = period80.plusMillis(100);
        boolean boolean83 = period74.equals((java.lang.Object) period82);
        long long86 = chronology63.add((org.joda.time.ReadablePeriod) period74, 31556952000L, (int) '4');
        org.joda.time.Period period88 = period74.plusWeeks(3172001);
        int int89 = period88.getMillis();
        org.joda.time.LocalDate localDate91 = localDate43.withPeriodAdded((org.joda.time.ReadablePeriod) period88, 45);
        int int92 = localDate43.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.016" + "'", str58, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PT1M" + "'", str70, "PT1M");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT1M" + "'", str79, "PT1M");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 31553832000L + "'", long86 == 31553832000L);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 52 + "'", int92 == 52);
    }

    @Test
    public void test05905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05905");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone4);
        int int8 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.weekyear();
        java.lang.String str11 = mutableDateTime7.toString("0");
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = timeOfDay16.getFields();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        org.joda.time.DateTime dateTime22 = dateTime19.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(dateTimeZone24);
        boolean boolean27 = dateTime22.equals((java.lang.Object) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.plusMonths(10);
        int int30 = dateMidnight26.getEra();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = timeOfDay35.toDateTimeToday(dateTimeZone36);
        org.joda.time.TimeOfDay.Property property38 = timeOfDay35.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay39 = property38.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay41 = property38.addNoWrapToCopy(15);
        org.joda.time.TimeOfDay timeOfDay42 = property38.getTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property38.getFieldType();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getRangeDurationType();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight26.withField(dateTimeFieldType43, 25);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.set(dateTimeFieldType43, 86383026);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86383026 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.016" + "'", str25, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test05906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05906");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.centuryOfEra();
        int int17 = localDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.property(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime12.getFieldTypes();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 10, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMinuteOfHour(0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 10, chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMillis(3);
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.centuryOfEra();
        int int39 = localDateTime34.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property41 = localDateTime34.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime34.withDayOfWeek(86341970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86341970 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test05907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05907");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDateTime0.isSupported(dateTimeFieldType1);
        int int3 = localDateTime0.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = property4.setCopy(86383026);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86383026 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test05908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05908");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray12 = new java.lang.String[] { "00", "PT1M", "", "PT1M", "46", "46", "+00:00:00.016", "", "PT1M" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList13, filteringMode15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale[] localeArray20 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList21);
        boolean boolean24 = localeList23.isEmpty();
        java.util.stream.Stream<java.util.Locale> localeStream25 = localeList23.stream();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        boolean boolean30 = localeList23.add(locale28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 1899, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        int int38 = dateTimeZone36.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str43 = dateTimeZone42.getID();
        org.joda.time.Interval interval44 = yearMonthDay40.toInterval(dateTimeZone42);
        org.joda.time.YearMonthDay.Property property45 = yearMonthDay40.dayOfMonth();
        boolean boolean46 = localeList23.contains((java.lang.Object) yearMonthDay40);
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        java.lang.String[] strArray65 = new java.lang.String[] { "00", "10", "46", "", "", "minuteOfHour", "2022-02-21T00:52:52.000Z", "PT0S", "45", "45", "PT0S", "10" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        java.util.Iterator<java.lang.String> strItor68 = strSet66.iterator();
        boolean boolean69 = strSet52.remove((java.lang.Object) strSet66);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList74);
        boolean boolean77 = strSet52.containsAll((java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale.LanguageRange[] languageRangeArray78 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList79 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList79, languageRangeArray78);
        java.util.Locale[] localeArray81 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList82 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList82, localeArray81);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, (java.util.Collection<java.util.Locale>) localeList82);
        boolean boolean85 = localeList84.isEmpty();
        java.util.stream.Stream<java.util.Locale> localeStream86 = localeList84.stream();
        boolean boolean87 = localeList76.containsAll((java.util.Collection<java.util.Locale>) localeList84);
        java.util.Locale.LanguageRange[] languageRangeArray88 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList89 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList89, languageRangeArray88);
        java.util.Locale[] localeArray91 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList92 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList92, localeArray91);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList89, (java.util.Collection<java.util.Locale>) localeList92);
        java.lang.Object[] objArray95 = localeList92.toArray();
        boolean boolean96 = localeList84.removeAll((java.util.Collection<java.util.Locale>) localeList92);
        java.util.Spliterator<java.util.Locale> localeSpliterator97 = localeList92.spliterator();
        java.util.stream.Stream<java.util.Locale> localeStream98 = localeList92.stream();
        java.util.Locale locale99 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList92);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + filteringMode15 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode15.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localeStream25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.016" + "'", str43, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(languageRangeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localeStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(languageRangeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(localeArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(localeSpliterator97);
        org.junit.Assert.assertNotNull(localeStream98);
        org.junit.Assert.assertNull(locale99);
    }

    @Test
    public void test05909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05909");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = timeOfDay15.toDateTimeToday(dateTimeZone16);
        mutableDateTime10.setZoneRetainFields(dateTimeZone16);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone16);
        mutableDateTime3.setZoneRetainFields(dateTimeZone16);
        mutableDateTime3.addMinutes(999);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundCeiling();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test05910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05910");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.DurationField durationField10 = property7.getRangeDurationField();
        java.lang.String str11 = durationField10.toString();
        long long14 = durationField10.add((long) 1970, (int) (short) 10);
        java.util.Date date20 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date20);
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.joda.time.LocalDate localDate24 = property22.setCopy(10);
        org.joda.time.DurationField durationField25 = property22.getRangeDurationField();
        int int26 = durationField10.compareTo(durationField25);
        long long29 = durationField10.subtract((long) 8, (long) 7);
        boolean boolean30 = durationField10.isPrecise();
        long long33 = durationField10.getMillis(15, (long) 8);
        int int36 = durationField10.getValue((long) 51, (long) 951);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[weekyears]" + "'", str11, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 315705601970L + "'", long14 == 315705601970L);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-220751999992L) + "'", long29 == (-220751999992L));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 473558400000L + "'", long33 == 473558400000L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test05911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05911");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfMinute();
        boolean boolean3 = property2.isLeap();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8, 0);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime7.add(readableDuration12);
        long long14 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundCeiling();
        int int17 = mutableDateTime16.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test05912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05912");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("00");
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusDays((int) (short) -1);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.era();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        long long6 = property4.remainder();
        org.joda.time.DateMidnight dateMidnight7 = property4.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight8 = property4.roundHalfFloorCopy();
        int int9 = dateMidnight8.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9223309869549175808L + "'", long6 == 9223309869549175808L);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05913");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str2 = localTime0.toString(dateTimeFormatter1);
        org.joda.time.LocalTime localTime4 = localTime0.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalTime localTime7 = localTime4.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalTime localTime9 = localTime7.plusMinutes(47);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours(860);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = timeOfDay22.toDateTimeToday(dateTimeZone23);
        mutableDateTime17.setZoneRetainFields(dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration26);
        mutableDateTime17.setMillisOfDay(10);
        mutableDateTime17.setSecondOfDay(1970);
        int int32 = mutableDateTime17.getMinuteOfDay();
        int int33 = mutableDateTime17.getWeekyear();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = timeOfDay38.getFields();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTimeToday(dateTimeZone40);
        org.joda.time.DateTime.Property property42 = dateTime41.monthOfYear();
        org.joda.time.DateTime dateTime44 = dateTime41.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str47 = dateTimeZone46.getID();
        org.joda.time.DateMidnight dateMidnight48 = org.joda.time.DateMidnight.now(dateTimeZone46);
        boolean boolean49 = dateTime44.equals((java.lang.Object) dateMidnight48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.plusMonths(10);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.dayOfYear();
        org.joda.time.DateMidnight dateMidnight53 = property52.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight53.withDurationAdded((long) 400, 20);
        mutableDateTime17.setMillis((org.joda.time.ReadableInstant) dateMidnight56);
        int int58 = property12.getDifference((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.setWeekyear(66);
        java.lang.String str62 = mutableDateTime17.toString("23:59:00.000");
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str2, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.016" + "'", str47, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-27859392) + "'", int58 == (-27859392));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "23:59:00.000" + "'", str62, "23:59:00.000");
    }

    @Test
    public void test05914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05914");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        int int6 = period1.getMinutes();
        org.joda.time.Period period7 = period1.toPeriod();
        int[] intArray8 = period1.getValues();
        org.joda.time.Period period10 = period1.withMinutes(53803354);
        org.joda.time.Period period12 = period10.minusMonths(86340000);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = timeOfDay17.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minus((long) (short) 0);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minus(315705601970L);
        org.joda.time.DateTime.Property property25 = dateTime22.era();
        org.joda.time.LocalTime localTime26 = dateTime22.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = timeOfDay31.getFields();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTimeToday(dateTimeZone33);
        org.joda.time.DateTime.Property property35 = dateTime34.monthOfYear();
        org.joda.time.DateTime dateTime37 = dateTime34.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str40 = dateTimeZone39.getID();
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(dateTimeZone39);
        boolean boolean42 = dateTime37.equals((java.lang.Object) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.plusMonths(10);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.monthOfYear();
        org.joda.time.Period period47 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period49 = org.joda.time.Period.minutes(1);
        java.lang.String str50 = period49.toString();
        org.joda.time.Period period51 = period47.withFields((org.joda.time.ReadablePeriod) period49);
        int int52 = period47.getMinutes();
        org.joda.time.Period period53 = period47.toPeriod();
        int int54 = period53.getSeconds();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight44.withPeriodAdded((org.joda.time.ReadablePeriod) period53, 5);
        int int57 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateTime dateTime59 = dateTime22.withWeekyear((-953));
        int int60 = dateTime22.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period12, (org.joda.time.ReadableInstant) dateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.016" + "'", str40, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT1M" + "'", str50, "PT1M");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
    }

    @Test
    public void test05915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05915");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((long) 45);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        int int8 = dateTimeField7.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial9 = null;
        int[] intArray16 = new int[] { 'u', 6, (byte) 10, 10, 53, 1899 };
        int int17 = dateTimeField7.getMinimumValue(readablePartial9, intArray16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 1899, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        int int25 = dateTimeZone23.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str30 = dateTimeZone29.getID();
        org.joda.time.Interval interval31 = yearMonthDay27.toInterval(dateTimeZone29);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Interval interval34 = interval31.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.monthOfYear();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.millis();
        org.joda.time.Period period40 = new org.joda.time.Period((java.lang.Object) readablePartial9, chronology35);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(chronology35);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = chronology35.dayOfMonth();
        long long47 = dateTimeField44.getDifferenceAsLong(1705935354143L, 2548708869000L);
        org.joda.time.TimeOfDay timeOfDay49 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 365);
        org.joda.time.LocalTime localTime50 = timeOfDay49.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str54 = dateTimeZone53.getID();
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.now(dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.plus((long) 45);
        org.joda.time.DateMidnight.Property property58 = dateMidnight55.weekyear();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay(0, (int) '4', chronology62);
        org.joda.time.TimeOfDay.Property property64 = timeOfDay63.secondOfMinute();
        int[] intArray66 = new int[] { 21 };
        int int67 = dateTimeField59.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay63, intArray66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 10, chronology70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withMinuteOfHour(0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 10, chronology75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.withFields((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime73.withDurationAdded(readableDuration80, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property83 = localDateTime73.monthOfYear();
        org.joda.time.LocalDateTime.Property property84 = localDateTime73.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime85 = property84.withMaximumValue();
        int int86 = property84.getMaximumValueOverall();
        java.util.Locale locale87 = java.util.Locale.US;
        int int88 = property84.getMaximumTextLength(locale87);
        java.lang.String str89 = locale87.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet90 = locale87.getExtensionKeys();
        java.lang.String str91 = locale87.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = dateTimeField44.set((org.joda.time.ReadablePartial) timeOfDay49, 365, intArray66, "2022-02-21T14:56:39.632+00:00:00.016", locale87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:56:39.632+00:00:00.016\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-292275054) + "'", int8 == (-292275054));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[117, 6, 10, 10, 53, 1899]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-292275054) + "'", int17 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-9754L) + "'", long47 == (-9754L));
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.016" + "'", str54, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[21]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 31 + "'", int86 == 31);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(charSet90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str91, "\uc601\uc5b4\ubbf8\uad6d)");
    }

    @Test
    public void test05916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05916");
        java.lang.String[] strArray8 = new java.lang.String[] { "2022-02-21T00:52:52.000Z", "Korean (South Korea)", "1970", "hi!", "1970", "45", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale[] localeArray14 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.stream.Stream<java.util.Locale> localeStream18 = localeList17.parallelStream();
        boolean boolean19 = strSet9.retainAll((java.util.Collection<java.util.Locale>) localeList17);
        java.lang.String[] strArray28 = new java.lang.String[] { "2022-02-21T00:52:52.000Z", "Korean (South Korea)", "1970", "hi!", "1970", "45", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale[] localeArray34 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.stream.Stream<java.util.Locale> localeStream38 = localeList37.parallelStream();
        boolean boolean39 = strSet29.retainAll((java.util.Collection<java.util.Locale>) localeList37);
        boolean boolean40 = localeList17.retainAll((java.util.Collection<java.util.Locale>) localeList37);
        java.util.stream.Stream<java.util.Locale> localeStream41 = localeList37.parallelStream();
        localeList37.clear();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(localeStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(localeStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localeStream41);
    }

    @Test
    public void test05917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05917");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        boolean boolean12 = dateTime7.isAfter((long) '#');
        java.lang.String str13 = dateTime7.toString();
        org.joda.time.DateTime dateTime15 = dateTime7.minusSeconds(292278993);
        org.joda.time.DateTime dateTime17 = dateTime7.withMillis((long) 16);
        boolean boolean18 = dateTime7.isBeforeNow();
        org.joda.time.DateTime dateTime20 = dateTime7.plusDays(2);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        org.joda.time.DateTime dateTime23 = dateTime20.plusSeconds(10);
        org.joda.time.DateTime dateTime25 = dateTime20.withWeekOfWeekyear(24);
        org.joda.time.DateTime dateTime27 = dateTime20.minusDays(2044);
        org.joda.time.LocalTime localTime28 = dateTime20.toLocalTime();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T00:52:52.000+00:00:00.016" + "'", str13, "2022-02-21T00:52:52.000+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test05918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05918");
        java.util.Date date3 = new java.util.Date((int) (short) 10, (int) (short) 100, (int) '#');
        int int4 = date3.getMinutes();
        int int5 = date3.getSeconds();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(8);
        org.joda.time.LocalDate localDate12 = localDate10.withCenturyOfEra((int) 'a');
        java.util.Date date18 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date18);
        org.joda.time.LocalDate.Property property20 = localDate19.weekOfWeekyear();
        org.joda.time.LocalDate localDate22 = property20.setCopy("45");
        org.joda.time.LocalDate localDate24 = property20.addToCopy((int) '4');
        org.joda.time.LocalDate localDate25 = property20.roundFloorCopy();
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfCentury();
        org.joda.time.LocalDate localDate28 = localDate25.minusWeeks(0);
        boolean boolean29 = localDate10.equals((java.lang.Object) localDate28);
        int int30 = localDate28.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight7.withFields((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.Period period33 = org.joda.time.Period.hours(44);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight7.minus((org.joda.time.ReadablePeriod) period33);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Jun 04 00:00:00 GMT+00:00 1918");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals(date18.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateMidnight34);
    }

    @Test
    public void test05919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05919");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period8 = period5.negated();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        boolean boolean17 = period8.equals((java.lang.Object) period16);
        org.joda.time.Period period19 = period8.minusMillis((int) (short) 10);
        org.joda.time.Period period20 = period19.normalizedStandard();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(536468184000L, periodType22);
        org.joda.time.Period period24 = period19.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str27 = dateTimeZone26.getID();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime31 = dateTime28.withField(dateTimeFieldType29, 44);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getRangeDurationType();
        int int33 = period19.get(durationFieldType32);
        org.joda.time.Period period35 = period19.plusMonths(1905);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.016" + "'", str27, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test05920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05920");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date5);
        date5.setHours(54);
        int int11 = date5.getTimezoneOffset();
        java.lang.String str12 = date5.toGMTString();
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 12 06:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "12 Mar 1899 06:34:59 GMT" + "'", str12, "12 Mar 1899 06:34:59 GMT");
    }

    @Test
    public void test05921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05921");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.minus(315705601970L);
        org.joda.time.DateTime.Property property12 = dateTime9.era();
        org.joda.time.LocalTime localTime13 = dateTime9.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.monthOfYear();
        org.joda.time.DateTime dateTime24 = dateTime21.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str27 = dateTimeZone26.getID();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(dateTimeZone26);
        boolean boolean29 = dateTime24.equals((java.lang.Object) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.plusMonths(10);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        int int39 = period34.getMinutes();
        org.joda.time.Period period40 = period34.toPeriod();
        int int41 = period40.getSeconds();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight31.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 5);
        int int44 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight31.withYear(56586397);
        org.joda.time.DateMidnight.Property property47 = dateMidnight31.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        int int50 = dateTimeZone48.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52, 0);
        org.joda.time.Period period56 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period58 = org.joda.time.Period.minutes(1);
        java.lang.String str59 = period58.toString();
        org.joda.time.Period period60 = period56.withFields((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period62 = period58.minusSeconds((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Duration duration64 = period58.toDurationFrom(readableInstant63);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime51, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime51.weekyear();
        mutableDateTime51.addSeconds((-609));
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period71 = org.joda.time.Period.minutes(1);
        java.lang.String str72 = period71.toString();
        org.joda.time.Period period74 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period76 = org.joda.time.Period.minutes(1);
        java.lang.String str77 = period76.toString();
        org.joda.time.Period period78 = period74.withFields((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period80 = period78.plusMillis(100);
        org.joda.time.Period period81 = period78.negated();
        int int82 = period81.getMillis();
        org.joda.time.Period period84 = period81.minusDays(32);
        org.joda.time.DurationFieldType durationFieldType86 = period84.getFieldType(0);
        java.lang.String str87 = durationFieldType86.getName();
        int int88 = period71.get(durationFieldType86);
        boolean boolean89 = mutablePeriod69.isSupported(durationFieldType86);
        mutableDateTime51.add(durationFieldType86, (-52));
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight31.withFieldAdded(durationFieldType86, 23);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.016" + "'", str27, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 16 + "'", int50 == 16);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT1M" + "'", str59, "PT1M");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT1M" + "'", str72, "PT1M");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PT1M" + "'", str77, "PT1M");
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "years" + "'", str87, "years");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateMidnight93);
    }

    @Test
    public void test05922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05922");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.monthOfYear();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DurationField durationField22 = chronology18.millis();
        boolean boolean23 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DurationField durationField24 = chronology18.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = durationField24.subtract((long) 15, 1645455306354L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -1645455306354 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test05923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05923");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:55:34.849+00:00:00.016");
        java.util.TimeZone.setDefault(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = timeZone1.getDisplayName(false, (-26701436));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: -26701436");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test05924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05924");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusDays(8);
        org.joda.time.LocalDate localDate4 = localDate2.withYearOfEra(18);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localDate4.get(dateTimeFieldType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test05925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05925");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 984);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test05926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05926");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTime();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        mutableDateTime4.setZoneRetainFields(dateTimeZone10);
        boolean boolean13 = mutableDateTime4.isEqualNow();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.monthOfYear();
        boolean boolean23 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) dateTime21);
        int int26 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "eng", 46);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime4.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime27.setDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-47) + "'", int26 == (-47));
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test05927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05927");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str2 = localTime0.toString(dateTimeFormatter1);
        org.joda.time.LocalTime localTime4 = localTime0.minusSeconds((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.lang.String str6 = localTime0.toString(dateTimeFormatter5);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        java.lang.String str9 = period8.toString();
        org.joda.time.LocalTime localTime11 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, 12);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.withHourOfDay(3);
        int int16 = dateTime15.getSecondOfMinute();
        int int17 = dateTime15.getMinuteOfHour();
        boolean boolean18 = dateTime15.isEqualNow();
        org.joda.time.DateTime dateTime20 = dateTime15.withWeekyear((int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime15.minusYears((int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime15.plusMillis((int) 'u');
        org.joda.time.Duration duration25 = period8.toDurationFrom((org.joda.time.ReadableInstant) dateTime15);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str2, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "T00:00:00.000" + "'", str6, "T00:00:00.000");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT1M" + "'", str9, "PT1M");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
    }

    @Test
    public void test05928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05928");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withHourOfDay(3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 1899, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.Interval interval17 = yearMonthDay13.toInterval(dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Interval interval20 = interval17.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology21.getZone();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateTime3, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime3.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTime.Property property26 = dateTime3.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((long) 53660892);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime28.withSecondOfMinute(759);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 759 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test05929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05929");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        boolean boolean11 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.withYearOfCentury(10);
        org.joda.time.DateTime dateTime15 = dateTime13.minus((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTime();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.Period period26 = period23.negated();
        org.joda.time.Period period28 = period26.withMillis(1899);
        org.joda.time.Minutes minutes29 = period26.toStandardMinutes();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Period period31 = period26.minus(readablePeriod30);
        boolean boolean32 = dateTime16.equals((java.lang.Object) period31);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test05930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05930");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period7 = period1.normalizedStandard(periodType6);
        org.joda.time.PeriodType periodType8 = periodType6.withSecondsRemoved();
        java.lang.String str9 = periodType8.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(3);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 1899, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.Interval interval27 = yearMonthDay23.toInterval(dateTimeZone25);
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.Interval interval30 = interval27.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime13.withMillisOfDay((int) (byte) 10);
        org.joda.time.Chronology chronology36 = dateTime13.getChronology();
        boolean boolean37 = periodType8.equals((java.lang.Object) chronology36);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDay]" + "'", str9, "PeriodType[YearDay]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.016" + "'", str26, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test05931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05931");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = timeOfDay15.toDateTimeToday(dateTimeZone16);
        mutableDateTime10.setZoneRetainFields(dateTimeZone16);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone16);
        mutableDateTime3.setZoneRetainFields(dateTimeZone16);
        mutableDateTime3.addMinutes(999);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.secondOfMinute();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime3.dayOfWeek();
        mutableDateTime3.setMillis((long) 999);
        int int27 = mutableDateTime3.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setWeekOfWeekyear(56586397);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56586397 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test05932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05932");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        boolean boolean2 = dateTimeFormatter1.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withDefaultYear(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear(53875974);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.parse("eng", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"eng\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test05933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05933");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay15 = property14.getYearMonthDay();
        int int16 = yearMonthDay15.size();
        int int17 = yearMonthDay15.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) int17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test05934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05934");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Calendar.Builder builder3 = builder0.setLocale(locale1);
        java.util.Calendar calendar4 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder9 = builder6.set(372, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test05935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05935");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        mutableDateTime4.setZoneRetainFields(dateTimeZone10);
        boolean boolean13 = mutableDateTime4.isEqualNow();
        org.joda.time.DateTimeField dateTimeField14 = mutableDateTime4.getRoundingField();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime4.setSecondOfDay(54);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period25 = org.joda.time.Period.minutes(1);
        java.lang.String str26 = period25.toString();
        org.joda.time.Period period27 = period23.withFields((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period29 = period25.minusSeconds((int) (short) 100);
        mutableDateTime21.add((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period32 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        java.lang.String str35 = period34.toString();
        org.joda.time.Period period36 = period32.withFields((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period38 = period36.plusMillis(100);
        org.joda.time.Period period39 = period36.negated();
        org.joda.time.Period period41 = period39.withMillis(1899);
        org.joda.time.Period period43 = period41.plusMillis(0);
        mutableDateTime21.add((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime45 = mutableDateTime21.toDateTime();
        mutableDateTime21.setWeekyear(1970);
        org.joda.time.DateTimeField dateTimeField48 = mutableDateTime21.getRoundingField();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = timeOfDay53.getFields();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTimeToday(dateTimeZone55);
        org.joda.time.DateTime.Property property57 = dateTime56.monthOfYear();
        org.joda.time.DateTime dateTime59 = dateTime56.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str62 = dateTimeZone61.getID();
        org.joda.time.DateMidnight dateMidnight63 = org.joda.time.DateMidnight.now(dateTimeZone61);
        boolean boolean64 = dateTime59.equals((java.lang.Object) dateMidnight63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.plusMonths(10);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfYear();
        org.joda.time.DateMidnight.Property property68 = dateMidnight66.yearOfEra();
        org.joda.time.DateMidnight.Property property69 = dateMidnight66.dayOfYear();
        org.joda.time.DateMidnight dateMidnight70 = property69.roundHalfEvenCopy();
        int int71 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) dateMidnight70);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) dateMidnight70);
        mutableDateTime4.addMonths(40080984);
        mutableDateTime4.addSeconds(53);
        mutableDateTime4.setSecondOfDay((int) (short) 100);
        java.util.Locale locale80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = mutableDateTime4.toString("1970-01-01T00:00:32.785+00:00:00.016/2022-02-22T00:00:00.000+00:00:00.016", locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT1M" + "'", str26, "PT1M");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT1M" + "'", str35, "PT1M");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.016" + "'", str62, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test05936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05936");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours(1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMonthOfYear((-1962));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1962 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05937");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (short) 10, (long) 53);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 1899, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.Interval interval17 = yearMonthDay13.toInterval(dateTimeZone15);
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        org.joda.time.Interval interval20 = interval17.withStartMillis((long) 32769);
        org.joda.time.Duration duration21 = interval20.toDuration();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray29 = new org.joda.time.DurationFieldType[] { durationFieldType28 };
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.forFields(durationFieldTypeArray29);
        org.joda.time.Period period31 = new org.joda.time.Period((long) ' ', periodType30);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime25, periodType30);
        org.joda.time.Duration duration33 = duration21.toDuration();
        java.lang.String str34 = duration33.toString();
        org.joda.time.Interval interval35 = interval3.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 27424799, chronology36);
        boolean boolean39 = dateTime37.isEqual(4640179830720000L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.016" + "'", str24, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldTypeArray29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1645487967.215S" + "'", str34, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test05938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05938");
        org.joda.time.Period period1 = org.joda.time.Period.years(956);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test05939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05939");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        java.lang.String str15 = dateTimeZone11.getNameKey((long) (byte) 10);
        org.joda.time.DateTime dateTime16 = timeOfDay10.toDateTimeToday(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = timeOfDay26.toDateTimeToday(dateTimeZone27);
        mutableDateTime21.setZoneRetainFields(dateTimeZone27);
        boolean boolean30 = mutableDateTime21.isEqualNow();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = timeOfDay35.getFields();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTimeToday(dateTimeZone37);
        org.joda.time.DateTime.Property property39 = dateTime38.monthOfYear();
        boolean boolean40 = mutableDateTime21.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.roundCeiling();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfCentury();
        int int45 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) mutableDateTime43);
        java.lang.String str47 = dateTimeZone11.getShortName((-1645369200024L));
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.016" + "'", str47, "+00:00:00.016");
    }

    @Test
    public void test05940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05940");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period8 = period5.negated();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        boolean boolean17 = period8.equals((java.lang.Object) period16);
        org.joda.time.Period period18 = period8.normalizedStandard();
        int int19 = period18.getMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test05941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05941");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfWeek();
        org.joda.time.Chronology chronology9 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withMinuteOfHour(6);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(53834288);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test05942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05942");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        java.lang.String str12 = period11.toString();
        org.joda.time.Period period13 = period9.withFields((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period15 = period11.minusSeconds((int) (short) 100);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfMinute();
        org.joda.time.DateTime dateTime21 = dateTime18.withYearOfCentury(16);
        mutableDateTime7.setDate((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime7.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.addWrapField(2);
        boolean boolean26 = dateTimeZone1.equals((java.lang.Object) mutableDateTime25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT1M" + "'", str12, "PT1M");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test05943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05943");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property7.setCopy(10);
        org.joda.time.DurationField durationField10 = property7.getRangeDurationField();
        java.lang.String str11 = durationField10.toString();
        long long14 = durationField10.add((long) 1970, (int) (short) 10);
        int int16 = durationField10.getValue((long) (byte) 10);
        long long19 = durationField10.add((long) 861, (-53773230));
        long long22 = durationField10.add((long) (byte) 10, 17);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[weekyears]" + "'", str11, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 315705601970L + "'", long14 == 315705601970L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1696919237798399139L) + "'", long19 == (-1696919237798399139L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 536457600010L + "'", long22 == 536457600010L);
    }

    @Test
    public void test05944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05944");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Duration duration17 = interval16.toDuration();
        boolean boolean19 = interval16.isAfter((long) 292278993);
        long long20 = interval16.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        int int24 = dateTimeZone22.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 1899, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str33 = dateTimeZone32.getID();
        org.joda.time.Interval interval34 = yearMonthDay30.toInterval(dateTimeZone32);
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.Interval interval37 = interval34.withStartMillis((long) 32769);
        org.joda.time.Duration duration38 = interval37.toDuration();
        java.lang.String str39 = duration38.toString();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        int int43 = dateTimeZone41.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 1899, dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        int int47 = dateTimeZone45.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str52 = dateTimeZone51.getID();
        org.joda.time.Interval interval53 = yearMonthDay49.toInterval(dateTimeZone51);
        org.joda.time.MutableInterval mutableInterval54 = interval53.toMutableInterval();
        org.joda.time.Interval interval56 = interval53.withStartMillis((long) 32769);
        org.joda.time.Duration duration57 = interval56.toDuration();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str60 = dateTimeZone59.getID();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone59);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType63.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = new org.joda.time.DurationFieldType[] { durationFieldType64 };
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.forFields(durationFieldTypeArray65);
        org.joda.time.Period period67 = new org.joda.time.Period((long) ' ', periodType66);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime61, periodType66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str71 = dateTimeZone70.getID();
        org.joda.time.DateMidnight dateMidnight72 = org.joda.time.DateMidnight.now(dateTimeZone70);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateMidnight72);
        int int74 = duration38.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        int int78 = dateTimeZone76.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) 1899, dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        int int82 = dateTimeZone80.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime83 = localDate79.toDateTimeAtCurrentTime(dateTimeZone80);
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay(dateTimeZone80);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str87 = dateTimeZone86.getID();
        org.joda.time.Interval interval88 = yearMonthDay84.toInterval(dateTimeZone86);
        org.joda.time.MutableInterval mutableInterval89 = interval88.toMutableInterval();
        org.joda.time.Interval interval91 = interval88.withStartMillis((long) 32769);
        org.joda.time.Duration duration92 = interval91.toDuration();
        java.lang.String str93 = duration92.toString();
        boolean boolean94 = duration38.isEqual((org.joda.time.ReadableDuration) duration92);
        org.joda.time.Interval interval95 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime97 = new org.joda.time.DateTime((-2142575976000L));
        boolean boolean98 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime97);
        int int99 = dateTime97.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645487967215L + "'", long20 == 1645487967215L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT1645487967.215S" + "'", str39, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16 + "'", int47 == 16);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.016" + "'", str52, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.016" + "'", str60, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.016" + "'", str71, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 16 + "'", int78 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone80);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 16 + "'", int82 == 16);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00:00.016" + "'", str87, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(mutableInterval89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "PT1645487967.215S" + "'", str93, "PT1645487967.215S");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 960 + "'", int99 == 960);
    }

    @Test
    public void test05945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05945");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 10, (long) 53);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1899, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str15 = dateTimeZone14.getID();
        org.joda.time.Interval interval16 = yearMonthDay12.toInterval(dateTimeZone14);
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Interval interval19 = interval16.withStartMillis((long) 32769);
        org.joda.time.Duration duration20 = interval19.toDuration();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray28 = new org.joda.time.DurationFieldType[] { durationFieldType27 };
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.forFields(durationFieldTypeArray28);
        org.joda.time.Period period30 = new org.joda.time.Period((long) ' ', periodType29);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime24, periodType29);
        org.joda.time.Duration duration32 = duration20.toDuration();
        java.lang.String str33 = duration32.toString();
        org.joda.time.Interval interval34 = interval2.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        boolean boolean36 = interval2.isBefore((long) (short) 100);
        org.joda.time.Duration duration37 = interval2.toDuration();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 1899, dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str50 = dateTimeZone49.getID();
        org.joda.time.Interval interval51 = yearMonthDay47.toInterval(dateTimeZone49);
        org.joda.time.MutableInterval mutableInterval52 = interval51.toMutableInterval();
        org.joda.time.Interval interval54 = interval51.withStartMillis((long) 32769);
        org.joda.time.Duration duration55 = interval54.toDuration();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str58 = dateTimeZone57.getID();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone57);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = new org.joda.time.DurationFieldType[] { durationFieldType62 };
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.forFields(durationFieldTypeArray63);
        org.joda.time.Period period65 = new org.joda.time.Period((long) ' ', periodType64);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime59, periodType64);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str69 = dateTimeZone68.getID();
        org.joda.time.DateMidnight dateMidnight70 = org.joda.time.DateMidnight.now(dateTimeZone68);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateMidnight70);
        java.lang.String str72 = duration55.toString();
        boolean boolean73 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.016" + "'", str15, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(durationFieldTypeArray28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT1645487967.215S" + "'", str33, "PT1645487967.215S");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.016" + "'", str50, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.016" + "'", str58, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.016" + "'", str69, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT1645487967.215S" + "'", str72, "PT1645487967.215S");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test05946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05946");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 2022);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusWeeks(11);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10, chronology5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Chronology chronology8 = null;
        mutablePeriod6.setPeriod(readableDuration7, chronology8);
        mutablePeriod6.setWeeks(47);
        org.joda.time.ReadableInterval readableInterval12 = null;
        mutablePeriod6.add(readableInterval12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod6, 535);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) dateMidnight15, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.minusMonths((-52));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = dateMidnight15.toString("en");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: n");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test05947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05947");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) (short) -1);
        int int2 = period1.getMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test05948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05948");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        int int7 = dateTime6.getEra();
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfYear();
        org.joda.time.DateTime dateTime9 = property8.roundCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = timeOfDay14.toDateTimeToday(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.minus((long) (short) 0);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime18.getZone();
        java.lang.String str21 = dateTimeZone20.getID();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str25 = dateTimeZone24.getID();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str30 = locale27.getDisplayVariant(locale29);
        java.lang.String str31 = dateTimeZone24.getName((long) 5, locale27);
        java.util.Set<java.lang.Character> charSet32 = locale27.getExtensionKeys();
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale33.getExtension('a');
        java.lang.String str36 = locale27.getDisplayName(locale33);
        java.lang.String str37 = dateTimeZone20.getName((-1073174400000L), locale27);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        long long39 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.016" + "'", str21, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.016" + "'", str25, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.016" + "'", str31, "+00:00:00.016");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u97d3\u56fd\u8a9e" + "'", str36, "\u97d3\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.016" + "'", str37, "+00:00:00.016");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test05949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05949");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Calendar.Builder builder3 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder5 = builder3.setLenient(true);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test05950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05950");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.centuryOfEra();
        boolean boolean17 = property16.isLeap();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05951");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str7 = locale4.getDisplayVariant(locale6);
        java.lang.String str8 = dateTimeZone1.getName((long) 5, locale4);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone1);
        int int11 = dateTimeZone1.getOffsetFromLocal((long) 794);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate14 = localDate12.plusWeeks(1970);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.016" + "'", str8, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test05952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05952");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        int int4 = dateMidnight3.getMinuteOfDay();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withCenturyOfEra(86400);
        int int8 = dateMidnight7.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8640022 + "'", int8 == 8640022);
    }

    @Test
    public void test05953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05953");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        int int4 = calendar3.getWeekYear();
        calendar3.setMinimalDaysInFirstWeek((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        calendar3.set(9, (int) 'u');
        calendar3.setMinimalDaysInFirstWeek(56);
        calendar3.setTimeInMillis((long) 2012);
        int int15 = calendar3.getWeekYear();
        calendar3.set(2025, 528, (-2013), 1722, (-51));
        // The following exception was thrown during execution in test generation
        try {
            calendar3.clear(53832151);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53832151");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=56,ERA=1,YEAR=2025,MONTH=528,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=-2013,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=1722,MINUTE=-51,SECOND=2,MILLISECOND=28,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
    }

    @Test
    public void test05954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05954");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-21T14:57:46.281+00:00:00.016", (double) 53821118L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=5.3821118E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05955");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setScript("2022-02-21T03:54:27.399Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-21T03:54:27.399Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05956");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.Period period9 = period6.negated();
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period15.plusMillis(100);
        boolean boolean18 = period9.equals((java.lang.Object) period17);
        org.joda.time.Period period20 = period9.minusMillis((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight0.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.withHourOfDay(3);
        int int26 = dateTime25.getSecondOfMinute();
        int int27 = dateTime25.getMinuteOfHour();
        int int28 = dateTime25.getEra();
        org.joda.time.DateTime dateTime29 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        boolean boolean31 = dateMidnight21.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight21.withMonthOfYear(9);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight21.minusMonths(74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = dateMidnight35.toString("2451-11-30T00:00:00.000+00:00:00.016");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test05957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05957");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        mutableDateTime4.setZoneRetainFields(dateTimeZone10);
        boolean boolean13 = mutableDateTime4.isEqualNow();
        org.joda.time.DateTimeField dateTimeField14 = mutableDateTime4.getRoundingField();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) mutableDateTime4);
        long long16 = mutableDateTime4.getMillis();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime4.monthOfYear();
        mutableDateTime4.addWeeks(249);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(dateTimeField14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645455550317L + "'", long16 == 1645455550317L);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05958");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setMillisOfDay(10);
        mutableDateTime3.setSecondOfDay(1970);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = timeOfDay22.toDateTimeToday(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minus((long) (short) 0);
        int int27 = dateTime24.getDayOfMonth();
        org.joda.time.DateTime dateTime29 = dateTime24.withMillis((long) 0);
        org.joda.time.DateTime dateTime31 = dateTime29.plusWeeks(21);
        int int32 = mutableDateTime3.compareTo((org.joda.time.ReadableInstant) dateTime29);
        int int33 = mutableDateTime3.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 21 + "'", int27 == 21);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21 + "'", int33 == 21);
    }

    @Test
    public void test05959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05959");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean2 = strSet0.equals((java.lang.Object) (short) 0);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String[] strArray20 = new java.lang.String[] { "00", "10", "46", "", "", "minuteOfHour", "2022-02-21T00:52:52.000Z", "PT0S", "45", "45", "PT0S", "10" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.util.Iterator<java.lang.String> strItor23 = strSet21.iterator();
        boolean boolean24 = strSet7.remove((java.lang.Object) strSet21);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        boolean boolean32 = strSet7.containsAll((java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        boolean boolean40 = localeList39.isEmpty();
        java.util.stream.Stream<java.util.Locale> localeStream41 = localeList39.stream();
        boolean boolean42 = localeList31.containsAll((java.util.Collection<java.util.Locale>) localeList39);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale[] localeArray46 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.Object[] objArray50 = localeList47.toArray();
        boolean boolean51 = localeList39.removeAll((java.util.Collection<java.util.Locale>) localeList47);
        boolean boolean52 = strSet0.removeAll((java.util.Collection<java.util.Locale>) localeList47);
        localeList47.clear();
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale[] localeArray57 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.util.Locale>) localeList58);
        boolean boolean61 = localeList60.isEmpty();
        localeList60.clear();
        java.util.Iterator<java.util.Locale> localeItor63 = localeList60.iterator();
        java.lang.Object obj64 = null;
        boolean boolean65 = localeList60.contains(obj64);
        boolean boolean66 = localeList47.addAll((java.util.Collection<java.util.Locale>) localeList60);
        java.util.Calendar.Builder builder67 = new java.util.Calendar.Builder();
        java.util.Calendar calendar68 = builder67.build();
        java.util.Calendar.Builder builder72 = builder67.setWeekDate(45, 1900, (int) 'u');
        java.util.Calendar.Builder builder74 = builder67.setLenient(false);
        java.util.Calendar.Builder builder78 = builder67.setDate(10, 1970, 11);
        java.util.Calendar.Builder builder80 = builder67.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str83 = dateTimeZone82.getID();
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.util.Locale locale87 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str88 = locale85.getDisplayVariant(locale87);
        java.lang.String str89 = dateTimeZone82.getName((long) 5, locale85);
        java.util.Set<java.lang.Character> charSet90 = locale85.getExtensionKeys();
        java.util.Locale locale91 = java.util.Locale.JAPAN;
        java.lang.String str93 = locale91.getExtension('a');
        java.lang.String str94 = locale85.getDisplayName(locale91);
        java.util.Calendar.Builder builder95 = builder80.setLocale(locale91);
        java.util.Locale locale97 = java.util.Locale.forLanguageTag("2022-02-21T14:57:16.851+00:00:00.016");
        java.lang.String str98 = locale91.getDisplayScript(locale97);
        boolean boolean99 = localeList60.add(locale91);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localeStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localeItor63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.016" + "'", str83, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:00:00.016" + "'", str89, "+00:00:00.016");
        org.junit.Assert.assertNotNull(charSet90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "ja_JP");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u97d3\u56fd\u8a9e" + "'", str94, "\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(locale97);
        org.junit.Assert.assertEquals(locale97.toString(), "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test05960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05960");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        org.joda.time.YearMonthDay yearMonthDay17 = property14.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay18 = property14.withMinimumValue();
        java.lang.String str19 = yearMonthDay18.toString();
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 26, dateTimeZone22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) yearMonthDay18, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "21" + "'", str15, "21");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-01" + "'", str19, "2022-02-01");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test05961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05961");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfMinute();
        org.joda.time.DateTime dateTime17 = dateTime14.withYearOfCentury(16);
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime17);
        int int19 = mutableDateTime3.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
    }

    @Test
    public void test05962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05962");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusSeconds(70);
        java.util.Date date9 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date9);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property11.setCopy("46");
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property15 = localDate13.yearOfCentury();
        int int16 = localDate13.getDayOfWeek();
        org.joda.time.LocalDate.Property property17 = localDate13.dayOfWeek();
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate19 = property17.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = timeOfDay3.compareTo((org.joda.time.ReadablePartial) localDate19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test05963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05963");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        java.lang.String str15 = period14.toString();
        org.joda.time.Period period16 = period12.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period18 = period12.normalizedStandard(periodType17);
        org.joda.time.PeriodType periodType19 = periodType17.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 1899, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        int int27 = dateTimeZone25.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str32 = dateTimeZone31.getID();
        org.joda.time.Interval interval33 = yearMonthDay29.toInterval(dateTimeZone31);
        org.joda.time.Interval interval34 = yearMonthDay29.toInterval();
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period38 = org.joda.time.Period.minutes(1);
        java.lang.String str39 = period38.toString();
        org.joda.time.Period period40 = period36.withFields((org.joda.time.ReadablePeriod) period38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay29.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 1899, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str54 = dateTimeZone53.getID();
        org.joda.time.Interval interval55 = yearMonthDay51.toInterval(dateTimeZone53);
        org.joda.time.MutableInterval mutableInterval56 = interval55.toMutableInterval();
        org.joda.time.Interval interval58 = interval55.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology59.getZone();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay41.withChronologyRetainFields(chronology59);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now(chronology59);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField65 = chronology59.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 54, 16L, periodType17, chronology59);
        org.joda.time.Chronology chronology67 = chronology59.withUTC();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 3172000, (long) 14, periodType8, chronology59);
        org.joda.time.DateTimeField dateTimeField69 = chronology59.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField70 = chronology59.era();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(53815647, 0, (-636), 861, 999, (-1971), chronology59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 861 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT1M" + "'", str15, "PT1M");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.016" + "'", str32, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT1M" + "'", str39, "PT1M");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.016" + "'", str54, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test05964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05964");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("T00:52:07.000", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05965");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        java.util.Calendar.Builder builder5 = builder0.setTimeZone(timeZone3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 10, chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMinuteOfHour(0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 10, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        boolean boolean22 = localDateTime16.equals((java.lang.Object) timeZone21);
        java.util.Calendar.Builder builder23 = builder5.setTimeZone(timeZone21);
        java.util.Calendar.Builder builder25 = builder5.setLenient(false);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale.setDefault(locale26);
        java.lang.String str30 = locale26.getISO3Country();
        java.util.Calendar.Builder builder31 = builder5.setLocale(locale26);
        java.util.Calendar.Builder builder33 = builder5.setLenient(true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455550487,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=10,MILLISECOND=503,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test05966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05966");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(59);
        org.joda.time.Chronology chronology4 = dateTimeFormatter1.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter1.withZone(dateTimeZone6);
        java.util.Date date13 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate17 = property15.setCopy(10);
        java.lang.String str18 = dateTimeFormatter7.print((org.joda.time.ReadablePartial) localDate17);
        java.util.Date date24 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate28 = property26.setCopy("46");
        org.joda.time.DateTime dateTime29 = localDate28.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate31 = localDate28.withYearOfEra(53660892);
        java.lang.String str32 = dateTimeFormatter7.print((org.joda.time.ReadablePartial) localDate28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.parse("10", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"10\" is too short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals(date13.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.000" + "'", str18, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.000");
        org.junit.Assert.assertEquals(date24.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.000" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.000");
    }

    @Test
    public void test05967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05967");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property10 = dateTime6.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime6.plusDays(59);
        java.util.Date date13 = dateTime6.toDate();
        org.joda.time.DateTime dateTime15 = dateTime6.withCenturyOfEra((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = timeOfDay24.toDateTimeToday(dateTimeZone25);
        mutableDateTime19.setZoneRetainFields(dateTimeZone25);
        boolean boolean28 = mutableDateTime19.isEqualNow();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = timeOfDay33.getFields();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTimeToday(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        boolean boolean38 = mutableDateTime19.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime19.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundCeiling();
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = timeOfDay45.toDateTimeToday(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minus((long) (short) 0);
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime49.getZone();
        java.lang.String str52 = dateTimeZone51.getID();
        mutableDateTime40.setZone(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime40.copy();
        java.lang.Object obj55 = mutableDateTime54.clone();
        boolean boolean56 = dateTime15.isEqual((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.Period period58 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period60 = org.joda.time.Period.minutes(1);
        java.lang.String str61 = period60.toString();
        org.joda.time.Period period62 = period58.withFields((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period64 = period62.plusMillis(100);
        org.joda.time.Period period65 = period62.negated();
        int int66 = period65.getMillis();
        org.joda.time.Period period68 = period65.minusDays(32);
        org.joda.time.DurationFieldType durationFieldType70 = period68.getFieldType(0);
        java.lang.String str71 = durationFieldType70.getName();
        mutableDateTime54.add(durationFieldType70, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str76 = dateTimeZone75.getID();
        org.joda.time.DateMidnight dateMidnight77 = org.joda.time.DateMidnight.now(dateTimeZone75);
        int int79 = dateTimeZone75.getOffset((long) 1);
        java.util.Locale locale81 = java.util.Locale.PRC;
        java.lang.String str82 = dateTimeZone75.getShortName(31553832000L, locale81);
        long long85 = dateTimeZone75.convertLocalToUTC((long) 32770, false);
        long long88 = dateTimeZone75.convertLocalToUTC(4406400000L, false);
        org.joda.time.DateTime dateTime89 = org.joda.time.DateTime.now(dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str93 = dateTimeZone92.getID();
        org.joda.time.DateMidnight dateMidnight94 = org.joda.time.DateMidnight.now(dateTimeZone92);
        org.joda.time.MutableDateTime mutableDateTime95 = new org.joda.time.MutableDateTime(0L, dateTimeZone92);
        boolean boolean96 = dateTimeZone92.isFixed();
        long long98 = dateTimeZone75.getMillisKeepLocal(dateTimeZone92, 1646092800284L);
        mutableDateTime54.setZone(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 21 00:52:51 GMT 2022");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.016" + "'", str52, "+00:00:00.016");
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(obj55);
// flaky:         org.junit.Assert.assertEquals(obj55.toString(), "2022-02-21T14:59:10.554+00:00:00.016");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "2022-02-21T14:59:10.554+00:00:00.016");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "2022-02-21T14:59:10.554+00:00:00.016");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT1M" + "'", str61, "PT1M");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "years" + "'", str71, "years");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.016" + "'", str76, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 16 + "'", int79 == 16);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.016" + "'", str82, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 32754L + "'", long85 == 32754L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 4406399984L + "'", long88 == 4406399984L);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00:00.016" + "'", str93, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1646092800284L + "'", long98 == 1646092800284L);
    }

    @Test
    public void test05968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05968");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        int int4 = calendar3.getWeekYear();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 654 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455550625,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=10,MILLISECOND=641,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test05969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05969");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Duration duration17 = interval16.toDuration();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str20 = dateTimeZone19.getID();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray25 = new org.joda.time.DurationFieldType[] { durationFieldType24 };
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.forFields(durationFieldTypeArray25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) ' ', periodType26);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime21, periodType26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str31 = dateTimeZone30.getID();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(dateTimeZone30);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateMidnight32);
        boolean boolean35 = interval33.isAfter((long) 1899);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((java.lang.Object) interval33, periodType36);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 2022);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusYears((-2013));
        org.joda.time.Period period43 = org.joda.time.Period.months(3);
        org.joda.time.Period period45 = period43.minusMonths((int) (short) 0);
        org.joda.time.Period period47 = period45.minusYears(8);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        int int51 = dateTimeZone49.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 1899, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        int int55 = dateTimeZone53.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime56 = localDate52.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.secondOfMinute();
        boolean boolean60 = localDate52.equals((java.lang.Object) dateTime58);
        org.joda.time.Duration duration61 = period47.toDurationFrom((org.joda.time.ReadableInstant) dateTime58);
        long long62 = duration61.getMillis();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod();
        java.lang.String str64 = mutablePeriod63.toString();
        mutablePeriod63.setPeriod(0L);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str69 = dateTimeZone68.getID();
        org.joda.time.DateMidnight dateMidnight70 = org.joda.time.DateMidnight.now(dateTimeZone68);
        org.joda.time.ReadableInstant readableInstant71 = null;
        boolean boolean72 = dateMidnight70.isBefore(readableInstant71);
        int int73 = dateMidnight70.getYearOfCentury();
        org.joda.time.DateMidnight.Property property74 = dateMidnight70.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight70.minusMonths(7);
        org.joda.time.Duration duration77 = mutablePeriod63.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight70);
        boolean boolean78 = duration61.isLongerThan((org.joda.time.ReadableDuration) duration77);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight39.plus((org.joda.time.ReadableDuration) duration61);
        mutablePeriod37.setPeriod((org.joda.time.ReadableDuration) duration61);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.016" + "'", str20, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationFieldTypeArray25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.016" + "'", str31, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 16 + "'", int51 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 16 + "'", int55 == 16);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-244771200000L) + "'", long62 == (-244771200000L));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0S" + "'", str64, "PT0S");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.016" + "'", str69, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 22 + "'", int73 == 22);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateMidnight79);
    }

    @Test
    public void test05970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05970");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        org.joda.time.YearMonthDay yearMonthDay17 = property14.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay18 = property14.withMinimumValue();
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay18.withDayOfMonth(18);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.minusDays(496);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "21" + "'", str15, "21");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
    }

    @Test
    public void test05971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05971");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property1.addNoWrapToCopy(59);
        int int4 = localTime3.getMillisOfSecond();
        org.joda.time.LocalTime localTime6 = localTime3.minusHours((int) '4');
        org.joda.time.LocalTime.Property property7 = localTime3.millisOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 10, chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Chronology chronology12 = null;
        mutablePeriod10.setPeriod(readableDuration11, chronology12);
        mutablePeriod10.setWeeks(47);
        org.joda.time.ReadableInterval readableInterval16 = null;
        mutablePeriod10.add(readableInterval16);
        mutablePeriod10.addMinutes((int) (byte) 1);
        java.lang.Object obj20 = mutablePeriod10.clone();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = timeOfDay25.getFields();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTimeToday(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        org.joda.time.DateTime dateTime31 = dateTime28.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        int int34 = dateTime31.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTime dateTime38 = dateTime31.withFieldAdded(durationFieldType36, (int) (byte) 1);
        mutablePeriod10.add(durationFieldType36, 50);
        org.joda.time.LocalTime localTime42 = localTime3.withFieldAdded(durationFieldType36, 974);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 759 + "'", int4 == 759);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "P47WT51M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "P47WT51M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "P47WT51M");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime42);
    }

    @Test
    public void test05972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05972");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        int int4 = calendar3.getWeekYear();
        calendar3.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar3.setMinimalDaysInFirstWeek((-52));
        java.lang.String str9 = calendar3.getCalendarType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455550760,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=-52,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=10,MILLISECOND=776,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
    }

    @Test
    public void test05973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05973");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.plus((long) 45);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.weekyear();
        int int7 = property6.getMinimumValue();
        int int8 = property6.getLeapAmount();
        org.joda.time.DateMidnight dateMidnight9 = property6.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-292275054) + "'", int7 == (-292275054));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test05974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05974");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray13 = new java.lang.String[] { "00", "PT1M", "", "PT1M", "46", "46", "+00:00:00.016", "", "PT1M" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList14, filteringMode16);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale[] localeArray21 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList22);
        boolean boolean25 = localeList24.isEmpty();
        java.util.stream.Stream<java.util.Locale> localeStream26 = localeList24.stream();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str30 = locale27.getDisplayVariant(locale29);
        boolean boolean31 = localeList24.add(locale29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        int int35 = dateTimeZone33.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 1899, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        int int39 = dateTimeZone37.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime40 = localDate36.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str44 = dateTimeZone43.getID();
        org.joda.time.Interval interval45 = yearMonthDay41.toInterval(dateTimeZone43);
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay41.dayOfMonth();
        boolean boolean47 = localeList24.contains((java.lang.Object) yearMonthDay41);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        boolean boolean56 = localeList55.isEmpty();
        java.util.stream.Stream<java.util.Locale> localeStream57 = localeList55.stream();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str61 = locale58.getDisplayVariant(locale60);
        boolean boolean62 = localeList55.add(locale60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList55, filteringMode63);
        boolean boolean65 = strSet0.containsAll((java.util.Collection<java.util.Locale>) localeList64);
        java.util.stream.Stream<java.util.Locale> localeStream66 = localeList64.stream();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode16.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localeStream26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 16 + "'", int39 == 16);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.016" + "'", str44, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localeStream57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode63.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localeStream66);
    }

    @Test
    public void test05975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05975");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(951, 15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 951 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05976");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime10 = property9.withMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundFloorCopy();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test05977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05977");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period7.minusSeconds((int) (short) 100);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) period7);
        mutableDateTime3.addWeekyears(0);
        mutableDateTime3.addHours(2);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.add((long) 3172001);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) mutableDateTime3);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime3.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.addWrapField(611);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = mutableDateTime23.get(dateTimeFieldType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test05978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05978");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str8 = locale5.getDisplayVariant(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale4.getDisplayName(locale7);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int13 = calendar11.getMaximum((int) (short) 0);
        calendar11.setLenient(false);
        java.util.Date date16 = calendar11.getTime();
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.fromCalendarFields(calendar11);
        org.joda.time.LocalDate.Property property18 = localDate17.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455550930,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=10,MILLISECOND=946,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese (Taiwan)" + "'", str10, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455550931,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=10,MILLISECOND=947,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 21 14:59:10 GMT 2022");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test05979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05979");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setVariant("");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("zho");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        java.util.Locale.Builder builder14 = builder7.setLocale(locale12);
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = builder14.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder14.setRegion("\uc6d4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 3??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455550946,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=10,MILLISECOND=962,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
    }

    @Test
    public void test05980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05980");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(3);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.centuryOfEra();
        int int17 = localDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.property(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime12.getFieldTypes();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 10, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMinuteOfHour(0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 10, chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMillis(3);
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.centuryOfEra();
        int int39 = localDateTime34.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property41 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = property41.addWrapFieldToCopy(395);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusDays((-20));
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusDays((int) (short) -1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test05981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05981");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = timeOfDay15.toDateTimeToday(dateTimeZone16);
        mutableDateTime10.setZoneRetainFields(dateTimeZone16);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone16);
        mutableDateTime3.setZoneRetainFields(dateTimeZone16);
        mutableDateTime3.addMinutes(999);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setDate((int) 'a', (int) (byte) -1, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test05982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05982");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(18, 2022, 2, (int) (byte) 1);
        int int5 = mutablePeriod4.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setValue(32730, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32730");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test05983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05983");
        java.util.Locale locale1 = new java.util.Locale("12 Mar 1899 06:34:59 GMT");
        org.junit.Assert.assertEquals(locale1.toString(), "12 mar 1899 06:34:59 gmt");
    }

    @Test
    public void test05984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05984");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        int int9 = timeOfDay8.getHourOfDay();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay8.millisOfSecond();
        java.lang.String str11 = property10.toString();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[millisOfSecond]" + "'", str11, "Property[millisOfSecond]");
    }

    @Test
    public void test05985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05985");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusDays(17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime12.withTime((int) (byte) 1, 337, 1993, 2194);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 337 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test05986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05986");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 1899, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime9 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone12);
        org.joda.time.MutableInterval mutableInterval15 = interval14.toMutableInterval();
        org.joda.time.Interval interval17 = interval14.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology18.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.monthOfYear();
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        java.lang.String str25 = period24.toString();
        org.joda.time.Period period26 = period22.withFields((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period28 = period26.plusMillis(100);
        org.joda.time.Period period29 = period26.negated();
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = period35.plusMillis(100);
        boolean boolean38 = period29.equals((java.lang.Object) period37);
        long long41 = chronology18.add((org.joda.time.ReadablePeriod) period29, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField42 = chronology18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 3232002, chronology18);
        org.joda.time.DateTimeField dateTimeField44 = chronology18.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = dateTimeField44.set((long) 99, "2022-02-21T14:57:42.822+00:00:00.016");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:57:42.822+00:00:00.016\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT1M" + "'", str25, "PT1M");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 31553832000L + "'", long41 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test05987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05987");
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period7 = period3.withFields((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Period period9 = period7.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        int int11 = period9.get(durationFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        int int15 = dateTimeZone13.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 1899, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime20 = localDate16.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Interval interval25 = yearMonthDay21.toInterval(dateTimeZone23);
        org.joda.time.MutableInterval mutableInterval26 = interval25.toMutableInterval();
        org.joda.time.Interval interval28 = interval25.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period37 = period33.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period39 = period37.plusMillis(100);
        org.joda.time.Period period40 = period37.negated();
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        java.lang.String str45 = period44.toString();
        org.joda.time.Period period46 = period42.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period48 = period46.plusMillis(100);
        boolean boolean49 = period40.equals((java.lang.Object) period48);
        long long52 = chronology29.add((org.joda.time.ReadablePeriod) period40, 31556952000L, (int) '4');
        org.joda.time.DateTimeField dateTimeField53 = chronology29.dayOfYear();
        org.joda.time.DurationField durationField54 = chronology29.days();
        long long58 = chronology29.add((long) 19, (long) (-52), 17);
        boolean boolean59 = durationFieldType10.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField60 = chronology29.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(9223309869549175808L, (long) 116, chronology29);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT1M" + "'", str6, "PT1M");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.016" + "'", str24, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT1M" + "'", str36, "PT1M");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT1M" + "'", str45, "PT1M");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 31553832000L + "'", long52 == 31553832000L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-865L) + "'", long58 == (-865L));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test05988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05988");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        int int5 = dateTimeZone1.getOffset((long) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone10);
        timeZone10.setID("1970");
        java.lang.String str14 = timeZone10.getID();
        boolean boolean15 = timeZone7.hasSameRules(timeZone10);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId16 = timeZone10.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 1970");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455551156,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1970,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=11,MILLISECOND=172,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05989");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        boolean boolean15 = dateTime10.equals((java.lang.Object) dateMidnight14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.era();
        org.joda.time.DateMidnight dateMidnight18 = property16.addWrapFieldToCopy(59);
        int int19 = dateMidnight18.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05990");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay15 = property14.getYearMonthDay();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property14.getFieldType();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = property14.getAsShortText(locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay21 = property14.setCopy("2022-02-21T14:56:23.681+00:00:00.016");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:56:23.681+00:00:00.016\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "21" + "'", str19, "21");
    }

    @Test
    public void test05991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05991");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus((long) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        boolean boolean11 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.withYearOfCentury(10);
        org.joda.time.DateTime dateTime15 = dateTime13.minus((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime18 = dateTime13.minusWeeks(2022);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        java.lang.String str27 = period26.toString();
        org.joda.time.Period period28 = period24.withFields((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period30 = period26.minusSeconds((int) (short) 100);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period37 = period33.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period39 = period37.plusMillis(100);
        org.joda.time.Period period40 = period37.negated();
        org.joda.time.Period period42 = period40.withMillis(1899);
        org.joda.time.Period period44 = period42.plusMillis(0);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime46 = mutableDateTime22.toDateTime();
        mutableDateTime22.setWeekyear(1970);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime22.yearOfCentury();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime22.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.set(32770);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isBefore(readableInstant53);
        int int55 = dateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime52);
        int int56 = dateTime13.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M" + "'", str27, "PT1M");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT1M" + "'", str36, "PT1M");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20 + "'", int56 == 20);
    }

    @Test
    public void test05992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05992");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.LocalTime localTime9 = localTime0.minus((org.joda.time.ReadablePeriod) period6);
        int int10 = localTime9.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone12);
        int int16 = dateTimeZone12.getOffset((long) 1);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = dateTimeZone12.getShortName(31553832000L, locale18);
        long long22 = dateTimeZone12.convertLocalToUTC((long) 32770, false);
        org.joda.time.DateTime dateTime23 = localTime9.toDateTimeToday(dateTimeZone12);
        org.joda.time.LocalTime localTime25 = localTime9.withMillisOfSecond(654);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.016" + "'", str19, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32754L + "'", long22 == 32754L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test05993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05993");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        org.joda.time.Interval interval16 = interval13.withStartMillis((long) 32769);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(dateTimeZone22);
        int int26 = dateTimeZone22.getOffset((long) 1);
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = dateTimeZone22.getShortName(31553832000L, locale28);
        long long32 = dateTimeZone22.convertLocalToUTC((long) 32770, false);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight20.withZoneRetainFields(dateTimeZone22);
        org.joda.time.Interval interval34 = dateMidnight33.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.016" + "'", str29, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32754L + "'", long32 == 32754L);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
    }

    @Test
    public void test05994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05994");
        java.util.Date date1 = new java.util.Date(32054400895L);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 07 00:00:00 GMT 1971");
    }

    @Test
    public void test05995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05995");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.Interval interval13 = yearMonthDay9.toInterval(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay9.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.addWrapFieldToCopy(10);
        org.joda.time.DateTimeField dateTimeField17 = property14.getField();
        org.joda.time.DurationField durationField18 = property14.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay19 = property14.withMaximumValue();
        java.util.Date date25 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekOfWeekyear();
        org.joda.time.LocalDate localDate29 = property27.setCopy(10);
        org.joda.time.DurationField durationField30 = property27.getRangeDurationField();
        org.joda.time.LocalDate localDate31 = property27.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property27.getFieldType();
        org.joda.time.LocalDate localDate33 = property27.withMaximumValue();
        int int34 = yearMonthDay19.compareTo((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 10, chronology36);
        org.joda.time.Chronology chronology39 = null;
        mutablePeriod37.setPeriod((long) 0, chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutablePeriod37.setPeriod(readableDuration41);
        int int43 = mutablePeriod37.getMinutes();
        mutablePeriod37.setMinutes(3390);
        org.joda.time.LocalDate localDate46 = localDate33.minus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.LocalDate.Property property47 = localDate33.dayOfMonth();
        org.joda.time.DateTime dateTime48 = localDate33.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime48.withYearOfCentury(817);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 817 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.016" + "'", str12, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Mar 10 01:35:00 GMT 1899");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test05996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05996");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("PeriodType[Hours]");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test05997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05997");
        java.util.Date date5 = new java.util.Date(12, 18, (int) '#', (int) '4', 11);
        date5.setMinutes(19);
        date5.setHours(0);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str13 = localTime11.toString(dateTimeFormatter12);
        org.joda.time.LocalTime localTime15 = localTime11.minusSeconds((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalTime localTime18 = localTime15.withField(dateTimeFieldType16, 0);
        java.lang.String str19 = dateTimeFieldType16.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localDate10.get(dateTimeFieldType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Wed Aug 06 00:19:00 GMT 1913");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str13, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hourOfHalfday" + "'", str19, "hourOfHalfday");
    }

    @Test
    public void test05998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05998");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 10800000);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours(2194);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test05999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05999");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 795);
    }

    @Test
    public void test06000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test06000");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        boolean boolean2 = dateTimeZone1.isFixed();
        boolean boolean4 = dateTimeZone1.isStandardOffset((long) 2194);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.lang.String str7 = dateTimeZone1.getNameKey((-1050558970027017L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNull(str7);
    }
}

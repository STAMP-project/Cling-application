import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, 853);
        org.joda.time.DateTime dateTime16 = dateTime11.withMillisOfDay(57);
        org.joda.time.Instant instant17 = dateTime11.toInstant();
        int int18 = dateTime11.getMinuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.clockhourOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = chronology25.get(readablePeriod31, 41227202L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 453 + "'", int18 == 453);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        org.joda.time.Chronology chronology21 = chronology2.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField22 = chronology2.halfdays();
        org.joda.time.DurationField durationField23 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusMonths((int) (byte) 100);
        int[] intArray30 = localDateTime29.getValues();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusMonths(49);
        int int33 = localDateTime32.getEra();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DurationField durationField43 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone51);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = dateTimeZone51.getName((long) (byte) 1, locale55);
        org.joda.time.Chronology chronology57 = chronology38.withZone(dateTimeZone51);
        long long61 = chronology57.add((long) 51, (long) 558, 175);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        java.lang.String str64 = locale62.getDisplayName();
        java.lang.String str65 = locale62.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 39, chronology57, locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str68 = dateTimeFieldType67.toString();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property74 = dateTime71.centuryOfEra();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = property74.getAsText(locale75);
        java.util.Set<java.lang.Character> charSet78 = locale75.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet79 = locale75.getExtensionKeys();
        dateTimeParserBucket66.saveField(dateTimeFieldType67, "446", locale75);
        java.lang.String str81 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, 695, locale75);
        boolean boolean82 = dateTimeField24.isLenient();
        org.joda.time.DurationField durationField83 = dateTimeField24.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.052" + "'", str20, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1978, 5, 1, 87]");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.052" + "'", str56, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 97701L + "'", long61 == 97701L);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "francese (Francia)" + "'", str64, "francese (Francia)");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "francese (Francia)" + "'", str65, "francese (Francia)");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "minuteOfDay" + "'", str68, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "it" + "'", str76, "it");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "20" + "'", str77, "20");
        org.junit.Assert.assertNotNull(charSet78);
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "695" + "'", str81, "695");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(durationField83);
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("445");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.lang.Object[] objArray5 = strSet4.toArray();
        boolean boolean6 = strSet4.isEmpty();
        boolean boolean8 = strSet4.add("2022-02-22T07:27:41.679Z");
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology11.seconds();
        org.joda.time.DurationField durationField16 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.clockhourOfDay();
        org.joda.time.DurationField durationField20 = dateTimeField19.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime27 = property24.addWrapFieldToCopy(28);
        int int28 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy((-592L));
        org.joda.time.LocalDateTime localDateTime34 = property31.withMaximumValue();
        int int35 = localDateTime34.getMonthOfYear();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale47 = java.util.Locale.ROOT;
        dateTimeParserBucket41.saveField(dateTimeFieldType45, "it", locale47);
        java.lang.String str49 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, locale47);
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator51 = strSet50.spliterator();
        boolean boolean52 = strSet4.retainAll((java.util.Collection<java.lang.String>) strSet50);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "24" + "'", str49, "24");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strSpliterator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        int int9 = durationField6.getValue((long) (byte) 10, 35999999000L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.halfdayOfDay();
        org.joda.time.DurationField durationField16 = chronology12.millis();
        int int17 = durationField6.compareTo(durationField16);
        long long19 = durationField16.getValueAsLong(26507839680000L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        dateTimeParserBucket34.saveField(dateTimeFieldType38, "it", locale40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime28.property(dateTimeFieldType38);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType38.getDurationType();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology46);
        java.lang.String str48 = chronology46.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.Chronology chronology52 = chronology46.withZone(dateTimeZone50);
        org.joda.time.DurationField durationField53 = chronology52.weekyears();
        org.joda.time.DurationField durationField54 = durationFieldType43.getField(chronology52);
        int int55 = durationField16.compareTo(durationField54);
        long long58 = durationField16.getDifferenceAsLong(691200000L, 2721600000L);
        long long61 = durationField16.add(1921193L, (long) 599);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 26507839680000L + "'", long19 == 26507839680000L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-2030400000L) + "'", long58 == (-2030400000L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1921792L + "'", long61 == 1921792L);
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-29T00:00:00.000");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        int[] intArray5 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMonths(49);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds(168);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusHours(28);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy((long) 569);
        boolean boolean17 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.plusWeeks(872);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1978, 5, 1, 87]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        boolean boolean26 = dateTimeZone19.isStandardOffset((long) 270);
        boolean boolean28 = dateTimeZone19.isStandardOffset((-104L));
        int int30 = dateTimeZone19.getStandardOffset((long) 931);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.052" + "'", str23, "+00:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        java.lang.String str16 = chronology14.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyear();
        org.joda.time.DurationField durationField18 = chronology14.weeks();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(1640995200000L, chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = chronology23.getZone();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.secondOfDay();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withDurationAdded(readableDuration33, 28);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        boolean boolean44 = localDateTime42.isSupported(dateTimeFieldType43);
        int int45 = localDateTime37.get(dateTimeFieldType43);
        boolean boolean46 = localDateTime35.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property47 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime55 = dateTime53.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime58 = dateTime55.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime55.getZone();
        int int61 = dateTimeZone59.getOffset((long) 569);
        long long63 = dateTimeZone59.previousTransition((long) 855);
        org.joda.time.DateTime dateTime64 = localDateTime35.toDateTime(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray79 = localDateTime78.getValues();
        int[] intArray81 = dateTimeField70.addWrapField((org.joda.time.ReadablePartial) localDateTime75, 0, intArray79, (int) (short) 10);
        chronology23.validate((org.joda.time.ReadablePartial) localDateTime35, intArray81);
        int int83 = localDateTime35.getYear();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime35.minusMonths(427);
        java.util.Locale locale88 = new java.util.Locale("ISOChronology[+10:00]");
        java.lang.String str89 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime35, 871, locale88);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket((long) 40, chronology7, locale88, (java.lang.Integer) 597);
        org.joda.time.DateTimeField dateTimeField92 = chronology7.year();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 855L + "'", long63 == 855L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 1, 1, 52]");
        org.junit.Assert.assertNotNull(intArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertEquals(locale88.toString(), "isochronology[+10:00]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "871" + "'", str89, "871");
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        int int6 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.withYear(139);
        org.joda.time.LocalDateTime localDateTime9 = dateTime8.toLocalDateTime();
        int int10 = localDateTime9.getCenturyOfEra();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        java.lang.String str35 = dateTimeZone33.toString();
        java.lang.String str36 = dateTimeZone33.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone33);
        long long40 = dateTimeZone33.convertLocalToUTC((long) 764, true);
        org.joda.time.DateTime dateTime41 = localDateTime9.toDateTime(dateTimeZone33);
        java.util.TimeZone timeZone42 = dateTimeZone33.toTimeZone();
        timeZone42.setRawOffset(56);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        java.lang.Integer int64 = dateTimeParserBucket60.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket60.setZone(dateTimeZone65);
        dateTimeParserBucket51.setZone(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTimeParserBucket51.getZone();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone68);
        boolean boolean70 = dateTimeZone68.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        java.util.TimeZone timeZone72 = dateTimeZone68.toTimeZone();
        int int74 = timeZone72.getOffset((long) 7);
        timeZone72.setID("2022-02-22T07:27:11.312+00:00:00.052");
        boolean boolean77 = timeZone72.observesDaylightTime();
        boolean boolean78 = timeZone42.hasSameRules(timeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.052" + "'", str35, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.052" + "'", str36, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 712L + "'", long40 == 712L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.minuteOfDay();
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeField14.getAsShortText(406L, locale16);
        int int20 = dateTimeField14.getDifference(41167883L, (long) 393);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 686 + "'", int20 == 686);
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        java.util.Date date5 = dateTime2.toDate();
        org.joda.time.DateTime.Property property6 = dateTime2.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        int int8 = property6.getMaximumValue();
        int int9 = property6.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property6.roundHalfCeilingCopy();
        int int11 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(563);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(92);
        org.joda.time.LocalDateTime localDateTime16 = dateTime13.toLocalDateTime();
        org.joda.time.Chronology chronology17 = dateTime13.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DurationField durationField26 = chronology22.seconds();
        org.joda.time.DurationField durationField27 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology22.minutes();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        dateTimeParserBucket36.saveField(dateTimeFieldType40, "it", locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(673L, chronology22, locale42, (java.lang.Integer) 10, 453);
        java.lang.String str48 = locale42.getUnicodeLocaleType("28");
        java.util.Locale locale49 = locale42.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(1645514774895L, chronology17, locale49, (java.lang.Integer) 690, 1361796);
        org.joda.time.DurationField durationField53 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField54 = chronology17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar60 = dateTime59.toGregorianCalendar();
        int int61 = dateTime59.getMillisOfSecond();
        org.joda.time.DateTime dateTime63 = dateTime59.minusYears((int) 'x');
        org.joda.time.Chronology chronology64 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.centuryOfEra();
        java.util.Locale.Category category67 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.lang.String str69 = dateTimeField65.getAsText((long) 'a', locale68);
        java.lang.String str70 = locale68.getDisplayName();
        java.lang.String str71 = locale68.getISO3Language();
        java.util.Locale.setDefault(locale68);
        java.lang.String str73 = dateTimeField54.getAsShortText(321L, locale68);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:33:01 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 28 + "'", int8 == 28);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(gregorianCalendar60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 95 + "'", int61 == 95);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category67.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "19" + "'", str69, "19");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "italiano" + "'", str70, "italiano");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ita" + "'", str71, "ita");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "gen" + "'", str73, "gen");
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property27 = dateTime24.year();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime29.minusYears(558);
        boolean boolean35 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime29);
        int int36 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime37 = dateTime29.toLocalDateTime();
        org.joda.time.Instant instant38 = dateTime29.toInstant();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(instant38);
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        int int4 = dateTime1.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        boolean boolean17 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.minutes();
        org.joda.time.DateTime dateTime23 = dateTime1.withChronology(chronology19);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis(51L);
        org.joda.time.DateTime dateTime27 = dateTime23.minusMonths(1970);
        org.joda.time.DateTime.Property property28 = dateTime27.weekOfWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime27.minusSeconds(265);
        boolean boolean31 = dateTime30.isBeforeNow();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfEra();
        int int33 = dateTime30.getSecondOfDay();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekyear((-1));
        org.joda.time.DateTime dateTime51 = dateTime47.plusHours((int) (byte) 100);
        boolean boolean53 = dateTime51.isBefore((long) ' ');
        int int54 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime56 = dateTime51.minusYears(20);
        org.joda.time.DateTime.Property property57 = dateTime56.hourOfDay();
        org.joda.time.DateTime dateTime58 = property57.roundHalfEvenCopy();
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.millisOfDay();
        org.joda.time.DateTime dateTime61 = property60.getDateTime();
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(1);
        boolean boolean64 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.minusHours(49);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.yearOfEra();
        org.joda.time.LocalDateTime localDateTime72 = property71.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime74 = property71.addToCopy(39399L);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property71.getFieldType();
        java.lang.String str76 = dateTimeFieldType75.getName();
        int int77 = dateTime30.get(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str20, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 26916 + "'", int33 == 26916);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1014724799948L + "'", long59 == 1014724799948L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "yearOfEra" + "'", str76, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1857 + "'", int77 == 1857);
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DateTime dateTime39 = property34.addToCopy(902);
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds(31);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(889);
        int int44 = dateTime43.getMonthOfYear();
        org.joda.time.DateTime dateTime46 = dateTime43.plusDays(800);
        org.joda.time.DateTime dateTime48 = dateTime43.withYearOfCentury(87);
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfDay();
        java.lang.String str50 = property49.toString();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[secondOfDay]" + "'", str37, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Property[minuteOfDay]" + "'", str50, "Property[minuteOfDay]");
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("java.io.IOException: 0676-01-01T00:00:01.052");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.io.IOException: 0676-01-01T...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology3.months();
        java.util.Locale locale9 = new java.util.Locale("+00:00:00.052", "ISOChronology[+00:00:00.052]");
        java.lang.String str10 = locale9.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 385, chronology3, locale9);
        long long13 = dateTimeParserBucket11.computeMillis(false);
        java.util.Locale locale14 = dateTimeParserBucket11.getLocale();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals(locale9.toString(), "+00:00:00.052_ISOCHRONOLOGY[+00:00:00.052]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 385L + "'", long13 == 385L);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "+00:00:00.052_ISOCHRONOLOGY[+00:00:00.052]");
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        java.util.TimeZone timeZone23 = dateTimeZone20.toTimeZone();
        java.lang.String str25 = dateTimeZone20.getName((long) 749);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(1407440059200000L, dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra(781);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withPeriodAdded(readablePeriod29, 26936916);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime4 = property2.roundHalfCeilingCopy();
        int int5 = localDateTime4.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDurationAdded(readableDuration6, 350);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        java.util.Date date13 = dateTime10.toDate();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfMonth();
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfMonth();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.DateTime dateTime18 = property15.addToCopy(837);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(569);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime20.plusMinutes(496);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.plusHours((int) (byte) 100);
        boolean boolean43 = dateTime41.isBefore((long) ' ');
        int int44 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime46 = dateTime41.minusYears(20);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.plus(readablePeriod47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int53 = localDateTime50.get(dateTimeFieldType52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        int int56 = dateTime46.get(dateTimeFieldType55);
        int int57 = dateTime20.get(dateTimeFieldType55);
        boolean boolean58 = localDateTime4.isSupported(dateTimeFieldType55);
        java.lang.String str59 = dateTimeFieldType55.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:33:01 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "22" + "'", str16, "22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 379 + "'", int56 == 379);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 379 + "'", int57 == 379);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "millisOfSecond" + "'", str59, "millisOfSecond");
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-22T07:30:15.678+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:30:15.678+00:00:00.052\" is malformed at \"+00:00:00.052\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket12.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.lang.String str31 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.toString();
        long long34 = dateTimeZone6.getMillisKeepLocal(dateTimeZone29, (long) 23);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours((int) (byte) 0);
        java.util.Date date40 = dateTime37.toDate();
        org.joda.time.DateTime.Property property41 = dateTime37.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.withWeekyear((-1));
        org.joda.time.DateTime dateTime47 = dateTime43.plusHours((int) (byte) 100);
        int int48 = dateTime43.getDayOfYear();
        int int49 = property41.getDifference((org.joda.time.ReadableInstant) dateTime43);
        long long50 = dateTime43.getMillis();
        int int51 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.052" + "'", str31, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.052" + "'", str32, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 23L + "'", long34 == 23L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Feb 22 07:33:01 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53 + "'", int48 == 53);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645515181361L + "'", long50 == 1645515181361L);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusYears(594);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusYears(269);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.minusMonths(26863);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        boolean boolean21 = dateTimeField15.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((-592L));
        int int27 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = property24.addToCopy(593);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime29, 608, locale31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withCenturyOfEra(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType35.getField(chronology38);
        java.lang.String str42 = dateTimeFieldType35.toString();
        boolean boolean43 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDateTime.Property property44 = localDateTime34.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime34.withTime(26840081, 26810, 845, 275);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26840081 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "608" + "'", str32, "608");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hourOfHalfday" + "'", str42, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime7 = property6.roundCeilingCopy();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        java.util.Locale locale15 = dateTimeParserBucket13.getLocale();
        boolean boolean16 = property6.equals((java.lang.Object) locale15);
        org.joda.time.DateTime dateTime17 = property6.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField18 = property6.getField();
        org.joda.time.DateTime dateTime20 = property6.addWrapFieldToCopy(291);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 592 + "'", int5 == 592);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "_22");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime31 = dateTime26.minusYears(20);
        org.joda.time.DateTime.Property property32 = dateTime31.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        java.util.Date date37 = dateTime34.toDate();
        org.joda.time.DateTime.Property property38 = dateTime34.dayOfMonth();
        org.joda.time.DateTime.Property property39 = dateTime34.dayOfMonth();
        int int40 = property32.getDifference((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime42 = property32.addToCopy(52L);
        org.joda.time.DateTime dateTime43 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.plus(readablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime43.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(41483, 26947546, 768, 0, 995, dateTimeZone46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 995 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Feb 22 07:33:01 UTC 2022");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-175220) + "'", int40 == (-175220));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekyear();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        dateTimeParserBucket11.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket11.getZone();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone28);
        boolean boolean30 = dateTimeZone28.isFixed();
        long long33 = dateTimeZone28.adjustOffset(2846437113600010L, false);
        long long37 = dateTimeZone28.convertLocalToUTC((long) 708, true, (-44L));
        org.joda.time.DateTime dateTime38 = localDateTime1.toDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime1.plusMinutes(563);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYearOfCentury(2744);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2744 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2846437113600010L + "'", long33 == 2846437113600010L);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 656L + "'", long37 == 656L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField10 = null;
        dateTimeParserBucket9.saveField(dateTimeField10, (int) (short) 0);
        java.lang.Integer int13 = dateTimeParserBucket9.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket9.setZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime dateTime21 = dateTime17.plusHours((int) (byte) 100);
        boolean boolean23 = dateTime21.isBefore((long) ' ');
        int int24 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime26 = dateTime21.minusYears(20);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours((int) (byte) 0);
        java.util.Date date32 = dateTime29.toDate();
        org.joda.time.DateTime.Property property33 = dateTime29.dayOfMonth();
        org.joda.time.DateTime.Property property34 = dateTime29.dayOfMonth();
        int int35 = property27.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime37 = property27.addToCopy(52L);
        org.joda.time.DateTime dateTime38 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime38.getZone();
        int int43 = dateTimeZone41.getStandardOffset((long) 475);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:33:01 UTC 2022");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-175220) + "'", int35 == (-175220));
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getMillisOfSecond();
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property20 = dateTime17.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = property20.getAsText(locale21);
        java.lang.String str24 = locale15.getDisplayName(locale21);
        int int25 = property14.getMaximumTextLength(locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        int int27 = strSet26.size();
        boolean boolean28 = dateTimeParserBucket5.restoreState((java.lang.Object) int27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime30.plusMonths(19);
        org.joda.time.DateTime dateTime39 = dateTime30.plusHours(100);
        org.joda.time.DateTime.Property property40 = dateTime30.dayOfYear();
        int int41 = property40.getMaximumValueOverall();
        boolean boolean42 = dateTimeParserBucket5.restoreState((java.lang.Object) property40);
        org.joda.time.DateTime dateTime43 = property40.roundFloorCopy();
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths(207);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        java.lang.Integer int64 = dateTimeParserBucket60.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket60.setZone(dateTimeZone65);
        dateTimeParserBucket51.setZone(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTimeParserBucket51.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        java.lang.String str70 = dateTimeZone68.toString();
        java.lang.String str71 = dateTimeZone68.toString();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime43.toMutableDateTime(dateTimeZone68);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-36000000L) + "'", long7 == (-36000000L));
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 813 + "'", int13 == 813);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "20" + "'", str23, "20");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "coreano" + "'", str24, "coreano");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:33:01 UTC 2022");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:00" + "'", str70, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+10:00" + "'", str71, "+10:00");
        org.junit.Assert.assertNotNull(mutableDateTime72);
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        java.util.TimeZone timeZone40 = dateTimeZone33.toTimeZone();
        java.lang.String str42 = dateTimeZone33.getName(1646033326455L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime50 = dateTime48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime53 = dateTime50.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime50.getZone();
        boolean boolean55 = dateTimeZone54.isFixed();
        long long57 = dateTimeZone54.nextTransition((long) 2);
        int int59 = dateTimeZone54.getStandardOffset(92234312150400900L);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        java.lang.String str62 = dateTimeZone60.toString();
        java.lang.String str64 = dateTimeZone60.getName(100L);
        java.lang.String str66 = dateTimeZone60.getNameKey((long) 23);
        long long68 = dateTimeZone54.getMillisKeepLocal(dateTimeZone60, 2688915L);
        long long70 = dateTimeZone33.getMillisKeepLocal(dateTimeZone54, 27000616L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 2L + "'", long57 == 2L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+10:00" + "'", str62, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+10:00" + "'", str64, "+10:00");
// flaky:         org.junit.Assert.assertNull(str66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-33311085L) + "'", long68 == (-33311085L));
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 63000616L + "'", long70 == 63000616L);
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.util.Locale locale9 = dateTimeParserBucket5.getLocale();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        int int20 = mutableDateTime18.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.DurationField durationField26 = chronology23.millis();
        boolean boolean27 = dateTimeFieldType19.isSupported(chronology23);
        dateTimeParserBucket5.saveField(dateTimeFieldType19, 0);
        int int30 = dateTimeParserBucket5.getOffset();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket45.setZone(dateTimeZone50);
        dateTimeParserBucket36.setZone(dateTimeZone50);
        java.lang.String str54 = dateTimeZone50.getName((long) 'u');
        java.lang.String str56 = dateTimeZone50.getNameKey((long) 1978);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar61 = dateTime60.toGregorianCalendar();
        int int62 = dateTime60.getMillisOfSecond();
        org.joda.time.DateTime.Property property63 = dateTime60.minuteOfHour();
        org.joda.time.DateTime dateTime65 = dateTime60.minusMinutes(25);
        int int66 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology68, locale69, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField73 = null;
        dateTimeParserBucket72.saveField(dateTimeField73, (int) (short) 0);
        java.lang.Integer int76 = dateTimeParserBucket72.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket72.setZone(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.withWeekyear((-1));
        org.joda.time.DateTime dateTime84 = dateTime80.plusHours((int) (byte) 100);
        boolean boolean86 = dateTime84.isBefore((long) ' ');
        int int87 = dateTimeZone77.getOffset((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.LocalDateTime localDateTime88 = null;
        boolean boolean89 = dateTimeZone77.isLocalDateTimeGap(localDateTime88);
        long long91 = dateTimeZone50.getMillisKeepLocal(dateTimeZone77, (long) 272);
        dateTimeParserBucket5.setZone(dateTimeZone50);
        // The following exception was thrown during execution in test generation
        try {
            long long93 = dateTimeParserBucket5.computeMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:00" + "'", str54, "+10:00");
// flaky:         org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(gregorianCalendar61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 929 + "'", int62 == 929);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 36000000 + "'", int66 == 36000000);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 36000000 + "'", int87 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 272L + "'", long91 == 272L);
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.plus(readableDuration34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plus(readableDuration47);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusMonths((int) (byte) 100);
        int[] intArray55 = localDateTime54.getValues();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.minusDays(4);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.minus(readableDuration58);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        java.lang.String str64 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = dateTimeField67.getType();
        int int69 = localDateTime59.indexOf(dateTimeFieldType68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime48.withField(dateTimeFieldType68, 590);
        java.lang.String str72 = dateTimeFieldType68.getName();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime24.withField(dateTimeFieldType68, 487);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime24.minusWeeks(36759776);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1978, 5, 1, 36000035]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "centuryOfEra" + "'", str72, "centuryOfEra");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        int int10 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int12 = dateTime5.get(dateTimeFieldType11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.year();
        org.joda.time.Chronology chronology26 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType11.getField(chronology23);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray31 = chronology23.get(readablePeriod28, 1644910278436L, 4358880000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = dateTime18.isBefore(readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime18.toMutableDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = dateTime18.minusMillis(57);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        dateTimeParserBucket31.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        java.lang.String str43 = dateTimeField41.getAsShortText((long) 28);
        dateTimeParserBucket31.saveField(dateTimeField41, 100);
        dateTimeParserBucket31.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket31.saveField(dateTimeFieldType48, 950);
        org.joda.time.DateTime.Property property51 = dateTime18.property(dateTimeFieldType48);
        boolean boolean52 = localDateTime7.equals((java.lang.Object) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        java.util.GregorianCalendar gregorianCalendar55 = dateTime54.toGregorianCalendar();
        org.joda.time.DateTime.Property property56 = dateTime54.year();
        org.joda.time.DateTime.Property property57 = dateTime54.dayOfYear();
        org.joda.time.DateTime dateTime59 = dateTime54.withWeekyear(0);
        boolean boolean60 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime54);
        java.lang.String str61 = dateTime54.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(gregorianCalendar55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T17:33:02.029+10:00" + "'", str61, "2022-02-22T17:33:02.029+10:00");
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime3.minus(readablePeriod11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket18.setZone(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = locale27.getDisplayName();
        dateTimeParserBucket18.saveField(dateTimeFieldType25, "97", locale27);
        java.util.Calendar calendar30 = dateTime3.toCalendar(locale27);
        java.lang.String str31 = locale27.getCountry();
        java.util.Locale locale35 = new java.util.Locale("1378-01-01T00:00:00.087", "", "\uc601\uc5b4");
        java.lang.String str36 = locale27.getDisplayLanguage(locale35);
        java.lang.String str37 = locale27.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tedesco (Germania)" + "'", str28, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645515182055,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=33,SECOND=2,MILLISECOND=55,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DE" + "'", str31, "DE");
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "German" + "'", str36, "German");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "de_DE" + "'", str37, "de_DE");
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getMillisOfSecond();
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property20 = dateTime17.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = property20.getAsText(locale21);
        java.lang.String str24 = locale15.getDisplayName(locale21);
        int int25 = property14.getMaximumTextLength(locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        int int27 = strSet26.size();
        boolean boolean28 = dateTimeParserBucket5.restoreState((java.lang.Object) int27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime30.plusMonths(19);
        org.joda.time.DateTime dateTime39 = dateTime30.plusHours(100);
        org.joda.time.DateTime.Property property40 = dateTime30.dayOfYear();
        int int41 = property40.getMaximumValueOverall();
        boolean boolean42 = dateTimeParserBucket5.restoreState((java.lang.Object) property40);
        org.joda.time.DateTime dateTime44 = property40.addWrapFieldToCopy(850);
        int int45 = property40.get();
        org.joda.time.DateTimeField dateTimeField46 = property40.getField();
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-36000000L) + "'", long7 == (-36000000L));
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "20" + "'", str23, "20");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "coreano" + "'", str24, "coreano");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:33:02 UTC 2022");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53 + "'", int45 == 53);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMonths((int) (byte) 100);
        int[] intArray32 = localDateTime31.getValues();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusDays(4);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minus(readableDuration35);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        java.lang.String str41 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        int int46 = localDateTime36.indexOf(dateTimeFieldType45);
        int int47 = localDateTime26.get(dateTimeFieldType45);
        org.joda.time.LocalDateTime.Property property48 = localDateTime26.dayOfMonth();
        int int49 = localDateTime26.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime26.plusHours((int) (short) 1);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1978, 5, 1, 36000035]");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean15 = localDateTime11.equals((java.lang.Object) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int20 = localDateTime17.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime14.property(dateTimeFieldType19);
        int int22 = localDateTime14.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        java.lang.String str29 = dateTimeField27.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        int int35 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime34.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime34);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.Chronology chronology39 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.halfdayOfDay();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.monthOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int53 = localDateTime51.get(dateTimeFieldType52);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField60 = null;
        dateTimeParserBucket59.saveField(dateTimeField60, (int) (short) 0);
        java.lang.Integer int63 = dateTimeParserBucket59.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket59.setZone(dateTimeZone64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.lang.String str69 = locale68.getDisplayName();
        dateTimeParserBucket59.saveField(dateTimeFieldType66, "97", locale68);
        int int71 = localDateTime51.get(dateTimeFieldType66);
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType66.getDurationType();
        boolean boolean73 = localDateTime43.isSupported(durationFieldType72);
        org.joda.time.DateTime dateTime75 = dateTime41.withFieldAdded(durationFieldType72, 374);
        boolean boolean76 = localDateTime14.isSupported(durationFieldType72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime78 = localDateTime14.plusYears(1510245216);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1510247186 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "70" + "'", str29, "70");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tedesco (Germania)" + "'", str69, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 12 + "'", int71 == 12);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology9.seconds();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology3, locale22);
        java.lang.Integer int26 = dateTimeParserBucket25.getOffsetInteger();
        long long29 = dateTimeParserBucket25.computeMillis(false, "cinese");
        dateTimeParserBucket25.setPivotYear((java.lang.Integer) 35);
        long long33 = dateTimeParserBucket25.computeMillis(true);
        java.util.Locale locale34 = dateTimeParserBucket25.getLocale();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeField40.getAsShortText((long) (byte) -1, locale42);
        java.util.Locale locale44 = locale42.stripExtensions();
        java.lang.String str45 = locale34.getDisplayName(locale44);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AD" + "'", str23, "AD");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 820L + "'", long29 == 820L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 820L + "'", long33 == 820L);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.minusSeconds(226);
        org.joda.time.DateTime dateTime14 = dateTime9.minusMillis(5);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology19.seconds();
        org.joda.time.DurationField durationField24 = chronology19.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.era();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology19.minutes();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        dateTimeParserBucket33.saveField(dateTimeFieldType37, "it", locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(673L, chronology19, locale39, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = null;
        dateTimeParserBucket55.saveField(dateTimeField56, (int) (short) 0);
        java.lang.Integer int59 = dateTimeParserBucket55.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket55.setZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withWeekyear((-1));
        org.joda.time.DateTime dateTime67 = dateTime63.plusHours((int) (byte) 100);
        boolean boolean69 = dateTime67.isBefore((long) ' ');
        int int70 = dateTimeZone60.getOffset((org.joda.time.ReadableInstant) dateTime67);
        dateTimeParserBucket49.setZone(dateTimeZone60);
        long long74 = dateTimeZone60.convertLocalToUTC((long) 59, false);
        org.joda.time.Chronology chronology75 = chronology19.withZone(dateTimeZone60);
        java.lang.String str77 = dateTimeZone60.getShortName((long) 581);
        org.joda.time.DateTime dateTime78 = dateTime14.withZoneRetainFields(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-0001-12-23T06:45:02.439+10:00" + "'", str10, "-0001-12-23T06:45:02.439+10:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 36000000 + "'", int70 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-35999941L) + "'", long74 == (-35999941L));
        org.junit.Assert.assertNotNull(chronology75);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+10:00" + "'", str77, "+10:00");
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateMidnight dateMidnight2 = dateTime1.toDateMidnight();
        java.lang.String str3 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField10 = null;
        dateTimeParserBucket9.saveField(dateTimeField10, (int) (short) 0);
        java.lang.Integer int13 = dateTimeParserBucket9.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket9.setZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime dateTime21 = dateTime17.plusHours((int) (byte) 100);
        boolean boolean23 = dateTime21.isBefore((long) ' ');
        int int24 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone14.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks((int) 'a');
        boolean boolean37 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property38 = dateTime30.secondOfDay();
        org.joda.time.DateTime dateTime39 = property38.withMaximumValue();
        boolean boolean40 = dateTimeZone14.equals((java.lang.Object) property38);
        java.lang.String str41 = property38.toString();
        org.joda.time.DateTime dateTime42 = property38.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTimeISO();
        boolean boolean44 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime46 = dateTime1.plusMonths(69);
        org.joda.time.DateTime.Property property47 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime49 = dateTime1.plusMinutes(26878);
        org.junit.Assert.assertNotNull(dateMidnight2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T17:33:02.475+10:00" + "'", str3, "2022-02-22T17:33:02.475+10:00");
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Property[secondOfDay]" + "'", str41, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        dateTimeParserBucket13.saveField(dateTimeFieldType17, "it", locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology3, locale19, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField30 = chronology26.millis();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology26.getZone();
        long long33 = dateTimeZone31.convertUTCToLocal((long) 558);
        dateTimeParserBucket23.setZone(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfCentury();
        java.lang.String str37 = property36.getName();
        org.joda.time.DurationField durationField38 = property36.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 558L + "'", long33 == 558L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "yearOfCentury" + "'", str37, "yearOfCentury");
        org.junit.Assert.assertNull(durationField38);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        int int29 = dateTimeZone17.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime30 = dateTime5.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        boolean boolean35 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime34);
        java.util.Date date36 = dateTime5.toDate();
        org.joda.time.DateTime dateTime38 = dateTime5.withYear(687);
        org.joda.time.LocalTime localTime39 = dateTime5.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.parse("-1");
        int int43 = dateTime42.getYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours((int) (byte) 0);
        java.util.Date date48 = dateTime45.toDate();
        org.joda.time.DateTime.Property property49 = dateTime45.dayOfMonth();
        java.lang.String str50 = property49.getAsString();
        int int51 = property49.getMaximumValue();
        int int52 = property49.getMinimumValueOverall();
        org.joda.time.DateTime dateTime53 = property49.roundHalfCeilingCopy();
        int int54 = dateTime53.getMinuteOfDay();
        boolean boolean55 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime53);
        long long56 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Instant instant57 = dateTime53.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Mon Feb 21 14:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Feb 22 07:33:02 UTC 2022");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "22" + "'", str50, "22");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 28 + "'", int51 == 28);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-86400000L) + "'", long56 == (-86400000L));
        org.junit.Assert.assertNotNull(instant57);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int27 = localDateTime24.get(dateTimeFieldType26);
        int int28 = dateTime22.get(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        boolean boolean35 = localDateTime33.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfCentury();
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.hourOfDay();
        org.joda.time.DateTime dateTime38 = dateTime22.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withMillisOfDay(4);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra(1969);
        int int43 = localDateTime40.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusMinutes(218);
        java.lang.String str46 = localDateTime45.toString();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T03:38:00.004" + "'", str46, "1970-01-01T03:38:00.004");
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime5.getZone();
        int int16 = dateTimeZone14.getStandardOffset(26752174000L);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField23 = null;
        dateTimeParserBucket22.saveField(dateTimeField23, (int) (short) 0);
        java.lang.Integer int26 = dateTimeParserBucket22.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket22.setZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((-1));
        org.joda.time.DateTime dateTime34 = dateTime30.plusHours((int) (byte) 100);
        boolean boolean36 = dateTime34.isBefore((long) ' ');
        int int37 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime34);
        long long39 = dateTimeZone27.nextTransition((long) (short) -1);
        long long42 = dateTimeZone27.adjustOffset(52L, false);
        long long46 = dateTimeZone27.convertLocalToUTC((long) 303, true, (long) 429);
        long long48 = dateTimeZone14.getMillisKeepLocal(dateTimeZone27, (-1645875149150L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:33:02 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 52L + "'", long42 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-35999697L) + "'", long46 == (-35999697L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1645875149150L) + "'", long48 == (-1645875149150L));
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour((int) (short) 10);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded(readableDuration14, (int) (byte) 0);
        boolean boolean17 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime5.era();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readableDuration32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime35 = property34.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property34.getFieldType();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property52 = dateTime49.centuryOfEra();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = property52.getAsText(locale53);
        java.lang.String str56 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDateTime46, (-1), locale53);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = localDateTime46.toString("445", locale58);
        dateTimeParserBucket24.saveField(dateTimeFieldType36, "52", locale58);
        java.util.Calendar calendar61 = dateTime5.toCalendar(locale58);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.fromCalendarFields(calendar61);
        org.joda.time.DateTimeField[] dateTimeFieldArray63 = localDateTime62.getFields();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.millisOfSecond();
        org.joda.time.DurationField durationField70 = chronology66.seconds();
        org.joda.time.DurationField durationField71 = chronology66.minutes();
        org.joda.time.DateTimeField dateTimeField72 = chronology66.era();
        org.joda.time.DateTimeField dateTimeField73 = chronology66.weekOfWeekyear();
        org.joda.time.DurationField durationField74 = chronology66.months();
        org.joda.time.DateTimeField dateTimeField75 = chronology66.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField75.getType();
        int int77 = localDateTime62.get(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "20" + "'", str55, "20");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1" + "'", str56, "-1");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "445" + "'", str59, "445");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-62194336017339,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=33,SECOND=2,MILLISECOND=661,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldArray63);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 23 + "'", int77 == 23);
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.util.TimeZone timeZone27 = dateTimeZone23.toTimeZone();
        int int29 = timeZone27.getOffset((long) 7);
        java.util.TimeZone.setDefault(timeZone27);
        java.util.TimeZone.setDefault(timeZone27);
        boolean boolean32 = timeZone27.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) ' ');
        long long11 = chronology2.set((org.joda.time.ReadablePartial) localDateTime9, (long) 603);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property12.getLocalDateTime();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        dateTimeParserBucket20.setZone(dateTimeZone34);
        boolean boolean37 = dateTimeZone34.isFixed();
        boolean boolean38 = dateTimeZone34.isFixed();
        long long40 = dateTimeZone34.convertUTCToLocal((-1L));
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) (byte) 0);
        java.util.Date date46 = dateTime43.toDate();
        org.joda.time.DateTime.Property property47 = dateTime43.dayOfMonth();
        java.lang.String str48 = property47.getAsString();
        int int49 = property47.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusMonths((int) (byte) 100);
        int[] intArray55 = localDateTime54.getValues();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusMonths(49);
        int int58 = property47.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        int int60 = property47.getMaximumShortTextLength(locale59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property47.getFieldType();
        int int62 = localDateTime41.indexOf(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType61.getDurationType();
        boolean boolean64 = localDateTime14.isSupported(durationFieldType63);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35968000L + "'", long11 == 35968000L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 35999999L + "'", long40 == 35999999L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Feb 22 17:33:02 GMT+10:00 2022");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "22" + "'", str48, "22");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 28 + "'", int49 == 28);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1978, 5, 1, 36000035]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime3.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        long long30 = dateTimeZone18.nextTransition((long) (short) -1);
        boolean boolean31 = dateTime3.equals((java.lang.Object) dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMillis(53);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((-1));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMillis(239);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.year();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = localDateTime40.getValue(27020568);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 27020568");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:33:02.838+10:00" + "'", str7, "2022-02-22T17:33:02.838+10:00");
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime3.withDurationAdded(1645514753003L, 38);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime3.toDateTime(chronology27);
        org.joda.time.DateTime.Property property29 = dateTime3.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYearOfEra(676);
        int int42 = localDateTime39.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.millisOfSecond();
        org.joda.time.DurationField durationField50 = chronology46.seconds();
        org.joda.time.DurationField durationField51 = chronology46.minutes();
        org.joda.time.DateTimeField dateTimeField52 = chronology46.era();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minus(readablePeriod57);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDateTime56, locale59);
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale59.getLanguage();
        java.lang.String str63 = locale59.getCountry();
        java.lang.String str64 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, 38, locale59);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology67, locale68, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField72 = null;
        dateTimeParserBucket71.saveField(dateTimeField72, (int) (short) 0);
        java.lang.Integer int75 = dateTimeParserBucket71.getOffsetInteger();
        java.util.Locale locale76 = dateTimeParserBucket71.getLocale();
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        java.lang.String str78 = dateTimeField30.getAsShortText(3479948L, locale76);
        long long80 = dateTimeField30.roundHalfFloor(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 885 + "'", int5 == 885);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "AD" + "'", str60, "AD");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "38" + "'", str64, "38");
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(locale76);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "70" + "'", str78, "70");
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-36000000L) + "'", long80 == (-36000000L));
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        dateTimeParserBucket6.setZone(dateTimeZone17);
        long long31 = dateTimeZone17.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear((-1));
        org.joda.time.DateTime dateTime38 = dateTime34.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime44 = dateTime40.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTime();
        org.joda.time.Chronology chronology46 = mutableDateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime32, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.dayOfYear();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField55 = null;
        dateTimeParserBucket54.saveField(dateTimeField55, (int) (short) 0);
        dateTimeParserBucket54.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        java.lang.String str66 = dateTimeField64.getAsShortText((long) 28);
        dateTimeParserBucket54.saveField(dateTimeField64, 100);
        dateTimeParserBucket54.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeParserBucket54.getZone();
        org.joda.time.Chronology chronology72 = chronology46.withZone(dateTimeZone71);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(dateTimeZone71);
        long long76 = dateTimeZone71.adjustOffset(2040483L, false);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 26921944, dateTimeZone71);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-35999941L) + "'", long31 == (-35999941L));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 2040483L + "'", long76 == 2040483L);
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale20.getDisplayName();
        dateTimeParserBucket11.saveField(dateTimeFieldType18, "97", locale20);
        int int23 = localDateTime3.get(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime3.withYearOfCentury(0);
        int int26 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withDurationAdded(readableDuration33, 28);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        boolean boolean44 = localDateTime42.isSupported(dateTimeFieldType43);
        int int45 = localDateTime37.get(dateTimeFieldType43);
        boolean boolean46 = localDateTime35.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime.Property property47 = localDateTime35.hourOfDay();
        int int48 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField50 = localDateTime3.getField(535);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 535");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str21, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        java.util.TimeZone timeZone23 = dateTimeZone20.toTimeZone();
        java.lang.String str25 = dateTimeZone20.getName((long) 749);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(1407440059200000L, dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withTime(1931, 159, 27096662, 562);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1931 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        org.joda.time.DurationField durationField47 = chronology45.weeks();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.hourOfDay();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        java.lang.Integer int56 = dateTimeParserBucket54.getOffsetInteger();
        java.util.Locale locale57 = dateTimeParserBucket54.getLocale();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology59, locale60, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField64 = null;
        dateTimeParserBucket63.saveField(dateTimeField64, (int) (short) 0);
        java.lang.Integer int67 = dateTimeParserBucket63.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket63.setZone(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekyear((-1));
        org.joda.time.DateTime dateTime75 = dateTime71.plusHours((int) (byte) 100);
        boolean boolean77 = dateTime75.isBefore((long) ' ');
        int int78 = dateTimeZone68.getOffset((org.joda.time.ReadableInstant) dateTime75);
        long long80 = dateTimeZone68.nextTransition((long) (short) -1);
        dateTimeParserBucket54.setZone(dateTimeZone68);
        java.lang.String str83 = dateTimeZone68.getNameKey(490L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.Chronology chronology85 = chronology45.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField86 = chronology45.hourOfDay();
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-35999941L) + "'", long30 == (-35999941L));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
// flaky:         org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("-1");
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.minusMinutes(732);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime8 = property5.addWrapFieldToCopy(86399874);
        org.junit.Assert.assertNotNull(dateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-62198791200000L) + "'", long2 == (-62198791200000L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        dateTimeParserBucket13.saveField(dateTimeFieldType17, "it", locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology3, locale19, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField30 = chronology26.millis();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology26.getZone();
        long long33 = dateTimeZone31.convertUTCToLocal((long) 558);
        dateTimeParserBucket23.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.halfdayOfDay();
        long long39 = dateTimeField37.remainder(0L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 558L + "'", long33 == 558L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int5 = localDateTime1.get(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        org.joda.time.DurationField durationField14 = chronology10.seconds();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.hourOfDay();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.plusHours((int) (byte) 100);
        boolean boolean43 = dateTime41.isBefore((long) ' ');
        int int44 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime41);
        dateTimeParserBucket23.setZone(dateTimeZone34);
        long long48 = dateTimeZone34.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime51.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.plus(readableDuration56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime61 = dateTime57.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime61.toMutableDateTime();
        org.joda.time.Chronology chronology63 = mutableDateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime49, chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.dayOfYear();
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology67, locale68, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField72 = null;
        dateTimeParserBucket71.saveField(dateTimeField72, (int) (short) 0);
        dateTimeParserBucket71.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now(chronology79);
        org.joda.time.DateTimeField dateTimeField81 = chronology79.secondOfMinute();
        java.lang.String str83 = dateTimeField81.getAsShortText((long) 28);
        dateTimeParserBucket71.saveField(dateTimeField81, 100);
        dateTimeParserBucket71.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTimeParserBucket71.getZone();
        org.joda.time.Chronology chronology89 = chronology63.withZone(dateTimeZone88);
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime(dateTimeZone88);
        org.joda.time.Chronology chronology91 = chronology10.withZone(dateTimeZone88);
        java.lang.String str93 = dateTimeZone88.getName((-1510244978552L));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-35999941L) + "'", long48 == (-35999941L));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0" + "'", str83, "0");
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(chronology91);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+10:00" + "'", str93, "+10:00");
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.dayOfYear();
        org.joda.time.DurationField durationField11 = chronology3.months();
        org.joda.time.DurationField durationField12 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateTime.Property property18 = dateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property33 = dateTime30.centuryOfEra();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = property33.getAsText(locale34);
        java.lang.String str37 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime27, (-1), locale34);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = dateTimeField23.getAsShortText((int) (byte) 10, locale39);
        java.lang.String str42 = property18.getAsShortText(locale39);
        java.util.Locale locale46 = new java.util.Locale("1", "1970-03-05T00:00:00.497", "hourOfHalfday");
        java.lang.String str47 = locale39.getDisplayVariant(locale46);
        java.lang.String str48 = locale46.getVariant();
        java.util.Locale.setDefault(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((-1510244938564L), chronology3, locale46, (java.lang.Integer) 429, 406);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "20" + "'", str36, "20");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1" + "'", str37, "-1");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10" + "'", str41, "10");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "22" + "'", str42, "22");
        org.junit.Assert.assertEquals(locale46.toString(), "1_1970-03-05T00:00:00.497_hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hourOfHalfday" + "'", str48, "hourOfHalfday");
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology10.add(readablePeriod12, 4838400000L, 290);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.era();
        int int18 = dateTimeField16.getMinimumValue(452L);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        java.lang.String str25 = dateTimeField23.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundHalfEvenCopy();
        int int31 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDateTime30.getFieldTypes();
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        int int34 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30);
        int int35 = localDateTime30.getMillisOfDay();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4838400000L + "'", long15 == 4838400000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "70" + "'", str25, "70");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.dayOfYear();
        org.joda.time.DurationField durationField48 = chronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.centuryOfEra();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale52.getCountry();
        java.util.Set<java.lang.String> strSet56 = locale52.getUnicodeLocaleKeys();
        java.lang.String str57 = dateTimeField50.getAsShortText(558L, locale52);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) 558L, chronology58);
        int int60 = localDateTime59.getYear();
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-35999941L) + "'", long30 == (-35999941L));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u671d\u9c9c\u6587" + "'", str54, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "19" + "'", str57, "19");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DateTime dateTime38 = property34.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime38.withWeekOfWeekyear(641);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 641 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[secondOfDay]" + "'", str37, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DurationField durationField8 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.year();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plus(readableDuration15);
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusYears(538);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plus(readableDuration20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minus(readableDuration22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField45 = localDateTime41.getField(0);
        boolean boolean46 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.withMillisOfSecond(292);
        int int49 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime23.withYearOfEra(354);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusMonths(749);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.monthOfYear();
        org.joda.time.LocalDateTime localDateTime56 = property54.addWrapFieldToCopy(441);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        java.util.GregorianCalendar gregorianCalendar59 = dateTime58.toGregorianCalendar();
        org.joda.time.Chronology chronology60 = dateTime58.getChronology();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusHours((int) (byte) 0);
        boolean boolean69 = dateTime67.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = dateTime67.toString(dateTimeFormatter70);
        org.joda.time.Chronology chronology73 = null;
        java.util.Locale locale74 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology73, locale74, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField78 = null;
        dateTimeParserBucket77.saveField(dateTimeField78, (int) (short) 0);
        java.lang.Integer int81 = dateTimeParserBucket77.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket77.setZone(dateTimeZone82);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone84);
        org.joda.time.DateTime dateTime87 = dateTime85.withWeekyear((-1));
        org.joda.time.DateTime dateTime89 = dateTime85.plusHours((int) (byte) 100);
        boolean boolean91 = dateTime89.isBefore((long) ' ');
        int int92 = dateTimeZone82.getOffset((org.joda.time.ReadableInstant) dateTime89);
        long long94 = dateTimeZone82.nextTransition((long) (short) -1);
        boolean boolean95 = dateTime67.equals((java.lang.Object) dateTimeZone82);
        org.joda.time.LocalDateTime localDateTime96 = org.joda.time.LocalDateTime.now(dateTimeZone82);
        int[] intArray97 = localDateTime96.getValues();
        chronology60.validate((org.joda.time.ReadablePartial) localDateTime62, intArray97);
        int int99 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime56, intArray97);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(gregorianCalendar59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-22T17:33:03.516+10:00" + "'", str71, "2022-02-22T17:33:03.516+10:00");
        org.junit.Assert.assertNull(int81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 36000000 + "'", int92 == 36000000);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-1L) + "'", long94 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(intArray97);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[2022, 2, 22, 63183516]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 292278993 + "'", int99 == 292278993);
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime7 = property6.roundCeilingCopy();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        java.util.Locale locale15 = dateTimeParserBucket13.getLocale();
        boolean boolean16 = property6.equals((java.lang.Object) locale15);
        org.joda.time.DateTime dateTime17 = property6.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField18 = property6.getField();
        org.joda.time.DateTimeField dateTimeField19 = property6.getField();
        org.joda.time.DateTime dateTime20 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 608 + "'", int5 == 608);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = dateTime1.isBefore(readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime1.toMutableDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMillis(57);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        dateTimeParserBucket14.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        java.lang.String str26 = dateTimeField24.getAsShortText((long) 28);
        dateTimeParserBucket14.saveField(dateTimeField24, 100);
        dateTimeParserBucket14.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket14.saveField(dateTimeFieldType31, 950);
        org.joda.time.DateTime.Property property34 = dateTime1.property(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfSecond();
        org.joda.time.DateTime dateTime41 = dateTime38.plusSeconds(441);
        org.joda.time.DateTime dateTime43 = dateTime38.minusHours(3);
        long long44 = property34.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime47 = dateTime43.withFieldAdded(durationFieldType45, 962);
        org.joda.time.Instant instant48 = dateTime43.toInstant();
        org.joda.time.DateTime.Property property49 = dateTime43.weekOfWeekyear();
        org.joda.time.DateTime.Property property50 = dateTime43.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = property50.setCopy(26830095);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26830095 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2023L + "'", long44 == 2023L);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.dayOfYear();
        org.joda.time.DurationField durationField48 = chronology45.eras();
        org.joda.time.Chronology chronology49 = chronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.year();
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-35999941L) + "'", long30 == (-35999941L));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        int int20 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj21 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 542);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfDay();
        org.joda.time.DurationField durationField26 = chronology24.minutes();
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        int[] intArray5 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMonths(49);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds(168);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusHours(28);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy((long) 569);
        boolean boolean17 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        int int23 = dateTime21.getMillisOfSecond();
        org.joda.time.DateTime dateTime25 = dateTime21.minusYears((int) 'x');
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths(10);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfDay();
        org.joda.time.DateTime.Property property34 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime36 = dateTime32.minusMinutes(648);
        org.joda.time.DateTime dateTime38 = dateTime36.plusSeconds(569);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks(26748437);
        boolean boolean41 = dateTime21.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime44 = dateTime21.withDurationAdded(1645514753003L, 38);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar49 = dateTime48.toGregorianCalendar();
        int int50 = dateTime48.getMillisOfSecond();
        org.joda.time.DateTime.Property property51 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime48.minusMinutes(25);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime48.minus(readablePeriod54);
        int int56 = dateTime55.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withWeekyear((-1));
        org.joda.time.DateTime dateTime62 = dateTime60.plusMonths(10);
        org.joda.time.DateTime.Property property63 = dateTime62.minuteOfDay();
        org.joda.time.DurationField durationField64 = property63.getDurationField();
        long long66 = durationField64.getValueAsLong((long) 508);
        org.joda.time.DurationFieldType durationFieldType67 = durationField64.getType();
        org.joda.time.DateTime dateTime69 = dateTime55.withFieldAdded(durationFieldType67, 989);
        org.joda.time.DateTime dateTime71 = dateTime44.withFieldAdded(durationFieldType67, 26847799);
        boolean boolean72 = localDateTime16.isSupported(durationFieldType67);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1978, 5, 1, 87]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 802 + "'", int23 == 802);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(gregorianCalendar49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 802 + "'", int50 == 802);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20 + "'", int56 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear((int) (short) 100);
        int int25 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        int int26 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        long long29 = dateTimeField15.set(1L, 837);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = dateTimeField15.getAsText((long) 7, locale31);
        org.joda.time.DateTime dateTime33 = property8.setCopy("999", locale31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plusWeeks(22);
        int int43 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusMinutes(392);
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology48, locale49, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField53 = null;
        dateTimeParserBucket52.saveField(dateTimeField53, (int) (short) 0);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology57, locale58, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField62 = null;
        dateTimeParserBucket61.saveField(dateTimeField62, (int) (short) 0);
        java.lang.Integer int65 = dateTimeParserBucket61.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket61.setZone(dateTimeZone66);
        dateTimeParserBucket52.setZone(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeParserBucket52.getZone();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withCenturyOfEra(2022);
        boolean boolean73 = localDateTime45.isAfter((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.plus(readablePeriod74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime77 = localDateTime70.withWeekOfWeekyear(256);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 256 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 837L + "'", long29 == 837L);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "7" + "'", str32, "7");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale13 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        java.lang.String str16 = locale15.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals(locale13.toString(), "property[millisofsecond]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "property[millisofsecond]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "property[millisofsecond]" + "'", str16, "property[millisofsecond]");
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        int int20 = dateTimeParserBucket5.getOffset();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 136);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology34);
        java.lang.String str36 = chronology34.toString();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        java.lang.String str42 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.weekyear();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology40);
        int int47 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean48 = localDateTime31.equals((java.lang.Object) dateTimeField37);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime31.plusMinutes(551);
        int int51 = localDateTime31.getHourOfDay();
        boolean boolean52 = dateTimeParserBucket5.restoreState((java.lang.Object) localDateTime31);
        org.joda.time.LocalDateTime.Property property53 = localDateTime31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime55 = localDateTime54.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime60 = localDateTime54.withTime(909, 562, 421, 26885);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 909 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[UTC]" + "'", str42, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = property2.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) 630);
        org.joda.time.LocalDateTime localDateTime6 = property2.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        boolean boolean17 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusHours(49);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours((int) (byte) 0);
        boolean boolean36 = dateTime34.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime34.toString(dateTimeFormatter37);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField45 = null;
        dateTimeParserBucket44.saveField(dateTimeField45, (int) (short) 0);
        java.lang.Integer int48 = dateTimeParserBucket44.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket44.setZone(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((-1));
        org.joda.time.DateTime dateTime56 = dateTime52.plusHours((int) (byte) 100);
        boolean boolean58 = dateTime56.isBefore((long) ' ');
        int int59 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime56);
        long long61 = dateTimeZone49.nextTransition((long) (short) -1);
        boolean boolean62 = dateTime34.equals((java.lang.Object) dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusMillis(53);
        int[] intArray66 = localDateTime65.getValues();
        chronology19.validate((org.joda.time.ReadablePartial) localDateTime27, intArray66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime27.withFieldAdded(durationFieldType68, 809);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime6.withFieldAdded(durationFieldType68, 490);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withYear(79);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withCenturyOfEra(954);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str20, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:33:03.899+00:00:00.052" + "'", str38, "2022-02-22T07:33:03.899+00:00:00.052");
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(intArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2022, 2, 22, 27183846]");
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime9.minusSeconds(241);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.seconds();
        org.joda.time.DurationField durationField26 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property42 = dateTime39.centuryOfEra();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getLanguage();
        java.lang.String str45 = property42.getAsText(locale43);
        java.lang.String str46 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime36, (-1), locale43);
        java.util.Locale.setDefault(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology21, locale43, (java.lang.Integer) 170, (int) (byte) 10);
        org.joda.time.DurationField durationField51 = chronology21.centuries();
        org.joda.time.DurationField durationField52 = chronology21.months();
        org.joda.time.DateTimeField dateTimeField53 = chronology21.year();
        org.joda.time.DateTime dateTime54 = dateTime17.toDateTime(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime17.withMonthOfYear(2043);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2043 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 17:33:03 GMT+10:00 2022");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "it" + "'", str44, "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "20" + "'", str45, "20");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1" + "'", str46, "-1");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour((int) (short) 10);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded(readableDuration14, (int) (byte) 0);
        boolean boolean17 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime5.era();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readableDuration32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime35 = property34.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property34.getFieldType();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property52 = dateTime49.centuryOfEra();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = property52.getAsText(locale53);
        java.lang.String str56 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDateTime46, (-1), locale53);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = localDateTime46.toString("445", locale58);
        dateTimeParserBucket24.saveField(dateTimeFieldType36, "52", locale58);
        java.util.Calendar calendar61 = dateTime5.toCalendar(locale58);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.fromCalendarFields(calendar61);
        org.joda.time.DateTimeField[] dateTimeFieldArray63 = localDateTime62.getFields();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withWeekyear(833);
        java.lang.String str66 = localDateTime65.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "20" + "'", str55, "20");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1" + "'", str56, "-1");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "445" + "'", str59, "445");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-62194336016078,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=33,SECOND=3,MILLISECOND=974,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldArray63);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0833-02-26T03:33:03.974" + "'", str66, "0833-02-26T03:33:03.974");
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(7);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plus(readableDuration27);
        java.lang.String str29 = localDateTime24.toString();
        int int30 = localDateTime24.getMillisOfSecond();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T01:00:00.052" + "'", str29, "1970-01-01T01:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology10.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField14.set(982L, 514);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 514 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime10.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours((int) (byte) 100);
        boolean boolean34 = dateTime32.isBefore((long) ' ');
        int int35 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime32);
        long long37 = dateTimeZone25.nextTransition((long) (short) -1);
        boolean boolean38 = dateTime10.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray40 = localDateTime39.getValues();
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime5, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology3.yearOfEra();
        org.joda.time.DurationField durationField44 = chronology3.hours();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:33:04.049+00:00:00.052" + "'", str14, "2022-02-22T07:33:04.049+00:00:00.052");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 22, 27184049]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        java.util.Date date5 = dateTime2.toDate();
        org.joda.time.DateTime.Property property6 = dateTime2.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        int int8 = property6.getMaximumValue();
        int int9 = property6.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property6.roundHalfCeilingCopy();
        int int11 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(563);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(92);
        org.joda.time.LocalDateTime localDateTime16 = dateTime13.toLocalDateTime();
        org.joda.time.Chronology chronology17 = dateTime13.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DurationField durationField26 = chronology22.seconds();
        org.joda.time.DurationField durationField27 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology22.minutes();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        dateTimeParserBucket36.saveField(dateTimeFieldType40, "it", locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(673L, chronology22, locale42, (java.lang.Integer) 10, 453);
        java.lang.String str48 = locale42.getUnicodeLocaleType("28");
        java.util.Locale locale49 = locale42.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(1645514774895L, chronology17, locale49, (java.lang.Integer) 690, 1361796);
        org.joda.time.DurationField durationField53 = chronology17.days();
        int int56 = durationField53.getValue(8553600011L, (-6219740318399709L));
        org.joda.time.DurationFieldType durationFieldType57 = durationField53.getType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 17:33:04 GMT+10:00 2022");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 28 + "'", int8 == 28);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 99 + "'", int56 == 99);
        org.junit.Assert.assertNotNull(durationFieldType57);
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        long long28 = dateTimeZone23.adjustOffset(2846437113600010L, false);
        long long32 = dateTimeZone23.convertLocalToUTC((long) 708, true, (-44L));
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        java.lang.Integer int41 = dateTimeParserBucket39.getOffsetInteger();
        java.util.Locale locale42 = dateTimeParserBucket39.getLocale();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        java.lang.Integer int52 = dateTimeParserBucket48.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket48.setZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withWeekyear((-1));
        org.joda.time.DateTime dateTime60 = dateTime56.plusHours((int) (byte) 100);
        boolean boolean62 = dateTime60.isBefore((long) ' ');
        int int63 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime60);
        long long65 = dateTimeZone53.nextTransition((long) (short) -1);
        dateTimeParserBucket39.setZone(dateTimeZone53);
        java.lang.String str68 = dateTimeZone53.getNameKey(490L);
        long long70 = dateTimeZone23.getMillisKeepLocal(dateTimeZone53, 26772732L);
        int int72 = dateTimeZone53.getOffsetFromLocal(303285L);
        long long76 = dateTimeZone53.convertLocalToUTC((long) (-593), true, 861L);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2846437113600010L + "'", long28 == 2846437113600010L);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 656L + "'", long32 == 656L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
// flaky:         org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 26772732L + "'", long70 == 26772732L);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-645L) + "'", long76 == (-645L));
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime10 = dateTime6.withWeekyear(174);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        boolean boolean23 = dateTime21.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = dateTime21.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        java.lang.Integer int35 = dateTimeParserBucket31.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket31.setZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        org.joda.time.DateTime dateTime43 = dateTime39.plusHours((int) (byte) 100);
        boolean boolean45 = dateTime43.isBefore((long) ' ');
        int int46 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime43);
        long long48 = dateTimeZone36.nextTransition((long) (short) -1);
        boolean boolean49 = dateTime21.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int[] intArray51 = localDateTime50.getValues();
        chronology14.validate((org.joda.time.ReadablePartial) localDateTime16, intArray51);
        org.joda.time.DateTimeField dateTimeField53 = chronology14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime6.toMutableDateTime(chronology14);
        boolean boolean55 = dateTime6.isEqualNow();
        long long56 = dateTime6.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T07:33:04.231+00:00:00.052" + "'", str25, "2022-02-22T07:33:04.231+00:00:00.052");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2022, 2, 22, 27184231]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1613979184179L + "'", long56 == 1613979184179L);
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        int int8 = dateTimeParserBucket6.getOffset();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale14 = java.util.Locale.getDefault(category11);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology16, locale17, (java.lang.Integer) 227);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DurationField durationField30 = chronology26.seconds();
        org.joda.time.DurationField durationField31 = chronology26.minutes();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology26.minutes();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        dateTimeParserBucket40.saveField(dateTimeFieldType44, "it", locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(673L, chronology26, locale46, (java.lang.Integer) 10, 453);
        java.lang.String str51 = locale17.getDisplayVariant(locale46);
        java.lang.String str52 = locale46.toLanguageTag();
        java.util.Locale.setDefault(category11, locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 454, chronology9, locale46, (java.lang.Integer) 808);
        org.joda.time.DateTimeField dateTimeField56 = chronology9.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko" + "'", str20, "ko");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "und" + "'", str52, "und");
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        int int6 = dateTime1.getDayOfYear();
        org.joda.time.DateTime dateTime7 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        int int9 = dateTime7.getMinuteOfHour();
        int int10 = dateTime7.getYear();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        java.lang.Integer int30 = dateTimeParserBucket26.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket26.setZone(dateTimeZone31);
        dateTimeParserBucket17.setZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket17.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(2311704835200000L, dateTimeZone34);
        boolean boolean37 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = dateTime7.isAfterNow();
        org.joda.time.DateTime.Property property39 = dateTime7.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 33 + "'", int9 == 33);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getNameKey((long) 25);
        int int25 = dateTimeZone19.getStandardOffset(946684800000L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        org.joda.time.DateTime.Property property31 = dateTime29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime29.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        long long35 = dateTimeZone32.getMillisKeepLocal(dateTimeZone33, (long) 634);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMinutes(19);
        org.joda.time.DateTime.Property property39 = dateTime36.weekyear();
        org.joda.time.DateTime dateTime41 = property39.setCopy(366);
        org.joda.time.DateMidnight dateMidnight42 = dateTime41.toDateMidnight();
        int int43 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property44 = dateTime41.year();
        org.joda.time.DurationField durationField45 = property44.getLeapDurationField();
        long long46 = durationField45.getUnitMillis();
        java.lang.String str47 = durationField45.getName();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 634L + "'", long35 == 634L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 86400000L + "'", long46 == 86400000L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "days" + "'", str47, "days");
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusHours(2023);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.parse("2022-02-22T07:26:05.917+00:00:00.052");
        org.joda.time.DateTime dateTime10 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, (-624692661));
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        int int8 = dateTimeParserBucket6.getOffset();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale14 = java.util.Locale.getDefault(category11);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology16, locale17, (java.lang.Integer) 227);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DurationField durationField30 = chronology26.seconds();
        org.joda.time.DurationField durationField31 = chronology26.minutes();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology26.minutes();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        dateTimeParserBucket40.saveField(dateTimeFieldType44, "it", locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(673L, chronology26, locale46, (java.lang.Integer) 10, 453);
        java.lang.String str51 = locale17.getDisplayVariant(locale46);
        java.lang.String str52 = locale46.toLanguageTag();
        java.util.Locale.setDefault(category11, locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 454, chronology9, locale46, (java.lang.Integer) 808);
        java.lang.Integer int56 = dateTimeParserBucket55.getOffsetInteger();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.weekyearOfCentury();
        java.lang.String str63 = dateTimeField61.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundHalfEvenCopy();
        int int69 = dateTimeField61.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = localDateTime68.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime68);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusWeeks(291);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusMonths(26786087);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.secondOfMinute();
        org.joda.time.DurationField durationField77 = property76.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField78 = property76.getField();
        java.lang.String str79 = dateTimeField78.getName();
        dateTimeParserBucket55.saveField(dateTimeField78, 848);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u671d\u9c9c\u6587" + "'", str19, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko" + "'", str20, "ko");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "und" + "'", str52, "und");
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "70" + "'", str63, "70");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray70);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "secondOfMinute" + "'", str79, "secondOfMinute");
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        long long20 = dateTimeField17.add((long) (short) -1, 35999999L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray48 = localDateTime47.getValues();
        int[] intArray50 = dateTimeField39.addWrapField((org.joda.time.ReadablePartial) localDateTime44, 0, intArray48, (int) (short) 10);
        int int51 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime32, intArray48);
        int int52 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime24, intArray48);
        int int53 = localDateTime24.getDayOfMonth();
        long long55 = chronology10.set((org.joda.time.ReadablePartial) localDateTime24, 708L);
        org.joda.time.DurationField durationField56 = chronology10.centuries();
        long long59 = durationField56.subtract(853844790266927577L, 26863);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35999998999L + "'", long20 == 35999998999L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 1, 1, 52]");
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 6048000052L + "'", long55 == 6048000052L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 769073350087727577L + "'", long59 == 769073350087727577L);
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2035-02-22T07:26:20.734Z");
        org.joda.time.DateTime dateTime3 = dateTime1.plusSeconds(107);
        org.joda.time.DateTime dateTime5 = dateTime1.minusHours(717);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int4 = localDateTime1.get(dateTimeFieldType3);
        int int5 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withMillisOfSecond(490);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime7.getFields();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property13 = dateTime10.year();
        org.joda.time.DateTime dateTime15 = dateTime10.minusSeconds(241);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.DateTime dateTime17 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.seconds();
        org.joda.time.DurationField durationField26 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.monthOfYear();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 854, chronology21);
        org.joda.time.DateTimeField dateTimeField30 = chronology21.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusHours(28);
        int int35 = localDateTime34.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusHours(162);
        long long41 = chronology21.set((org.joda.time.ReadablePartial) localDateTime39, 621471600035L);
        org.joda.time.DurationField durationField42 = chronology21.millis();
        org.joda.time.DateTime dateTime43 = dateTime17.withChronology(chronology21);
        boolean boolean45 = dateTime43.isAfter((long) 725);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-59957460000000L) + "'", long41 == (-59957460000000L));
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        java.lang.String str36 = dateTimeFieldType34.toString();
        org.joda.time.DateTime dateTime38 = dateTime17.withField(dateTimeFieldType34, 215);
        java.lang.String str39 = dateTimeFieldType34.getName();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "year" + "'", str36, "year");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "year" + "'", str39, "year");
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (byte) -1);
        int int6 = localDateTime5.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusYears((-292275054));
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekyearOfCentury();
        boolean boolean21 = strSet12.contains((java.lang.Object) chronology15);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology15, locale22, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology15);
        boolean boolean26 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = property27.addToCopy(1645514763123L);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tedesco (Germania)" + "'", str11, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        dateTimeParserBucket15.saveField(dateTimeFieldType19, "it", locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology5, locale21, (java.lang.Integer) 9, 538);
        java.lang.String str28 = nameProvider0.getShortName(locale21, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("26768");
        java.lang.String str34 = nameProvider0.getName(locale31, "2022-02-26T11:29:06.007+00:00:00.052", "0010-02-22T07:28:07.175");
        java.util.Locale locale35 = null;
        java.lang.String str38 = nameProvider0.getShortName(locale35, "2022-02-22T07:30:50.770+00:00:00.052", "\u6cd5\u6587");
        java.util.Locale locale39 = null;
        java.lang.String str42 = nameProvider0.getShortName(locale39, "2022-02-22T07:27:27.942+00:00:00.052", "2022");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.clockhourOfHalfday();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = dateTime1.isBefore(readableInstant2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime1.toMutableDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime1.minusMillis(57);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        dateTimeParserBucket14.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        java.lang.String str26 = dateTimeField24.getAsShortText((long) 28);
        dateTimeParserBucket14.saveField(dateTimeField24, 100);
        dateTimeParserBucket14.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket14.saveField(dateTimeFieldType31, 950);
        org.joda.time.DateTime.Property property34 = dateTime1.property(dateTimeFieldType31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfSecond();
        org.joda.time.DateTime dateTime41 = dateTime38.plusSeconds(441);
        org.joda.time.DateTime dateTime43 = dateTime38.minusHours(3);
        long long44 = property34.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime47 = dateTime43.withFieldAdded(durationFieldType45, 962);
        int int48 = dateTime43.getDayOfMonth();
        boolean boolean50 = dateTime43.isAfter(1645531200000L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2023L + "'", long44 == 2023L);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 23 + "'", int48 == 23);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone19);
        java.lang.String str25 = dateTimeZone19.toString();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.052" + "'", str23, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        int int8 = property7.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy(608);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfWeek();
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime10);
        java.lang.String str13 = dateTimeZone1.getID();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = locale30.getDisplayName();
        dateTimeParserBucket21.saveField(dateTimeFieldType28, "97", locale30);
        java.lang.String str33 = locale15.getDisplayCountry(locale30);
        java.lang.String str34 = locale30.getDisplayScript();
        java.lang.String str35 = locale30.getScript();
        java.lang.String str36 = dateTimeZone1.getName((long) 761, locale30);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours((int) (byte) 0);
        boolean boolean43 = dateTime41.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        boolean boolean48 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology52 = localDateTime51.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(chronology57);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property64 = dateTime61.centuryOfEra();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = property64.getAsText(locale65);
        java.lang.String str68 = dateTimeField54.getAsText((org.joda.time.ReadablePartial) localDateTime58, (-1), locale65);
        java.util.Calendar calendar69 = dateTime49.toCalendar(locale65);
        java.lang.String str70 = locale65.getScript();
        java.lang.String str71 = locale65.getDisplayName();
        java.lang.String str72 = dateTimeZone1.getShortName(0L, locale65);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone1);
        boolean boolean74 = dateTime73.isBeforeNow();
        org.joda.time.DateTime dateTime76 = dateTime73.plusYears(497);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+52:00" + "'", str13, "+52:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tedesco (Germania)" + "'", str31, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "China" + "'", str33, "China");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+52:00" + "'", str36, "+52:00");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "it" + "'", str66, "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "20" + "'", str67, "20");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1" + "'", str68, "-1");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1586849585097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2020,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=105,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=5,MILLISECOND=149,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "italiano" + "'", str71, "italiano");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+52:00" + "'", str72, "+52:00");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.era();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime21.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean25 = dateTime24.isEqualNow();
        org.joda.time.DateTime.Property property26 = dateTime24.secondOfMinute();
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.util.Locale locale37 = dateTimeParserBucket33.getLocale();
        java.util.Locale.setDefault(category27, locale37);
        java.lang.String str39 = property26.getAsShortText(locale37);
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale37.getDisplayScript(locale40);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.DurationField durationField48 = chronology44.seconds();
        org.joda.time.DurationField durationField49 = chronology44.minutes();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.era();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology44.clockhourOfDay();
        org.joda.time.DurationField durationField53 = dateTimeField52.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime60 = property57.addWrapFieldToCopy(28);
        int int61 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime66 = property64.addToCopy((-592L));
        org.joda.time.LocalDateTime localDateTime67 = property64.withMaximumValue();
        int int68 = localDateTime67.getMonthOfYear();
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology70, locale71, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField75 = null;
        dateTimeParserBucket74.saveField(dateTimeField75, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale80 = java.util.Locale.ROOT;
        dateTimeParserBucket74.saveField(dateTimeFieldType78, "it", locale80);
        java.lang.String str82 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDateTime67, locale80);
        java.lang.String str83 = locale80.getCountry();
        java.lang.String str84 = locale37.getDisplayCountry(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket(758L, chronology13, locale80, (java.lang.Integer) 42, 435);
        java.util.Locale locale88 = locale80.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket(98072241995508L, chronology7, locale88);
        java.util.Set<java.lang.String> strSet90 = locale88.getUnicodeLocaleKeys();
        java.util.Collection<java.lang.String> strCollection91 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = strSet90.removeAll(strCollection91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "27" + "'", str39, "27");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNull(durationField53);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "24" + "'", str82, "24");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology8.weeks();
        java.lang.String str12 = durationField11.getName();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weeks" + "'", str12, "weeks");
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguageTag("coreano");
        java.util.Locale.Builder builder4 = builder3.clear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField12 = chronology8.seconds();
        org.joda.time.DurationField durationField13 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours((int) (byte) 0);
        boolean boolean20 = dateTime18.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime18.toMutableDateTime(dateTimeZone21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = dateTimeZone21.getName((long) (byte) 1, locale25);
        org.joda.time.Chronology chronology27 = chronology8.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property32 = dateTime29.centuryOfEra();
        org.joda.time.DurationField durationField33 = property32.getRangeDurationField();
        long long34 = property32.remainder();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.toLanguageTag();
        java.lang.String str39 = property32.getAsText(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology27, locale35, (java.lang.Integer) 180);
        java.util.Locale locale45 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str46 = locale35.getDisplayVariant(locale45);
        java.util.Locale.Builder builder47 = builder4.setLocale(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder47.setUnicodeLocaleKeyword("2022-02-22T07:31:56.670Z", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T07:31:56.670Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.052" + "'", str26, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNull(durationField33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1510244814727L) + "'", long34 == (-1510244814727L));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u671d\u9c9c\u6587" + "'", str37, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ko" + "'", str38, "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "20" + "'", str39, "20");
        org.junit.Assert.assertEquals(locale45.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTime dateTime31 = property24.setCopy(12);
        long long32 = property24.remainder();
        org.joda.time.DateTime dateTime33 = property24.roundHalfFloorCopy();
        org.joda.time.DurationField durationField34 = property24.getRangeDurationField();
        java.util.Locale locale38 = new java.util.Locale("java.io.IOException: java.io.IOException", "+00:00:00.004");
        java.lang.String str39 = locale38.getDisplayVariant();
        java.util.Locale locale40 = locale38.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = property24.setCopy("2022-02-22T07:26:26.695+00:00:00.052", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:26:26.695+00:00:00.052\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "26" + "'", str29, "26");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 41585325L + "'", long32 == 41585325L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals(locale38.toString(), "java.io.ioexception: java.io.ioexception_+00:00:00.004");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "java.io.ioexception: java.io.ioexception_+00:00:00.004");
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        java.lang.String str9 = property8.getName();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfDay();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(648);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds(569);
        org.joda.time.DateTime dateTime24 = dateTime20.plusDays(575);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        dateTimeParserBucket31.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket31.getZone();
        long long50 = dateTimeZone48.previousTransition((long) 593);
        org.joda.time.DateTime dateTime51 = dateTime24.withZone(dateTimeZone48);
        int int52 = property8.getDifference((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime53 = property8.getDateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.plusWeeks(74421);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.minus(readableDuration56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 593L + "'", long50 == 593L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-49641120) + "'", int52 == (-49641120));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime3.withDayOfMonth(19);
        org.joda.time.DateTime.Property property9 = dateTime3.millisOfSecond();
        org.joda.time.Chronology chronology10 = dateTime3.getChronology();
        org.joda.time.DateTime.Property property11 = dateTime3.dayOfWeek();
        boolean boolean12 = dateTime3.isAfterNow();
        org.joda.time.DateTime.Property property13 = dateTime3.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        int int18 = dateTime15.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.plus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime15.minusHours(732);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime22.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusHours((int) (byte) 0);
        boolean boolean31 = dateTime29.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime29.toString(dateTimeFormatter32);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekyear((-1));
        org.joda.time.DateTime dateTime51 = dateTime47.plusHours((int) (byte) 100);
        boolean boolean53 = dateTime51.isBefore((long) ' ');
        int int54 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime51);
        long long56 = dateTimeZone44.nextTransition((long) (short) -1);
        boolean boolean57 = dateTime29.equals((java.lang.Object) dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        long long61 = dateTimeZone44.adjustOffset((long) 26752, true);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(795L, dateTimeZone44);
        long long64 = dateTimeZone44.previousTransition(1645514988104L);
        org.joda.time.DateTime dateTime65 = dateTime22.withZoneRetainFields(dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = dateTime22.withTime(27006218, 922, 240, 27162646);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27006218 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 373 + "'", int5 == 373);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 33 + "'", int24 == 33);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T07:33:05.374+00:00:00.052" + "'", str33, "2022-02-22T07:33:05.374+00:00:00.052");
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 26752L + "'", long61 == 26752L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645514988104L + "'", long64 == 1645514988104L);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        org.joda.time.DateTime dateTime10 = dateTime5.withDayOfYear(241);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField23 = null;
        dateTimeParserBucket22.saveField(dateTimeField23, (int) (short) 0);
        java.lang.Integer int26 = dateTimeParserBucket22.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket22.setZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((-1));
        org.joda.time.DateTime dateTime34 = dateTime30.plusHours((int) (byte) 100);
        boolean boolean36 = dateTime34.isBefore((long) ' ');
        int int37 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime34);
        dateTimeParserBucket16.setZone(dateTimeZone27);
        long long41 = dateTimeZone27.convertLocalToUTC((long) 59, false);
        org.joda.time.DateTime dateTime42 = dateTime5.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfDay();
        long long44 = property43.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 7L + "'", long41 == 7L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 5423L + "'", long44 == 5423L);
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(2311704835200000L, dateTimeZone23);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfCentury();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("CAN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"CAN\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        dateTimeParserBucket20.setZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket20.getZone();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone37);
        boolean boolean39 = dateTimeZone37.isFixed();
        long long42 = dateTimeZone37.adjustOffset(2846437113600010L, false);
        java.lang.String str44 = dateTimeZone37.getShortName(783L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((-1514764799755L), dateTimeZone37);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        java.lang.Integer int64 = dateTimeParserBucket60.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket60.setZone(dateTimeZone65);
        dateTimeParserBucket51.setZone(dateTimeZone65);
        java.util.TimeZone timeZone68 = dateTimeZone65.toTimeZone();
        long long70 = dateTimeZone65.convertUTCToLocal((long) 441);
        long long72 = dateTimeZone37.getMillisKeepLocal(dateTimeZone65, 635L);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime11.toMutableDateTime(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:33:05.470Z" + "'", str12, "2022-02-22T07:33:05.470Z");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2846437113600010L + "'", long42 == 2846437113600010L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.052" + "'", str44, "+00:00:00.052");
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 493L + "'", long70 == 493L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 635L + "'", long72 == 635L);
        org.junit.Assert.assertNotNull(mutableDateTime73);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plus(readableDuration4);
        int int6 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy((-592L));
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = dateTime15.isBefore(readableInstant16);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.lang.Integer int37 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket33.setZone(dateTimeZone38);
        dateTimeParserBucket24.setZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket24.getZone();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone41);
        boolean boolean43 = dateTimeZone41.isFixed();
        long long46 = dateTimeZone41.adjustOffset(2846437113600010L, false);
        org.joda.time.DateTime dateTime47 = dateTime15.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime48 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDateTime13.toDateTime(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime13.monthOfYear();
        boolean boolean53 = property52.isLeap();
        java.lang.String str54 = property52.getAsText();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 33 + "'", int6 == 33);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2846437113600010L + "'", long46 == 2846437113600010L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "gennaio" + "'", str54, "gennaio");
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plus(readableDuration4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMaximumValue();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        int int11 = property9.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        boolean boolean17 = dateTime15.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) 'a');
        boolean boolean22 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime15.minus(readablePeriod23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = locale39.getDisplayName();
        dateTimeParserBucket30.saveField(dateTimeFieldType37, "97", locale39);
        java.util.Calendar calendar42 = dateTime15.toCalendar(locale39);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minusHours(49);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime52 = property49.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusHours((int) (byte) 0);
        java.util.Date date57 = dateTime54.toDate();
        org.joda.time.DateTime.Property property58 = dateTime54.dayOfMonth();
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = property58.getAsShortText(locale59);
        int int61 = property49.getMaximumShortTextLength(locale59);
        java.lang.String str62 = locale59.getDisplayVariant();
        java.lang.String str63 = locale39.getDisplayVariant(locale59);
        int int64 = property9.getMaximumTextLength(locale39);
        boolean boolean65 = locale39.hasExtensions();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 27185599L + "'", long7 == 27185599L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tedesco (Germania)" + "'", str40, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645515185599,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=5,MILLISECOND=651,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(date57);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Tue Feb 22 07:33:05 GMT 2022");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "22" + "'", str60, "22");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        long long22 = dateTimeZone10.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone10);
        long long25 = dateTimeZone10.convertUTCToLocal(55L);
        boolean boolean26 = dateTimeZone10.isFixed();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 107L + "'", long25 == 107L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        java.lang.Integer int28 = dateTimeParserBucket5.getOffsetInteger();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 26822670);
        java.lang.Integer int31 = dateTimeParserBucket5.getOffsetInteger();
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(int31);
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property7.addWrapFieldToCopy(619);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(275);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket18.setZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime26.plusHours((int) (byte) 100);
        boolean boolean32 = dateTime30.isBefore((long) ' ');
        int int33 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        java.lang.Integer int52 = dateTimeParserBucket48.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket48.setZone(dateTimeZone53);
        dateTimeParserBucket39.setZone(dateTimeZone53);
        boolean boolean56 = dateTimeZone53.isFixed();
        boolean boolean57 = dateTimeZone53.isFixed();
        long long59 = dateTimeZone53.previousTransition((long) 2);
        long long61 = dateTimeZone23.getMillisKeepLocal(dateTimeZone53, (long) 233);
        long long64 = dateTimeZone23.convertLocalToUTC(3142800120L, true);
        org.joda.time.DateTime dateTime65 = localDateTime9.toDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 236, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusSeconds(26950145);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 233L + "'", long61 == 233L);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3142800068L + "'", long64 == 3142800068L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDateTime68);
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime15.getZone();
        boolean boolean20 = dateTimeZone19.isFixed();
        int int22 = dateTimeZone19.getOffset((long) 'x');
        boolean boolean23 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket5.getZone();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.DurationField durationField30 = chronology27.millis();
        org.joda.time.DurationField durationField31 = chronology27.weeks();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.weekyearOfCentury();
        dateTimeParserBucket5.saveField(dateTimeField34, 327);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = dateTimeField34.set((long) (-36), "Ora media di Greenwich");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Ora media di Greenwich\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        dateTimeParserBucket33.setZone(dateTimeZone47);
        java.lang.String str51 = dateTimeZone47.getNameKey((long) 25);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = dateTime53.isBefore(readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime53.toMutableDateTime(dateTimeZone56);
        long long60 = dateTimeZone56.nextTransition(97701L);
        long long62 = dateTimeZone47.getMillisKeepLocal(dateTimeZone56, (long) 241);
        dateTimeParserBucket27.setZone(dateTimeZone47);
        long long64 = dateTimeParserBucket27.computeMillis();
        long long67 = dateTimeParserBucket27.computeMillis(true, "2050-11-01T00:00:00.000");
        dateTimeParserBucket27.setPivotYear((java.lang.Integer) 103);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 97701L + "'", long60 == 97701L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 241L + "'", long62 == 241L);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 621L + "'", long64 == 621L);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 621L + "'", long67 == 621L);
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = localDateTime11.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = property5.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime18.minusDays(4);
        org.joda.time.DateTime dateTime23 = dateTime18.plus((long) 208);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withPeriodAdded(readablePeriod24, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar31 = dateTime30.toGregorianCalendar();
        org.joda.time.DateTime.Property property32 = dateTime30.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime30.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        long long36 = dateTimeZone33.getMillisKeepLocal(dateTimeZone34, (long) 634);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str38 = dateTimeZone33.getID();
        long long40 = dateTimeZone33.convertUTCToLocal(23673600139L);
        org.joda.time.DateTime dateTime41 = dateTime23.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime43 = dateTime41.withMillis((long) 837);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = null;
        dateTimeParserBucket55.saveField(dateTimeField56, (int) (short) 0);
        java.lang.Integer int59 = dateTimeParserBucket55.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket55.setZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withWeekyear((-1));
        org.joda.time.DateTime dateTime67 = dateTime63.plusHours((int) (byte) 100);
        boolean boolean69 = dateTime67.isBefore((long) ' ');
        int int70 = dateTimeZone60.getOffset((org.joda.time.ReadableInstant) dateTime67);
        dateTimeParserBucket49.setZone(dateTimeZone60);
        dateTimeParserBucket49.setOffset((java.lang.Integer) 538);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.plusHours((int) (byte) 0);
        boolean boolean79 = dateTime77.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime81.minusWeeks((int) 'a');
        boolean boolean84 = dateTime77.isAfter((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = dateTime83.toDateTime();
        org.joda.time.DateTime dateTime87 = dateTime83.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology90 = localDateTime89.getChronology();
        org.joda.time.LocalDateTime.Property property91 = localDateTime89.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime92 = property91.roundHalfEvenCopy();
        java.lang.String str93 = property91.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property91.getFieldType();
        int int95 = dateTime87.get(dateTimeFieldType94);
        dateTimeParserBucket49.saveField(dateTimeFieldType94, 295);
        boolean boolean98 = dateTime43.isSupported(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:33:05 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19045 + "'", int19 == 19045);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(gregorianCalendar31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 634L + "'", long36 == 634L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.052" + "'", str38, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 23673600191L + "'", long40 == 23673600191L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Property[millisOfSecond]" + "'", str93, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 971 + "'", int95 == 971);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime6.minusYears(882);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        int int21 = mutableDateTime19.get(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        org.joda.time.DurationField durationField27 = chronology24.millis();
        boolean boolean28 = dateTimeFieldType20.isSupported(chronology24);
        org.joda.time.DurationField durationField29 = chronology24.centuries();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology24, locale30);
        boolean boolean33 = dateTime9.equals((java.lang.Object) dateTimeParserBucket32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime9.withPeriodAdded(readablePeriod34, 267);
        boolean boolean38 = dateTime36.isEqual(74920000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 99 + "'", int5 == 99);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        long long28 = dateTimeZone23.adjustOffset(2846437113600010L, false);
        long long32 = dateTimeZone23.convertLocalToUTC((long) 708, true, (-44L));
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime37.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        java.util.Date date45 = dateTime42.toDate();
        int int46 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime42);
        long long47 = dateTime37.getMillis();
        boolean boolean48 = localDateTime34.equals((java.lang.Object) dateTime37);
        org.joda.time.DateTime.Property property49 = dateTime37.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = property49.addToCopy(1586849325995L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1586849325995 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2846437113600010L + "'", long28 == 2846437113600010L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 656L + "'", long32 == 656L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Feb 22 07:33:06 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645515185998L + "'", long47 == 1645515185998L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        long long24 = dateTimeZone19.convertUTCToLocal((long) 441);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekyear(26998162);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 493L + "'", long24 == 493L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime7.withDayOfMonth(6);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime7.withYear(60);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 564, chronology29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        int int43 = property42.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime45 = property42.addToCopy(608);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfWeek();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology48, locale49, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField53 = null;
        dateTimeParserBucket52.saveField(dateTimeField53, (int) (short) 0);
        java.lang.Integer int56 = dateTimeParserBucket52.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket52.setZone(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.withWeekyear((-1));
        org.joda.time.DateTime dateTime64 = dateTime60.plusHours((int) (byte) 100);
        boolean boolean66 = dateTime64.isBefore((long) ' ');
        int int67 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime69 = dateTime64.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int74 = localDateTime71.get(dateTimeFieldType73);
        int int75 = dateTime69.get(dateTimeFieldType73);
        int int76 = localDateTime45.get(dateTimeFieldType73);
        boolean boolean77 = localDateTime36.isSupported(dateTimeFieldType73);
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType73.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property79 = localDateTime30.property(dateTimeFieldType73);
        java.lang.String str80 = dateTimeFieldType73.getName();
        int int81 = localDateTime7.get(dateTimeFieldType73);
        int int82 = localDateTime7.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime87 = localDateTime7.withTime(2022, 741, 830, 27140);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 99 + "'", int22 == 99);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 18 + "'", int76 == 18);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "weekOfWeekyear" + "'", str80, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1970 + "'", int82 == 1970);
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        int[] intArray5 = localDateTime4.getValues();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMonths(49);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusMillis(270);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology18);
        int int25 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyearOfCentury();
        java.lang.String str32 = dateTimeField30.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfEvenCopy();
        int int38 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime37.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime37);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime40, locale41);
        int int44 = localDateTime40.size();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withMillisOfDay(514);
        boolean boolean47 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int53 = localDateTime51.get(dateTimeFieldType52);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField60 = null;
        dateTimeParserBucket59.saveField(dateTimeField60, (int) (short) 0);
        java.lang.Integer int63 = dateTimeParserBucket59.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket59.setZone(dateTimeZone64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.lang.String str69 = locale68.getDisplayName();
        dateTimeParserBucket59.saveField(dateTimeFieldType66, "97", locale68);
        int int71 = localDateTime51.get(dateTimeFieldType66);
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType66.getDurationType();
        boolean boolean73 = localDateTime9.isSupported(durationFieldType72);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str75 = durationFieldType74.toString();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.millisOfSecond();
        org.joda.time.DurationField durationField82 = chronology78.seconds();
        org.joda.time.DurationField durationField83 = chronology78.minutes();
        org.joda.time.DateTimeField dateTimeField84 = chronology78.era();
        org.joda.time.DateTimeField dateTimeField85 = chronology78.monthOfYear();
        org.joda.time.DurationField durationField86 = durationFieldType74.getField(chronology78);
        org.joda.time.DateTimeField dateTimeField87 = chronology78.millisOfSecond();
        org.joda.time.DurationField durationField88 = chronology78.halfdays();
        org.joda.time.DurationField durationField89 = durationFieldType72.getField(chronology78);
        org.joda.time.DurationField durationField90 = chronology78.weeks();
        org.joda.time.DateTimeField dateTimeField91 = chronology78.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[1978, 5, 1, 87]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "70" + "'", str32, "70");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ko" + "'", str42, "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tedesco (Germania)" + "'", str69, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 12 + "'", int71 == 12);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "weeks" + "'", str75, "weeks");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTime dateTime31 = property24.setCopy(12);
        long long32 = property24.remainder();
        int int33 = property24.getMinimumValueOverall();
        java.lang.String str34 = property24.getAsShortText();
        org.joda.time.DateTime dateTime35 = property24.roundFloorCopy();
        org.joda.time.DateTime dateTime38 = dateTime35.withDurationAdded((long) 373, 542);
        org.joda.time.DateTime dateTime40 = dateTime35.minusYears(26858);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "26" + "'", str29, "26");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 41586161L + "'", long32 == 41586161L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "26" + "'", str34, "26");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime3.withDurationAdded(readableDuration5, 538);
        int int8 = dateTime3.getEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale12.getDisplayLanguage();
        java.util.Locale locale17 = new java.util.Locale("", "22");
        java.lang.String str18 = locale12.getDisplayCountry(locale17);
        java.lang.String str19 = dateTimeZone10.getName((long) 185, locale12);
        org.joda.time.DateTime dateTime20 = dateTime3.withZone(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese" + "'", str14, "cinese");
        org.junit.Assert.assertEquals(locale17.toString(), "_22");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "China" + "'", str18, "China");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.004" + "'", str19, "+00:00:00.004");
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        int int4 = dateTime1.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.plus(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int) 'a');
        boolean boolean17 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.minutes();
        org.joda.time.DateTime dateTime23 = dateTime1.withChronology(chronology19);
        org.joda.time.Chronology chronology24 = chronology19.withUTC();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.lang.Integer int37 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket33.setZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((-1));
        org.joda.time.DateTime dateTime45 = dateTime41.plusHours((int) (byte) 100);
        boolean boolean47 = dateTime45.isBefore((long) ' ');
        int int48 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime50 = dateTime45.minusYears(20);
        org.joda.time.DateTime.Property property51 = dateTime50.hourOfDay();
        org.joda.time.DateTime.Property property52 = dateTime50.dayOfMonth();
        java.util.Locale locale56 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str57 = property52.getAsText(locale56);
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleAttributes();
        java.lang.String str59 = dateTimeField26.getAsText((long) 513, locale56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = locale56.getUnicodeLocaleType("2035-03-08T07:30:54.361");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2035-03-08T07:30:54.361");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str20, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertEquals(locale56.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "26" + "'", str57, "26");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "January" + "'", str59, "January");
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis(603);
        int int9 = localDateTime8.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds(170);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        java.util.Locale locale19 = dateTimeParserBucket17.getLocale();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plus(readableDuration24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfMonth();
        long long27 = property26.remainder();
        org.joda.time.LocalDateTime localDateTime29 = property26.addToCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int31 = localDateTime29.get(dateTimeFieldType30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear((-1));
        org.joda.time.DateTime dateTime38 = dateTime36.plusMonths(10);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfDay();
        int int40 = dateTime38.getYearOfEra();
        org.joda.time.DateTime.Property property41 = dateTime38.secondOfDay();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime55 = property54.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withYear((int) (short) 100);
        int int58 = localDateTime50.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        int int59 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50);
        long long62 = dateTimeField48.set(1L, 837);
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.lang.String str65 = dateTimeField48.getAsText((long) 7, locale64);
        org.joda.time.DateTime dateTime66 = property41.setCopy("999", locale64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusHours((int) (byte) 0);
        boolean boolean72 = dateTime70.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone74 = dateTimeZone73.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime70.toMutableDateTime(dateTimeZone73);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = dateTimeZone73.getName((long) (byte) 1, locale77);
        java.lang.String str80 = locale77.getUnicodeLocaleType("52");
        java.lang.String str81 = locale64.getDisplayVariant(locale77);
        dateTimeParserBucket17.saveField(dateTimeFieldType30, "117", locale77);
        boolean boolean83 = localDateTime11.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime86 = org.joda.time.DateTime.now(dateTimeZone85);
        org.joda.time.DateTime dateTime88 = dateTime86.withWeekyear((-1));
        org.joda.time.DateTime dateTime90 = dateTime86.withMillisOfDay(0);
        int int91 = dateTime90.getDayOfYear();
        org.joda.time.DateTime dateTime93 = dateTime90.withYear(139);
        org.joda.time.LocalDateTime localDateTime94 = dateTime93.toLocalDateTime();
        boolean boolean95 = localDateTime84.isAfter((org.joda.time.ReadablePartial) localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 27186283L + "'", long27 == 27186283L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 837L + "'", long62 == 837L);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "7" + "'", str65, "7");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.052" + "'", str78, "+00:00:00.052");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 53 + "'", int91 == 53);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime8.minusMonths(0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket41.setZone(dateTimeZone46);
        dateTimeParserBucket32.setZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket32.getZone();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone49);
        boolean boolean51 = dateTimeZone49.isFixed();
        long long54 = dateTimeZone49.adjustOffset(2846437113600010L, false);
        long long58 = dateTimeZone49.convertLocalToUTC((long) 708, true, (-44L));
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime61 = dateTime59.minus((long) 14);
        org.joda.time.DateTime dateTime62 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime.Property property63 = dateTime62.dayOfWeek();
        org.joda.time.DateTime dateTime64 = property63.getDateTime();
        org.joda.time.DateTime dateTime66 = dateTime64.minusMonths(5);
        org.joda.time.DateTime.Property property67 = dateTime66.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2846437113600010L + "'", long54 == 2846437113600010L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 656L + "'", long58 == 656L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        boolean boolean16 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.year();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.era();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.Chronology chronology31 = localDateTime29.getChronology();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology43, locale44, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = null;
        dateTimeParserBucket47.saveField(dateTimeField48, (int) (short) 0);
        java.lang.Integer int51 = dateTimeParserBucket47.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket47.setZone(dateTimeZone52);
        dateTimeParserBucket38.setZone(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket38.getZone();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime56);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.hourOfDay();
        long long62 = chronology31.set((org.joda.time.ReadablePartial) localDateTime59, 16851412368000L);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plus(readablePeriod63);
        int int65 = localDateTime64.getMinuteOfHour();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3600052L + "'", long62 == 3600052L);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(435);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 0);
        boolean boolean7 = dateTime5.isEqual((long) (short) 100);
        int int8 = dateTime5.getMinuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.secondOfMinute();
        org.joda.time.DateTime.Property property10 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(102);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours((int) (byte) 0);
        java.util.Date date17 = dateTime14.toDate();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfMonth();
        org.joda.time.DateTime.Property property19 = dateTime14.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime14.plusMonths(19);
        org.joda.time.DateTime dateTime23 = dateTime14.plusHours(100);
        boolean boolean24 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime14);
        int int25 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime14);
        long long28 = dateTimeZone1.adjustOffset((long) 715, false);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        dateTimeParserBucket34.setZone(dateTimeZone48);
        java.lang.String str52 = dateTimeZone48.getNameKey((long) 25);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = dateTime54.isBefore(readableInstant55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime54.toMutableDateTime(dateTimeZone57);
        long long61 = dateTimeZone57.nextTransition(97701L);
        long long63 = dateTimeZone48.getMillisKeepLocal(dateTimeZone57, (long) 241);
        long long65 = dateTimeZone48.nextTransition((long) 8);
        long long67 = dateTimeZone1.getMillisKeepLocal(dateTimeZone48, (-26949715199242L));
        int int69 = dateTimeZone48.getOffset(4260720082L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 453 + "'", int8 == 453);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:33:06 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1566000000 + "'", int25 == 1566000000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 715L + "'", long28 == 715L);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 97701L + "'", long61 == 97701L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 241L + "'", long63 == 241L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 8L + "'", long65 == 8L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-26948149199294L) + "'", long67 == (-26948149199294L));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime8.withCenturyOfEra(2020);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(54);
        boolean boolean27 = dateTime24.isBeforeNow();
        org.joda.time.Instant instant28 = dateTime24.toInstant();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.months();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = chronology3.days();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekyear((-1));
        org.joda.time.DateTime dateTime22 = dateTime18.plusHours((int) (byte) 100);
        boolean boolean24 = dateTime22.isBefore((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readablePeriod25);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        int int33 = dateTime31.getMillisOfSecond();
        org.joda.time.DateTime.Property property34 = dateTime31.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property34.getFieldType();
        int int36 = dateTime26.get(dateTimeFieldType35);
        org.joda.time.DateTime.Property property37 = dateTime26.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime26.getZone();
        org.joda.time.DateTime.Property property39 = dateTime26.era();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar44 = dateTime43.toGregorianCalendar();
        int int45 = dateTime43.getMillisOfSecond();
        org.joda.time.DateTime.Property property46 = dateTime43.minuteOfHour();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property52 = dateTime49.centuryOfEra();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = property52.getAsText(locale53);
        java.lang.String str56 = locale47.getDisplayName(locale53);
        int int57 = property46.getMaximumTextLength(locale53);
        java.util.Set<java.lang.String> strSet58 = locale53.getUnicodeLocaleAttributes();
        java.util.Locale locale59 = locale53.stripExtensions();
        java.lang.String str60 = property39.getAsText(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(312L, chronology3, locale59, (java.lang.Integer) 939);
        org.joda.time.DateTimeField dateTimeField63 = chronology3.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long71 = chronology3.getDateTimeMillis(170, 321, 913, 26804550, 5520087, 976, 303);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26804550 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 532 + "'", int33 == 532);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 33 + "'", int36 == 33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 532 + "'", int45 == 532);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "20" + "'", str55, "20");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "coreano" + "'", str56, "coreano");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "dopo Cristo" + "'", str60, "dopo Cristo");
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime3.withDurationAdded(1645514753003L, 38);
        org.joda.time.DateTime dateTime28 = dateTime3.withMinuteOfHour(9);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        int int35 = dateTimeParserBucket34.getOffset();
        java.lang.Object obj36 = dateTimeParserBucket34.saveState();
        dateTimeParserBucket34.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.era();
        boolean boolean47 = localDateTime45.isSupported(dateTimeFieldType46);
        int int48 = localDateTime40.get(dateTimeFieldType46);
        dateTimeParserBucket34.saveField(dateTimeFieldType46, 8);
        int int51 = dateTime28.get(dateTimeFieldType46);
        org.joda.time.DateTime dateTime53 = dateTime28.plusMonths(706);
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfDay();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks(27096662);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 656 + "'", int5 == 656);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        org.joda.time.Chronology chronology21 = chronology2.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField22 = chronology2.halfdays();
        org.joda.time.DurationField durationField23 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology2.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusMonths((int) (byte) 100);
        int[] intArray30 = localDateTime29.getValues();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusMonths(49);
        int int33 = localDateTime32.getEra();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DurationField durationField43 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone51);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = dateTimeZone51.getName((long) (byte) 1, locale55);
        org.joda.time.Chronology chronology57 = chronology38.withZone(dateTimeZone51);
        long long61 = chronology57.add((long) 51, (long) 558, 175);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        java.lang.String str64 = locale62.getDisplayName();
        java.lang.String str65 = locale62.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 39, chronology57, locale62);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str68 = dateTimeFieldType67.toString();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property74 = dateTime71.centuryOfEra();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = property74.getAsText(locale75);
        java.util.Set<java.lang.Character> charSet78 = locale75.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet79 = locale75.getExtensionKeys();
        dateTimeParserBucket66.saveField(dateTimeFieldType67, "446", locale75);
        java.lang.String str81 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, 695, locale75);
        boolean boolean82 = dateTimeField24.isLenient();
        java.lang.String str83 = dateTimeField24.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.052" + "'", str20, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1978, 5, 1, 87]");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.052" + "'", str56, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 97701L + "'", long61 == 97701L);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "francese (Francia)" + "'", str64, "francese (Francia)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "francese (Francia)" + "'", str65, "francese (Francia)");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "minuteOfDay" + "'", str68, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "it" + "'", str76, "it");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "20" + "'", str77, "20");
        org.junit.Assert.assertNotNull(charSet78);
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "695" + "'", str81, "695");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str83, "DateTimeField[hourOfHalfday]");
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        java.lang.Integer int35 = dateTimeParserBucket31.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket31.setZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        org.joda.time.DateTime dateTime43 = dateTime39.plusHours((int) (byte) 100);
        boolean boolean45 = dateTime43.isBefore((long) ' ');
        int int46 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean47 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property48 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime50 = dateTime23.minusYears(341);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime53 = dateTime23.withDurationAdded(readableDuration51, 19);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 747 + "'", int22 == 747);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        long long24 = dateTimeZone22.previousTransition((long) 593);
        long long26 = dateTimeZone22.previousTransition((long) 778);
        int int28 = dateTimeZone22.getOffsetFromLocal((long) 221);
        java.util.TimeZone timeZone29 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        java.util.TimeZone.setDefault(timeZone32);
        int int34 = timeZone32.getRawOffset();
        int int36 = timeZone32.getOffset((long) 569);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        org.joda.time.DurationField durationField43 = chronology39.millis();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology39.getZone();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        boolean boolean46 = timeZone32.hasSameRules(timeZone45);
        boolean boolean47 = timeZone29.hasSameRules(timeZone45);
        int int48 = timeZone29.getDSTSavings();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 593L + "'", long24 == 593L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 778L + "'", long26 == 778L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime3.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        long long30 = dateTimeZone18.nextTransition((long) (short) -1);
        boolean boolean31 = dateTime3.equals((java.lang.Object) dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:33:06.875+00:00:00.052" + "'", str7, "2022-02-22T07:33:06.875+00:00:00.052");
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        dateTimeParserBucket13.saveField(dateTimeFieldType17, "it", locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology3, locale19, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField30 = chronology26.millis();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology26.getZone();
        long long33 = dateTimeZone31.convertUTCToLocal((long) 558);
        dateTimeParserBucket23.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.halfdayOfDay();
        org.joda.time.DurationField durationField38 = chronology35.millis();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology35.getZone();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 558L + "'", long33 == 558L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime4.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour((int) (short) 10);
        int int14 = dateTime13.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime13.withDurationAdded(readableDuration15, (int) (byte) 0);
        boolean boolean18 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime6.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime22.toGregorianCalendar();
        org.joda.time.Chronology chronology24 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyearOfCentury();
        org.joda.time.DurationField durationField27 = chronology24.hours();
        org.joda.time.DateTime dateTime28 = dateTime6.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        org.joda.time.DateTime.Property property35 = dateTime32.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property50 = dateTime47.centuryOfEra();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = property50.getAsText(locale51);
        java.lang.String str54 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime44, (-1), locale51);
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = dateTimeField40.getAsShortText((int) (byte) 10, locale56);
        java.lang.String str59 = property35.getAsShortText(locale56);
        java.lang.String str60 = locale56.toLanguageTag();
        java.lang.String str61 = locale56.getLanguage();
        java.lang.String str62 = locale56.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 27227268, chronology24, locale56);
        org.joda.time.DateTimeField dateTimeField64 = chronology24.secondOfMinute();
        org.joda.time.DurationField durationField65 = chronology24.years();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology68);
        java.lang.String str70 = chronology68.toString();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        org.joda.time.Chronology chronology74 = chronology68.withZone(dateTimeZone72);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        long long78 = chronology74.add(readablePeriod75, 0L, 603);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        long long82 = chronology74.add(readablePeriod79, (-1510245171192L), 513);
        org.joda.time.DateTimeField dateTimeField83 = chronology74.year();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((java.lang.Object) chronology24, chronology74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(gregorianCalendar23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "it" + "'", str52, "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "20" + "'", str53, "20");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1" + "'", str54, "-1");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "it" + "'", str57, "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10" + "'", str58, "10");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "22" + "'", str59, "22");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "it" + "'", str60, "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "it" + "'", str61, "it");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ISOChronology[UTC]" + "'", str70, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1510245171192L) + "'", long82 == (-1510245171192L));
        org.junit.Assert.assertNotNull(dateTimeField83);
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.lang.String str4 = dateTimeFieldType3.toString();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withField(dateTimeFieldType3, 355);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMinutes(724);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = chronology12.hours();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        long long24 = dateTimeField21.add((long) (short) -1, 35999999L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        java.lang.String str33 = chronology31.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray52 = localDateTime51.getValues();
        int[] intArray54 = dateTimeField43.addWrapField((org.joda.time.ReadablePartial) localDateTime48, 0, intArray52, (int) (short) 10);
        int int55 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36, intArray52);
        int int56 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28, intArray52);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        java.lang.String str61 = chronology59.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology68.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray80 = localDateTime79.getValues();
        int[] intArray82 = dateTimeField71.addWrapField((org.joda.time.ReadablePartial) localDateTime76, 0, intArray80, (int) (short) 10);
        int int83 = dateTimeField62.getMinimumValue((org.joda.time.ReadablePartial) localDateTime64, intArray80);
        chronology12.validate((org.joda.time.ReadablePartial) localDateTime28, intArray80);
        int int85 = localDateTime28.getHourOfDay();
        boolean boolean86 = property9.equals((java.lang.Object) localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35999998999L + "'", long24 == 35999998999L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 1, 1, 52]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 59 + "'", int56 == 59);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1, 1, 52]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        java.lang.String str6 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        int int10 = dateTimeField8.getMaximumValue((long) 87);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        java.lang.Integer int30 = dateTimeParserBucket26.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket26.setZone(dateTimeZone31);
        dateTimeParserBucket17.setZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket17.getZone();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusMillis(26756);
        org.joda.time.DateTime dateTime42 = localDateTime38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours((int) (byte) 0);
        boolean boolean49 = dateTime47.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks((int) 'a');
        boolean boolean54 = dateTime47.isAfter((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property55 = dateTime47.secondOfDay();
        org.joda.time.DateTime dateTime56 = property55.withMaximumValue();
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("Etc/UTC");
        int int59 = property55.getMaximumShortTextLength(locale58);
        java.lang.String str60 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime38, 927, locale58);
        java.lang.String str61 = dateTimeField8.getName();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2922789 + "'", int10 == 2922789);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "927" + "'", str60, "927");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "centuryOfEra" + "'", str61, "centuryOfEra");
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("70");
        org.joda.time.DateTime.Property property2 = dateTime1.year();
        org.joda.time.DateTime dateTime3 = property2.getDateTime();
        java.lang.String str4 = property2.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "70" + "'", str4, "70");
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        boolean boolean18 = localDateTime16.isSupported(dateTimeFieldType17);
        int int19 = localDateTime11.get(dateTimeFieldType17);
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 8);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfDay();
        boolean boolean27 = dateTimeFieldType17.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.halfdayOfDay();
        java.lang.String str31 = dateTimeField29.getAsText(1657524680068L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AM" + "'", str31, "AM");
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(441);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime6.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime6.getZone();
        int int9 = dateTime6.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime6.minusHours(391);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        int int17 = dateTime14.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime14.getZone();
        org.joda.time.DateTime dateTime22 = dateTime12.withZone(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DurationField durationField30 = chronology26.seconds();
        org.joda.time.DurationField durationField31 = chronology26.minutes();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField33 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField34 = chronology26.minutes();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        dateTimeParserBucket40.saveField(dateTimeFieldType44, "it", locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(673L, chronology26, locale46, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology52, locale53, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField63 = null;
        dateTimeParserBucket62.saveField(dateTimeField63, (int) (short) 0);
        java.lang.Integer int66 = dateTimeParserBucket62.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket62.setZone(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.withWeekyear((-1));
        org.joda.time.DateTime dateTime74 = dateTime70.plusHours((int) (byte) 100);
        boolean boolean76 = dateTime74.isBefore((long) ' ');
        int int77 = dateTimeZone67.getOffset((org.joda.time.ReadableInstant) dateTime74);
        dateTimeParserBucket56.setZone(dateTimeZone67);
        long long81 = dateTimeZone67.convertLocalToUTC((long) 59, false);
        org.joda.time.Chronology chronology82 = chronology26.withZone(dateTimeZone67);
        org.joda.time.Chronology chronology83 = chronology82.withUTC();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((java.lang.Object) dateTime12, chronology83);
        int int85 = dateTime12.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 59L + "'", long81 == 59L);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test5138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5138");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime3.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        long long30 = dateTimeZone18.nextTransition((long) (short) -1);
        boolean boolean31 = dateTime3.equals((java.lang.Object) dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone18);
        java.lang.String str34 = dateTime33.toString();
        int int35 = dateTime33.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:33:07.281Z" + "'", str7, "2022-02-22T07:33:07.281Z");
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T07:33:07.281Z" + "'", str34, "2022-02-22T07:33:07.281Z");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
    }

    @Test
    public void test5139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5139");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime3.withDurationAdded(1645514753003L, 38);
        org.joda.time.DateTime dateTime28 = dateTime3.withMinuteOfHour(9);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        int int35 = dateTimeParserBucket34.getOffset();
        java.lang.Object obj36 = dateTimeParserBucket34.saveState();
        dateTimeParserBucket34.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.era();
        boolean boolean47 = localDateTime45.isSupported(dateTimeFieldType46);
        int int48 = localDateTime40.get(dateTimeFieldType46);
        dateTimeParserBucket34.saveField(dateTimeFieldType46, 8);
        int int51 = dateTime28.get(dateTimeFieldType46);
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.getDefault(category53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = dateTime28.toString("2022-02-22T07:00:32.960+00:00:00.052", locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 301 + "'", int5 == 301);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.FORMAT + "'", category53.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
    }

    @Test
    public void test5140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5140");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTime dateTime31 = property24.setCopy(12);
        long long32 = property24.remainder();
        int int33 = property24.getMinimumValueOverall();
        java.lang.String str34 = property24.getAsShortText();
        org.joda.time.DateTime dateTime35 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime37 = dateTime35.withMillis((long) 1978);
        int int38 = dateTime35.getEra();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "26" + "'", str29, "26");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 41587316L + "'", long32 == 41587316L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "26" + "'", str34, "26");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test5141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5141");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale13 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        java.lang.String str17 = locale16.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale13.toString(), "property[millisofsecond]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "property[millisofsecond]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "property[millisofsecond]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "property[millisofsecond]" + "'", str17, "property[millisofsecond]");
    }

    @Test
    public void test5142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5142");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour((int) (short) 10);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded(readableDuration14, (int) (byte) 0);
        boolean boolean17 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime5.minusMonths(173);
        int int20 = dateTime19.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime19.toMutableDateTime(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 339 + "'", int20 == 339);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test5143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5143");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekOfWeekyear();
        java.lang.String str9 = dateTimeField7.getAsShortText(8593889L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime dateTime16 = dateTime12.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime22 = dateTime18.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        org.joda.time.Chronology chronology24 = mutableDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 10, chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra(671);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusYears(26781995);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusSeconds(196);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.era();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withMillisOfSecond((int) ' ');
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.era();
        org.joda.time.LocalDateTime.Property property55 = localDateTime50.dayOfYear();
        boolean boolean56 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.plusMonths(970);
        java.lang.String str65 = localDateTime64.toString();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.minusDays(11);
        boolean boolean68 = localDateTime50.isAfter((org.joda.time.ReadablePartial) localDateTime67);
        int[] intArray70 = chronology39.get((org.joda.time.ReadablePartial) localDateTime50, 972506L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) localDateTime31, 383, intArray70, 202270);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 383");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2050-11-01T00:00:00.000" + "'", str65, "2050-11-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 1, 972506]");
    }

    @Test
    public void test5144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5144");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.centuries();
        org.joda.time.DurationField durationField16 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.clockhourOfDay();
        long long21 = dateTimeField19.roundHalfFloor((-85564011L));
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale25.getDisplayLanguage();
        java.util.Locale locale30 = new java.util.Locale("", "22");
        java.lang.String str31 = locale25.getDisplayCountry(locale30);
        java.util.Locale.setDefault(locale30);
        java.lang.String str35 = nameProvider22.getName(locale30, "13", "19");
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        org.joda.time.DurationField durationField43 = chronology39.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.secondOfDay();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology39);
        org.joda.time.DurationField durationField46 = chronology39.weeks();
        java.util.Locale.Category category47 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale48 = java.util.Locale.getDefault(category47);
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getLanguage();
        java.util.Set<java.lang.Character> charSet51 = locale49.getExtensionKeys();
        java.util.Locale.setDefault(category47, locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(1645487999948L, chronology39, locale49, (java.lang.Integer) 407, 195);
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean57 = locale56.hasExtensions();
        java.lang.String str58 = locale49.getDisplayLanguage(locale56);
        java.lang.String str59 = locale56.getISO3Language();
        java.lang.String str62 = nameProvider22.getShortName(locale56, "java.io.IOException: DurationField[years]", "0558-02-22T07:29:13.243+00:00:00.052");
        int int63 = dateTimeField19.getMaximumShortTextLength(locale56);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86400000L) + "'", long21 == (-86400000L));
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese" + "'", str27, "Chinese");
        org.junit.Assert.assertEquals(locale30.toString(), "_22");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "China" + "'", str31, "China");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category47.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "_22");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str58, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zho" + "'", str59, "zho");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
    }

    @Test
    public void test5145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5145");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.plus(readableDuration34);
        org.joda.time.DateTime.Property property36 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime39 = dateTime37.plusMonths(746);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.DateTime dateTime42 = property40.addWrapFieldToCopy(233);
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test5146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5146");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.withChronology(chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = property29.addWrapFieldToCopy(241);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        java.lang.Integer int42 = dateTimeParserBucket38.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket38.setZone(dateTimeZone43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.lang.String str48 = locale47.getDisplayName();
        dateTimeParserBucket38.saveField(dateTimeFieldType45, "97", locale47);
        java.lang.String str50 = locale32.getDisplayCountry(locale47);
        java.lang.String str51 = locale47.getDisplayScript();
        java.lang.String str52 = locale47.getDisplayScript();
        int int53 = property29.getMaximumTextLength(locale47);
        org.joda.time.LocalDateTime localDateTime54 = property29.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusDays(805);
        int int57 = localDateTime54.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.withDurationAdded(readableDuration58, 75);
        org.joda.time.DateTime dateTime61 = dateTime25.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 615 + "'", int22 == 615);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tedesco (Germania)" + "'", str48, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "China" + "'", str50, "China");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test5147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5147");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        org.joda.time.DateTime dateTime31 = property24.roundHalfFloorCopy();
        boolean boolean33 = dateTime31.isAfter((long) 441);
        org.joda.time.LocalDateTime localDateTime34 = dateTime31.toLocalDateTime();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        int int41 = dateTimeParserBucket40.getOffset();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology44.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((-1L));
        long long50 = dateTimeZone46.convertUTCToLocal((long) 734);
        dateTimeParserBucket40.setZone(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.millisOfSecond();
        org.joda.time.DurationField durationField58 = chronology54.seconds();
        org.joda.time.DurationField durationField59 = chronology54.minutes();
        org.joda.time.DateTimeField dateTimeField60 = chronology54.era();
        org.joda.time.DateTimeField dateTimeField61 = chronology54.monthOfYear();
        int int63 = dateTimeField61.getMaximumValue((long) 38);
        dateTimeParserBucket40.saveField(dateTimeField61, 445);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = property69.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType77.getField(chronology80);
        int int84 = localDateTime74.get(dateTimeFieldType77);
        dateTimeParserBucket40.saveField(dateTimeFieldType77, 6);
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType77.getDurationType();
        int int88 = dateTime31.get(dateTimeFieldType77);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "26" + "'", str29, "26");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 734L + "'", long50 == 734L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test5148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5148");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime3.withDayOfMonth(19);
        org.joda.time.Chronology chronology9 = dateTime3.getChronology();
        int int10 = dateTime3.getMinuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime3.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        dateTimeParserBucket20.setZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket20.getZone();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra(7);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plus(readableDuration41);
        int int43 = localDateTime42.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusMillis(72);
        int int46 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.Interval interval47 = property13.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 735 + "'", int5 == 735);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 33 + "'", int10 == 33);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(interval47);
    }

    @Test
    public void test5149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5149");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("\u516c\u5143");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"??\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5150");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale20.getDisplayName();
        dateTimeParserBucket11.saveField(dateTimeFieldType18, "97", locale20);
        int int23 = localDateTime3.get(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime3.withYearOfCentury(0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime3.plus(readableDuration26);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = localDateTime27.getFields();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tedesco (Germania)" + "'", str21, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
    }

    @Test
    public void test5151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5151");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(734);
        int int6 = localDateTime5.getEra();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test5152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5152");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime3.toGregorianCalendar();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.withPeriodAdded(readablePeriod6, 32052);
        int int9 = dateTime8.getEra();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test5153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5153");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        int int6 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime8 = dateTime5.withYear(139);
        org.joda.time.LocalDateTime localDateTime9 = dateTime8.toLocalDateTime();
        int int10 = localDateTime9.getCenturyOfEra();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        java.lang.String str35 = dateTimeZone33.toString();
        java.lang.String str36 = dateTimeZone33.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone33);
        long long40 = dateTimeZone33.convertLocalToUTC((long) 764, true);
        org.joda.time.DateTime dateTime41 = localDateTime9.toDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int47 = localDateTime43.get(dateTimeFieldType46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = property55.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.era();
        boolean boolean58 = localDateTime56.isSupported(dateTimeFieldType57);
        int int59 = localDateTime51.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime51.withYear(635);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.halfdayOfDay();
        org.joda.time.DurationField durationField68 = chronology64.millis();
        org.joda.time.DurationFieldType durationFieldType69 = durationField68.getType();
        boolean boolean70 = localDateTime51.isSupported(durationFieldType69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime43.withFieldAdded(durationFieldType69, 533);
        boolean boolean73 = localDateTime9.isSupported(durationFieldType69);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone74);
        org.joda.time.DateTime dateTime77 = dateTime75.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime75.toMutableDateTime();
        int int79 = dateTime75.getMillisOfSecond();
        org.joda.time.DateTime.Property property80 = dateTime75.centuryOfEra();
        org.joda.time.DateTime dateTime82 = property80.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime83 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 764L + "'", long40 == 764L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 873 + "'", int79 == 873);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test5154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5154");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = dateTime1.isBefore(readableInstant2);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology6, locale7, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = null;
        dateTimeParserBucket10.saveField(dateTimeField11, (int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        java.lang.Integer int23 = dateTimeParserBucket19.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket19.setZone(dateTimeZone24);
        dateTimeParserBucket10.setZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket10.getZone();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone27);
        boolean boolean29 = dateTimeZone27.isFixed();
        long long32 = dateTimeZone27.adjustOffset(2846437113600010L, false);
        org.joda.time.DateTime dateTime33 = dateTime1.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusHours((int) (byte) 0);
        boolean boolean39 = dateTime37.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime37.toMutableDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime1.toMutableDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusHours((int) (byte) 0);
        java.util.Date date48 = dateTime45.toDate();
        org.joda.time.DateTime.Property property49 = dateTime45.dayOfMonth();
        org.joda.time.DateTime.Property property50 = dateTime45.dayOfMonth();
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = property50.getAsText(locale51);
        org.joda.time.DateTime dateTime54 = property50.roundCeilingCopy();
        boolean boolean55 = dateTimeZone40.equals((java.lang.Object) dateTime54);
        long long57 = dateTimeZone40.nextTransition((long) 840);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology60 = localDateTime59.getChronology();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = property67.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withYear(2022);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(chronology80);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone83);
        org.joda.time.DateTime dateTime86 = dateTime84.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property87 = dateTime84.centuryOfEra();
        java.util.Locale locale88 = java.util.Locale.ITALIAN;
        java.lang.String str89 = locale88.getLanguage();
        java.lang.String str90 = property87.getAsText(locale88);
        java.lang.String str91 = dateTimeField77.getAsText((org.joda.time.ReadablePartial) localDateTime81, (-1), locale88);
        java.util.Locale.setDefault(locale88);
        java.lang.String str93 = dateTimeField63.getAsText((org.joda.time.ReadablePartial) localDateTime72, locale88);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime72.plusMinutes(20);
        org.joda.time.LocalDateTime localDateTime97 = localDateTime72.minusYears(603);
        java.lang.String str98 = localDateTime72.toString();
        boolean boolean99 = dateTimeZone40.isLocalDateTimeGap(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2846437113600010L + "'", long32 == 2846437113600010L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Feb 22 07:33:07 UTC 2022");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "it" + "'", str52, "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "22" + "'", str53, "22");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 840L + "'", long57 == 840L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "it");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "it" + "'", str89, "it");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "20" + "'", str90, "20");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "-1" + "'", str91, "-1");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "999" + "'", str93, "999");
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(localDateTime97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "2022-01-01T00:00:00.999" + "'", str98, "2022-01-01T00:00:00.999");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test5155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5155");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        int int38 = property34.get();
        org.joda.time.DateTime dateTime39 = property34.roundCeilingCopy();
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.plus(readablePeriod41);
        boolean boolean44 = dateTime42.isAfter(151L);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[secondOfDay]" + "'", str37, "Property[secondOfDay]");
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 27187 + "'", int38 == 27187);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T07:33:08.000Z" + "'", str40, "2022-02-22T07:33:08.000Z");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test5156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5156");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTime dateTime31 = property24.setCopy(12);
        long long32 = property24.remainder();
        int int33 = property24.getMinimumValueOverall();
        java.lang.String str34 = property24.getAsShortText();
        org.joda.time.DateTime dateTime36 = property24.addToCopy((long) 80);
        org.joda.time.DateTime dateTime37 = property24.roundHalfEvenCopy();
        org.joda.time.DurationField durationField38 = property24.getDurationField();
        long long39 = durationField38.getUnitMillis();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "26" + "'", str29, "26");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 41588098L + "'", long32 == 41588098L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "26" + "'", str34, "26");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400000L + "'", long39 == 86400000L);
    }

    @Test
    public void test5157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5157");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime3.withDurationAdded(1645514753003L, 38);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime3.toDateTime(chronology27);
        org.joda.time.DateTime.Property property29 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime31 = dateTime3.minusMonths(832);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        java.lang.Integer int41 = dateTimeParserBucket37.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket37.setZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekyear((-1));
        org.joda.time.DateTime dateTime49 = dateTime45.plusHours((int) (byte) 100);
        boolean boolean51 = dateTime49.isBefore((long) ' ');
        int int52 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime54 = dateTime49.minus((long) 51);
        int int55 = dateTime54.getEra();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withWeekyear((-1));
        org.joda.time.DateTime dateTime61 = dateTime57.plusHours((int) (byte) 100);
        boolean boolean63 = dateTime61.isBefore((long) ' ');
        org.joda.time.DateTime.Property property64 = dateTime61.weekOfWeekyear();
        org.joda.time.DateTime dateTime66 = dateTime61.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.DateTime dateTime69 = dateTime66.withPeriodAdded(readablePeriod67, 593);
        org.joda.time.DateTime dateTime71 = dateTime66.plusDays(837);
        org.joda.time.DateTime.Property property72 = dateTime66.weekOfWeekyear();
        java.util.Date date73 = dateTime66.toDate();
        boolean boolean74 = dateTime54.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime66.getZone();
        org.joda.time.DateTime dateTime77 = dateTime66.plusHours(839);
        int int78 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 124 + "'", int5 == 124);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(date73);
// flaky:         org.junit.Assert.assertEquals(date73.toString(), "Sat Oct 26 11:33:08 UTC 2024");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test5158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5158");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int7 = dateTimeParserBucket5.getOffsetInteger();
        java.util.Locale locale8 = dateTimeParserBucket5.getLocale();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long31 = dateTimeZone19.nextTransition((long) (short) -1);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str34 = dateTimeZone19.getName((long) 673);
        java.util.TimeZone timeZone35 = dateTimeZone19.toTimeZone();
        timeZone35.setID("-0001-02-23t07:26:18.562+00:00:00.052 (DATETIMEFIELD[CLOCKHOUROFHALFDAY],DateTimeField[weekOfWeekyear])");
        timeZone35.setRawOffset(777);
        timeZone35.setID("millis");
        int int42 = timeZone35.getDSTSavings();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test5159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5159");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DateTime dateTime38 = property34.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusYears(4);
        int int43 = property34.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DateTime dateTime44 = property34.roundCeilingCopy();
        org.joda.time.DurationField durationField45 = property34.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long48 = durationField45.getMillis(1694608387200693L, 46310L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1694608387200693 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[secondOfDay]" + "'", str37, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test5160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5160");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        int int6 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime11.toYearMonthDay();
        org.joda.time.DateTime dateTime14 = dateTime11.plusYears(400);
        org.joda.time.DateTime dateTime16 = dateTime11.withCenturyOfEra(672);
        boolean boolean17 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTime11);
        boolean boolean18 = dateTime11.isAfterNow();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test5161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5161");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(392);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour((int) (short) 10);
        int int28 = dateTime27.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withDurationAdded(readableDuration29, (int) (byte) 0);
        org.joda.time.DateTime dateTime32 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours((int) (byte) 0);
        boolean boolean40 = dateTime38.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime38.toMutableDateTime(dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        int int45 = mutableDateTime43.get(dateTimeFieldType44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.DurationField durationField51 = chronology48.millis();
        boolean boolean52 = dateTimeFieldType44.isSupported(chronology48);
        org.joda.time.DurationField durationField53 = chronology48.centuries();
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.lang.String str55 = locale54.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology48, locale54);
        java.lang.String str57 = locale54.getISO3Country();
        java.lang.String str58 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, 517, locale54);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime62 = property61.roundHalfEvenCopy();
        int int63 = localDateTime62.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant66 = null;
        int int67 = dateTimeZone65.getOffset(readableInstant66);
        java.util.Locale locale69 = java.util.Locale.UK;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now(chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(chronology77);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime81.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property84 = dateTime81.centuryOfEra();
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.lang.String str86 = locale85.getLanguage();
        java.lang.String str87 = property84.getAsText(locale85);
        java.lang.String str88 = dateTimeField74.getAsText((org.joda.time.ReadablePartial) localDateTime78, (-1), locale85);
        java.util.Set<java.lang.Character> charSet89 = locale85.getExtensionKeys();
        java.lang.String str90 = locale69.getDisplayLanguage(locale85);
        java.lang.String str91 = dateTimeZone65.getName((long) 245, locale69);
        java.lang.String str92 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime62, 678, locale69);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime62.minusHours(734);
        org.joda.time.Chronology chronology95 = localDateTime94.getChronology();
        org.joda.time.LocalDateTime localDateTime97 = localDateTime94.plusHours(27117);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "it" + "'", str55, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "517" + "'", str58, "517");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "it" + "'", str86, "it");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "20" + "'", str87, "20");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "-1" + "'", str88, "-1");
        org.junit.Assert.assertNotNull(charSet89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "inglese" + "'", str90, "inglese");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "678" + "'", str92, "678");
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(localDateTime97);
    }

    @Test
    public void test5162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5162");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 593);
        int int2 = dateTime1.getMinuteOfDay();
        boolean boolean4 = dateTime1.isBefore(26765426L);
        org.joda.time.DateTime.Property property5 = dateTime1.era();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket12.getZone();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = chronology34.getZone();
        org.joda.time.DurationField durationField37 = chronology34.eras();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology34);
        org.joda.time.DateTime dateTime39 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.plus(readableDuration40);
        org.joda.time.DateTime.Property property42 = dateTime41.secondOfDay();
        org.joda.time.DateTime dateTime43 = dateTime41.withTimeAtStartOfDay();
        int int44 = property5.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test5163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5163");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime11 = dateTime7.withYearOfCentury((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str14 = dateTimeZone12.toString();
        boolean boolean16 = dateTimeZone12.isStandardOffset((long) 170);
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        java.lang.Integer int28 = dateTimeParserBucket24.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket24.setZone(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        org.joda.time.DateTime dateTime36 = dateTime32.plusHours((int) (byte) 100);
        boolean boolean38 = dateTime36.isBefore((long) ' ');
        int int39 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime41 = dateTime36.minusYears(20);
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusHours((int) (byte) 0);
        java.util.Date date47 = dateTime44.toDate();
        org.joda.time.DateTime.Property property48 = dateTime44.dayOfMonth();
        org.joda.time.DateTime.Property property49 = dateTime44.dayOfMonth();
        int int50 = property42.getDifference((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime52 = property42.addToCopy(52L);
        org.joda.time.DateTime dateTime54 = property42.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime56 = dateTime54.withMillisOfDay(585);
        org.joda.time.DateTime.Property property57 = dateTime54.monthOfYear();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale58.getDisplayName();
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale58.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property66 = dateTime63.centuryOfEra();
        org.joda.time.DurationField durationField67 = property66.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withWeekyear((-1));
        org.joda.time.DateTime dateTime73 = dateTime71.plusMonths(10);
        org.joda.time.DateTime.Property property74 = dateTime73.minuteOfDay();
        org.joda.time.DurationField durationField75 = property74.getDurationField();
        org.joda.time.DateTime dateTime77 = property74.addToCopy((long) 25);
        java.util.Locale locale78 = java.util.Locale.UK;
        java.lang.String str79 = property74.getAsShortText(locale78);
        java.lang.String str80 = property66.getAsShortText(locale78);
        java.lang.String str81 = locale58.getDisplayScript(locale78);
        int int82 = property57.getMaximumShortTextLength(locale58);
        java.lang.String str83 = dateTimeZone12.getShortName(19385049600000L, locale58);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Tempo universale coordinato");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Feb 22 07:33:08 UTC 2022");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-175220) + "'", int50 == (-175220));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tedesco (Germania)" + "'", str59, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DEU" + "'", str61, "DEU");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "453" + "'", str79, "453");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "20" + "'", str80, "20");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
    }

    @Test
    public void test5164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5164");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyearOfCentury();
        java.lang.String str14 = dateTimeField12.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        int int20 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime19.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.Chronology chronology24 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.halfdayOfDay();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale26.toLanguageTag();
        int int29 = dateTimeField25.getMaximumTextLength(locale26);
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category31, locale32);
        java.lang.String str34 = locale32.getCountry();
        java.lang.String str35 = locale32.getCountry();
        java.util.Locale.setDefault(locale32);
        java.util.Locale.setDefault(category0, locale32);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology41);
        java.lang.String str43 = chronology41.toString();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology50);
        java.lang.String str52 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfWeek();
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale66 = java.util.Locale.ROOT;
        dateTimeParserBucket60.saveField(dateTimeFieldType64, "it", locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology50, locale66, (java.lang.Integer) 9, 538);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((-592L), chronology41, locale66);
        java.lang.String str73 = locale66.getUnicodeLocaleType("70");
        java.util.Locale.setDefault(category0, locale66);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "70" + "'", str14, "70");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it" + "'", str28, "it");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CN" + "'", str34, "CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CN" + "'", str35, "CN");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test5165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5165");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime10 = dateTime6.withWeekyear(174);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        boolean boolean23 = dateTime21.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = dateTime21.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        java.lang.Integer int35 = dateTimeParserBucket31.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket31.setZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        org.joda.time.DateTime dateTime43 = dateTime39.plusHours((int) (byte) 100);
        boolean boolean45 = dateTime43.isBefore((long) ' ');
        int int46 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime43);
        long long48 = dateTimeZone36.nextTransition((long) (short) -1);
        boolean boolean49 = dateTime21.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int[] intArray51 = localDateTime50.getValues();
        chronology14.validate((org.joda.time.ReadablePartial) localDateTime16, intArray51);
        org.joda.time.DateTimeField dateTimeField53 = chronology14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime6.toMutableDateTime(chronology14);
        org.joda.time.DurationField durationField55 = chronology14.days();
        long long57 = durationField55.getMillis(172);
        long long60 = durationField55.getMillis(47, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T07:33:08.582Z" + "'", str25, "2022-02-22T07:33:08.582Z");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2022, 2, 22, 27188582]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 14860800000L + "'", long57 == 14860800000L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 4060800000L + "'", long60 == 4060800000L);
    }

    @Test
    public void test5166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5166");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField17 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.year();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.plusSeconds((int) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket34.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology39.centuries();
        org.joda.time.DurationFieldType durationFieldType43 = durationField42.getType();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime21.withFieldAdded(durationFieldType43, 857);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str48 = durationFieldType47.toString();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.millisOfSecond();
        org.joda.time.DurationField durationField55 = chronology51.seconds();
        org.joda.time.DurationField durationField56 = chronology51.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.era();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.monthOfYear();
        org.joda.time.DurationField durationField59 = durationFieldType47.getField(chronology51);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology62);
        java.lang.String str64 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.weekOfWeekyear();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = dateTimeField65.getAsShortText((long) (byte) -1, locale67);
        java.util.Locale locale69 = locale67.stripExtensions();
        java.lang.String str70 = locale67.toLanguageTag();
        java.lang.String str71 = locale67.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology51, locale67, (java.lang.Integer) 992, 405);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(chronology77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withDurationAdded(readableDuration81, 28);
        int[] intArray85 = chronology51.get((org.joda.time.ReadablePartial) localDateTime83, (long) 772);
        int int86 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray85);
        java.util.Locale locale89 = java.util.Locale.forLanguageTag("java.io.IOException: java.io.IOException: ISOChronology[+00:00:00.052]");
        java.lang.String str90 = locale89.toLanguageTag();
        java.lang.String str91 = dateTimeField19.getAsShortText((long) 446, locale89);
        java.lang.String str92 = locale89.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "weeks" + "'", str48, "weeks");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ko" + "'", str70, "ko");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1970, 1, 1, 772]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-292275054) + "'", int86 == (-292275054));
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "und" + "'", str90, "und");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970" + "'", str91, "1970");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test5167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5167");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        java.lang.Integer int11 = dateTimeParserBucket7.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket7.setZone(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale16.getDisplayName();
        dateTimeParserBucket7.saveField(dateTimeFieldType14, "97", locale16);
        java.lang.String str19 = locale1.getDisplayCountry(locale16);
        java.lang.String str22 = nameProvider0.getName(locale1, "2024-06-08T07:27:32.275+00:00:00.052", "2022-02-22T07:26:13.872+00:00:00.052");
        java.lang.String str23 = locale1.getLanguage();
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "German (Germany)" + "'", str17, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "China" + "'", str19, "China");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
    }

    @Test
    public void test5168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5168");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = property4.getAsText(locale5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        boolean boolean13 = dateTime11.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime11.toMutableDateTime(dateTimeZone14);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = dateTimeZone14.getName((long) (byte) 1, locale18);
        java.lang.String str20 = locale18.getScript();
        java.lang.String str21 = property4.getAsShortText(locale18);
        int int22 = property4.getMinimumValue();
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = property4.getAsText(locale23);
        org.joda.time.DateTime dateTime26 = property4.setCopy("778");
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        java.lang.Integer int42 = dateTimeParserBucket38.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket38.setZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withWeekyear((-1));
        org.joda.time.DateTime dateTime50 = dateTime46.plusHours((int) (byte) 100);
        boolean boolean52 = dateTime50.isBefore((long) ' ');
        int int53 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime50);
        dateTimeParserBucket32.setZone(dateTimeZone43);
        long long57 = dateTimeZone43.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.withWeekyear((-1));
        org.joda.time.DateTime dateTime64 = dateTime60.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.plus(readableDuration65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime70 = dateTime66.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime70.toMutableDateTime();
        org.joda.time.Chronology chronology72 = mutableDateTime71.getChronology();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime58, chronology72);
        boolean boolean74 = dateTime26.equals((java.lang.Object) localDateTime58);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusYears(4);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusSeconds(734);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusWeeks(11);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.plus(readablePeriod83);
        boolean boolean85 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime87 = localDateTime58.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "20" + "'", str7, "20");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "20" + "'", str21, "20");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "20" + "'", str24, "20");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 59L + "'", long57 == 59L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test5169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5169");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(715);
        org.joda.time.DateTime dateTime28 = dateTime24.minusHours(730);
        org.joda.time.DateTime.Property property29 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime24.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime24.withWeekOfWeekyear(26816);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26816 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test5170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5170");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("de_DE");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withWeekyear((-1));
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime dateTime9 = dateTime7.withCenturyOfEra(59);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        int int16 = dateTime13.getMinuteOfDay();
        org.joda.time.DateTime dateTime18 = dateTime13.plusMonths(1970);
        boolean boolean19 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        int int27 = dateTimeParserBucket25.getOffset();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.centuryOfEra();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime7, chronology28);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfSecond();
        int int35 = localDateTime33.getMillisOfSecond();
        boolean boolean36 = locale1.equals((java.lang.Object) int35);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 453 + "'", int16 == 453);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 42 + "'", int35 == 42);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test5171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5171");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        boolean boolean23 = dateTimeZone19.isFixed();
        long long25 = dateTimeZone19.convertUTCToLocal((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(0);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMinutes(977);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.setLanguage("DEU");
        java.util.Locale.Builder builder35 = builder32.clear();
        java.util.Locale.Builder builder37 = builder35.removeUnicodeLocaleAttribute("Germany");
        java.util.Locale locale38 = builder37.build();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = locale39.toLanguageTag();
        java.lang.String str43 = locale39.getDisplayScript();
        java.util.Locale.Builder builder44 = builder37.setLocale(locale39);
        java.util.Calendar calendar45 = dateTime31.toCalendar(locale39);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u671d\u9c9c\u6587" + "'", str41, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ko" + "'", str42, "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645573809182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=50,SECOND=9,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5172");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMillis(603);
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = dateTime32.isBefore(readableInstant33);
        org.joda.time.DateTime dateTime35 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean36 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        java.lang.Integer int55 = dateTimeParserBucket51.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket51.setZone(dateTimeZone56);
        dateTimeParserBucket42.setZone(dateTimeZone56);
        boolean boolean59 = dateTimeZone56.isFixed();
        boolean boolean60 = dateTimeZone56.isFixed();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone56);
        int int62 = dateTime61.getYearOfEra();
        boolean boolean63 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property64 = dateTime32.secondOfMinute();
        org.joda.time.DateTime.Property property65 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime68 = property65.setCopy("2022-02-22T07:29:40.058+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:29:40.058+00:00:00.052\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test5173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5173");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfDay();
        long long6 = dateTimeField4.roundHalfFloor(26799721L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMillis(445);
        java.lang.String str19 = localDateTime18.toString();
        int int20 = localDateTime18.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property21.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        java.lang.String str27 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 914, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusYears(985);
        int int38 = localDateTime35.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusMonths(378);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusYears(419);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone47 = chronology45.getZone();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.secondOfDay();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withYearOfEra(10);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray69 = localDateTime68.getValues();
        int[] intArray71 = dateTimeField60.addWrapField((org.joda.time.ReadablePartial) localDateTime65, 0, intArray69, (int) (short) 10);
        int int72 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54, intArray69);
        int int73 = localDateTime54.size();
        int int74 = localDateTime54.getYear();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime54.withWeekyear(822);
        int[] intArray77 = localDateTime54.getValues();
        chronology25.validate((org.joda.time.ReadablePartial) localDateTime35, intArray77);
        int int79 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22, intArray77);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 26800000L + "'", long6 == 26800000L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-03-05T00:00:00.445" + "'", str19, "1970-03-05T00:00:00.445");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 1, 1, 0]");
        org.junit.Assert.assertNotNull(intArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[10, 2, 22, 27189265]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test5174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5174");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DurationField durationField8 = chronology5.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology11.seconds();
        org.joda.time.DurationField durationField16 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.era();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, locale24);
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology5, locale24);
        org.joda.time.DurationField durationField28 = durationFieldType1.getField(chronology5);
        org.joda.time.DurationField durationField29 = chronology5.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AD" + "'", str25, "AD");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test5175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5175");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        dateTimeParserBucket6.setZone(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology33.seconds();
        org.joda.time.DurationField durationField38 = chronology33.minutes();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours((int) (byte) 0);
        boolean boolean45 = dateTime43.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime43.toMutableDateTime(dateTimeZone46);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = dateTimeZone46.getName((long) (byte) 1, locale50);
        org.joda.time.Chronology chronology52 = chronology33.withZone(dateTimeZone46);
        long long56 = chronology52.add((long) 51, (long) 558, 175);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet58 = locale57.getExtensionKeys();
        java.lang.String str59 = locale57.getDisplayName();
        java.lang.String str60 = locale57.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 39, chronology52, locale57);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str63 = dateTimeFieldType62.toString();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property69 = dateTime66.centuryOfEra();
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.lang.String str71 = locale70.getLanguage();
        java.lang.String str72 = property69.getAsText(locale70);
        java.util.Set<java.lang.Character> charSet73 = locale70.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet74 = locale70.getExtensionKeys();
        dateTimeParserBucket61.saveField(dateTimeFieldType62, "446", locale70);
        java.lang.String str76 = locale70.getScript();
        java.lang.String str77 = dateTimeZone17.getName((long) 638, locale70);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(4080000L, dateTimeZone17);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 97701L + "'", long56 == 97701L);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "French (France)" + "'", str59, "French (France)");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "French (France)" + "'", str60, "French (France)");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "minuteOfDay" + "'", str63, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it" + "'", str71, "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "20" + "'", str72, "20");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNotNull(charSet74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
    }

    @Test
    public void test5176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5176");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime3.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMonths(0);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime9, chronology22);
        long long27 = chronology22.add(26755867L, (long) 921, 990);
        org.joda.time.Chronology chronology28 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.millisOfSecond();
        org.joda.time.DurationField durationField38 = chronology34.seconds();
        org.joda.time.DurationField durationField39 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.era();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology34.clockhourOfDay();
        org.joda.time.DurationField durationField43 = dateTimeField42.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime50 = property47.addWrapFieldToCopy(28);
        int int51 = dateTimeField42.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = property54.addToCopy((-592L));
        org.joda.time.LocalDateTime localDateTime57 = property54.withMaximumValue();
        int int58 = localDateTime57.getMonthOfYear();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology60, locale61, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField65 = null;
        dateTimeParserBucket64.saveField(dateTimeField65, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale70 = java.util.Locale.ROOT;
        dateTimeParserBucket64.saveField(dateTimeFieldType68, "it", locale70);
        java.lang.String str72 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime57, locale70);
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder73.setLanguage("DEU");
        java.util.Locale.Builder builder76 = builder73.clearExtensions();
        java.util.Locale.Builder builder78 = builder76.removeUnicodeLocaleAttribute("days");
        java.util.Locale locale79 = builder78.build();
        int int80 = dateTimeField42.getMaximumShortTextLength(locale79);
        // The following exception was thrown during execution in test generation
        try {
            long long81 = dateTimeField29.set(28884349L, "", locale79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 27667657L + "'", long27 == 27667657L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNull(durationField43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "24" + "'", str72, "24");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "deu");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test5177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5177");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.Chronology chronology16 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale18.toLanguageTag();
        int int21 = dateTimeField17.getMaximumTextLength(locale18);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plusWeeks(22);
        java.lang.String str31 = localDateTime26.toString();
        int int32 = localDateTime26.size();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withMillisOfSecond(931);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMinutes(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.property(dateTimeFieldType41);
        boolean boolean43 = localDateTime34.isSupported(dateTimeFieldType41);
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        java.util.Locale locale54 = dateTimeParserBucket50.getLocale();
        java.util.Locale.setDefault(category44, locale54);
        java.util.Locale locale57 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category44, locale57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = chronology61.getZone();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekOfWeekyear();
        java.util.Locale locale67 = java.util.Locale.forLanguageTag("87");
        java.lang.String str68 = dateTimeField64.getAsText((long) 383, locale67);
        java.lang.String str69 = locale67.toLanguageTag();
        java.lang.String str70 = locale67.getDisplayLanguage();
        java.util.Locale.setDefault(category44, locale67);
        java.util.Locale locale72 = java.util.Locale.getDefault(category44);
        java.util.Locale locale73 = java.util.Locale.getDefault(category44);
        java.util.Locale locale74 = java.util.Locale.getDefault(category44);
        java.lang.String str75 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime34, locale74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime34.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "it" + "'", str20, "it");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1978-05-01T00:00:00.087" + "'", str31, "1978-05-01T00:00:00.087");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "+00:00:00.052_ISOCHRONOLOGY[+00:00:00.052]");
        org.junit.Assert.assertEquals(locale57.toString(), "property[millisofsecond]");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "und" + "'", str69, "und");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "AM" + "'", str75, "AM");
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test5178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5178");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        dateTimeParserBucket6.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        java.lang.String str18 = dateTimeField16.getAsShortText((long) 28);
        dateTimeParserBucket6.saveField(dateTimeField16, 100);
        boolean boolean22 = dateTimeField16.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((-592L));
        int int28 = property25.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime30 = property25.addToCopy(593);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime30, 608, locale32);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        boolean boolean35 = dateTimeFieldType0.isSupported(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "608" + "'", str33, "608");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test5179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5179");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) (short) 100);
        java.util.Date date10 = dateTime5.toDate();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.lang.Integer int37 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket33.setZone(dateTimeZone38);
        dateTimeParserBucket24.setZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket24.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        java.lang.String str43 = dateTimeZone41.toString();
        java.lang.String str44 = dateTimeZone41.toString();
        long long46 = dateTimeZone18.getMillisKeepLocal(dateTimeZone41, (long) 23);
        long long50 = dateTimeZone41.convertLocalToUTC(1586849283869L, false, 2966400000L);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime5.toMutableDateTime(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Dec 25 07:33:09 GMT+00:00 2");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.052" + "'", str43, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.052" + "'", str44, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 23L + "'", long46 == 23L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1586849283817L + "'", long50 == 1586849283817L);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test5180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5180");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        long long28 = dateTimeZone23.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTime();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 35999947L + "'", long28 == 35999947L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test5181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5181");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 270, dateTimeZone2);
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.withPeriodAdded(readablePeriod6, 511);
        int int9 = dateTime4.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear((-1));
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths(10);
        org.joda.time.DateTime dateTime17 = dateTime15.withCenturyOfEra(59);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis(465);
        org.joda.time.DateTime dateTime21 = dateTime17.minusSeconds(732);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekyear((-1));
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths(10);
        org.joda.time.DateTime dateTime30 = dateTime28.withCenturyOfEra(59);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime.Property property33 = dateTime32.year();
        org.joda.time.LocalDateTime localDateTime34 = dateTime32.toLocalDateTime();
        int int35 = dateTime32.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded(readableDuration36, 0);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes((-593));
        org.joda.time.DateTime dateTime42 = dateTime40.minus(0L);
        int int43 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime42);
        int int44 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        java.util.Date date49 = dateTime46.toDate();
        org.joda.time.DateTime.Property property50 = dateTime46.dayOfMonth();
        java.lang.String str51 = property50.getAsString();
        int int52 = property50.getMaximumValue();
        int int53 = property50.getMinimumValueOverall();
        org.joda.time.DateTime dateTime55 = property50.addToCopy(139);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField63 = null;
        dateTimeParserBucket62.saveField(dateTimeField63, (int) (short) 0);
        dateTimeParserBucket62.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.secondOfMinute();
        java.lang.String str74 = dateTimeField72.getAsShortText((long) 28);
        dateTimeParserBucket62.saveField(dateTimeField72, 100);
        dateTimeParserBucket62.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket62.getZone();
        boolean boolean80 = dateTimeZone56.equals((java.lang.Object) dateTimeZone79);
        java.util.Locale locale81 = java.util.Locale.GERMANY;
        java.lang.String str82 = locale81.getDisplayName();
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str84 = locale81.getISO3Language();
        java.lang.String str86 = locale81.getExtension('x');
        boolean boolean87 = dateTimeZone79.equals((java.lang.Object) 'x');
        int int89 = dateTimeZone79.getStandardOffset((long) 447);
        org.joda.time.DateTime dateTime90 = dateTime28.toDateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime91 = dateTime4.withZoneRetainFields(dateTimeZone79);
        java.util.TimeZone timeZone92 = dateTimeZone79.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone93 = org.joda.time.DateTimeZone.forTimeZone(timeZone92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.052' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 33 + "'", int35 == 33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Feb 22 07:33:09 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "22" + "'", str51, "22");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 28 + "'", int52 == 28);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0" + "'", str74, "0");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "German (Germany)" + "'", str82, "German (Germany)");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "deu" + "'", str84, "deu");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(timeZone92);
        org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test5182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5182");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DurationField durationField38 = property34.getRangeDurationField();
        org.joda.time.DateTime dateTime39 = property34.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField40 = property34.getField();
        int int41 = property34.getMaximumValue();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[secondOfDay]" + "'", str37, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 86399 + "'", int41 == 86399);
    }

    @Test
    public void test5183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5183");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = dateTime9.isBefore(readableInstant10);
        org.joda.time.DateTime dateTime12 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight13 = dateTime12.toDateMidnight();
        org.joda.time.DateTime.Property property14 = dateTime12.millisOfSecond();
        org.joda.time.DateTime dateTime16 = property14.setCopy("31");
        org.joda.time.DurationField durationField17 = property14.getLeapDurationField();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        java.lang.Integer int27 = dateTimeParserBucket23.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket23.setZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withWeekyear((-1));
        org.joda.time.DateTime dateTime35 = dateTime31.plusHours((int) (byte) 100);
        boolean boolean37 = dateTime35.isBefore((long) ' ');
        int int38 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime40 = dateTime35.minusYears(20);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMillis(603);
        int int48 = localDateTime47.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = dateTime50.isBefore(readableInstant51);
        org.joda.time.DateTime dateTime53 = localDateTime47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean54 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property55 = dateTime50.millisOfDay();
        org.joda.time.DateTime dateTime56 = property55.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime57 = property55.withMinimumValue();
        int int58 = property14.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime57.getMinuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test5184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5184");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime3.toString(dateTimeFormatter6);
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("20");
        java.lang.String str13 = locale9.getDisplayVariant(locale12);
        java.lang.String str14 = dateTime3.toString("1969", locale9);
        org.joda.time.DateTime.Property property15 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology17 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears(4);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusSeconds(734);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusMonths(175);
        int int27 = localDateTime26.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours((int) (byte) 0);
        boolean boolean33 = dateTime31.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        boolean boolean38 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime37.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundHalfEvenCopy();
        java.lang.String str47 = property45.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property45.getFieldType();
        int int49 = dateTime41.get(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property54 = dateTime51.centuryOfEra();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = property54.getAsText(locale55);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusHours((int) (byte) 0);
        boolean boolean63 = dateTime61.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime61.toMutableDateTime(dateTimeZone64);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.lang.String str69 = dateTimeZone64.getName((long) (byte) 1, locale68);
        java.lang.String str70 = locale68.getScript();
        java.lang.String str71 = property54.getAsShortText(locale68);
        int int72 = property54.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property54.getFieldType();
        boolean boolean74 = dateTime41.isSupported(dateTimeFieldType73);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType73.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.withWeekyear((-1));
        org.joda.time.DateTime dateTime81 = dateTime77.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.DateTime dateTime83 = dateTime81.plus(readableDuration82);
        org.joda.time.DateTime dateTime85 = dateTime83.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime87 = dateTime83.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime88 = dateTime87.toMutableDateTime();
        org.joda.time.Chronology chronology89 = mutableDateTime88.getChronology();
        org.joda.time.DurationField durationField90 = durationFieldType75.getField(chronology89);
        java.lang.String str91 = durationFieldType75.toString();
        boolean boolean92 = localDateTime26.isSupported(durationFieldType75);
        org.joda.time.DateTimeField[] dateTimeFieldArray93 = localDateTime26.getFields();
        int int94 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        long long96 = dateTimeField18.roundHalfCeiling(36892800000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:33:10.063+00:00:00.052" + "'", str7, "2022-02-22T07:33:10.063+00:00:00.052");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tedesco (Germania)" + "'", str10, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969" + "'", str14, "1969");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 51 + "'", int27 == 51);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Property[millisOfSecond]" + "'", str47, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "it" + "'", str56, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "20" + "'", str57, "20");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.052" + "'", str69, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "20" + "'", str71, "20");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "eras" + "'", str91, "eras");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-62135596800052L) + "'", long96 == (-62135596800052L));
    }

    @Test
    public void test5185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5185");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        dateTimeParserBucket27.setPivotYear((java.lang.Integer) 292);
        long long32 = dateTimeParserBucket27.computeMillis(true, "zh");
        org.joda.time.Chronology chronology33 = dateTimeParserBucket27.getChronology();
        long long36 = dateTimeParserBucket27.computeMillis(true, "2022-02-22T07:28:30.682+00:00:00.052");
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours((int) (byte) 0);
        java.util.Date date41 = dateTime38.toDate();
        org.joda.time.DateTime.Property property42 = dateTime38.dayOfMonth();
        java.lang.String str43 = property42.getAsString();
        int int44 = property42.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusMonths((int) (byte) 100);
        int[] intArray50 = localDateTime49.getValues();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusMonths(49);
        int int53 = property42.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        int int55 = property42.getMaximumShortTextLength(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property42.getFieldType();
        dateTimeParserBucket27.saveField(dateTimeFieldType56, 715);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 673L + "'", long32 == 673L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 673L + "'", long36 == 673L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Feb 22 15:02:01 GMT+07:28 2022");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "22" + "'", str43, "22");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 28 + "'", int44 == 28);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1978, 5, 1, 87]");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
    }

    @Test
    public void test5186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5186");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime3.withDurationAdded(1645514753003L, 38);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        int int30 = dateTime26.get(dateTimeFieldType28);
        java.lang.String str31 = dateTimeFieldType28.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DurationField durationField43 = chronology38.minutes();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.era();
        org.joda.time.DateTimeField dateTimeField45 = chronology38.weekOfWeekyear();
        org.joda.time.DurationField durationField46 = chronology38.minutes();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology48, locale49, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField53 = null;
        dateTimeParserBucket52.saveField(dateTimeField53, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale58 = java.util.Locale.ROOT;
        dateTimeParserBucket52.saveField(dateTimeFieldType56, "it", locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(673L, chronology38, locale58, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology63 = dateTimeParserBucket62.getChronology();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology63, locale64, (java.lang.Integer) 597);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 26775034, chronology33, locale64, (java.lang.Integer) 57);
        dateTimeParserBucket68.setOffset((java.lang.Integer) 713);
        dateTimeParserBucket68.setOffset(92);
        org.joda.time.Chronology chronology73 = dateTimeParserBucket68.getChronology();
        org.joda.time.Chronology chronology74 = chronology73.withUTC();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType28.getField(chronology73);
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType28.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 216 + "'", int5 == 216);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "clockhourOfHalfday" + "'", str31, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationFieldType76);
    }

    @Test
    public void test5187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5187");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfDay();
        long long7 = dateTimeField5.roundFloor((long) 591);
        org.joda.time.DurationField durationField8 = dateTimeField5.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMonths((int) (byte) 100);
        int int14 = localDateTime13.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int20 = localDateTime16.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.minusMillis(99);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime22);
        int int25 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        java.lang.String str31 = chronology29.toString();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.dayOfWeek();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        dateTimeParserBucket39.saveField(dateTimeFieldType43, "it", locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology29, locale45, (java.lang.Integer) 9, 538);
        java.lang.String str50 = locale45.getLanguage();
        java.lang.String str51 = locale45.getScript();
        int int52 = dateTimeField5.getMaximumShortTextLength(locale45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.PreciseDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 86399 + "'", int25 == 86399);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
    }

    @Test
    public void test5188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5188");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology9.seconds();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology3, locale22);
        java.lang.Integer int26 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        long long29 = dateTimeParserBucket25.computeMillis(false);
        long long30 = dateTimeParserBucket25.computeMillis();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AD" + "'", str23, "AD");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 820L + "'", long29 == 820L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 820L + "'", long30 == 820L);
    }

    @Test
    public void test5189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5189");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket5.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(26751806L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusMinutes((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.monthOfYear();
        int int41 = localDateTime39.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMonthOfYear(9);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYear((int) (short) 100);
        int int59 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        int int60 = dateTimeField49.getMinimumValue((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar65 = dateTime64.toGregorianCalendar();
        int int66 = dateTime64.getMillisOfSecond();
        org.joda.time.DateTime dateTime67 = localDateTime51.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime69 = dateTime67.plusMonths((int) (byte) 10);
        int int70 = dateTime67.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime73 = dateTime67.withFieldAdded(durationFieldType71, 817);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime43.withFieldAdded(durationFieldType71, 0);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime29.withFieldAdded(durationFieldType71, 908);
        boolean boolean78 = localDateTime19.isSupported(durationFieldType71);
        boolean boolean79 = dateTimeParserBucket5.restoreState((java.lang.Object) durationFieldType71);
        java.lang.Object obj80 = dateTimeParserBucket5.saveState();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tedesco (Germania)" + "'", str15, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(gregorianCalendar65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 378 + "'", int66 == 378);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 70 + "'", int70 == 70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(obj80);
    }

    @Test
    public void test5190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5190");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket6.getChronology();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        java.lang.String str19 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        dateTimeParserBucket27.saveField(dateTimeFieldType31, "it", locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology17, locale33, (java.lang.Integer) 9, 538);
        java.lang.String str40 = nameProvider12.getShortName(locale33, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale41 = locale33.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology11, locale33, (java.lang.Integer) 26798222);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusHours(118);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.plusMinutes(165);
        long long60 = chronology11.set((org.joda.time.ReadablePartial) localDateTime58, (long) 272);
        org.joda.time.DateTimeField dateTimeField61 = chronology11.weekyear();
        long long64 = dateTimeField61.addWrapField((-2246400000L), 194);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31526099000L) + "'", long60 == (-31526099000L));
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 6120144000000L + "'", long64 == 6120144000000L);
    }

    @Test
    public void test5191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5191");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(804);
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone8.toTimeZone();
        int int12 = timeZone10.getOffset((-1510245205420L));
        timeZone10.setID("2022-02-22T07:00:39.126+00:00:00.052");
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        java.util.Locale locale25 = dateTimeParserBucket20.getLocale();
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = timeZone10.getDisplayName(locale25);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 804 + "'", int12 == 804);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GMT+00:00" + "'", str27, "GMT+00:00");
    }

    @Test
    public void test5192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5192");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime22.plusYears(405);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime22.plus(readableDuration27);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime22.getZone();
        java.util.GregorianCalendar gregorianCalendar30 = dateTime22.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test5193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5193");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        long long15 = dateTimeField13.roundHalfCeiling(1646033230220L);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1640995200000L + "'", long15 == 1640995200000L);
    }

    @Test
    public void test5194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5194");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        boolean boolean21 = dateTimeField15.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((-592L));
        int int27 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = property24.addToCopy(593);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime29, 608, locale31);
        long long34 = dateTimeField15.roundHalfFloor(103L);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekyearOfCentury();
        java.lang.String str51 = dateTimeField49.getAsShortText(10L);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = dateTimeField49.getAsText(0L, locale53);
        java.lang.String str55 = dateTimeField43.getAsText(0, locale53);
        java.util.Locale locale56 = java.util.Locale.KOREA;
        int int57 = dateTimeField43.getMaximumShortTextLength(locale56);
        java.lang.String str59 = locale56.getExtension('u');
        int int60 = dateTimeField15.getMaximumTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.millisOfSecond();
        org.joda.time.DurationField durationField67 = dateTimeField66.getLeapDurationField();
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = dateTimeField66.getAsText(457087L, locale69);
        java.lang.String str72 = locale56.getDisplayCountry(locale69);
        java.lang.String str74 = locale56.getExtension('x');
        java.util.Set<java.lang.Character> charSet75 = locale56.getExtensionKeys();
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "608" + "'", str32, "608");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "70" + "'", str51, "70");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "70" + "'", str54, "70");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7 + "'", int57 == 7);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNull(durationField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "it" + "'", str70, "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "87" + "'", str71, "87");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Corea del Sud" + "'", str72, "Corea del Sud");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(charSet75);
    }

    @Test
    public void test5195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5195");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology3.getZone();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMonths((int) (byte) 100);
        int int14 = localDateTime13.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray17 = localDateTime16.getValues();
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime13, intArray17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField20 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology3.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        long long36 = dateTimeField34.remainder(58999L);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getExtension('x');
        int int40 = dateTimeField34.getMaximumShortTextLength(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(2595600988L, chronology3, locale37, (java.lang.Integer) 663);
        org.joda.time.DateTimeField dateTimeField43 = chronology3.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 52]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 259258999L + "'", long36 == 259258999L);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test5196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5196");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        long long32 = dateTimeZone26.adjustOffset(1014721200000L, false);
        long long34 = dateTimeZone26.convertUTCToLocal(1014721200000L);
        boolean boolean36 = dateTimeZone26.isStandardOffset((long) 495);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        boolean boolean38 = strSet6.remove((java.lang.Object) dateTimeZone26);
        boolean boolean39 = strSet6.isEmpty();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CHN" + "'", str4, "CHN");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1014721200000L + "'", long32 == 1014721200000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1014721200052L + "'", long34 == 1014721200052L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test5197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5197");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMillis(603);
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds(170);
        boolean boolean28 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        boolean boolean29 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime4.withYear(170);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime.Property property33 = localDateTime4.property(dateTimeFieldType32);
        int int34 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        int int41 = property40.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime43 = property40.addToCopy(608);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfWeek();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology46, locale47, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField51 = null;
        dateTimeParserBucket50.saveField(dateTimeField51, (int) (short) 0);
        java.lang.Integer int54 = dateTimeParserBucket50.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket50.setZone(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withWeekyear((-1));
        org.joda.time.DateTime dateTime62 = dateTime58.plusHours((int) (byte) 100);
        boolean boolean64 = dateTime62.isBefore((long) ' ');
        int int65 = dateTimeZone55.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime67 = dateTime62.minus((long) 51);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int72 = localDateTime69.get(dateTimeFieldType71);
        int int73 = dateTime67.get(dateTimeFieldType71);
        int int74 = localDateTime43.get(dateTimeFieldType71);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime43.withYearOfEra(151);
        int int77 = localDateTime76.getEra();
        boolean boolean78 = localDateTime4.equals((java.lang.Object) localDateTime76);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.withWeekyear((-1));
        org.joda.time.DateTime.Property property83 = dateTime82.millisOfSecond();
        org.joda.time.DateTime dateTime85 = dateTime82.plusSeconds(441);
        org.joda.time.DateTime.Property property86 = dateTime85.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime85);
        int int88 = dateTime85.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone89 = dateTime85.getZone();
        org.joda.time.DateTime dateTime91 = dateTime85.minusMinutes(26818145);
        org.joda.time.DateTime dateTime92 = localDateTime76.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime93 = localDateTime76.toDateTime();
        int int94 = dateTime93.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 18 + "'", int74 == 18);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 695 + "'", int94 == 695);
    }

    @Test
    public void test5198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5198");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfEvenCopy();
        java.lang.String str19 = property17.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property17.getFieldType();
        int int21 = dateTime13.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime23 = dateTime13.plusMonths(377);
        long long24 = dateTime13.getMillis();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket41.setZone(dateTimeZone46);
        dateTimeParserBucket32.setZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket32.getZone();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(28774800988L, dateTimeZone49);
        java.lang.String str52 = dateTimeZone49.toString();
        int int54 = dateTimeZone49.getStandardOffset((long) 298);
        org.joda.time.DateTime dateTime55 = dateTime13.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime57 = dateTime55.plusSeconds(569);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[millisOfSecond]" + "'", str19, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 804 + "'", int21 == 804);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1586849590752L + "'", long24 == 1586849590752L);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.052" + "'", str52, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test5199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5199");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale20.getDisplayName();
        dateTimeParserBucket11.saveField(dateTimeFieldType18, "97", locale20);
        int int23 = localDateTime3.get(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime3.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime3.plusMinutes(66);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds(888);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str21, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test5200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5200");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        boolean boolean26 = timeZone22.hasSameRules(timeZone25);
        java.lang.String str27 = timeZone22.getID();
        boolean boolean28 = timeZone22.observesDaylightTime();
        int int30 = timeZone22.getOffset(4418768307L);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        timeZone31.setID("ko");
        boolean boolean34 = timeZone22.hasSameRules(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths(10);
        org.joda.time.DateTime.Property property41 = dateTime40.minuteOfDay();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        int int45 = timeZone44.getRawOffset();
        boolean boolean46 = timeZone44.observesDaylightTime();
        boolean boolean47 = timeZone44.observesDaylightTime();
        boolean boolean48 = timeZone31.hasSameRules(timeZone44);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.052" + "'", str27, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test5201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5201");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-22T07:27:11.312+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:27:11.312+00:00:00.052\" is malformed at \"+00:00:00.052\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5202");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = dateTimeZone16.getName((long) (byte) 1, locale20);
        org.joda.time.Chronology chronology22 = chronology3.withZone(dateTimeZone16);
        long long26 = chronology22.add((long) 51, (long) 558, 175);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.lang.String str29 = locale27.getDisplayName();
        java.lang.String str30 = locale27.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 39, chronology22, locale27);
        java.util.Locale locale32 = dateTimeParserBucket31.getLocale();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DurationField durationField39 = chronology35.seconds();
        org.joda.time.DurationField durationField40 = chronology35.minutes();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours((int) (byte) 0);
        boolean boolean47 = dateTime45.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime45.toMutableDateTime(dateTimeZone48);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = dateTimeZone48.getName((long) (byte) 1, locale52);
        org.joda.time.Chronology chronology54 = chronology35.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField55 = chronology35.minuteOfDay();
        org.joda.time.DurationField durationField56 = chronology35.seconds();
        org.joda.time.DateTimeField dateTimeField57 = chronology35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField59 = chronology35.secondOfMinute();
        long long62 = dateTimeField59.add((long) 858, 4418879343L);
        dateTimeParserBucket31.saveField(dateTimeField59, 187);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.052" + "'", str21, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 97701L + "'", long26 == 97701L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "francese (Francia)" + "'", str29, "francese (Francia)");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "francese (Francia)" + "'", str30, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.052" + "'", str53, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 4418879343858L + "'", long62 == 4418879343858L);
    }

    @Test
    public void test5203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5203");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(590);
        int int6 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekyear(325);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekyear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property38 = dateTime35.centuryOfEra();
        org.joda.time.DurationField durationField39 = property38.getRangeDurationField();
        long long40 = property38.remainder();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.toLanguageTag();
        java.lang.String str45 = property38.getAsText(locale41);
        java.lang.String str46 = dateTimeZone30.getName(947L, locale41);
        org.joda.time.DateTime dateTime47 = localDateTime8.toDateTime(dateTimeZone30);
        long long49 = dateTimeZone30.previousTransition(26946942L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNull(durationField39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1510244808952L) + "'", long40 == (-1510244808952L));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u671d\u9c9c\u6587" + "'", str43, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ko" + "'", str44, "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "20" + "'", str45, "20");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.052" + "'", str46, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 26946942L + "'", long49 == 26946942L);
    }

    @Test
    public void test5204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5204");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        java.util.Date date13 = dateTime10.toDate();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfMonth();
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfMonth();
        java.lang.String str16 = property15.getAsString();
        boolean boolean17 = localDateTime8.equals((java.lang.Object) property15);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DurationField durationField26 = chronology22.seconds();
        org.joda.time.DurationField durationField27 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField30 = chronology22.minutes();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        dateTimeParserBucket36.saveField(dateTimeFieldType40, "it", locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(673L, chronology22, locale42, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology47, locale48, (java.lang.Integer) 597);
        java.lang.String str51 = property15.getAsText(locale48);
        org.joda.time.DurationField durationField52 = property15.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:33:11 UTC 2022");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "22" + "'", str16, "22");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "22" + "'", str51, "22");
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test5205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5205");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime22.withYear(255);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test5206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5206");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekyear((-1));
        org.joda.time.DateTime.Property property7 = dateTime4.yearOfCentury();
        org.joda.time.DateTime dateTime9 = property7.addToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime9.centuryOfEra();
        org.joda.time.DateTime dateTime13 = dateTime9.withWeekyear(174);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours((int) (byte) 0);
        boolean boolean26 = dateTime24.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime24.toString(dateTimeFormatter27);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        java.lang.Integer int38 = dateTimeParserBucket34.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket34.setZone(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withWeekyear((-1));
        org.joda.time.DateTime dateTime46 = dateTime42.plusHours((int) (byte) 100);
        boolean boolean48 = dateTime46.isBefore((long) ' ');
        int int49 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime46);
        long long51 = dateTimeZone39.nextTransition((long) (short) -1);
        boolean boolean52 = dateTime24.equals((java.lang.Object) dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        int[] intArray54 = localDateTime53.getValues();
        chronology17.validate((org.joda.time.ReadablePartial) localDateTime19, intArray54);
        org.joda.time.DateTimeField dateTimeField56 = chronology17.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime9.toMutableDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField58 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField60 = chronology17.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "monthOfYear" + "'", str2, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T07:33:11.150+00:00:00.052" + "'", str28, "2022-02-22T07:33:11.150+00:00:00.052");
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2022, 2, 22, 27191150]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test5207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5207");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfSecond();
        org.joda.time.DurationField durationField9 = chronology5.seconds();
        org.joda.time.DurationField durationField10 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.era();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.monthOfYear();
        org.joda.time.DurationField durationField13 = durationFieldType1.getField(chronology5);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology16);
        java.lang.String str18 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = dateTimeField19.getAsShortText((long) (byte) -1, locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.lang.String str24 = locale21.toLanguageTag();
        java.lang.String str25 = locale21.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology5, locale21, (java.lang.Integer) 992, 405);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withDurationAdded(readableDuration35, 28);
        int[] intArray39 = chronology5.get((org.joda.time.ReadablePartial) localDateTime37, (long) 772);
        org.joda.time.DateTimeField dateTimeField40 = chronology5.clockhourOfHalfday();
        long long42 = dateTimeField40.roundFloor((-1640071964440L));
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weeks" + "'", str2, "weeks");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ko" + "'", str24, "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1, 772]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1640073600000L) + "'", long42 == (-1640073600000L));
    }

    @Test
    public void test5208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5208");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        boolean boolean23 = dateTimeZone19.isFixed();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test5209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5209");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMonths((int) (byte) 100);
        int[] intArray32 = localDateTime31.getValues();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusDays(4);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minus(readableDuration35);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        java.lang.String str41 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        int int46 = localDateTime36.indexOf(dateTimeFieldType45);
        int int47 = localDateTime26.get(dateTimeFieldType45);
        org.joda.time.LocalDateTime.Property property48 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundHalfEvenCopy();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1978, 5, 1, 87]");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test5210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5210");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(2022);
        int int9 = localDateTime8.getMinuteOfHour();
        int int10 = localDateTime8.getMillisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        int int18 = dateTimeParserBucket16.getOffset();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        java.lang.String str23 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField26.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField26.getType();
        dateTimeParserBucket16.saveField(dateTimeFieldType28, 623);
        int int31 = localDateTime8.get(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime8.withDayOfYear(72);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 999 + "'", int10 == 999);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20 + "'", int31 == 20);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test5211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5211");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = dateTimeZone16.getName((long) (byte) 1, locale20);
        org.joda.time.Chronology chronology22 = chronology3.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        org.joda.time.DurationField durationField28 = property27.getRangeDurationField();
        long long29 = property27.remainder();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.toLanguageTag();
        java.lang.String str34 = property27.getAsText(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology22, locale30, (java.lang.Integer) 180);
        dateTimeParserBucket36.setOffset(818);
        java.lang.Object obj39 = dateTimeParserBucket36.saveState();
        int int40 = dateTimeParserBucket36.getOffset();
        int int41 = dateTimeParserBucket36.getOffset();
        java.lang.Object obj42 = dateTimeParserBucket36.saveState();
        java.util.Locale locale43 = dateTimeParserBucket36.getLocale();
        java.lang.String str44 = locale43.getLanguage();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.052" + "'", str21, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNull(durationField28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1510244808635L) + "'", long29 == (-1510244808635L));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u671d\u9c9c\u6587" + "'", str32, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ko" + "'", str33, "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "20" + "'", str34, "20");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 818 + "'", int40 == 818);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 818 + "'", int41 == 818);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ko" + "'", str44, "ko");
    }

    @Test
    public void test5212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5212");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("DEU");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Germany");
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        dateTimeParserBucket11.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property33 = dateTime30.centuryOfEra();
        org.joda.time.DurationField durationField34 = property33.getRangeDurationField();
        long long35 = property33.remainder();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = property33.getAsText(locale36);
        java.lang.String str41 = dateTimeZone25.getName(947L, locale36);
        java.util.Locale.Builder builder42 = builder5.setLocale(locale36);
        java.util.Locale.Builder builder44 = builder42.setVariant("2035");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder46 = builder44.addUnicodeLocaleAttribute("_22");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: _22 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNull(durationField34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1510244808504L) + "'", long35 == (-1510244808504L));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u671d\u9c9c\u6587" + "'", str38, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ko" + "'", str39, "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "20" + "'", str40, "20");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.052" + "'", str41, "+00:00:00.052");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test5213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5213");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        dateTimeParserBucket5.setOffset(1);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 180);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket5.getZone();
        int int18 = dateTimeParserBucket5.getOffset();
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test5214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5214");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((-592L));
        int int5 = property2.getMinimumValue();
        java.lang.String str6 = property2.getAsString();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(20);
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(26751557);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(9);
        boolean boolean35 = property2.equals((java.lang.Object) dateTime32);
        org.joda.time.DateTime.Property property36 = dateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = dateTime32.toLocalDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test5215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5215");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DurationField durationField8 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.millisOfSecond();
        int int11 = dateTimeField9.getMaximumValue((-592L));
        int int13 = dateTimeField9.getLeapAmount((-65491199484L));
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 19);
        int int16 = localDateTime15.getCenturyOfEra();
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category18, locale19);
        java.lang.String str21 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime15, 441, locale19);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology32, locale33, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField37 = null;
        dateTimeParserBucket36.saveField(dateTimeField37, (int) (short) 0);
        java.lang.Integer int40 = dateTimeParserBucket36.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket36.setZone(dateTimeZone41);
        dateTimeParserBucket27.setZone(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket27.getZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        int int55 = mutableDateTime53.get(dateTimeFieldType54);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.secondOfMinute();
        org.joda.time.DurationField durationField61 = chronology58.millis();
        boolean boolean62 = dateTimeFieldType54.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField63 = chronology58.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = chronology58.halfdayOfDay();
        dateTimeParserBucket27.saveField(dateTimeField64, 139);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        dateTimeParserBucket27.saveField(dateTimeFieldType67, 194);
        boolean boolean70 = localDateTime15.isSupported(dateTimeFieldType67);
        org.joda.time.LocalDateTime.Property property71 = localDateTime15.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = localDateTime15.withDayOfYear(26941911);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26941911 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 999 + "'", int11 == 999);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "441" + "'", str21, "441");
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test5216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5216");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        dateTimeParserBucket5.setOffset(19);
        java.lang.Object obj22 = dateTimeParserBucket5.saveState();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYear((int) (short) 100);
        int int38 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        int int39 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar44 = dateTime43.toGregorianCalendar();
        int int45 = dateTime43.getMillisOfSecond();
        org.joda.time.DateTime dateTime46 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int48 = localDateTime30.get(dateTimeFieldType47);
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.lang.String str51 = locale50.getLanguage();
        dateTimeParserBucket5.saveField(dateTimeFieldType47, "DurationField[years]", locale50);
        java.lang.String str53 = dateTimeFieldType47.getName();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType47.getDurationType();
        java.lang.String str55 = dateTimeFieldType47.getName();
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 767 + "'", int45 == 767);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "dayOfMonth" + "'", str53, "dayOfMonth");
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "dayOfMonth" + "'", str55, "dayOfMonth");
    }

    @Test
    public void test5217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5217");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.monthOfYear();
        int int16 = dateTimeField13.getDifference((long) 699, (long) 227);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusMillis(603);
        int int43 = localDateTime42.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusSeconds(170);
        boolean boolean46 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime45);
        boolean boolean47 = localDateTime22.isEqual((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime22.plusMinutes(92);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours((int) (byte) 0);
        boolean boolean56 = dateTime54.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime54.toMutableDateTime(dateTimeZone57);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = dateTimeZone57.getName((long) (byte) 1, locale61);
        java.lang.String str64 = locale61.getUnicodeLocaleType("52");
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleAttributes();
        java.lang.String str66 = localDateTime22.toString("7", locale61);
        java.lang.String str67 = dateTimeField13.getAsShortText(147675340L, locale61);
        java.util.Set<java.lang.String> strSet68 = locale61.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology71, locale72, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology76 = dateTimeParserBucket75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 459, chronology76);
        org.joda.time.DateTimeField dateTimeField79 = chronology76.millisOfDay();
        java.lang.String str81 = dateTimeField79.getAsText(643L);
        boolean boolean82 = strSet68.contains((java.lang.Object) 643L);
        java.util.stream.Stream<java.lang.String> strStream83 = strSet68.stream();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.052" + "'", str62, "+00:00:00.052");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "7" + "'", str66, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uc6d4" + "'", str67, "\uc6d4");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "643" + "'", str81, "643");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strStream83);
    }

    @Test
    public void test5218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5218");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfSecond((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.era();
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.dayOfYear();
        boolean boolean15 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime dateTime21 = dateTime17.plusHours((int) (byte) 100);
        boolean boolean23 = dateTime21.isBefore((long) ' ');
        org.joda.time.DateTime.Property property24 = dateTime21.weekOfWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime21.plusMonths((int) ' ');
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str28 = durationFieldType27.getName();
        org.joda.time.DateTime dateTime30 = dateTime21.withFieldAdded(durationFieldType27, 16);
        boolean boolean31 = localDateTime9.isSupported(durationFieldType27);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime9.plusMinutes(26752174);
        int int34 = localDateTime33.getDayOfWeek();
        int int35 = localDateTime33.getMonthOfYear();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        dateTimeParserBucket41.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfMinute();
        java.lang.String str53 = dateTimeField51.getAsShortText((long) 28);
        dateTimeParserBucket41.saveField(dateTimeField51, 100);
        int int56 = dateTimeParserBucket41.getOffset();
        dateTimeParserBucket41.setPivotYear((java.lang.Integer) 136);
        dateTimeParserBucket41.setOffset((java.lang.Integer) 136);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTimeParserBucket41.getZone();
        boolean boolean62 = localDateTime33.equals((java.lang.Object) dateTimeZone61);
        int int63 = localDateTime33.getMillisOfSecond();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weeks" + "'", str28, "weeks");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 785 + "'", int63 == 785);
    }

    @Test
    public void test5219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5219");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.year();
        org.joda.time.Chronology chronology13 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfSecond();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test5220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5220");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime11.centuryOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property14.getAsText(locale15);
        java.lang.String str18 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime8, (-1), locale15);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = dateTimeField4.getAsShortText((int) (byte) 10, locale20);
        long long24 = dateTimeField4.roundHalfFloor((long) 122);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        int int31 = dateTime29.getMillisOfSecond();
        org.joda.time.DateTime.Property property32 = dateTime29.minuteOfHour();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property38 = dateTime35.centuryOfEra();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = property38.getAsText(locale39);
        java.lang.String str42 = locale33.getDisplayName(locale39);
        int int43 = property32.getMaximumTextLength(locale39);
        java.util.Set<java.lang.String> strSet44 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str45 = dateTimeField4.getAsText((int) (short) 100, locale39);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = dateTimeField4.getAsText((long) 837, locale47);
        long long51 = dateTimeField4.addWrapField(733L, 437);
        boolean boolean53 = dateTimeField4.isLeap(26759948L);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusYears(4);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusHours(840);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays(999);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays(484);
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, locale64);
        org.joda.time.Chronology chronology66 = localDateTime63.getChronology();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20" + "'", str17, "20");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "it" + "'", str21, "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "10" + "'", str22, "10");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 946 + "'", int31 == 946);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "20" + "'", str41, "20");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "coreano" + "'", str42, "coreano");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100" + "'", str45, "100");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 17733L + "'", long51 == 17733L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertNotNull(chronology66);
    }

    @Test
    public void test5221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5221");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("DEU");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Germany");
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        dateTimeParserBucket11.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property33 = dateTime30.centuryOfEra();
        org.joda.time.DurationField durationField34 = property33.getRangeDurationField();
        long long35 = property33.remainder();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.toLanguageTag();
        java.lang.String str40 = property33.getAsText(locale36);
        java.lang.String str41 = dateTimeZone25.getName(947L, locale36);
        java.util.Locale.Builder builder42 = builder5.setLocale(locale36);
        java.util.Locale.Builder builder44 = builder42.setVariant("2035");
        java.util.Locale.Builder builder46 = builder44.setVariant("January");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder48 = builder46.removeUnicodeLocaleAttribute("Franz\366sisch (Frankreich)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Franzo?sisch (Frankreich) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNull(durationField34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1510244808021L) + "'", long35 == (-1510244808021L));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u671d\u9c9c\u6587" + "'", str38, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ko" + "'", str39, "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "20" + "'", str40, "20");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.052" + "'", str41, "+00:00:00.052");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test5222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5222");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekyear();
        boolean boolean11 = dateTimeField9.isLeap((long) 285);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        java.lang.String str18 = dateTimeField16.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        int int24 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean27 = localDateTime23.equals((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks((int) (byte) -1);
        int[] intArray33 = new int[] { (-175220) };
        int int34 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime29, intArray33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        int int41 = dateTimeParserBucket40.getOffset();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology44.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((-1L));
        long long50 = dateTimeZone46.convertUTCToLocal((long) 734);
        dateTimeParserBucket40.setZone(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.millisOfSecond();
        org.joda.time.DurationField durationField58 = chronology54.seconds();
        org.joda.time.DurationField durationField59 = chronology54.minutes();
        org.joda.time.DateTimeField dateTimeField60 = chronology54.era();
        org.joda.time.DateTimeField dateTimeField61 = chronology54.monthOfYear();
        int int63 = dateTimeField61.getMaximumValue((long) 38);
        dateTimeParserBucket40.saveField(dateTimeField61, 445);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = property69.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType77.getField(chronology80);
        int int84 = localDateTime74.get(dateTimeFieldType77);
        dateTimeParserBucket40.saveField(dateTimeFieldType77, 6);
        boolean boolean87 = localDateTime29.equals((java.lang.Object) dateTimeFieldType77);
        org.joda.time.DurationFieldType durationFieldType88 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime29.withFieldAdded(durationFieldType88, 26800750);
        org.joda.time.LocalDateTime.Property property91 = localDateTime90.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.LocalDateTime localDateTime93 = localDateTime90.plus(readablePeriod92);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "70" + "'", str18, "70");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-175220]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-292275054) + "'", int34 == (-292275054));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 734L + "'", long50 == 734L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDateTime93);
    }

    @Test
    public void test5223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5223");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        dateTimeParserBucket5.setOffset(1);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 484);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 583);
        java.util.Locale locale17 = dateTimeParserBucket5.getLocale();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "it");
    }

    @Test
    public void test5224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5224");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getMillisOfSecond();
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property20 = dateTime17.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = property20.getAsText(locale21);
        java.lang.String str24 = locale15.getDisplayName(locale21);
        int int25 = property14.getMaximumTextLength(locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        int int27 = strSet26.size();
        boolean boolean28 = dateTimeParserBucket5.restoreState((java.lang.Object) int27);
        java.lang.Object obj29 = dateTimeParserBucket5.saveState();
        java.util.Locale locale30 = dateTimeParserBucket5.getLocale();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(457087L, dateTimeZone32);
        long long37 = dateTimeZone32.adjustOffset((long) 1, true);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone32);
        boolean boolean40 = dateTimeZone32.isStandardOffset((long) 175);
        dateTimeParserBucket5.setZone(dateTimeZone32);
        java.lang.String str43 = dateTimeZone32.getName((long) 26885451);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        java.lang.String str47 = dateTimeZone44.getNameKey(52L);
        long long51 = dateTimeZone44.convertLocalToUTC((long) 227, false, 1014721200000L);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone44);
        long long54 = dateTimeZone32.getMillisKeepLocal(dateTimeZone44, 26778510L);
        boolean boolean56 = dateTimeZone32.isStandardOffset((long) 3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 78 + "'", int13 == 78);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "20" + "'", str23, "20");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "coreano" + "'", str24, "coreano");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.052" + "'", str43, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 175L + "'", long51 == 175L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 26778510L + "'", long54 == 26778510L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test5225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5225");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        java.lang.String str5 = property3.getAsText();
        int int6 = property3.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime7 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime9.getFields();
        boolean boolean14 = localDateTime9.equals((java.lang.Object) 774);
        int int15 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minusWeeks(21);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.weekOfWeekyear();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property26 = localDateTime20.yearOfCentury();
        org.joda.time.Chronology chronology27 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.halfdays();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale31.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology30, locale31, (java.lang.Integer) 227);
        dateTimeParserBucket36.setPivotYear((java.lang.Integer) 771);
        dateTimeParserBucket36.setOffset((java.lang.Integer) 2);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket36.getZone();
        long long43 = dateTimeZone41.convertUTCToLocal(0L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plus(readableDuration48);
        int int50 = localDateTime49.getYearOfEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = localDateTime49.getFields();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plus(readableDuration52);
        boolean boolean54 = dateTimeZone41.isLocalDateTimeGap(localDateTime53);
        org.joda.time.Chronology chronology55 = chronology27.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "52" + "'", str5, "52");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u671d\u9c9c\u6587" + "'", str33, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ko" + "'", str34, "ko");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 52L + "'", long43 == 52L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test5226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5226");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime1.toMutableDateTime();
        int int6 = mutableDateTime5.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale27 = java.util.Locale.ROOT;
        dateTimeParserBucket21.saveField(dateTimeFieldType25, "it", locale27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime15.property(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType25.getDurationType();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.millisOfSecond();
        org.joda.time.DurationField durationField38 = chronology34.seconds();
        org.joda.time.DurationField durationField39 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        boolean boolean46 = dateTime44.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime44.toMutableDateTime(dateTimeZone47);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = dateTimeZone47.getName((long) (byte) 1, locale51);
        org.joda.time.Chronology chronology53 = chronology34.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property58 = dateTime55.centuryOfEra();
        org.joda.time.DurationField durationField59 = property58.getRangeDurationField();
        long long60 = property58.remainder();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale61.toLanguageTag();
        java.lang.String str65 = property58.getAsText(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology53, locale61, (java.lang.Integer) 180);
        dateTimeParserBucket67.setOffset(818);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int75 = localDateTime71.get(dateTimeFieldType74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.millisOfSecond();
        org.joda.time.DurationField durationField84 = chronology80.seconds();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime77, chronology80);
        org.joda.time.DateTimeField dateTimeField86 = chronology80.dayOfWeek();
        dateTimeParserBucket67.saveField(dateTimeField86, 569);
        org.joda.time.Chronology chronology89 = dateTimeParserBucket67.getChronology();
        boolean boolean90 = dateTimeFieldType25.isSupported(chronology89);
        java.lang.String str91 = dateTimeFieldType25.toString();
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType25.getRangeDurationType();
        int int93 = mutableDateTime5.get(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.052" + "'", str52, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNull(durationField59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1510244807662L) + "'", long60 == (-1510244807662L));
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u671d\u9c9c\u6587" + "'", str63, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ko" + "'", str64, "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "20" + "'", str65, "20");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "weekOfWeekyear" + "'", str91, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 8 + "'", int93 == 8);
    }

    @Test
    public void test5227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5227");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology10.add(readablePeriod12, 4838400000L, 290);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.era();
        int int18 = dateTimeField16.getMinimumValue(452L);
        long long20 = dateTimeField16.roundHalfCeiling(9226L);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4838400000L + "'", long15 == 4838400000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62135596800000L) + "'", long20 == (-62135596800000L));
    }

    @Test
    public void test5228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5228");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor4 = strSet3.iterator();
        java.util.Iterator<java.lang.String> strItor5 = strSet3.iterator();
        boolean boolean6 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet3);
        org.joda.time.tz.Provider provider7 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet8 = provider7.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider7);
        java.util.Set<java.lang.String> strSet10 = provider7.getAvailableIDs();
        boolean boolean11 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet10);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        java.lang.Integer int21 = dateTimeParserBucket17.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket17.setZone(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((-1));
        org.joda.time.DateTime dateTime29 = dateTime25.plusHours((int) (byte) 100);
        boolean boolean31 = dateTime29.isBefore((long) ' ');
        int int32 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime34 = dateTime29.minusYears(20);
        org.joda.time.DateTime.Property property35 = dateTime34.hourOfDay();
        org.joda.time.DateTime.Property property36 = dateTime34.dayOfMonth();
        java.util.Locale locale40 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str41 = property36.getAsText(locale40);
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        boolean boolean43 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet42);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertNotNull(strItor5);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(provider7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals(locale40.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "26" + "'", str41, "26");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test5229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5229");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.withMillisOfDay(0);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        int int29 = dateTimeZone17.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime30 = dateTime5.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime32 = dateTime30.withYear(702);
        java.lang.String str33 = dateTime30.toString();
        org.joda.time.DateTime dateTime35 = dateTime30.plusYears(435);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime();
        org.joda.time.DateTime.Property property37 = dateTime30.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T00:00:00.000+00:00:00.052" + "'", str33, "2022-02-22T00:00:00.000+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test5230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5230");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        boolean boolean23 = dateTimeZone19.isFixed();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        int int25 = dateTime24.getYearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime24.toString(dateTimeFormatter26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime24.withEra(511);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 511 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:33:12.550+00:00:00.052" + "'", str27, "2022-02-22T07:33:12.550+00:00:00.052");
    }

    @Test
    public void test5231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5231");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        boolean boolean25 = dateTimeFieldType9.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        java.lang.String str33 = dateTimeField31.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        int int39 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime38.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) '#');
        int[] intArray48 = chronology23.get((org.joda.time.ReadablePartial) localDateTime46, 163296000435L);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DurationField durationField50 = chronology23.weekyears();
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "70" + "'", str33, "70");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1975, 3, 6, 435]");
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test5232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5232");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        int int17 = dateTimeParserBucket5.getOffset();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        boolean boolean21 = dateTime19.isAfter((long) 791);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tedesco (Germania)" + "'", str15, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test5233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5233");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = chronology2.months();
        org.joda.time.DateTimeField dateTimeField11 = chronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology2.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((-25173792));
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = locale30.getDisplayName();
        dateTimeParserBucket21.saveField(dateTimeFieldType28, "97", locale30);
        dateTimeParserBucket21.setOffset((java.lang.Integer) 590);
        dateTimeParserBucket21.setOffset(453);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket21.getZone();
        org.joda.time.DateTime dateTime38 = localDateTime15.toDateTime(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tedesco (Germania)" + "'", str31, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test5234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5234");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusMonths((int) ' ');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime5.withFieldAdded(durationFieldType11, 16);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime5.getZone();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfSecond();
        org.joda.time.DurationField durationField29 = chronology26.centuries();
        org.joda.time.DurationFieldType durationFieldType30 = durationField29.getType();
        org.joda.time.DateTime dateTime32 = dateTime5.withFieldAdded(durationFieldType30, 232);
        org.joda.time.DateTime dateTime35 = dateTime32.withDurationAdded((long) 468, 40);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weeks" + "'", str12, "weeks");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test5235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5235");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime8.getZone();
        boolean boolean13 = dateTimeZone12.isFixed();
        int int15 = dateTimeZone12.getOffset((long) 'x');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        int int18 = dateTimeZone12.getOffsetFromLocal((long) 778);
        int int20 = dateTimeZone12.getOffsetFromLocal((long) 9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 840, dateTimeZone12);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfCentury();
        org.joda.time.DateTime dateTime25 = dateTime22.plusHours((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 950, chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        org.joda.time.DateTime dateTime34 = dateTime30.withFieldAdded(durationFieldType32, 193);
        boolean boolean35 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket41.setZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear((-1));
        org.joda.time.DateTime dateTime53 = dateTime49.plusHours((int) (byte) 100);
        boolean boolean55 = dateTime53.isBefore((long) ' ');
        int int56 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime58 = dateTime53.minusYears(20);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.plus(readablePeriod59);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int65 = localDateTime62.get(dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property66.getFieldType();
        int int68 = dateTime58.get(dateTimeFieldType67);
        int int69 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.plusHours((int) (byte) 0);
        java.util.Date date74 = dateTime71.toDate();
        org.joda.time.DateTime.Property property75 = dateTime71.dayOfMonth();
        org.joda.time.DateTime.Property property76 = dateTime71.dayOfMonth();
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = locale77.getLanguage();
        java.lang.String str79 = property76.getAsText(locale77);
        org.joda.time.DateTime dateTime80 = property76.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(dateTimeZone81);
        org.joda.time.DateTime dateTime84 = dateTime82.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime85 = dateTime82.toMutableDateTime();
        int int86 = property76.compareTo((org.joda.time.ReadableInstant) mutableDateTime85);
        org.joda.time.DateTime dateTime87 = property76.getDateTime();
        boolean boolean88 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime90 = dateTime87.minusSeconds(0);
        int int91 = dateTime90.getWeekOfWeekyear();
        int int92 = dateTime90.getWeekyear();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 728 + "'", int68 == 728);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(date74);
// flaky:         org.junit.Assert.assertEquals(date74.toString(), "Tue Feb 22 07:33:12 UTC 2022");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "it" + "'", str78, "it");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "22" + "'", str79, "22");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2022 + "'", int92 == 2022);
    }

    @Test
    public void test5236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5236");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        java.lang.Integer int11 = dateTimeParserBucket7.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket7.setZone(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale16.getDisplayName();
        dateTimeParserBucket7.saveField(dateTimeFieldType14, "97", locale16);
        java.lang.String str19 = locale1.getDisplayCountry(locale16);
        java.lang.String str22 = nameProvider0.getName(locale1, "2024-06-08T07:27:32.275+00:00:00.052", "2022-02-22T07:26:13.872+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        java.lang.Integer int41 = dateTimeParserBucket37.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket37.setZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekyear((-1));
        org.joda.time.DateTime dateTime49 = dateTime45.plusHours((int) (byte) 100);
        boolean boolean51 = dateTime49.isBefore((long) ' ');
        int int52 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime49);
        dateTimeParserBucket31.setZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket31.getZone();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.millisOfSecond();
        org.joda.time.DurationField durationField61 = chronology57.seconds();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.hourOfDay();
        boolean boolean63 = dateTimeParserBucket31.restoreState((java.lang.Object) dateTimeField62);
        long long64 = dateTimeParserBucket31.computeMillis();
        int int65 = dateTimeParserBucket31.getOffset();
        java.util.Locale locale66 = dateTimeParserBucket31.getLocale();
        java.lang.String str69 = nameProvider0.getName(locale66, "", "\u671d\u9c9c\u6587__100");
        java.lang.String str70 = locale66.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = locale66.getISO3Country();
// flaky:             org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for 22");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "German (Germany)" + "'", str17, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "China" + "'", str19, "China");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "_22");
        org.junit.Assert.assertNull(str69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test5237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5237");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2024-06-08T07:29:04.834+00:00:00.052");
        org.joda.time.DateTime dateTime3 = dateTime1.withYear(36840);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test5238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5238");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 590);
        dateTimeParserBucket5.setOffset(453);
        java.lang.Object obj21 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 466);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket5.getZone();
        long long28 = dateTimeZone24.convertLocalToUTC(502L, false, (long) 181);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.secondOfDay();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYearOfEra(10);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray55 = localDateTime54.getValues();
        int[] intArray57 = dateTimeField46.addWrapField((org.joda.time.ReadablePartial) localDateTime51, 0, intArray55, (int) (short) 10);
        int int58 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localDateTime40, intArray55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime40.withCenturyOfEra((int) '#');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMinutes(26795614);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = localDateTime60.toString(dateTimeFormatter63);
        boolean boolean65 = dateTimeZone24.isLocalDateTimeGap(localDateTime60);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tedesco (Germania)" + "'", str15, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 450L + "'", long28 == 450L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 1, 1, 52]");
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "3510-02-22T07:33:12.910" + "'", str64, "3510-02-22T07:33:12.910");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test5239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5239");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime13.toMutableDateTime(dateTimeZone16);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = dateTimeZone16.getName((long) (byte) 1, locale20);
        org.joda.time.Chronology chronology22 = chronology3.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property27 = dateTime24.centuryOfEra();
        org.joda.time.DurationField durationField28 = property27.getRangeDurationField();
        long long29 = property27.remainder();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.toLanguageTag();
        java.lang.String str34 = property27.getAsText(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology22, locale30, (java.lang.Integer) 180);
        dateTimeParserBucket36.setOffset(818);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int44 = localDateTime40.get(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.millisOfSecond();
        org.joda.time.DurationField durationField53 = chronology49.seconds();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime46, chronology49);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.dayOfWeek();
        dateTimeParserBucket36.saveField(dateTimeField55, 569);
        org.joda.time.Chronology chronology58 = dateTimeParserBucket36.getChronology();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(chronology61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plus(readableDuration63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.dayOfMonth();
        long long66 = property65.remainder();
        org.joda.time.LocalDateTime localDateTime67 = property65.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.minusMinutes(970);
        long long73 = chronology58.set((org.joda.time.ReadablePartial) localDateTime67, 2711478993L);
        org.joda.time.DateTimeField dateTimeField74 = chronology58.hourOfDay();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.052" + "'", str21, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNull(durationField28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1510244806999L) + "'", long29 == (-1510244806999L));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u671d\u9c9c\u6587" + "'", str32, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ko" + "'", str33, "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "20" + "'", str34, "20");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 27192949L + "'", long66 == 27192949L);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1646033592949L + "'", long73 == 1646033592949L);
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test5240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5240");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTime dateTime31 = property24.setCopy(12);
        long long32 = property24.remainder();
        int int33 = property24.getMinimumValueOverall();
        java.lang.String str34 = property24.getAsShortText();
        org.joda.time.DateTime dateTime36 = property24.addToCopy((long) 80);
        org.joda.time.DateTime dateTime37 = property24.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime38 = property24.withMinimumValue();
        int int39 = dateTime38.getYear();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "26" + "'", str29, "26");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 41593035L + "'", long32 == 41593035L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "26" + "'", str34, "26");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2002 + "'", int39 == 2002);
    }

    @Test
    public void test5241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5241");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withPeriodAdded(readablePeriod28, 119);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfEvenCopy();
        boolean boolean48 = localDateTime41.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime57 = property56.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minusWeeks(855);
        int int66 = localDateTime61.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime61.plusMillis(754);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.weekOfWeekyear();
        boolean boolean70 = localDateTime50.isEqual((org.joda.time.ReadablePartial) localDateTime68);
        int[] intArray71 = localDateTime68.getValues();
        boolean boolean72 = localDateTime30.isAfter((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime30.minusMillis(103);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime30.plusSeconds(357);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1969, 1, 1, 1753]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test5242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5242");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.parse("26812");
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar6 = dateTime4.toCalendar(locale5);
        java.util.Locale.setDefault(category0, locale5);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=783937785599948,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=26812,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=52,DST_OFFSET=0]");
    }

    @Test
    public void test5243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5243");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("-1");
        int int2 = dateTime1.getYear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours((int) (byte) 0);
        java.util.Date date7 = dateTime4.toDate();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        java.lang.String str9 = property8.getAsString();
        int int10 = property8.getMaximumValue();
        int int11 = property8.getMinimumValueOverall();
        org.joda.time.DateTime dateTime12 = property8.roundHalfCeilingCopy();
        int int13 = dateTime12.getMinuteOfDay();
        boolean boolean14 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfDay();
        int int16 = dateTime12.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:33:13 GMT 2022");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "22" + "'", str9, "22");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 28 + "'", int10 == 28);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test5244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5244");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        org.joda.time.DurationField durationField47 = chronology45.weeks();
        long long50 = durationField47.getDifferenceAsLong(27182777L, (-1981151946241L));
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 7L + "'", long30 == 7L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3275L + "'", long50 == 3275L);
    }

    @Test
    public void test5245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5245");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.io.IOException: Property[secondOfDay]");
        java.util.TimeZone.setDefault(timeZone1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.addWrapFieldToCopy(241);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        java.lang.Integer int20 = dateTimeParserBucket16.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket16.setZone(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale25.getDisplayName();
        dateTimeParserBucket16.saveField(dateTimeFieldType23, "97", locale25);
        java.lang.String str28 = locale10.getDisplayCountry(locale25);
        java.lang.String str29 = locale25.getDisplayScript();
        java.lang.String str30 = locale25.getDisplayScript();
        int int31 = property7.getMaximumTextLength(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = timeZone1.getDisplayName(true, 26933819, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26933819");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tedesco (Germania)" + "'", str26, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "China" + "'", str28, "China");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test5246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5246");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears(360);
        org.joda.time.DateTime dateTime9 = dateTime7.plusSeconds(990);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) (byte) 0);
        boolean boolean15 = dateTime13.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime13.toString(dateTimeFormatter16);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        java.lang.Integer int27 = dateTimeParserBucket23.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket23.setZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withWeekyear((-1));
        org.joda.time.DateTime dateTime35 = dateTime31.plusHours((int) (byte) 100);
        boolean boolean37 = dateTime35.isBefore((long) ' ');
        int int38 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime35);
        long long40 = dateTimeZone28.nextTransition((long) (short) -1);
        boolean boolean41 = dateTime13.equals((java.lang.Object) dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone28);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime46.toMutableDateTime();
        int int50 = dateTime46.getMillisOfSecond();
        org.joda.time.DateTime.Property property51 = dateTime46.centuryOfEra();
        org.joda.time.DateTime dateTime52 = property51.roundCeilingCopy();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        java.util.Locale locale60 = dateTimeParserBucket58.getLocale();
        boolean boolean61 = property51.equals((java.lang.Object) locale60);
        org.joda.time.DateTime dateTime62 = property51.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int68 = localDateTime64.get(dateTimeFieldType67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int75 = localDateTime72.get(dateTimeFieldType74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime64.property(dateTimeFieldType74);
        org.joda.time.DateTime.Property property77 = dateTime62.property(dateTimeFieldType74);
        int int78 = dateTime43.get(dateTimeFieldType74);
        boolean boolean79 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:33:13.406+00:00:00.052" + "'", str17, "2022-02-22T07:33:13.406+00:00:00.052");
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T07:33:13.406+00:00:00.052" + "'", str44, "2022-02-22T07:33:13.406+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 406 + "'", int50 == 406);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 8 + "'", int78 == 8);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test5247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5247");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(7);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plus(readableDuration27);
        java.lang.String str29 = localDateTime24.toString();
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.secondOfMinute();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T01:00:00.052" + "'", str29, "1970-01-01T01:00:00.052");
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test5248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5248");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = property23.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withPeriodAdded(readablePeriod33, 558);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTime();
        org.joda.time.DateTime.Property property37 = dateTime35.weekyear();
        int int38 = property37.get();
        org.joda.time.DateTime dateTime39 = property37.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.hourOfDay();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear((-1));
        org.joda.time.DateTime dateTime58 = dateTime54.plusHours((int) (byte) 100);
        boolean boolean60 = dateTime58.isBefore((long) ' ');
        int int61 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime63 = dateTime58.minusYears(20);
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours((int) (byte) 0);
        java.util.Date date69 = dateTime66.toDate();
        org.joda.time.DateTime.Property property70 = dateTime66.dayOfMonth();
        org.joda.time.DateTime.Property property71 = dateTime66.dayOfMonth();
        int int72 = property64.getDifference((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime74 = property64.addToCopy(52L);
        org.joda.time.DateTime dateTime76 = property64.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime78 = dateTime76.withMillisOfDay(585);
        boolean boolean79 = dateTime39.isBefore((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Feb 22 07:33:13 GMT 2022");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-175220) + "'", int31 == (-175220));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2002 + "'", int38 == 2002);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(date69);
// flaky:         org.junit.Assert.assertEquals(date69.toString(), "Tue Feb 22 07:33:13 GMT 2022");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-175220) + "'", int72 == (-175220));
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test5249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5249");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfSecond();
        org.joda.time.DateTime dateTime27 = dateTime24.plusHours(840);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean29 = dateTime27.isSupported(dateTimeFieldType28);
        org.joda.time.DateTime.Property property30 = dateTime27.minuteOfDay();
        org.joda.time.DurationField durationField31 = property30.getDurationField();
        org.joda.time.DateTime dateTime32 = property30.getDateTime();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test5250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5250");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test5251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5251");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime3.withDurationAdded(1645514753003L, 38);
        org.joda.time.DateTime dateTime28 = dateTime3.withMinuteOfHour(9);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        int int35 = dateTimeParserBucket34.getOffset();
        java.lang.Object obj36 = dateTimeParserBucket34.saveState();
        dateTimeParserBucket34.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.era();
        boolean boolean47 = localDateTime45.isSupported(dateTimeFieldType46);
        int int48 = localDateTime40.get(dateTimeFieldType46);
        dateTimeParserBucket34.saveField(dateTimeFieldType46, 8);
        int int51 = dateTime28.get(dateTimeFieldType46);
        org.joda.time.DateTime dateTime53 = dateTime28.plusMonths(706);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withPeriodAdded(readablePeriod54, 93);
        org.joda.time.DateTime dateTime58 = dateTime53.withYear(26969);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 545 + "'", int5 == 545);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test5252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5252");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        java.lang.Integer int25 = dateTimeParserBucket21.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket21.setZone(dateTimeZone26);
        dateTimeParserBucket12.setZone(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket12.getZone();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYearOfEra(36000000);
        long long38 = chronology2.set((org.joda.time.ReadablePartial) localDateTime33, (-23950053200684L));
        org.joda.time.DateTimeField dateTimeField39 = chronology2.year();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3600000L + "'", long38 == 3600000L);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test5253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5253");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime1.centuryOfEra();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology8, locale9, (java.lang.Integer) 227);
        int int15 = property6.getMaximumShortTextLength(locale9);
        org.joda.time.DurationField durationField16 = property6.getDurationField();
        int int17 = property6.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        int int27 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTime dateTime29 = dateTime25.minusYears((int) 'x');
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        org.joda.time.DateTime dateTime36 = dateTime34.plusMonths(10);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.yearOfEra();
        org.joda.time.DateTime dateTime40 = dateTime36.minusMinutes(648);
        org.joda.time.DateTime dateTime42 = dateTime40.plusSeconds(569);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks(26748437);
        boolean boolean45 = dateTime25.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime48 = dateTime25.withDurationAdded(1645514753003L, 38);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime25.toDateTime(chronology49);
        org.joda.time.DateTime.Property property51 = dateTime25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField52 = property51.getField();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime54.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withYearOfEra(676);
        int int64 = localDateTime61.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = chronology68.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField71 = chronology68.millisOfSecond();
        org.joda.time.DurationField durationField72 = chronology68.seconds();
        org.joda.time.DurationField durationField73 = chronology68.minutes();
        org.joda.time.DateTimeField dateTimeField74 = chronology68.era();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minus(readablePeriod79);
        java.util.Locale locale81 = java.util.Locale.ROOT;
        java.lang.String str82 = dateTimeField74.getAsShortText((org.joda.time.ReadablePartial) localDateTime78, locale81);
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str84 = locale81.getLanguage();
        java.lang.String str85 = locale81.getCountry();
        java.lang.String str86 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, 38, locale81);
        java.util.Set<java.lang.Character> charSet87 = locale81.getExtensionKeys();
        java.lang.String str88 = locale81.getDisplayName();
        java.lang.String str89 = property20.getAsShortText(locale81);
        java.lang.String str90 = locale81.getISO3Language();
        java.lang.String str91 = property6.getAsText(locale81);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 663 + "'", int5 == 663);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 663 + "'", int27 == 663);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "AD" + "'", str82, "AD");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "38" + "'", str86, "38");
        org.junit.Assert.assertNotNull(charSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970" + "'", str89, "1970");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "20" + "'", str91, "20");
    }

    @Test
    public void test5254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5254");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear((int) (short) 100);
        int int9 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.plus(readableDuration10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        java.util.Date date16 = dateTime13.toDate();
        org.joda.time.DateTime.Property property17 = dateTime13.dayOfMonth();
        org.joda.time.DateTime.Property property18 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime13.plusMonths(19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        int int23 = dateTime20.getYearOfEra();
        int int24 = dateTime20.getEra();
        org.joda.time.DateTime dateTime25 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusHours((int) (byte) 0);
        java.util.Date date30 = dateTime27.toDate();
        org.joda.time.DateTime.Property property31 = dateTime27.dayOfMonth();
        java.lang.String str32 = property31.getAsString();
        int int33 = property31.getMaximumValue();
        int int34 = property31.getMinimumValueOverall();
        org.joda.time.DateTime dateTime35 = property31.roundHalfCeilingCopy();
        int int36 = dateTime35.getMinuteOfDay();
        org.joda.time.DateTime dateTime38 = dateTime35.minusMinutes(563);
        org.joda.time.DateTime dateTime40 = dateTime38.withYear(92);
        org.joda.time.LocalDateTime localDateTime41 = dateTime38.toLocalDateTime();
        int int42 = dateTime38.getMillisOfDay();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale45, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, (int) (short) 0);
        java.lang.Integer int52 = dateTimeParserBucket48.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket48.setZone(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withWeekyear((-1));
        org.joda.time.DateTime dateTime60 = dateTime56.plusHours((int) (byte) 100);
        boolean boolean62 = dateTime60.isBefore((long) ' ');
        int int63 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDateTime localDateTime64 = null;
        boolean boolean65 = dateTimeZone53.isLocalDateTimeGap(localDateTime64);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusHours((int) (byte) 0);
        boolean boolean71 = dateTime69.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.minusWeeks((int) 'a');
        boolean boolean76 = dateTime69.isAfter((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime.Property property77 = dateTime69.secondOfDay();
        org.joda.time.DateTime dateTime78 = property77.withMaximumValue();
        boolean boolean79 = dateTimeZone53.equals((java.lang.Object) property77);
        java.lang.String str80 = property77.toString();
        org.joda.time.DateTime dateTime81 = property77.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime82 = dateTime81.toDateTimeISO();
        boolean boolean83 = dateTime38.isBefore((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime81);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Feb 22 07:33:13 GMT 2022");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2023 + "'", int23 == 2023);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Feb 22 07:33:13 GMT 2022");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22" + "'", str32, "22");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 28 + "'", int33 == 28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52620000 + "'", int42 == 52620000);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Property[secondOfDay]" + "'", str80, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test5255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5255");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField12 = chronology8.seconds();
        org.joda.time.DurationField durationField13 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = chronology8.minutes();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField23 = null;
        dateTimeParserBucket22.saveField(dateTimeField23, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        dateTimeParserBucket22.saveField(dateTimeFieldType26, "it", locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(673L, chronology8, locale28, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology33, locale34, (java.lang.Integer) 597);
        java.lang.String str37 = dateTimeZone0.getShortName((long) 27058550, locale34);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
    }

    @Test
    public void test5256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5256");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime3.toMutableDateTime(dateTimeZone6);
        int int9 = mutableDateTime8.getMillisOfDay();
        int int10 = mutableDateTime8.getMonthOfYear();
        int int11 = mutableDateTime8.getMinuteOfHour();
        java.util.GregorianCalendar gregorianCalendar12 = mutableDateTime8.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime8.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DurationField durationField22 = chronology18.seconds();
        org.joda.time.DurationField durationField23 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours((int) (byte) 0);
        boolean boolean30 = dateTime28.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime28.toMutableDateTime(dateTimeZone31);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = dateTimeZone31.getName((long) (byte) 1, locale35);
        org.joda.time.Chronology chronology37 = chronology18.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property42 = dateTime39.centuryOfEra();
        org.joda.time.DurationField durationField43 = property42.getRangeDurationField();
        long long44 = property42.remainder();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale45.toLanguageTag();
        java.lang.String str49 = property42.getAsText(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(2846437113600010L, chronology37, locale45, (java.lang.Integer) 180);
        dateTimeParserBucket51.setOffset(818);
        java.lang.Object obj54 = dateTimeParserBucket51.saveState();
        int int55 = dateTimeParserBucket51.getOffset();
        int int56 = dateTimeParserBucket51.getOffset();
        java.lang.Object obj57 = dateTimeParserBucket51.saveState();
        java.util.Locale locale58 = dateTimeParserBucket51.getLocale();
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = dateTimeZone13.getShortName(1645514858795L, locale58);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27194000 + "'", int9 == 27194000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 33 + "'", int11 == 33);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.052" + "'", str36, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNull(durationField43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1510244806000L) + "'", long44 == (-1510244806000L));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u671d\u9c9c\u6587" + "'", str47, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ko" + "'", str48, "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "20" + "'", str49, "20");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 818 + "'", int55 == 818);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 818 + "'", int56 == 818);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.052" + "'", str60, "+00:00:00.052");
    }

    @Test
    public void test5257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5257");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minus((long) 51);
        org.joda.time.DateTime dateTime24 = dateTime17.minusSeconds(26757772);
        org.joda.time.DateTime dateTime26 = dateTime17.withMillisOfDay(26815);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime17.minusMonths((-17441504));
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test5258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5258");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfMinute();
        int int12 = dateTimeField11.getMaximumValue();
        long long15 = dateTimeField11.addWrapField(1645514949120L, 27089800);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514989120L + "'", long15 == 1645514989120L);
    }

    @Test
    public void test5259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5259");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(7);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plus(readableDuration27);
        int int29 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withWeekyear((-1));
        org.joda.time.DateTime dateTime35 = dateTime33.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) (short) 10);
        int int43 = dateTime42.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime42.withDurationAdded(readableDuration44, (int) (byte) 0);
        boolean boolean47 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime35.minusMonths(173);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusHours((int) (byte) 0);
        java.util.Date date54 = dateTime51.toDate();
        org.joda.time.DateTime.Property property55 = dateTime51.dayOfMonth();
        org.joda.time.DateTime.Property property56 = dateTime51.dayOfMonth();
        java.lang.String str57 = property56.getAsString();
        org.joda.time.DateTime dateTime59 = property56.addToCopy(837);
        org.joda.time.DateTime dateTime61 = dateTime59.withYear(49);
        boolean boolean62 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime64 = dateTime35.minus(readablePeriod63);
        org.joda.time.DateTime dateTime65 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property66 = dateTime65.millisOfDay();
        int int67 = dateTime65.getWeekOfWeekyear();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Feb 22 07:33:14 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "22" + "'", str57, "22");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test5260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5260");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(734);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(11);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear(2022);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property37 = dateTime34.centuryOfEra();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = property37.getAsText(locale38);
        java.lang.String str41 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime31, (-1), locale38);
        java.util.Locale.setDefault(locale38);
        java.lang.String str43 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime22, locale38);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime22.plusMinutes(20);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime22.minusYears(603);
        org.joda.time.LocalDateTime.Property property48 = localDateTime22.dayOfWeek();
        org.joda.time.LocalDateTime.Property property49 = localDateTime22.year();
        org.joda.time.LocalDateTime.Property property50 = localDateTime22.monthOfYear();
        int int51 = localDateTime22.getYear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime22);
        int int53 = localDateTime52.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.monthOfYear();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minus(readableDuration55);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "20" + "'", str40, "20");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "999" + "'", str43, "999");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20 + "'", int53 == 20);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test5261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5261");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.millisOfSecond();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Set<java.lang.Character> charSet19 = locale17.getExtensionKeys();
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Set<java.lang.Character> charSet23 = locale21.getExtensionKeys();
        java.util.Locale.setDefault(category15, locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(52914310L, chronology9, locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleKeys();
        boolean boolean27 = strSet26.isEmpty();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "it" + "'", str18, "it");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test5262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5262");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readablePeriod2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        dateTimeParserBucket11.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        java.lang.String str23 = dateTimeField21.getAsShortText((long) 28);
        dateTimeParserBucket11.saveField(dateTimeField21, 100);
        dateTimeParserBucket11.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket11.getZone();
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) 26757772);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 31, dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime3.toMutableDateTime(dateTimeZone28);
        int int33 = mutableDateTime32.getYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
    }

    @Test
    public void test5263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5263");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime dateTime16 = dateTime12.withMillisOfDay(0);
        int int17 = dateTime16.getDayOfYear();
        boolean boolean18 = mutableDateTime10.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTime dateTime21 = dateTime19.withYear(173);
        org.joda.time.DateTime dateTime23 = dateTime19.withWeekyear(26798335);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime19.getZone();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYear((int) (short) 100);
        int int41 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        int int42 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DurationField durationField43 = dateTimeField31.getDurationField();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.lang.Integer int53 = dateTimeParserBucket49.getOffsetInteger();
        org.joda.time.Chronology chronology54 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekOfWeekyear();
        int int56 = dateTimeField55.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime58.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.minusMillis((int) 'u');
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.minus(readablePeriod72);
        java.util.Locale locale74 = java.util.Locale.GERMANY;
        java.lang.String str75 = locale74.getDisplayName();
        java.util.Set<java.lang.String> strSet76 = locale74.getUnicodeLocaleAttributes();
        java.lang.String str77 = locale74.getISO3Language();
        java.util.Locale locale78 = locale74.stripExtensions();
        java.lang.String str79 = dateTimeField55.getAsShortText((org.joda.time.ReadablePartial) localDateTime67, locale78);
        int int80 = dateTimeField31.getMaximumTextLength(locale78);
        java.lang.String str81 = locale78.getISO3Language();
        java.lang.String str82 = dateTimeZone24.getName(1645515026475L, locale78);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime84.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime84.plusSeconds((int) (byte) 1);
        int int92 = localDateTime91.size();
        org.joda.time.ReadableDuration readableDuration93 = null;
        org.joda.time.LocalDateTime localDateTime94 = localDateTime91.minus(readableDuration93);
        java.lang.String str95 = localDateTime94.toString();
        org.joda.time.LocalDateTime.Property property96 = localDateTime94.hourOfDay();
        boolean boolean97 = dateTimeZone24.equals((java.lang.Object) localDateTime94);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 53 + "'", int56 == 53);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tedesco (Germania)" + "'", str75, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "deu" + "'", str77, "deu");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "52" + "'", str79, "52");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "deu" + "'", str81, "deu");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.052" + "'", str82, "+00:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertNotNull(localDateTime94);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1970-01-01T00:00:01.052" + "'", str95, "1970-01-01T00:00:01.052");
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test5264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5264");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(575);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        dateTimeParserBucket20.setZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket20.getZone();
        long long39 = dateTimeZone37.previousTransition((long) 593);
        org.joda.time.DateTime dateTime40 = dateTime13.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = dateTime40.withMillis((long) 26757);
        org.joda.time.DateTime.Property property43 = dateTime42.secondOfDay();
        int int44 = dateTime42.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 593L + "'", long39 == 593L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 809 + "'", int44 == 809);
    }

    @Test
    public void test5265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5265");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusYears(8);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology19, locale20, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField24 = null;
        dateTimeParserBucket23.saveField(dateTimeField24, (int) (short) 0);
        java.lang.Integer int27 = dateTimeParserBucket23.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket23.setZone(dateTimeZone28);
        dateTimeParserBucket14.setZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket14.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        boolean boolean37 = dateTime35.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime35.toMutableDateTime(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        int int42 = mutableDateTime40.get(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.secondOfMinute();
        org.joda.time.DurationField durationField48 = chronology45.millis();
        boolean boolean49 = dateTimeFieldType41.isSupported(chronology45);
        org.joda.time.DateTimeField dateTimeField50 = chronology45.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology45.halfdayOfDay();
        dateTimeParserBucket14.saveField(dateTimeField51, 139);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        dateTimeParserBucket14.saveField(dateTimeFieldType54, 194);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType54.getDurationType();
        org.joda.time.LocalDateTime.Property property58 = localDateTime8.property(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test5266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5266");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        boolean boolean9 = dateTimeParserBucket5.restoreState((java.lang.Object) (-31535999000L));
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 28);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.days();
        long long15 = durationField13.getMillis(0);
        org.joda.time.DurationFieldType durationFieldType16 = durationField13.getType();
        long long19 = durationField13.add((long) 27102210, (long) 886);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 76577502210L + "'", long19 == 76577502210L);
    }

    @Test
    public void test5267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5267");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime8.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime8.minusHours((-593));
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfSecond(294);
        int int29 = localDateTime28.getHourOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test5268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5268");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        org.joda.time.DateTime dateTime6 = dateTime3.plusDays(26831200);
        org.joda.time.DateTime dateTime7 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear(0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test5269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5269");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        boolean boolean21 = dateTimeField15.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((-592L));
        int int27 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = property24.addToCopy(593);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime29, 608, locale31);
        long long34 = dateTimeField15.roundHalfFloor(103L);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology37.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology47 = localDateTime46.getChronology();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekyearOfCentury();
        java.lang.String str51 = dateTimeField49.getAsShortText(10L);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = dateTimeField49.getAsText(0L, locale53);
        java.lang.String str55 = dateTimeField43.getAsText(0, locale53);
        java.util.Locale locale56 = java.util.Locale.KOREA;
        int int57 = dateTimeField43.getMaximumShortTextLength(locale56);
        java.lang.String str59 = locale56.getExtension('u');
        int int60 = dateTimeField15.getMaximumTextLength(locale56);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology63 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.millisOfSecond();
        org.joda.time.DurationField durationField67 = dateTimeField66.getLeapDurationField();
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.lang.String str70 = locale69.getLanguage();
        java.lang.String str71 = dateTimeField66.getAsText(457087L, locale69);
        java.lang.String str72 = locale56.getDisplayCountry(locale69);
        java.lang.String str74 = locale56.getExtension('x');
        java.lang.String str76 = locale56.getExtension('a');
        java.lang.String str77 = locale56.getCountry();
        java.lang.String str78 = locale56.getLanguage();
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "608" + "'", str32, "608");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "70" + "'", str51, "70");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "70" + "'", str54, "70");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7 + "'", int57 == 7);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNull(durationField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "it" + "'", str70, "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "87" + "'", str71, "87");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Corea del Sud" + "'", str72, "Corea del Sud");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "KR" + "'", str77, "KR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ko" + "'", str78, "ko");
    }

    @Test
    public void test5270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5270");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        java.lang.String str47 = localDateTime46.toString();
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 7L + "'", long30 == 7L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T07:33:14.655" + "'", str47, "2022-02-22T07:33:14.655");
    }

    @Test
    public void test5271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5271");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        java.lang.String str10 = localDateTime8.toString("486");
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        java.lang.Integer int30 = dateTimeParserBucket26.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket26.setZone(dateTimeZone31);
        dateTimeParserBucket17.setZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket17.getZone();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusMinutes(10);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readableDuration39);
        int int41 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = property42.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "486" + "'", str10, "486");
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test5272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5272");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime29 = property26.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear((int) (short) 10);
        int int32 = localDateTime29.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withDayOfYear((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readableDuration35);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime34);
        int int38 = localDateTime37.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.weekOfWeekyear();
        long long40 = property39.remainder();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 80 + "'", int32 == 80);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 345600080L + "'", long40 == 345600080L);
    }

    @Test
    public void test5273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5273");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(26751557);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(9);
        org.joda.time.LocalDate localDate28 = dateTime27.toLocalDate();
        org.joda.time.DateTime dateTime29 = dateTime27.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test5274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5274");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusHours(2023);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.parse("2022-02-22T07:26:05.917+00:00:00.052");
        org.joda.time.DateTime dateTime10 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int16 = localDateTime12.get(dateTimeFieldType15);
        int int17 = localDateTime7.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test5275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5275");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 64, chronology7, locale9, (java.lang.Integer) 26939324, 851);
        java.lang.String str13 = locale9.toLanguageTag();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
    }

    @Test
    public void test5276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5276");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears((int) 'x');
        org.joda.time.Chronology chronology8 = dateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(648);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds(569);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(26748437);
        boolean boolean23 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime3.withDurationAdded(1645514753003L, 38);
        org.joda.time.DateTime dateTime28 = dateTime3.withMinuteOfHour(9);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        int int35 = dateTimeParserBucket34.getOffset();
        java.lang.Object obj36 = dateTimeParserBucket34.saveState();
        dateTimeParserBucket34.setPivotYear((java.lang.Integer) 139);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.era();
        boolean boolean47 = localDateTime45.isSupported(dateTimeFieldType46);
        int int48 = localDateTime40.get(dateTimeFieldType46);
        dateTimeParserBucket34.saveField(dateTimeFieldType46, 8);
        int int51 = dateTime28.get(dateTimeFieldType46);
        org.joda.time.DateTime dateTime53 = dateTime28.plusMonths(706);
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime56.toMutableDateTime();
        int int60 = dateTime56.getMillisOfSecond();
        org.joda.time.DateTime.Property property61 = dateTime56.centuryOfEra();
        org.joda.time.DateTime dateTime62 = property61.roundCeilingCopy();
        org.joda.time.DateTime dateTime64 = property61.setCopy(0);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMonths(26760199);
        int int67 = dateTime66.getMonthOfYear();
        int int68 = property54.compareTo((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean69 = dateTime66.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 771 + "'", int5 == 771);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 771 + "'", int60 == 771);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 7 + "'", int67 == 7);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test5277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5277");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(734);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(11);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear(2022);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property37 = dateTime34.centuryOfEra();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = property37.getAsText(locale38);
        java.lang.String str41 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime31, (-1), locale38);
        java.util.Locale.setDefault(locale38);
        java.lang.String str43 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime22, locale38);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime22.plusMinutes(20);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime22.minusYears(603);
        org.joda.time.LocalDateTime.Property property48 = localDateTime22.dayOfWeek();
        org.joda.time.LocalDateTime.Property property49 = localDateTime22.year();
        org.joda.time.LocalDateTime.Property property50 = localDateTime22.monthOfYear();
        int int51 = localDateTime22.getYear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime22);
        int int53 = localDateTime52.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.monthOfYear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusDays(831);
        int int57 = localDateTime56.getSecondOfMinute();
        org.joda.time.Chronology chronology58 = localDateTime56.getChronology();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "20" + "'", str40, "20");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1" + "'", str41, "-1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "999" + "'", str43, "999");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20 + "'", int53 == 20);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test5278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5278");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        long long13 = chronology7.add(26916893L, (long) 452, 507);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.halfdayOfDay();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("1969-11-21T04:00:00.000");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(27000314L, chronology7, locale16, (java.lang.Integer) 26788);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, 152);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 27146057L + "'", long13 == 27146057L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
    }

    @Test
    public void test5279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5279");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekyearOfCentury();
        java.util.Locale locale10 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale10.getDisplayScript();
        int int13 = dateTimeField6.getMaximumShortTextLength(locale10);
        java.lang.String str14 = locale10.getDisplayCountry();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        dateTimeParserBucket21.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket21.getZone();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone38);
        int int41 = dateTimeZone38.getStandardOffset((-2650616L));
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        java.util.TimeZone.setDefault(timeZone43);
        int int46 = timeZone43.getOffset((-1510245249275L));
        boolean boolean47 = dateTimeZone38.equals((java.lang.Object) timeZone43);
        int int49 = dateTimeZone38.getOffsetFromLocal((long) 242);
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = locale51.toLanguageTag();
        java.lang.String str54 = locale51.getISO3Language();
        java.util.Set<java.lang.String> strSet55 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder56 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder56.clearExtensions();
        java.util.Locale.Builder builder59 = builder57.setLanguageTag("coreano");
        java.util.Locale.Builder builder60 = builder59.clearExtensions();
        java.util.Locale.Builder builder62 = builder60.removeUnicodeLocaleAttribute("100");
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale locale64 = builder63.build();
        java.lang.String str65 = locale51.getDisplayScript(locale64);
        java.lang.String str66 = dateTimeZone38.getName((long) 60, locale51);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime71 = property70.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusMillis((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField79 = localDateTime75.getField(0);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime75.minusYears(360);
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("China");
        java.lang.String str85 = localDateTime81.toString("237", locale84);
        java.lang.String str86 = locale51.getDisplayLanguage(locale84);
        java.lang.String str87 = locale10.getDisplayCountry(locale51);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals(locale10.toString(), "\u671d\u9c9c\u6587__100");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "it" + "'", str52, "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "it" + "'", str53, "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ita" + "'", str54, "ita");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.052" + "'", str66, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "china");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "237" + "'", str85, "237");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Italian" + "'", str86, "Italian");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test5280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5280");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.minuteOfHour();
        int int8 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusSeconds(1970);
        int int11 = localDateTime10.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        java.lang.Integer int30 = dateTimeParserBucket26.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket26.setZone(dateTimeZone31);
        dateTimeParserBucket17.setZone(dateTimeZone31);
        java.lang.String str35 = dateTimeZone31.getName((long) 'u');
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours(715);
        org.joda.time.DateTime dateTime40 = dateTime36.minusHours(730);
        org.joda.time.DateTime.Property property41 = dateTime36.hourOfDay();
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        org.joda.time.DateTime dateTime43 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime44 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 999 + "'", int11 == 999);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.052" + "'", str35, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test5281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5281");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        dateTimeParserBucket15.saveField(dateTimeFieldType19, "it", locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology5, locale21, (java.lang.Integer) 9, 538);
        java.lang.String str28 = nameProvider0.getShortName(locale21, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str30 = locale29.getVariant();
        java.lang.String str33 = nameProvider0.getName(locale29, "tedesco (Germania)", "2020-04-14T07:26:06.430");
        java.lang.String str34 = locale29.getISO3Country();
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.lang.String str36 = locale29.getDisplayVariant();
        java.lang.String str37 = locale29.getDisplayCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "KOR" + "'", str34, "KOR");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "South Korea" + "'", str37, "South Korea");
    }

    @Test
    public void test5282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5282");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        long long42 = dateTimeZone33.convertLocalToUTC(1646033312583L, false);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 35999947L + "'", long38 == 35999947L);
        org.junit.Assert.assertNotNull(chronology39);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1646033312531L + "'", long42 == 1646033312531L);
    }

    @Test
    public void test5283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5283");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.DateTime dateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property5.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        java.lang.String str12 = dateTimeFieldType10.getName();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((-1));
        org.joda.time.DateTime.Property property17 = dateTime14.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property17.addToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime19.centuryOfEra();
        org.joda.time.DateTime dateTime23 = dateTime19.withWeekyear(174);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours((int) (byte) 0);
        boolean boolean36 = dateTime34.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime34.toString(dateTimeFormatter37);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology40, locale41, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField45 = null;
        dateTimeParserBucket44.saveField(dateTimeField45, (int) (short) 0);
        java.lang.Integer int48 = dateTimeParserBucket44.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket44.setZone(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((-1));
        org.joda.time.DateTime dateTime56 = dateTime52.plusHours((int) (byte) 100);
        boolean boolean58 = dateTime56.isBefore((long) ' ');
        int int59 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime56);
        long long61 = dateTimeZone49.nextTransition((long) (short) -1);
        boolean boolean62 = dateTime34.equals((java.lang.Object) dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        int[] intArray64 = localDateTime63.getValues();
        chronology27.validate((org.joda.time.ReadablePartial) localDateTime29, intArray64);
        org.joda.time.DateTimeField dateTimeField66 = chronology27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime67 = dateTime19.toMutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField68 = chronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType10.getField(chronology27);
        org.joda.time.DateTimeZone dateTimeZone70 = chronology27.getZone();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType9.getField(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:33:15 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "monthOfYear" + "'", str12, "monthOfYear");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:33:15.578+00:00:00.052" + "'", str38, "2022-02-22T07:33:15.578+00:00:00.052");
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[2022, 2, 22, 27195578]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test5284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5284");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        int int5 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime3.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property12 = dateTime9.centuryOfEra();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = property12.getAsText(locale13);
        java.lang.String str16 = locale7.getDisplayName(locale13);
        int int17 = property6.getMaximumTextLength(locale13);
        java.util.Set<java.lang.String> strSet18 = locale13.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        int int20 = strSet18.size();
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet21.spliterator();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar28 = dateTime27.toGregorianCalendar();
        int int29 = dateTime27.getMillisOfSecond();
        org.joda.time.DateTime.Property property30 = dateTime27.minuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime27.withYear(832);
        boolean boolean33 = strSet21.equals((java.lang.Object) 832);
        boolean boolean34 = strSet18.containsAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.Iterator<java.lang.String> strItor35 = strSet18.iterator();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime37.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withWeekyear((-1));
        org.joda.time.DateTime dateTime46 = dateTime42.withMillisOfDay(0);
        int int47 = dateTime46.getDayOfYear();
        boolean boolean48 = mutableDateTime40.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime50 = dateTime46.minusMonths(840);
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds((int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology65, locale66, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField70 = null;
        dateTimeParserBucket69.saveField(dateTimeField70, (int) (short) 0);
        java.lang.Integer int73 = dateTimeParserBucket69.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket69.setZone(dateTimeZone74);
        dateTimeParserBucket60.setZone(dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTimeParserBucket60.getZone();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone77);
        boolean boolean79 = dateTimeZone77.isFixed();
        long long82 = dateTimeZone77.adjustOffset(2846437113600010L, false);
        java.lang.String str84 = dateTimeZone77.getShortName(783L);
        java.util.Locale locale86 = java.util.Locale.GERMANY;
        java.lang.String str87 = locale86.getDisplayName();
        java.util.Set<java.lang.String> strSet88 = locale86.getUnicodeLocaleAttributes();
        java.lang.String str89 = locale86.getISO3Language();
        java.util.Locale locale90 = locale86.stripExtensions();
        java.lang.String str91 = dateTimeZone77.getName((long) 51, locale90);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(dateTimeZone77);
        boolean boolean93 = dateTime51.isEqual((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean94 = strSet18.remove((java.lang.Object) dateTime92);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 638 + "'", int5 == 638);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "20" + "'", str15, "20");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "coreano" + "'", str16, "coreano");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[ISOChronology[+10:00]]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[ISOChronology[+10:00]]");
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 638 + "'", int29 == 638);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strItor35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 53 + "'", int47 == 53);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNull(int73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 2846437113600010L + "'", long82 == 2846437113600010L);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00:00.052" + "'", str84, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "tedesco (Germania)" + "'", str87, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "deu" + "'", str89, "deu");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:00.052" + "'", str91, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test5285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5285");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (short) -1);
        int int30 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDateTime31.getFieldType(571);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 571");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test5286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5286");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        long long4 = dateTimeZone0.nextTransition(0L);
        java.lang.String str6 = dateTimeZone0.getNameKey(57L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime11.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DurationField durationField24 = chronology20.seconds();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17, chronology20);
        org.joda.time.DurationField durationField26 = chronology20.minutes();
        java.util.Locale locale27 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (-47282846), chronology20, locale27, (java.lang.Integer) 692);
        java.lang.String str30 = dateTimeZone0.getShortName(1644910287541L, locale27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
// flaky:         org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.052" + "'", str30, "+00:00:00.052");
    }

    @Test
    public void test5287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5287");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(734);
        int int6 = localDateTime5.size();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear(583);
        int int9 = localDateTime5.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 734000 + "'", int9 == 734000);
    }

    @Test
    public void test5288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5288");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours((int) (byte) 0);
        boolean boolean19 = dateTime17.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime17.toMutableDateTime(dateTimeZone20);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = dateTimeZone20.getName((long) (byte) 1, locale24);
        java.lang.String str27 = locale24.getUnicodeLocaleType("52");
        java.lang.String str28 = locale13.getDisplayLanguage(locale24);
        java.util.Calendar calendar29 = dateTime11.toCalendar(locale13);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime11.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        org.joda.time.DateTime dateTime36 = dateTime32.withMillisOfDay(0);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfMonth();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime51.plusHours((int) (byte) 100);
        boolean boolean57 = dateTime55.isBefore((long) ' ');
        int int58 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime55);
        int int60 = dateTimeZone48.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime61 = dateTime36.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.withWeekyear((-1));
        boolean boolean66 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime65);
        java.util.Date date67 = dateTime36.toDate();
        org.joda.time.DateTime dateTime69 = dateTime36.withYear(687);
        org.joda.time.LocalTime localTime70 = dateTime36.toLocalTime();
        org.joda.time.DateTime dateTime71 = dateTime11.withFields((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.DateTime dateTime73 = dateTime71.withYear(26769930);
        org.joda.time.DateTime.Property property74 = dateTime71.millisOfDay();
        org.joda.time.DateTime dateTime76 = dateTime71.plusDays(5067);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4" + "'", str28, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1586849596048,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2020,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=105,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=16,MILLISECOND=100,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test5289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5289");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime8.getZone();
        int int14 = dateTimeZone12.getOffset((long) 569);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(194);
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 419512, dateTimeZone12);
        java.lang.String str24 = dateTimeZone12.getID();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone44);
        dateTimeParserBucket30.setZone(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone44);
        long long49 = dateTimeZone44.previousTransition(1598885568000L);
        java.lang.String str50 = dateTimeZone44.getID();
        java.util.TimeZone timeZone51 = dateTimeZone44.toTimeZone();
        long long53 = dateTimeZone12.getMillisKeepLocal(dateTimeZone44, (-844499294236799965L));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1598885568000L + "'", long49 == 1598885568000L);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.052" + "'", str50, "+00:00:00.052");
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-844499294236800017L) + "'", long53 == (-844499294236800017L));
    }

    @Test
    public void test5290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5290");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.lang.String str24 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.toString();
        int int27 = dateTimeZone22.getOffsetFromLocal((long) 635);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone22);
        int int30 = dateTimeZone22.getOffset(26951658L);
        java.lang.String str31 = dateTimeZone22.toString();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.052" + "'", str24, "+00:00:00.052");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.052" + "'", str25, "+00:00:00.052");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.052" + "'", str31, "+00:00:00.052");
    }

    @Test
    public void test5291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5291");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.lang.String str12 = locale10.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale10.getUnicodeLocaleType("2022-02-22T07:26:54.852+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T07:26:54.852+00:00:00.052");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "italiano" + "'", str12, "italiano");
    }

    @Test
    public void test5292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5292");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime10.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours((int) (byte) 100);
        boolean boolean34 = dateTime32.isBefore((long) ' ');
        int int35 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime32);
        long long37 = dateTimeZone25.nextTransition((long) (short) -1);
        boolean boolean38 = dateTime10.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray40 = localDateTime39.getValues();
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime5, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology3.yearOfEra();
        org.joda.time.DurationField durationField44 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology3.minuteOfHour();
        boolean boolean46 = dateTimeField45.isLenient();
        int int48 = dateTimeField45.get((-3514293845L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:33:16.247+00:00:00.052" + "'", str14, "2022-02-22T07:33:16.247+00:00:00.052");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 22, 27196247]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 48 + "'", int48 == 48);
    }

    @Test
    public void test5293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5293");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale20.getDisplayName();
        dateTimeParserBucket11.saveField(dateTimeFieldType18, "97", locale20);
        int int23 = localDateTime3.get(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        java.util.GregorianCalendar gregorianCalendar27 = dateTime26.toGregorianCalendar();
        org.joda.time.Chronology chronology28 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyearOfCentury();
        org.joda.time.DurationField durationField31 = chronology28.hours();
        org.joda.time.DurationField durationField32 = durationFieldType24.getField(chronology28);
        long long35 = durationField32.subtract(26773334L, 27040);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tedesco (Germania)" + "'", str21, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-2336229226666L) + "'", long35 == (-2336229226666L));
    }

    @Test
    public void test5294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5294");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        dateTimeParserBucket6.setZone(dateTimeZone17);
        java.lang.String str29 = dateTimeZone17.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 169, dateTimeZone17);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundFloorCopy();
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.052" + "'", str29, "+00:00:00.052");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test5295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5295");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 590);
        dateTimeParserBucket5.setOffset(453);
        java.lang.Object obj21 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 466);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str26 = durationFieldType25.toString();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfSecond();
        org.joda.time.DurationField durationField33 = chronology29.seconds();
        org.joda.time.DurationField durationField34 = chronology29.minutes();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.era();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.monthOfYear();
        org.joda.time.DurationField durationField37 = durationFieldType25.getField(chronology29);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        java.lang.String str42 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = dateTimeField43.getAsShortText((long) (byte) -1, locale45);
        java.util.Locale locale47 = locale45.stripExtensions();
        java.lang.String str48 = locale45.toLanguageTag();
        java.lang.String str49 = locale45.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology29, locale45, (java.lang.Integer) 992, 405);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket52.getZone();
        dateTimeParserBucket5.setZone(dateTimeZone53);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tedesco (Germania)" + "'", str15, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weeks" + "'", str26, "weeks");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[UTC]" + "'", str42, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ko" + "'", str48, "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(dateTimeZone53);
    }

    @Test
    public void test5296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5296");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime7 = property6.roundCeilingCopy();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        java.util.Locale locale15 = dateTimeParserBucket13.getLocale();
        boolean boolean16 = property6.equals((java.lang.Object) locale15);
        org.joda.time.DateTime dateTime17 = property6.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField18 = property6.getField();
        org.joda.time.DateTimeField dateTimeField19 = property6.getField();
        org.joda.time.ReadableInstant readableInstant20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = property6.compareTo(readableInstant20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 324 + "'", int5 == 324);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test5297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5297");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        dateTimeParserBucket15.saveField(dateTimeFieldType19, "it", locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology5, locale21, (java.lang.Integer) 9, 538);
        java.lang.String str28 = nameProvider0.getShortName(locale21, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        dateTimeParserBucket37.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket37.getZone();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone54);
        boolean boolean56 = dateTimeZone54.isFixed();
        long long59 = dateTimeZone54.adjustOffset(2846437113600010L, false);
        java.lang.String str61 = dateTimeZone54.getShortName(783L);
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str66 = locale63.getISO3Language();
        java.util.Locale locale67 = locale63.stripExtensions();
        java.lang.String str68 = dateTimeZone54.getName((long) 51, locale67);
        java.lang.String str69 = locale67.getDisplayVariant();
        java.lang.String str72 = nameProvider0.getShortName(locale67, "749", "DateTimeField[millisOfSecond]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2846437113600010L + "'", long59 == 2846437113600010L);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.052" + "'", str61, "+00:00:00.052");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tedesco (Germania)" + "'", str64, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "deu" + "'", str66, "deu");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.052" + "'", str68, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test5298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5298");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getRangeDurationType();
        boolean boolean6 = localDateTime1.isSupported(dateTimeFieldType4);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withPeriodAdded(readablePeriod7, 734);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test5299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5299");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = chronology3.hours();
        org.joda.time.DurationField durationField8 = chronology3.weeks();
        org.joda.time.DurationField durationField9 = chronology3.years();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 26781995, chronology3, locale10);
        java.lang.Integer int12 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        int int19 = dateTimeParserBucket18.getOffset();
        long long20 = dateTimeParserBucket18.computeMillis();
        dateTimeParserBucket18.setOffset(26757772);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int30 = dateTime28.get(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int35 = localDateTime32.get(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        boolean boolean42 = localDateTime40.isSupported(dateTimeFieldType41);
        boolean boolean43 = localDateTime32.isSupported(dateTimeFieldType41);
        int int44 = dateTime28.get(dateTimeFieldType41);
        dateTimeParserBucket18.saveField(dateTimeFieldType41, 44);
        dateTimeParserBucket11.saveField(dateTimeFieldType41, 26812);
        dateTimeParserBucket11.setPivotYear((java.lang.Integer) 2021);
        java.util.Locale locale51 = dateTimeParserBucket11.getLocale();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket11.getZone();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-52L) + "'", long20 == (-52L));
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 453 + "'", int30 == 453);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertNotNull(dateTimeZone52);
    }

    @Test
    public void test5300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5300");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.util.Locale locale10 = dateTimeParserBucket6.getLocale();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale13 = new java.util.Locale("Property[millisOfSecond]");
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = chronology19.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        java.lang.String str28 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.weekyearOfCentury();
        java.lang.String str40 = dateTimeField38.getAsShortText(10L);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = dateTimeField38.getAsText(0L, locale42);
        java.lang.String str44 = dateTimeField32.getAsText(0, locale42);
        java.util.Locale locale45 = java.util.Locale.KOREA;
        int int46 = dateTimeField32.getMaximumShortTextLength(locale45);
        java.lang.String str48 = locale45.getExtension('u');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((-62118328893994L), chronology19, locale45, (java.lang.Integer) 589);
        java.lang.String str51 = locale45.getLanguage();
        java.util.Locale.setDefault(category0, locale45);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals(locale13.toString(), "property[millisofsecond]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "property[millisofsecond]");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "70" + "'", str40, "70");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "70" + "'", str43, "70");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 7 + "'", int46 == 7);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ko" + "'", str51, "ko");
    }

    @Test
    public void test5301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5301");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 590);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.halfdayOfDay();
        org.joda.time.DurationField durationField25 = chronology21.millis();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology21.getZone();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMonths((int) (byte) 100);
        int int32 = localDateTime31.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray35 = localDateTime34.getValues();
        chronology21.validate((org.joda.time.ReadablePartial) localDateTime31, intArray35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField38 = chronology21.clockhourOfHalfday();
        dateTimeParserBucket5.saveField(dateTimeField38, 344);
        long long42 = dateTimeField38.roundFloor((long) 384);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str15, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 52]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test5302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5302");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean15 = localDateTime11.equals((java.lang.Object) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int20 = localDateTime17.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime14.property(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int27 = localDateTime23.get(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime23.year();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis(0);
        boolean boolean34 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime14.plusMillis(19);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime14.withPeriodAdded(readablePeriod37, 294);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime14.withMillisOfSecond(345);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusYears(4);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusHours(840);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.minus(readableDuration49);
        int int51 = localDateTime45.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime53 = localDateTime45.withMinuteOfHour((-574));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -574 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 66 + "'", int51 == 66);
    }

    @Test
    public void test5303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5303");
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology6, locale7, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = null;
        dateTimeParserBucket10.saveField(dateTimeField11, (int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        java.lang.Integer int23 = dateTimeParserBucket19.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket19.setZone(dateTimeZone24);
        dateTimeParserBucket10.setZone(dateTimeZone24);
        boolean boolean27 = dateTimeZone24.isFixed();
        boolean boolean28 = dateTimeZone24.isFixed();
        long long30 = dateTimeZone24.convertUTCToLocal((-1L));
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(213, 228, (-1), 634, (-41), dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 634 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 51L + "'", long30 == 51L);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test5304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5304");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readablePeriod14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minus(readableDuration16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.weekOfWeekyear();
        int int19 = property18.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime20 = property18.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMinutes(2021);
        int int23 = localDateTime22.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        dateTimeParserBucket38.saveField(dateTimeFieldType42, "it", locale44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime32.property(dateTimeFieldType42);
        boolean boolean47 = localDateTime22.isSupported(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test5305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5305");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        java.lang.String str9 = property8.getName();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfDay();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(648);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds(569);
        org.joda.time.DateTime dateTime24 = dateTime20.plusDays(575);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        dateTimeParserBucket31.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket31.getZone();
        long long50 = dateTimeZone48.previousTransition((long) 593);
        org.joda.time.DateTime dateTime51 = dateTime24.withZone(dateTimeZone48);
        int int52 = property8.getDifference((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime53 = property8.getDateTime();
        int int54 = dateTime53.getWeekyear();
        org.joda.time.DateTime.Property property55 = dateTime53.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 593L + "'", long50 == 593L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-49641120) + "'", int52 == (-49641120));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test5306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5306");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.halfdayOfDay();
        java.lang.String str42 = dateTimeField40.getAsShortText((-194399498L));
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 35999947L + "'", long38 == 35999947L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PM" + "'", str42, "PM");
    }

    @Test
    public void test5307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5307");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        dateTimeParserBucket5.setOffset(1);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 180);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property31 = dateTime28.centuryOfEra();
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = property31.getAsText(locale32);
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime25, (-1), locale32);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = dateTimeField21.getAsShortText((int) (byte) 10, locale37);
        long long41 = dateTimeField21.roundHalfFloor((long) 122);
        long long43 = dateTimeField21.roundHalfEven((long) 1);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        java.util.GregorianCalendar gregorianCalendar51 = dateTime50.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime50.withChronology(chronology54);
        boolean boolean56 = localDateTime48.equals((java.lang.Object) dateTime55);
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.lang.String str59 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime48, (int) '4', locale58);
        dateTimeParserBucket5.saveField(dateTimeField21, 195);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = dateTimeField21.getDifference(49140805L, (-62167962410512L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 62168011551");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "it" + "'", str33, "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "20" + "'", str34, "20");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1" + "'", str35, "-1");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "10" + "'", str39, "10");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(gregorianCalendar51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "52" + "'", str59, "52");
    }

    @Test
    public void test5308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5308");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime.Property property5 = dateTime3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime3.getZone();
        long long8 = dateTimeZone6.nextTransition((long) 541);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology11, locale12, (java.lang.Integer) 227);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology21.seconds();
        org.joda.time.DurationField durationField26 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = chronology21.minutes();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale41 = java.util.Locale.ROOT;
        dateTimeParserBucket35.saveField(dateTimeFieldType39, "it", locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(673L, chronology21, locale41, (java.lang.Integer) 10, 453);
        java.lang.String str46 = locale12.getDisplayVariant(locale41);
        java.lang.String str47 = dateTimeZone6.getShortName(53L, locale12);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withDayOfYear(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withDate(721, 26848112, 654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26848112 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 541L + "'", long8 == 541L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u671d\u9c9c\u6587" + "'", str14, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ko" + "'", str15, "ko");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.052" + "'", str47, "+00:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test5309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5309");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.util.Locale locale9 = dateTimeParserBucket5.getLocale();
        java.util.Locale locale10 = dateTimeParserBucket5.getLocale();
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.getVariant();
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str11, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test5310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5310");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        org.joda.time.DateTime dateTime31 = property24.roundHalfFloorCopy();
        boolean boolean33 = dateTime31.isAfter((long) 441);
        org.joda.time.LocalDateTime localDateTime34 = dateTime31.toLocalDateTime();
        org.joda.time.DateTime dateTime36 = dateTime31.withMillis((long) 966);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime36.toString(dateTimeFormatter37);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "26" + "'", str29, "26");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:01.018+00:00:00.052" + "'", str38, "1970-01-01T00:00:01.018+00:00:00.052");
    }

    @Test
    public void test5311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5311");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime3.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        long long30 = dateTimeZone18.nextTransition((long) (short) -1);
        boolean boolean31 = dateTime3.equals((java.lang.Object) dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMillis(53);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        java.lang.Integer int55 = dateTimeParserBucket51.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket51.setZone(dateTimeZone56);
        dateTimeParserBucket42.setZone(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket42.getZone();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withCenturyOfEra(7);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.plus(readableDuration63);
        int int65 = localDateTime64.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusMillis(603);
        int int73 = localDateTime72.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.plusSeconds(170);
        boolean boolean76 = localDateTime64.isAfter((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now(chronology79);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plus(readableDuration81);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.dayOfMonth();
        long long84 = property83.remainder();
        org.joda.time.LocalDateTime localDateTime85 = property83.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.minusDays(2022);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.plusWeeks(19045);
        int int92 = localDateTime91.getYear();
        int int93 = localDateTime91.getMillisOfSecond();
        boolean boolean94 = localDateTime75.isEqual((org.joda.time.ReadablePartial) localDateTime91);
        boolean boolean95 = property35.equals((java.lang.Object) localDateTime91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime97 = property35.setCopy(26796264);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26796264 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:33:17.334+00:00:00.052" + "'", str7, "2022-02-22T07:33:17.334+00:00:00.052");
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 27197282L + "'", long84 == 27197282L);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2381 + "'", int92 == 2381);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 282 + "'", int93 == 282);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test5312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5312");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekOfWeekyear();
        java.lang.String str6 = chronology4.toString();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("coreano");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("100");
        java.util.Locale.Builder builder14 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder11.clear();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder18 = builder16.setScript("days");
        java.util.Locale locale19 = builder18.build();
        java.util.Locale locale22 = new java.util.Locale("DurationField[minutes]", "20");
        java.lang.String str23 = locale22.getDisplayVariant();
        java.lang.String str24 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 580, chronology4, locale19, (java.lang.Integer) 295);
        org.joda.time.DateTimeField dateTimeField27 = chronology4.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str6, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals(locale22.toString(), "durationfield[minutes]_20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test5313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5313");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((-592L));
        int int5 = property2.getMinimumValue();
        java.lang.String str6 = property2.getAsString();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(20);
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(26751557);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(9);
        boolean boolean35 = property2.equals((java.lang.Object) dateTime32);
        int int36 = dateTime32.getDayOfWeek();
        org.joda.time.DateTime.Property property37 = dateTime32.year();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test5314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5314");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        java.lang.String str6 = dateTimeField4.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        int int12 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours(980);
        java.lang.String str20 = localDateTime18.toString("-1");
        int int21 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusWeeks((-593));
        int int32 = localDateTime30.getValue(1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMinutes(52);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekOfWeekyear(43);
        boolean boolean37 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getRangeDurationType();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology41, locale42, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField46 = null;
        dateTimeParserBucket45.saveField(dateTimeField46, (int) (short) 0);
        java.lang.Integer int49 = dateTimeParserBucket45.getOffsetInteger();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket45.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        boolean boolean52 = durationFieldType39.isSupported(chronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime18.withFieldAdded(durationFieldType39, 86399);
        java.lang.String str55 = durationFieldType39.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "days" + "'", str55, "days");
    }

    @Test
    public void test5315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5315");
        java.util.Locale locale1 = java.util.Locale.GERMANY;
        java.lang.String str2 = locale1.getDisplayName();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology6.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        boolean boolean12 = strSet3.contains((java.lang.Object) chronology6);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology6, locale13, (java.lang.Integer) 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField16.set(5901638400533L, "2022-02-22T17:28:14.941+10:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:28:14.941+10:00\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tedesco (Germania)" + "'", str2, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test5316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5316");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("-1");
        int int2 = dateTime1.getYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusHours((int) (byte) 0);
        boolean boolean10 = dateTime8.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime8.toMutableDateTime(dateTimeZone11);
        java.lang.String str14 = dateTimeZone11.toString();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis(603);
        int int18 = localDateTime17.getYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks(853);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minus(readablePeriod23);
        int int25 = localDateTime20.getMillisOfDay();
        org.joda.time.Chronology chronology26 = localDateTime20.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime1.toDateTime(chronology26);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology26.getDateTimeMillis(948, 998, 26926, 588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 998 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-0001-01-01T00:00:00.000+00:00:00.052" + "'", str4, "-0001-01-01T00:00:00.000+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.052" + "'", str14, "+00:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 27197106 + "'", int25 == 27197106);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test5317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5317");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.minus(readableDuration4);
        int int6 = dateTime5.getSecondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket18.setZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime26.plusHours((int) (byte) 100);
        boolean boolean32 = dateTime30.isBefore((long) ' ');
        int int33 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime30);
        dateTimeParserBucket12.setZone(dateTimeZone23);
        java.lang.String str35 = dateTimeZone23.toString();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime5.toMutableDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekyear((-1));
        org.joda.time.DateTime dateTime54 = dateTime50.plusHours((int) (byte) 100);
        boolean boolean56 = dateTime54.isBefore((long) ' ');
        int int57 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime59 = dateTime54.minusYears(20);
        org.joda.time.DateTime.Property property60 = dateTime59.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusHours((int) (byte) 0);
        java.util.Date date65 = dateTime62.toDate();
        org.joda.time.DateTime.Property property66 = dateTime62.dayOfMonth();
        org.joda.time.DateTime.Property property67 = dateTime62.dayOfMonth();
        int int68 = property60.getDifference((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime70 = property60.addToCopy(52L);
        org.joda.time.DateTime dateTime72 = property60.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime74 = dateTime72.withMillisOfDay(585);
        org.joda.time.DateTime dateTime76 = dateTime72.minusDays(564);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMinutes(0);
        boolean boolean79 = dateTimeZone23.equals((java.lang.Object) 0);
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder81 = builder80.clearExtensions();
        java.util.Locale.Builder builder83 = builder81.setLanguageTag("coreano");
        java.util.Locale.Builder builder84 = builder83.clearExtensions();
        boolean boolean85 = dateTimeZone23.equals((java.lang.Object) builder84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder88 = builder84.setUnicodeLocaleKeyword("2035-03-08T07:30:51.322Z", "2000-02-22T07:32:41.268Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2035-03-08T07:30:51.322Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 17 + "'", int6 == 17);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.052" + "'", str35, "+00:00:00.052");
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(date65);
// flaky:         org.junit.Assert.assertEquals(date65.toString(), "Tue Feb 22 07:33:17 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-175220) + "'", int68 == (-175220));
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test5318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5318");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours((int) (byte) 0);
        boolean boolean8 = dateTime6.isEqual((long) (short) 100);
        int int9 = dateTime6.getWeekyear();
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyear();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.getDefault(category14);
        java.util.Locale.setDefault(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((-37742111999221L), chronology10, locale16, (java.lang.Integer) 508);
        org.joda.time.DateTimeField dateTimeField20 = chronology10.era();
        boolean boolean21 = durationFieldType0.isSupported(chronology10);
        org.joda.time.DateTimeField dateTimeField22 = chronology10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        java.lang.String str29 = dateTimeField27.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        int int35 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean38 = localDateTime34.equals((java.lang.Object) localDateTime37);
        int int39 = localDateTime37.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.withPeriodAdded(readablePeriod40, 950);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getRangeDurationType();
        java.lang.String str45 = durationFieldType44.getName();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withFieldAdded(durationFieldType44, (int) '4');
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology51);
        java.lang.String str53 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.weekyear();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(chronology51);
        int[] intArray58 = localDateTime57.getValues();
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField66 = null;
        dateTimeParserBucket65.saveField(dateTimeField66, (int) (short) 0);
        java.lang.Integer int69 = dateTimeParserBucket65.getOffsetInteger();
        org.joda.time.Chronology chronology70 = dateTimeParserBucket65.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekOfWeekyear();
        long long73 = dateTimeField71.remainder(58999L);
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.lang.String str76 = locale74.getExtension('x');
        int int77 = dateTimeField71.getMaximumShortTextLength(locale74);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = dateTimeField22.set((org.joda.time.ReadablePartial) localDateTime47, 596, intArray58, "giapponese", locale74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"giapponese\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "years" + "'", str1, "years");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "70" + "'", str29, "70");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyears" + "'", str45, "weekyears");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 22, 27197751]");
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 259258999L + "'", long73 == 259258999L);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test5319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5319");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime.Property property30 = dateTime27.yearOfCentury();
        org.joda.time.DateTime dateTime32 = dateTime27.minusMinutes(26751806);
        org.joda.time.DateTime.Property property33 = dateTime27.millisOfSecond();
        int int34 = dateTime27.getWeekyear();
        long long35 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.plusHours((int) (byte) 100);
        boolean boolean43 = dateTime41.isBefore((long) ' ');
        org.joda.time.DateTime.Property property44 = dateTime41.weekOfWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime41.withYearOfEra(51);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime41.plus(readableDuration47);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withWeekyear((-1));
        org.joda.time.DateTime dateTime55 = dateTime53.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime62 = dateTime60.withMinuteOfHour((int) (short) 10);
        int int63 = dateTime62.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime66 = dateTime62.withDurationAdded(readableDuration64, (int) (byte) 0);
        boolean boolean67 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = dateTime55.plusYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str71 = dateTimeFieldType70.getName();
        java.lang.String str72 = dateTimeFieldType70.getName();
        int int73 = dateTime69.get(dateTimeFieldType70);
        org.joda.time.DateTime.Property property74 = dateTime48.property(dateTimeFieldType70);
        org.joda.time.DateTime.Property property75 = dateTime27.property(dateTimeFieldType70);
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime27.toMutableDateTime();
        org.joda.time.DateTime dateTime78 = dateTime27.plusDays(27059185);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-630790397841L) + "'", long35 == (-630790397841L));
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20 + "'", int63 == 20);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hourOfHalfday" + "'", str71, "hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hourOfHalfday" + "'", str72, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test5320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5320");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        java.util.Date date16 = dateTime13.toDate();
        org.joda.time.DateTime.Property property17 = dateTime13.dayOfMonth();
        org.joda.time.DateTime.Property property18 = dateTime13.dayOfMonth();
        java.lang.String str19 = property18.getAsString();
        boolean boolean20 = localDateTime11.equals((java.lang.Object) property18);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DurationField durationField29 = chronology25.seconds();
        org.joda.time.DurationField durationField30 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.weekOfWeekyear();
        org.joda.time.DurationField durationField33 = chronology25.minutes();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology35, locale36, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        dateTimeParserBucket39.saveField(dateTimeFieldType43, "it", locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(673L, chronology25, locale45, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 26759084, chronology50, locale51, (java.lang.Integer) 597);
        java.lang.String str54 = property18.getAsText(locale51);
        java.util.Locale.Builder builder55 = builder2.setLocale(locale51);
        java.util.Set<java.lang.String> strSet56 = locale51.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet57 = locale51.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Feb 22 07:33:17 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "22" + "'", str54, "22");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strSet57);
    }

    @Test
    public void test5321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5321");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(441);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        dateTimeParserBucket13.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        java.lang.String str25 = dateTimeField23.getAsShortText((long) 28);
        dateTimeParserBucket13.saveField(dateTimeField23, 100);
        boolean boolean29 = dateTimeField23.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime34 = property32.addToCopy((-592L));
        int int35 = property32.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime37 = property32.addToCopy(593);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime37, 608, locale39);
        org.joda.time.Chronology chronology41 = localDateTime37.getChronology();
        boolean boolean42 = dateTimeFieldType7.isSupported(chronology41);
        org.joda.time.DateTime.Property property43 = dateTime3.property(dateTimeFieldType7);
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property49 = dateTime46.centuryOfEra();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = property49.getAsText(locale50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusHours((int) (byte) 0);
        boolean boolean58 = dateTime56.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime56.toMutableDateTime(dateTimeZone59);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = dateTimeZone59.getName((long) (byte) 1, locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = property49.getAsShortText(locale63);
        java.lang.String str67 = locale63.getDisplayScript();
        java.lang.String str70 = nameProvider44.getName(locale63, "\u671d\u9c9c\u6587", "+00:00:00.052");
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.lang.String str72 = locale71.getDisplayName();
        boolean boolean73 = locale71.hasExtensions();
        java.lang.String str76 = nameProvider44.getShortName(locale71, "2022-02-22T07:25:58.449+00:00:00.052", "java.io.IOException: ISOChronology[+00:00:00.052]");
        java.util.Locale locale78 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale79 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean80 = locale79.hasExtensions();
        java.lang.String str81 = locale78.getDisplayLanguage(locale79);
        java.lang.String str84 = nameProvider44.getShortName(locale79, "java.io.IOException: 2022-02-22T07:26:02.913+00:00:00.052", "2022");
        int int85 = property43.getMaximumShortTextLength(locale79);
        long long86 = property43.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "608" + "'", str40, "608");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "it" + "'", str51, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "20" + "'", str52, "20");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.052" + "'", str64, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "20" + "'", str66, "20");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tedesco (Germania)" + "'", str72, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5 + "'", int85 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 261L + "'", long86 == 261L);
    }

    @Test
    public void test5322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5322");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime3.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears(22);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        int int21 = dateTimeParserBucket19.getOffset();
        boolean boolean23 = dateTimeParserBucket19.restoreState((java.lang.Object) (-31535999000L));
        dateTimeParserBucket19.setPivotYear((java.lang.Integer) 28);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime12.toMutableDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyearOfCentury();
        java.lang.String str35 = dateTimeField33.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfEvenCopy();
        int int41 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDateTime40.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime40);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.Chronology chronology45 = chronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.halfdayOfDay();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = locale47.toLanguageTag();
        int int50 = dateTimeField46.getMaximumTextLength(locale47);
        long long53 = dateTimeField46.add(920L, 187);
        long long55 = dateTimeField46.roundFloor(26752L);
        java.util.Locale locale57 = new java.util.Locale("tedesco (Germania)");
        int int58 = dateTimeField46.getMaximumShortTextLength(locale57);
        int int59 = mutableDateTime28.get(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "70" + "'", str35, "70");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "it" + "'", str48, "it");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "it" + "'", str49, "it");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 8078400920L + "'", long53 == 8078400920L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals(locale57.toString(), "tedesco (germania)");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test5323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5323");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        int int26 = dateTimeZone23.getStandardOffset((-2650616L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        java.util.TimeZone.setDefault(timeZone28);
        int int31 = timeZone28.getOffset((-1510245249275L));
        boolean boolean32 = dateTimeZone23.equals((java.lang.Object) timeZone28);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str34 = dateTime33.toString();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T07:33:18.359+00:00:00.052" + "'", str34, "2022-02-22T07:33:18.359+00:00:00.052");
    }

    @Test
    public void test5324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5324");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime10.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours((int) (byte) 100);
        boolean boolean34 = dateTime32.isBefore((long) ' ');
        int int35 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime32);
        long long37 = dateTimeZone25.nextTransition((long) (short) -1);
        boolean boolean38 = dateTime10.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray40 = localDateTime39.getValues();
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime5, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology3.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        long long47 = chronology3.add(readablePeriod44, (long) 180, 292);
        org.joda.time.DateTimeField dateTimeField48 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology3.dayOfWeek();
        int int50 = dateTimeField49.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:33:18.370+00:00:00.052" + "'", str14, "2022-02-22T07:33:18.370+00:00:00.052");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 22, 27198370]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 180L + "'", long47 == 180L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test5325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5325");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime17.weekOfWeekyear();
        org.joda.time.DateTime dateTime24 = property23.roundCeilingCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = property25.setCopy("1970-01-01T00:00:00.759+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.759+00:00:00.052\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test5326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5326");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.halfdayOfDay();
        long long42 = dateTimeField40.roundHalfEven(1645487999948L);
        long long45 = dateTimeField40.getDifferenceAsLong((long) 697, 1586849238216L);
        java.util.Locale locale48 = new java.util.Locale("354");
        java.lang.String str49 = dateTimeField40.getAsShortText((-19371716986194L), locale48);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 35999947L + "'", long38 == 35999947L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645487999948L + "'", long42 == 1645487999948L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-36732L) + "'", long45 == (-36732L));
        org.junit.Assert.assertEquals(locale48.toString(), "354");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AM" + "'", str49, "AM");
    }

    @Test
    public void test5327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5327");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property4.addToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime10 = dateTime6.withWeekyear(174);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours((int) (byte) 0);
        boolean boolean23 = dateTime21.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = dateTime21.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        java.lang.Integer int35 = dateTimeParserBucket31.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket31.setZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        org.joda.time.DateTime dateTime43 = dateTime39.plusHours((int) (byte) 100);
        boolean boolean45 = dateTime43.isBefore((long) ' ');
        int int46 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime43);
        long long48 = dateTimeZone36.nextTransition((long) (short) -1);
        boolean boolean49 = dateTime21.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int[] intArray51 = localDateTime50.getValues();
        chronology14.validate((org.joda.time.ReadablePartial) localDateTime16, intArray51);
        org.joda.time.DateTimeField dateTimeField53 = chronology14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime6.toMutableDateTime(chronology14);
        org.joda.time.DurationField durationField55 = chronology14.days();
        long long57 = durationField55.getMillis(172);
        long long59 = durationField55.getMillis((long) 321);
        boolean boolean60 = durationField55.isSupported();
        long long63 = durationField55.subtract((-1695368017313L), 27072724);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T07:33:18.480+00:00:00.052" + "'", str25, "2022-02-22T07:33:18.480+00:00:00.052");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2022, 2, 22, 27198480]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 14860800000L + "'", long57 == 14860800000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 27734400000L + "'", long59 == 27734400000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-2340778721617313L) + "'", long63 == (-2340778721617313L));
    }

    @Test
    public void test5328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5328");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DurationField durationField10 = chronology8.years();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test5329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5329");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 59, false);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.Chronology chronology45 = mutableDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31, chronology45);
        org.joda.time.DurationField durationField47 = chronology45.weeks();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.hourOfDay();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        java.lang.Integer int56 = dateTimeParserBucket54.getOffsetInteger();
        java.util.Locale locale57 = dateTimeParserBucket54.getLocale();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology59, locale60, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField64 = null;
        dateTimeParserBucket63.saveField(dateTimeField64, (int) (short) 0);
        java.lang.Integer int67 = dateTimeParserBucket63.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket63.setZone(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekyear((-1));
        org.joda.time.DateTime dateTime75 = dateTime71.plusHours((int) (byte) 100);
        boolean boolean77 = dateTime75.isBefore((long) ' ');
        int int78 = dateTimeZone68.getOffset((org.joda.time.ReadableInstant) dateTime75);
        long long80 = dateTimeZone68.nextTransition((long) (short) -1);
        dateTimeParserBucket54.setZone(dateTimeZone68);
        java.lang.String str83 = dateTimeZone68.getNameKey(490L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.Chronology chronology85 = chronology45.withZone(dateTimeZone68);
        long long89 = dateTimeZone68.convertLocalToUTC(1586849192006L, false, (-9072000593L));
        int int91 = dateTimeZone68.getStandardOffset(952L);
        long long94 = dateTimeZone68.convertLocalToUTC(651L, true);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 7L + "'", long30 == 7L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1586849191954L + "'", long89 == 1586849191954L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 52 + "'", int91 == 52);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 599L + "'", long94 == 599L);
    }

    @Test
    public void test5330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5330");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusHours((int) (byte) 0);
        boolean boolean9 = dateTime7.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        boolean boolean14 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 603, chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology16);
        long long25 = chronology16.add(4519556595L, (-489598031L), 21);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology16.yearOfEra();
        org.joda.time.DurationField durationField28 = durationFieldType1.getField(chronology16);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        dateTimeParserBucket34.setZone(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket34.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property56 = dateTime53.year();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property61 = dateTime58.centuryOfEra();
        org.joda.time.DateTime dateTime63 = dateTime58.minusYears(558);
        boolean boolean64 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime58);
        int int65 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime66 = dateTime58.toLocalDateTime();
        org.joda.time.Chronology chronology67 = dateTime58.getChronology();
        org.joda.time.DurationField durationField68 = durationFieldType1.getField(chronology67);
        java.lang.String str69 = durationFieldType1.toString();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int75 = localDateTime71.get(dateTimeFieldType74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.minusMillis(99);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(chronology80);
        org.joda.time.DateTimeField dateTimeField82 = chronology80.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.millisOfSecond();
        org.joda.time.DurationField durationField84 = chronology80.seconds();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime77, chronology80);
        org.joda.time.DateTimeField dateTimeField86 = chronology80.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField87 = chronology80.hourOfDay();
        org.joda.time.DateTimeField dateTimeField88 = chronology80.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField89 = chronology80.dayOfMonth();
        boolean boolean90 = durationFieldType1.isSupported(chronology80);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "months" + "'", str2, "months");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str17, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-5762002056L) + "'", long25 == (-5762002056L));
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "months" + "'", str69, "months");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test5331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5331");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DateTime dateTime39 = property34.addToCopy(902);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours((int) (byte) 0);
        boolean boolean45 = dateTime43.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = dateTime43.toString(dateTimeFormatter46);
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale49.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("20");
        java.lang.String str53 = locale49.getDisplayVariant(locale52);
        java.lang.String str54 = dateTime43.toString("1969", locale49);
        org.joda.time.DateTime.Property property55 = dateTime43.hourOfDay();
        org.joda.time.DateTime dateTime56 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime58 = dateTime43.plusMonths(485);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime dateTime61 = dateTime58.minusWeeks(799);
        boolean boolean62 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime61);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[secondOfDay]" + "'", str37, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T07:33:18.621+00:00:00.052" + "'", str47, "2022-02-22T07:33:18.621+00:00:00.052");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str50, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1969" + "'", str54, "1969");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2920779198569L + "'", long59 == 2920779198569L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test5332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5332");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology3);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.plus(readableDuration29);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test5333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5333");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        java.lang.String str10 = chronology8.toString();
        org.joda.time.DurationField durationField11 = chronology8.hours();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField18 = chronology14.seconds();
        org.joda.time.DurationField durationField19 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.era();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readablePeriod25);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 820, chronology8, locale27);
        boolean boolean31 = localDateTime4.equals((java.lang.Object) chronology8);
        org.joda.time.DurationField durationField32 = chronology8.minutes();
        org.joda.time.DurationField durationField33 = chronology8.minutes();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AD" + "'", str28, "AD");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test5334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5334");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology28.getZone();
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology28);
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withMillisOfDay(242);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = localDateTime24.toString("java.io.IOException: java.io.IOException: java.io.IOException");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test5335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5335");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.lang.String str4 = dateTimeFieldType3.toString();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withField(dateTimeFieldType3, 355);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMinutes(724);
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.DurationField durationField19 = chronology15.seconds();
        org.joda.time.DurationField durationField20 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property36 = dateTime33.centuryOfEra();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = property36.getAsText(locale37);
        java.lang.String str40 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime30, (-1), locale37);
        java.util.Locale.setDefault(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology15, locale37, (java.lang.Integer) 170, (int) (byte) 10);
        java.util.Locale locale45 = locale37.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime47.toMutableDateTime();
        int int51 = dateTime47.getMillisOfSecond();
        org.joda.time.DateTime.Property property52 = dateTime47.centuryOfEra();
        org.joda.time.DateTime dateTime53 = property52.roundCeilingCopy();
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology60 = dateTimeParserBucket59.getChronology();
        java.util.Locale locale61 = dateTimeParserBucket59.getLocale();
        boolean boolean62 = property52.equals((java.lang.Object) locale61);
        java.lang.String str63 = locale45.getDisplayName(locale61);
        int int64 = property10.getMaximumTextLength(locale45);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "20" + "'", str39, "20");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1" + "'", str40, "-1");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 843 + "'", int51 == 843);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "italiano" + "'", str63, "italiano");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test5336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5336");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (short) 100);
        int int15 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar21 = dateTime20.toGregorianCalendar();
        int int22 = dateTime20.getMillisOfSecond();
        org.joda.time.DateTime dateTime23 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        java.lang.Integer int35 = dateTimeParserBucket31.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket31.setZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        org.joda.time.DateTime dateTime43 = dateTime39.plusHours((int) (byte) 100);
        boolean boolean45 = dateTime43.isBefore((long) ' ');
        int int46 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean47 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean49 = dateTime43.isAfter(26755867546L);
        org.joda.time.DateTime.Property property50 = dateTime43.yearOfCentury();
        org.joda.time.DateTime dateTime51 = property50.roundCeilingCopy();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology63, locale64, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField68 = null;
        dateTimeParserBucket67.saveField(dateTimeField68, (int) (short) 0);
        java.lang.Integer int71 = dateTimeParserBucket67.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket67.setZone(dateTimeZone72);
        dateTimeParserBucket58.setZone(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTimeParserBucket58.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) 86399, dateTimeZone75);
        long long80 = dateTimeZone75.previousTransition((long) 231);
        boolean boolean81 = property50.equals((java.lang.Object) 231);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.withWeekyear((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean87 = dateTime85.isSupported(dateTimeFieldType86);
        boolean boolean89 = dateTime85.isEqual(947L);
        long long90 = property50.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 888 + "'", int22 == 888);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 231L + "'", long80 == 231L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 2023L + "'", long90 == 2023L);
    }

    @Test
    public void test5337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5337");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime29 = property26.addWrapFieldToCopy(28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekyear((int) (short) 10);
        int int32 = localDateTime29.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withDayOfYear((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readableDuration35);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withPeriodAdded(readablePeriod38, 233);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYear(653);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.year();
        int int44 = property43.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 80 + "'", int32 == 80);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-292275054) + "'", int44 == (-292275054));
    }

    @Test
    public void test5338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5338");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths((int) (byte) 100);
        int[] intArray6 = localDateTime5.getValues();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusDays(4);
        int int9 = localDateTime8.size();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTime();
        int int17 = dateTime13.getMillisOfSecond();
        org.joda.time.DateTime.Property property18 = dateTime13.centuryOfEra();
        org.joda.time.DateTime dateTime19 = property18.roundCeilingCopy();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        java.util.Locale locale27 = dateTimeParserBucket25.getLocale();
        boolean boolean28 = property18.equals((java.lang.Object) locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(26772732L, chronology10, locale27, (java.lang.Integer) 325);
        org.joda.time.DateTimeField dateTimeField31 = chronology10.yearOfEra();
        int int33 = dateTimeField31.get(5862060000L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.millisOfSecond();
        org.joda.time.DurationField durationField40 = chronology36.seconds();
        org.joda.time.DurationField durationField41 = chronology36.minutes();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.era();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime46, locale49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.withYearOfEra(217);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime46.minusYears(26778517);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime64.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime75.plusMillis(603);
        int int81 = localDateTime80.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.plusSeconds(170);
        boolean boolean84 = localDateTime73.isAfter((org.joda.time.ReadablePartial) localDateTime83);
        boolean boolean85 = localDateTime60.isEqual((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime60.withYear(170);
        int[] intArray88 = localDateTime60.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = dateTimeField31.addWrapField((org.joda.time.ReadablePartial) localDateTime46, 27019877, intArray88, 2073);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27019877");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1978, 5, 1, 87]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 966 + "'", int17 == 966);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AD" + "'", str50, "AD");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1978, 5, 1, 87]");
    }

    @Test
    public void test5339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5339");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getMillisOfSecond();
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property20 = dateTime17.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = property20.getAsText(locale21);
        java.lang.String str24 = locale15.getDisplayName(locale21);
        int int25 = property14.getMaximumTextLength(locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        int int27 = strSet26.size();
        boolean boolean28 = dateTimeParserBucket5.restoreState((java.lang.Object) int27);
        java.lang.Object obj29 = dateTimeParserBucket5.saveState();
        java.util.Locale locale30 = dateTimeParserBucket5.getLocale();
        java.lang.String str31 = locale30.getDisplayCountry();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray33 = strSet32.toArray();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 14 + "'", int13 == 14);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "20" + "'", str23, "20");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "coreano" + "'", str24, "coreano");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test5340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5340");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        java.lang.Integer int11 = dateTimeParserBucket7.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket7.setZone(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale16.getDisplayName();
        dateTimeParserBucket7.saveField(dateTimeFieldType14, "97", locale16);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket7.getZone();
        boolean boolean21 = dateTimeZone20.isFixed();
        long long25 = dateTimeZone20.convertLocalToUTC((long) 814, false, (long) 26761137);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((-1607700000L), dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(5862060000L, dateTimeZone20);
        java.lang.String str28 = localDateTime27.toString();
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tedesco (Germania)" + "'", str17, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 762L + "'", long25 == 762L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-03-09T20:21:00.052" + "'", str28, "1970-03-09T20:21:00.052");
    }

    @Test
    public void test5341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5341");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        int int12 = dateTimeField11.getMaximumValue();
        long long15 = dateTimeField11.add(26761101L, (long) 887);
        long long17 = dateTimeField11.remainder((long) (-32));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths(10);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfDay();
        int int25 = dateTime23.getYearOfEra();
        org.joda.time.DateTime.Property property26 = dateTime23.secondOfDay();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYear((int) (short) 100);
        int int43 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        int int44 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35);
        long long47 = dateTimeField33.set(1L, 837);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.lang.String str50 = dateTimeField33.getAsText((long) 7, locale49);
        org.joda.time.DateTime dateTime51 = property26.setCopy("999", locale49);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.plusWeeks(22);
        int int61 = property26.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime56.minusMinutes(392);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime56.plus(readablePeriod64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusHours((int) (byte) 0);
        boolean boolean72 = dateTime70.isEqual((long) (short) 100);
        int int73 = dateTime70.getWeekyear();
        org.joda.time.Chronology chronology74 = dateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.weekyearOfCentury();
        org.joda.time.DurationField durationField76 = chronology74.months();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.weekOfWeekyear();
        org.joda.time.DurationField durationField78 = chronology74.weekyears();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar83 = dateTime82.toGregorianCalendar();
        int int84 = dateTime82.getMillisOfSecond();
        org.joda.time.DateTime.Property property85 = dateTime82.minuteOfHour();
        org.joda.time.LocalTime localTime86 = dateTime82.toLocalTime();
        int[] intArray88 = chronology74.get((org.joda.time.ReadablePartial) localTime86, (-62168008296666L));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = dateTimeField11.addWrapField((org.joda.time.ReadablePartial) localDateTime65, 831, intArray88, 26775);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 831");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 536484361101L + "'", long15 == 536484361101L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 259199968L + "'", long17 == 259199968L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 837L + "'", long47 == 837L);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "7" + "'", str50, "7");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(gregorianCalendar83);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 44 + "'", int84 == 44);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[20, 48, 23, 386]");
    }

    @Test
    public void test5342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5342");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTime dateTime30 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDateTime34.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime.Property property42 = dateTime40.era();
        int int43 = property24.getDifference((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Interval interval44 = property24.toInterval();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "26" + "'", str29, "26");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11744 + "'", int43 == 11744);
        org.junit.Assert.assertNotNull(interval44);
    }

    @Test
    public void test5343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5343");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, 28);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        boolean boolean25 = localDateTime23.isSupported(dateTimeFieldType24);
        int int26 = localDateTime18.get(dateTimeFieldType24);
        boolean boolean27 = localDateTime16.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.withDayOfYear(175);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusMonths(267);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusHours((int) (byte) 0);
        boolean boolean38 = dateTime36.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = dateTime36.toString(dateTimeFormatter39);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear((-1));
        org.joda.time.DateTime dateTime58 = dateTime54.plusHours((int) (byte) 100);
        boolean boolean60 = dateTime58.isBefore((long) ' ');
        int int61 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime58);
        long long63 = dateTimeZone51.nextTransition((long) (short) -1);
        boolean boolean64 = dateTime36.equals((java.lang.Object) dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime66 = localDateTime29.toDateTime(dateTimeZone51);
        org.joda.time.DateTime.Property property67 = dateTime66.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:33:19.080+10:00" + "'", str40, "2022-02-22T17:33:19.080+10:00");
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 36000000 + "'", int61 == 36000000);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test5344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5344");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths(10);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        java.util.Date date36 = dateTime33.toDate();
        org.joda.time.DateTime.Property property37 = dateTime33.dayOfMonth();
        org.joda.time.DateTime.Property property38 = dateTime33.dayOfMonth();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = property38.getAsText(locale39);
        java.lang.String str42 = property31.getAsShortText(locale39);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property48 = dateTime45.centuryOfEra();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = property48.getAsText(locale49);
        java.lang.String str52 = locale43.getDisplayName(locale49);
        java.lang.String str53 = locale39.getDisplayScript(locale43);
        java.lang.String str54 = dateTimeZone22.getShortName((long) 1970, locale39);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.minusWeeks((-593));
        int int65 = localDateTime63.getValue(1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minusMinutes(52);
        org.joda.time.LocalDateTime.Property property68 = localDateTime63.millisOfDay();
        int int69 = property68.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekyear((-1));
        org.joda.time.DateTime.Property property74 = dateTime71.yearOfCentury();
        org.joda.time.DateTime dateTime76 = dateTime71.minusMinutes(26751806);
        org.joda.time.DateTime dateTime78 = dateTime71.withSecondOfMinute(57);
        org.joda.time.DateTime dateTime80 = dateTime71.minusWeeks(985);
        org.joda.time.DateTime dateTime81 = dateTime71.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime83 = dateTime81.plusYears(731);
        int int84 = property68.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = dateTime83.minusMonths((-23684));
        boolean boolean87 = locale39.equals((java.lang.Object) (-23684));
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Feb 22 07:33:19 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1053" + "'", str42, "1053");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "20" + "'", str51, "20");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "coreano" + "'", str52, "coreano");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:00" + "'", str54, "+10:00");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 86399999 + "'", int69 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test5345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5345");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        boolean boolean23 = dateTimeZone19.isFixed();
        long long25 = dateTimeZone19.convertUTCToLocal((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(0);
        org.joda.time.DateTime dateTime31 = dateTime27.plusMinutes(180);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime27.withWeekOfWeekyear(113);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 113 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35999999L + "'", long25 == 35999999L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test5346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5346");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours((int) (byte) 0);
        boolean boolean12 = dateTime10.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime10.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket20.setZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((-1));
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours((int) (byte) 100);
        boolean boolean34 = dateTime32.isBefore((long) ' ');
        int int35 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime32);
        long long37 = dateTimeZone25.nextTransition((long) (short) -1);
        boolean boolean38 = dateTime10.equals((java.lang.Object) dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray40 = localDateTime39.getValues();
        chronology3.validate((org.joda.time.ReadablePartial) localDateTime5, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology3.yearOfEra();
        org.joda.time.DurationField durationField44 = chronology3.months();
        org.joda.time.DateTimeField dateTimeField45 = chronology3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:33:19.198+10:00" + "'", str14, "2022-02-22T17:33:19.198+10:00");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 22, 63199198]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test5347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5347");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        int int23 = dateTime17.getEra();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test5348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5348");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("DateTimeField[weekOfWeekyear]");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        dateTimeParserBucket7.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        java.lang.String str19 = dateTimeField17.getAsShortText((long) 28);
        dateTimeParserBucket7.saveField(dateTimeField17, 100);
        boolean boolean23 = dateTimeField17.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy((-592L));
        int int29 = property26.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime31 = property26.addToCopy(593);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime31, 608, locale33);
        long long36 = dateTimeField17.roundHalfFloor(103L);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology39);
        java.lang.String str41 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.weekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyearOfCentury();
        java.lang.String str53 = dateTimeField51.getAsShortText(10L);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = dateTimeField51.getAsText(0L, locale55);
        java.lang.String str57 = dateTimeField45.getAsText(0, locale55);
        java.util.Locale locale58 = java.util.Locale.KOREA;
        int int59 = dateTimeField45.getMaximumShortTextLength(locale58);
        java.lang.String str61 = locale58.getExtension('u');
        int int62 = dateTimeField17.getMaximumTextLength(locale58);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.millisOfSecond();
        org.joda.time.DurationField durationField69 = dateTimeField68.getLeapDurationField();
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.lang.String str72 = locale71.getLanguage();
        java.lang.String str73 = dateTimeField68.getAsText(457087L, locale71);
        java.lang.String str74 = locale58.getDisplayCountry(locale71);
        java.lang.String str76 = locale58.getExtension('x');
        java.lang.String str78 = locale58.getExtension('a');
        java.lang.String str79 = locale1.getDisplayLanguage(locale58);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "608" + "'", str34, "608");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "70" + "'", str53, "70");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "70" + "'", str56, "70");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 7 + "'", int59 == 7);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNull(durationField69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "it" + "'", str72, "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "87" + "'", str73, "87");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Corea del Sud" + "'", str74, "Corea del Sud");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test5349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5349");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime5.getZone();
        int int16 = dateTimeZone14.getStandardOffset(26752174000L);
        long long18 = dateTimeZone14.previousTransition((-2246400000L));
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        java.lang.Integer int35 = dateTimeParserBucket31.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket31.setZone(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        org.joda.time.DateTime dateTime43 = dateTime39.plusHours((int) (byte) 100);
        boolean boolean45 = dateTime43.isBefore((long) ' ');
        int int46 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime43);
        dateTimeParserBucket25.setZone(dateTimeZone36);
        java.util.Locale locale48 = dateTimeParserBucket25.getLocale();
        java.lang.String str49 = dateTimeZone14.getName((long) 75306401, locale48);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:33:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-2246400000L) + "'", long18 == (-2246400000L));
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
    }

    @Test
    public void test5350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5350");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis((int) (short) 1);
        int int11 = localDateTime10.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str13 = dateTimeFieldType12.getName();
        java.lang.String str14 = dateTimeFieldType12.getName();
        boolean boolean15 = localDateTime10.isSupported(dateTimeFieldType12);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        dateTimeParserBucket21.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket21.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int48 = dateTime46.get(dateTimeFieldType47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int53 = localDateTime50.get(dateTimeFieldType52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        boolean boolean60 = localDateTime58.isSupported(dateTimeFieldType59);
        boolean boolean61 = localDateTime50.isSupported(dateTimeFieldType59);
        int int62 = dateTime46.get(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType59.getDurationType();
        org.joda.time.Chronology chronology64 = null;
        boolean boolean65 = dateTimeFieldType59.isSupported(chronology64);
        int int66 = dateTime40.get(dateTimeFieldType59);
        int int67 = localDateTime10.get(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hourOfHalfday" + "'", str13, "hourOfHalfday");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hourOfHalfday" + "'", str14, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 453 + "'", int48 == 453);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test5351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5351");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime3.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        java.lang.Integer int17 = dateTimeParserBucket13.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket13.setZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear((-1));
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours((int) (byte) 100);
        boolean boolean27 = dateTime25.isBefore((long) ' ');
        int int28 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime25);
        long long30 = dateTimeZone18.nextTransition((long) (short) -1);
        boolean boolean31 = dateTime3.equals((java.lang.Object) dateTimeZone18);
        boolean boolean32 = dateTimeZone18.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:33:19.363Z" + "'", str7, "2022-02-22T07:33:19.363Z");
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test5352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5352");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime.Property property2 = dateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.minus(readableDuration4);
        int int6 = dateTime5.getSecondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket18.setZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime26.plusHours((int) (byte) 100);
        boolean boolean32 = dateTime30.isBefore((long) ' ');
        int int33 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime30);
        dateTimeParserBucket12.setZone(dateTimeZone23);
        java.lang.String str35 = dateTimeZone23.toString();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime5.toMutableDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekyear((-1));
        org.joda.time.DateTime dateTime54 = dateTime50.plusHours((int) (byte) 100);
        boolean boolean56 = dateTime54.isBefore((long) ' ');
        int int57 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime59 = dateTime54.minusYears(20);
        org.joda.time.DateTime.Property property60 = dateTime59.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusHours((int) (byte) 0);
        java.util.Date date65 = dateTime62.toDate();
        org.joda.time.DateTime.Property property66 = dateTime62.dayOfMonth();
        org.joda.time.DateTime.Property property67 = dateTime62.dayOfMonth();
        int int68 = property60.getDifference((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime70 = property60.addToCopy(52L);
        org.joda.time.DateTime dateTime72 = property60.addWrapFieldToCopy(569);
        org.joda.time.DateTime dateTime74 = dateTime72.withMillisOfDay(585);
        org.joda.time.DateTime dateTime76 = dateTime72.minusDays(564);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMinutes(0);
        boolean boolean79 = dateTimeZone23.equals((java.lang.Object) 0);
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder81 = builder80.clearExtensions();
        java.util.Locale.Builder builder83 = builder81.setLanguageTag("coreano");
        java.util.Locale.Builder builder84 = builder83.clearExtensions();
        boolean boolean85 = dateTimeZone23.equals((java.lang.Object) builder84);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology88 = localDateTime87.getChronology();
        org.joda.time.DateTime dateTime89 = org.joda.time.DateTime.now(chronology88);
        org.joda.time.DateTimeZone dateTimeZone90 = chronology88.getZone();
        java.lang.String str92 = dateTimeZone90.getNameKey((-1L));
        long long94 = dateTimeZone90.convertUTCToLocal((long) 734);
        org.joda.time.LocalDateTime localDateTime95 = org.joda.time.LocalDateTime.now(dateTimeZone90);
        org.joda.time.LocalDateTime localDateTime97 = localDateTime95.plusMonths(708);
        int int98 = localDateTime95.getCenturyOfEra();
        boolean boolean99 = dateTimeZone23.isLocalDateTimeGap(localDateTime95);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(date65);
// flaky:         org.junit.Assert.assertEquals(date65.toString(), "Tue Feb 22 07:33:19 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-175220) + "'", int68 == (-175220));
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "UTC" + "'", str92, "UTC");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 734L + "'", long94 == 734L);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(localDateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 20 + "'", int98 == 20);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test5353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5353");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        dateTimeParserBucket6.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        java.lang.String str18 = dateTimeField16.getAsShortText((long) 28);
        dateTimeParserBucket6.saveField(dateTimeField16, 100);
        boolean boolean22 = dateTimeField16.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((-592L));
        int int28 = property25.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime30 = property25.addToCopy(593);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime30, 608, locale32);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        boolean boolean35 = dateTimeFieldType0.isSupported(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.minuteOfHour();
        org.joda.time.DurationField durationField39 = chronology34.weekyears();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.secondOfMinute();
        org.joda.time.DurationField durationField41 = chronology34.years();
        long long44 = durationField41.getValueAsLong(0L, (-43113598058L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "608" + "'", str33, "608");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test5354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5354");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology7, locale8, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField12 = null;
        dateTimeParserBucket11.saveField(dateTimeField12, (int) (short) 0);
        java.lang.Integer int15 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket11.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withWeekyear((-1));
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (byte) 100);
        boolean boolean25 = dateTime23.isBefore((long) ' ');
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime23);
        dateTimeParserBucket5.setZone(dateTimeZone16);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 538);
        java.util.Locale locale32 = new java.util.Locale("+00:00:00.052", "ISOChronology[+00:00:00.052]");
        boolean boolean33 = locale32.hasExtensions();
        boolean boolean34 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean33);
        java.lang.Object obj35 = dateTimeParserBucket5.saveState();
        java.util.Locale locale36 = dateTimeParserBucket5.getLocale();
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale32.toString(), "+00:00:00.052_ISOCHRONOLOGY[+00:00:00.052]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
    }

    @Test
    public void test5355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5355");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.hourOfDay();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test5356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5356");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.lang.String str24 = dateTimeZone22.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths(10);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfDay();
        int int32 = dateTime30.getYearOfEra();
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfWeek();
        org.joda.time.DateTime dateTime36 = property34.addWrapFieldToCopy(765);
        int int37 = dateTime36.getMinuteOfDay();
        int int38 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withPeriodAdded(readablePeriod40, 712);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 453 + "'", int37 == 453);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test5357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5357");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusHours(49);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime9 = property6.addToCopy(39399L);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        boolean boolean11 = property10.isLeap();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime15.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        java.util.Date date28 = dateTime25.toDate();
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime.Property property30 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime25.plusMonths(19);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readableDuration33);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTime dateTime36 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        long long39 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.withWeekyear((-1));
        org.joda.time.DateTime dateTime58 = dateTime54.plusHours((int) (byte) 100);
        boolean boolean60 = dateTime58.isBefore((long) ' ');
        int int61 = dateTimeZone51.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime63 = dateTime58.minusYears(20);
        org.joda.time.DateTime.Property property64 = dateTime63.hourOfDay();
        org.joda.time.DateTime.Property property65 = dateTime63.dayOfMonth();
        java.util.Locale locale69 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str70 = property65.getAsText(locale69);
        java.util.Set<java.lang.String> strSet71 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str72 = locale69.getISO3Country();
        java.lang.String str73 = dateTime38.toString("26880", locale69);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Feb 22 07:33:19 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1243312239632L + "'", long39 == 1243312239632L);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertEquals(locale69.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "26" + "'", str70, "26");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ITA" + "'", str72, "ITA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "26880" + "'", str73, "26880");
    }

    @Test
    public void test5358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5358");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plus(readablePeriod29);
        int int31 = localDateTime30.size();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfDay();
        org.joda.time.DurationField durationField33 = property32.getRangeDurationField();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test5359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5359");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        org.joda.time.DateTime.Property property6 = dateTime1.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(837);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(569);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMinutes(496);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology17, locale18, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, (int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        java.lang.Integer int34 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket30.setZone(dateTimeZone35);
        dateTimeParserBucket21.setZone(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket21.getZone();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone38);
        boolean boolean40 = dateTimeZone38.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        int int43 = dateTimeZone38.getOffsetFromLocal((long) (short) -1);
        int int45 = dateTimeZone38.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime46 = dateTime14.withZoneRetainFields(dateTimeZone38);
        int int48 = dateTimeZone38.getOffsetFromLocal((long) 612);
        java.util.TimeZone timeZone49 = dateTimeZone38.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:33:19 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test5360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5360");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.LocalDate localDate4 = dateTime1.toLocalDate();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime1.toGregorianCalendar();
        org.joda.time.DateTime dateTime7 = dateTime1.withDayOfYear(303);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology18, locale19, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField23 = null;
        dateTimeParserBucket22.saveField(dateTimeField23, (int) (short) 0);
        java.lang.Integer int26 = dateTimeParserBucket22.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket22.setZone(dateTimeZone27);
        dateTimeParserBucket13.setZone(dateTimeZone27);
        java.util.TimeZone timeZone30 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime31 = dateTime1.withZoneRetainFields(dateTimeZone27);
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
    }

    @Test
    public void test5361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5361");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime1.centuryOfEra();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology8, locale9, (java.lang.Integer) 227);
        int int15 = property6.getMaximumShortTextLength(locale9);
        org.joda.time.DurationField durationField16 = property6.getDurationField();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology19.millis();
        long long25 = durationField22.subtract((long) 86399, (long) 10);
        int int26 = durationField16.compareTo(durationField22);
        java.lang.String str27 = durationField16.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 936 + "'", int5 == 936);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u671d\u9c9c\u6587" + "'", str11, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86389L + "'", long25 == 86389L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "centuries" + "'", str27, "centuries");
    }

    @Test
    public void test5362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5362");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMillis(603);
        int int30 = localDateTime29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = dateTime32.isBefore(readableInstant33);
        org.joda.time.DateTime dateTime35 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean36 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        java.lang.Integer int55 = dateTimeParserBucket51.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket51.setZone(dateTimeZone56);
        dateTimeParserBucket42.setZone(dateTimeZone56);
        boolean boolean59 = dateTimeZone56.isFixed();
        boolean boolean60 = dateTimeZone56.isFixed();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone56);
        int int62 = dateTime61.getYearOfEra();
        boolean boolean63 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property64 = dateTime32.secondOfMinute();
        org.joda.time.DateTime.Property property65 = dateTime32.hourOfDay();
        java.lang.Object obj66 = null;
        boolean boolean67 = property65.equals(obj66);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test5363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5363");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property9 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime6.minusYears(558);
        boolean boolean12 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime14 = dateTime6.minus((long) 597);
        boolean boolean16 = dateTime14.isBefore((long) 882);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes(914);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.lang.Integer int37 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket33.setZone(dateTimeZone38);
        dateTimeParserBucket24.setZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket24.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        java.lang.String str43 = dateTimeZone41.toString();
        boolean boolean44 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime45 = dateTime14.withZone(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.052" + "'", str43, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test5364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5364");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int7 = dateTimeParserBucket5.getOffsetInteger();
        java.util.Locale locale8 = dateTimeParserBucket5.getLocale();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long31 = dateTimeZone19.nextTransition((long) (short) -1);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str34 = dateTimeZone19.getName((long) 673);
        java.util.TimeZone timeZone35 = dateTimeZone19.toTimeZone();
        timeZone35.setID("-0001-02-23t07:26:18.562+00:00:00.052 (DATETIMEFIELD[CLOCKHOUROFHALFDAY],DateTimeField[weekOfWeekyear])");
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withWeekyear((-1));
        org.joda.time.DateTime dateTime43 = dateTime41.plusMonths(10);
        org.joda.time.DateTime.Property property44 = dateTime43.minuteOfDay();
        org.joda.time.DateTime.Property property45 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime47 = dateTime43.minusMinutes(648);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds(569);
        org.joda.time.DateTime dateTime51 = dateTime47.plusDays(575);
        org.joda.time.DateTime.Property property52 = dateTime51.secondOfDay();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology63, locale64, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField68 = null;
        dateTimeParserBucket67.saveField(dateTimeField68, (int) (short) 0);
        java.lang.Integer int71 = dateTimeParserBucket67.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket67.setZone(dateTimeZone72);
        dateTimeParserBucket58.setZone(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTimeParserBucket58.getZone();
        long long77 = dateTimeZone75.previousTransition((long) 593);
        org.joda.time.DateTime dateTime78 = dateTime51.withZone(dateTimeZone75);
        java.util.TimeZone timeZone79 = dateTimeZone75.toTimeZone();
        boolean boolean80 = timeZone35.hasSameRules(timeZone79);
        boolean boolean81 = timeZone35.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = timeZone35.getDisplayName(true, 743);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 743");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.052" + "'", str34, "+00:00:00.052");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 593L + "'", long77 == 593L);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test5365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5365");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime1.plusYears((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime1.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime10.toGregorianCalendar();
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusHours((int) (byte) 0);
        boolean boolean21 = dateTime19.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = dateTime19.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        java.lang.Integer int33 = dateTimeParserBucket29.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket29.setZone(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((-1));
        org.joda.time.DateTime dateTime41 = dateTime37.plusHours((int) (byte) 100);
        boolean boolean43 = dateTime41.isBefore((long) ' ');
        int int44 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime41);
        long long46 = dateTimeZone34.nextTransition((long) (short) -1);
        boolean boolean47 = dateTime19.equals((java.lang.Object) dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int[] intArray49 = localDateTime48.getValues();
        chronology12.validate((org.joda.time.ReadablePartial) localDateTime14, intArray49);
        org.joda.time.DateTimeField dateTimeField51 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology12.yearOfEra();
        org.joda.time.DurationField durationField53 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField54 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology12.hourOfDay();
        org.joda.time.DateTime dateTime56 = dateTime1.withChronology(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T07:33:20.074+00:00:00.052" + "'", str23, "2022-02-22T07:33:20.074+00:00:00.052");
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2022, 2, 22, 27200074]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test5366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5366");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusMonths(13);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra(274);
        boolean boolean28 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((-1));
        org.joda.time.DateTime dateTime34 = dateTime30.withMillisOfDay(0);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology37, locale38, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField42 = null;
        dateTimeParserBucket41.saveField(dateTimeField42, (int) (short) 0);
        java.lang.Integer int45 = dateTimeParserBucket41.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket41.setZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear((-1));
        org.joda.time.DateTime dateTime53 = dateTime49.plusHours((int) (byte) 100);
        boolean boolean55 = dateTime53.isBefore((long) ' ');
        int int56 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime53);
        int int58 = dateTimeZone46.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime59 = dateTime34.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withWeekyear((-1));
        boolean boolean64 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime63);
        java.util.Date date65 = dateTime34.toDate();
        org.joda.time.DateTime dateTime67 = dateTime34.withYear(687);
        org.joda.time.DateTime dateTime69 = dateTime34.minusMinutes(408);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int75 = localDateTime71.get(dateTimeFieldType74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int82 = localDateTime79.get(dateTimeFieldType81);
        org.joda.time.LocalDateTime.Property property83 = localDateTime71.property(dateTimeFieldType81);
        boolean boolean84 = dateTime69.isSupported(dateTimeFieldType81);
        int int85 = localDateTime9.get(dateTimeFieldType81);
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType81.getDurationType();
        boolean boolean87 = localDateTime5.isSupported(durationFieldType86);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test5367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5367");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        dateTimeParserBucket6.saveField(dateTimeFieldType10, "it", locale12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        dateTimeParserBucket20.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        java.lang.String str32 = dateTimeField30.getAsShortText((long) 28);
        dateTimeParserBucket20.saveField(dateTimeField30, 100);
        boolean boolean36 = dateTimeField30.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = property39.addToCopy((-592L));
        int int42 = property39.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime44 = property39.addToCopy(593);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDateTime44, 608, locale46);
        org.joda.time.Chronology chronology48 = localDateTime44.getChronology();
        boolean boolean49 = dateTimeFieldType14.isSupported(chronology48);
        boolean boolean50 = dateTimeFieldType10.isSupported(chronology48);
        long long54 = chronology48.add((long) 988, (long) 627, 26783);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 438, chronology48, locale56, (java.lang.Integer) 26823);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "608" + "'", str47, "608");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 16793929L + "'", long54 == 16793929L);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category55.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeZone59);
    }

    @Test
    public void test5368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5368");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) (byte) -1);
        int int6 = localDateTime5.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusYears((-292275054));
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekyearOfCentury();
        boolean boolean21 = strSet12.contains((java.lang.Object) chronology15);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((-31948L), chronology15, locale22, (java.lang.Integer) 22);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology15);
        boolean boolean26 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = localDateTime5.toString(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tedesco (Germania)" + "'", str11, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-15T07:33:20.151" + "'", str28, "2022-02-15T07:33:20.151");
    }

    @Test
    public void test5369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5369");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField29 = chronology3.year();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = chronology3.get(readablePeriod30, (long) 26890);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test5370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5370");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology10.centuries();
        org.joda.time.DurationField durationField14 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.secondOfMinute();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test5371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5371");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYear((int) (short) 10);
        int int6 = localDateTime5.getDayOfWeek();
        int int7 = localDateTime5.getDayOfWeek();
        int int8 = localDateTime5.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMinutes(813);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.minusWeeks(27507);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMinutes((int) (short) -1);
        int int21 = localDateTime20.getEra();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.hours();
        java.lang.String str23 = durationFieldType22.getName();
        java.lang.String str24 = durationFieldType22.getName();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withFieldAdded(durationFieldType22, 36);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str28 = durationFieldType27.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.DurationField durationField35 = chronology31.seconds();
        org.joda.time.DurationField durationField36 = chronology31.minutes();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.era();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.monthOfYear();
        org.joda.time.DurationField durationField39 = durationFieldType27.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField40 = chronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology31.hourOfDay();
        org.joda.time.Chronology chronology42 = chronology31.withUTC();
        org.joda.time.DurationField durationField43 = durationFieldType22.getField(chronology42);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.lang.Integer int53 = dateTimeParserBucket49.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket49.setZone(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale58.getDisplayName();
        dateTimeParserBucket49.saveField(dateTimeFieldType56, "97", locale58);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket49.getChronology();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.millisOfSecond();
        org.joda.time.DurationField durationField64 = durationFieldType22.getField(chronology61);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime12.withFieldAdded(durationFieldType22, 64);
        java.lang.String str67 = durationFieldType22.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hours" + "'", str23, "hours");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weeks" + "'", str28, "weeks");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tedesco (Germania)" + "'", str59, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hours" + "'", str67, "hours");
    }

    @Test
    public void test5372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5372");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime11.centuryOfEra();
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property14.getAsText(locale15);
        java.lang.String str18 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime8, (-1), locale15);
        int int19 = localDateTime8.getYearOfEra();
        int int20 = localDateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime21 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.minusDays(753);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = property27.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withDayOfYear(100);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        boolean boolean37 = localDateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.withWeekyear(38);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int46 = localDateTime44.get(dateTimeFieldType45);
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology48, locale49, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField53 = null;
        dateTimeParserBucket52.saveField(dateTimeField53, (int) (short) 0);
        java.lang.Integer int56 = dateTimeParserBucket52.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket52.setZone(dateTimeZone57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.lang.String str62 = locale61.getDisplayName();
        dateTimeParserBucket52.saveField(dateTimeFieldType59, "97", locale61);
        int int64 = localDateTime44.get(dateTimeFieldType59);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime40.withField(dateTimeFieldType59, 12);
        org.joda.time.LocalDateTime.Property property67 = localDateTime30.property(dateTimeFieldType59);
        boolean boolean68 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime30);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "20" + "'", str17, "20");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-1" + "'", str18, "-1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tedesco (Germania)" + "'", str62, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 12 + "'", int64 == 12);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test5373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5373");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        long long20 = dateTimeField17.add((long) (short) -1, 35999999L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        java.lang.String str29 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray48 = localDateTime47.getValues();
        int[] intArray50 = dateTimeField39.addWrapField((org.joda.time.ReadablePartial) localDateTime44, 0, intArray48, (int) (short) 10);
        int int51 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime32, intArray48);
        int int52 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime24, intArray48);
        int int53 = localDateTime24.getDayOfMonth();
        long long55 = chronology10.set((org.joda.time.ReadablePartial) localDateTime24, 708L);
        org.joda.time.DateTimeZone dateTimeZone56 = chronology10.getZone();
        int int58 = dateTimeZone56.getOffset(13140742L);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35999998999L + "'", long20 == 35999998999L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 1, 1, 52]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 6048000052L + "'", long55 == 6048000052L);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test5374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5374");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology3.months();
        org.joda.time.DurationField durationField7 = chronology3.minutes();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale8.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((-1335598022L), chronology3, locale8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        int int19 = property18.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime21 = property18.addToCopy(608);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfWeek();
        boolean boolean23 = dateTimeZone12.isLocalDateTimeGap(localDateTime21);
        long long26 = dateTimeZone12.adjustOffset((long) 334, false);
        dateTimeParserBucket10.setZone(dateTimeZone12);
        long long29 = dateTimeParserBucket10.computeMillis(true);
        dateTimeParserBucket10.setPivotYear((java.lang.Integer) 291);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket10.getChronology();
        long long36 = chronology32.add(2312236800000L, 26722800694L, 995);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.weekyear();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 334L + "'", long26 == 334L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1522798022L) + "'", long29 == (-1522798022L));
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 28901423490530L + "'", long36 == 28901423490530L);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test5375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5375");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMillis(603);
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds(170);
        boolean boolean28 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        boolean boolean29 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime4.plusMinutes(92);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusHours(49);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        int int39 = localDateTime37.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfDay(0);
        boolean boolean42 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        int int43 = localDateTime37.getWeekyear();
        java.lang.String str44 = localDateTime37.toString();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime37.plusYears(947999);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        java.util.Locale.Builder builder50 = builder48.setLanguageTag("coreano");
        java.util.Locale.Builder builder51 = builder50.clear();
        java.util.Locale.Builder builder53 = builder51.setRegion("100");
        java.util.Locale.Builder builder56 = builder53.setExtension('x', "");
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology59, locale60, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField64 = null;
        dateTimeParserBucket63.saveField(dateTimeField64, (int) (short) 0);
        java.util.Locale locale67 = dateTimeParserBucket63.getLocale();
        java.util.Locale.setDefault(category57, locale67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property74 = dateTime71.centuryOfEra();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = property74.getAsText(locale75);
        java.lang.String str78 = locale69.getDisplayName(locale75);
        java.lang.String str79 = locale75.getISO3Language();
        java.util.Locale.setDefault(category57, locale75);
        java.util.Locale locale81 = java.util.Locale.getDefault(category57);
        java.lang.String str82 = locale81.getDisplayName();
        java.util.Locale.Builder builder83 = builder56.setLocale(locale81);
        boolean boolean84 = localDateTime46.equals((java.lang.Object) builder56);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime46.plusYears(123);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969-12-29T23:00:00.052" + "'", str44, "1969-12-29T23:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "it" + "'", str76, "it");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "20" + "'", str77, "20");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "coreano" + "'", str78, "coreano");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ita" + "'", str79, "ita");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "italiano" + "'", str82, "italiano");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test5376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5376");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime.Property property4 = dateTime1.yearOfCentury();
        int int5 = property4.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str9 = property4.getAsText(locale7);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int15 = localDateTime11.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withCenturyOfEra((int) (byte) 0);
        int int18 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusMillis(603);
        int int44 = localDateTime43.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusSeconds(170);
        boolean boolean47 = localDateTime36.isAfter((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean48 = localDateTime23.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime23.plusMinutes(92);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime23.minus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField60 = null;
        dateTimeParserBucket59.saveField(dateTimeField60, (int) (short) 0);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology64, locale65, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField69 = null;
        dateTimeParserBucket68.saveField(dateTimeField69, (int) (short) 0);
        java.lang.Integer int72 = dateTimeParserBucket68.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket68.setZone(dateTimeZone73);
        dateTimeParserBucket59.setZone(dateTimeZone73);
        boolean boolean76 = dateTimeZone73.isFixed();
        long long79 = dateTimeZone73.adjustOffset(1014721200000L, false);
        org.joda.time.DateTime dateTime80 = localDateTime53.toDateTime(dateTimeZone73);
        int int82 = dateTimeZone73.getOffset((long) 134);
        long long84 = dateTimeZone73.convertUTCToLocal((-1586813161986L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 99 + "'", int5 == 99);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u671d\u9c9c\u6587" + "'", str8, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "22" + "'", str9, "22");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1014721200000L + "'", long79 == 1014721200000L);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1586813161934L) + "'", long84 == (-1586813161934L));
    }

    @Test
    public void test5377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5377");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMillis(603);
        int int26 = localDateTime25.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusSeconds(170);
        boolean boolean29 = localDateTime18.isAfter((org.joda.time.ReadablePartial) localDateTime28);
        boolean boolean30 = localDateTime5.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.Chronology chronology31 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.seconds();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.weekyear();
        boolean boolean39 = property38.isLeap();
        org.joda.time.LocalDateTime localDateTime41 = property38.addToCopy((long) 26775034);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology53);
        java.lang.String str55 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology59);
        java.lang.String str61 = chronology59.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField64 = chronology59.weekyear();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(chronology59);
        int int66 = dateTimeField56.getMinimumValue((org.joda.time.ReadablePartial) localDateTime65);
        boolean boolean67 = localDateTime50.equals((java.lang.Object) dateTimeField56);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str71 = locale69.getDisplayName(locale70);
        java.lang.String str72 = dateTimeField56.getAsText(90000000L, locale70);
        java.lang.String str73 = locale70.getDisplayLanguage();
        java.lang.String str74 = locale70.getScript();
        int int75 = property38.getMaximumShortTextLength(locale70);
        boolean boolean76 = locale70.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(695L, chronology31, locale70, (java.lang.Integer) 613, 693);
        dateTimeParserBucket79.setOffset(26807);
        long long84 = dateTimeParserBucket79.computeMillis(true, "2020-04-14T07:26:38.386+00:00:00.052");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u671d\u9c9c\u6587" + "'", str71, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "cinese" + "'", str73, "cinese");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-26112L) + "'", long84 == (-26112L));
    }

    @Test
    public void test5378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5378");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        int int20 = dateTimeParserBucket5.getOffset();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 136);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 136);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 348);
        java.util.Locale locale27 = dateTimeParserBucket5.getLocale();
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
    }

    @Test
    public void test5379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5379");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[UTC]", "it", "10");
        java.lang.String str29 = property24.getAsText(locale28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        org.joda.time.DateTime dateTime31 = property24.roundHalfFloorCopy();
        boolean boolean33 = dateTime31.isAfter((long) 441);
        org.joda.time.LocalDateTime localDateTime34 = dateTime31.toLocalDateTime();
        org.joda.time.DateTime.Property property35 = dateTime31.weekyear();
        org.joda.time.DateTime dateTime36 = property35.getDateTime();
        int int37 = dateTime36.getWeekOfWeekyear();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[utc]_IT_10");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "26" + "'", str29, "26");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
    }

    @Test
    public void test5380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5380");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        boolean boolean21 = dateTimeField15.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((-592L));
        int int27 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = property24.addToCopy(593);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime29, 608, locale31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withCenturyOfEra(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType35.getField(chronology38);
        java.lang.String str42 = dateTimeFieldType35.toString();
        boolean boolean43 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDateTime.Property property44 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime34.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime.Property property48 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime50 = property48.addToCopy(16);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "608" + "'", str32, "608");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hourOfHalfday" + "'", str42, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test5381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5381");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy(28);
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((-592L));
        org.joda.time.LocalDateTime localDateTime25 = property22.withMaximumValue();
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        dateTimeParserBucket32.saveField(dateTimeFieldType36, "it", locale38);
        java.lang.String str40 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, locale38);
        org.joda.time.DateTimeField[] dateTimeFieldArray41 = localDateTime25.getFields();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime49.withDurationAdded((long) 2022, (int) (short) 100);
        boolean boolean53 = dateTime52.isEqualNow();
        org.joda.time.DateTime.Property property54 = dateTime52.secondOfMinute();
        org.joda.time.DateTime dateTime56 = property54.addToCopy(0L);
        org.joda.time.DateTimeField dateTimeField57 = property54.getField();
        java.lang.String str58 = property54.getName();
        org.joda.time.DateTime dateTime59 = property54.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.era();
        boolean boolean66 = localDateTime64.isSupported(dateTimeFieldType65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.withWeekyear(38);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int75 = localDateTime73.get(dateTimeFieldType74);
        org.joda.time.Chronology chronology77 = null;
        java.util.Locale locale78 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology77, locale78, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField82 = null;
        dateTimeParserBucket81.saveField(dateTimeField82, (int) (short) 0);
        java.lang.Integer int85 = dateTimeParserBucket81.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket81.setZone(dateTimeZone86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale90 = java.util.Locale.GERMANY;
        java.lang.String str91 = locale90.getDisplayName();
        dateTimeParserBucket81.saveField(dateTimeFieldType88, "97", locale90);
        int int93 = localDateTime73.get(dateTimeFieldType88);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime69.withField(dateTimeFieldType88, 12);
        boolean boolean96 = dateTime59.isSupported(dateTimeFieldType88);
        int int97 = localDateTime25.get(dateTimeFieldType88);
        org.joda.time.LocalDateTime.Property property98 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime.Property property99 = localDateTime25.yearOfEra();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "24" + "'", str40, "24");
        org.junit.Assert.assertNotNull(dateTimeFieldArray41);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "secondOfMinute" + "'", str58, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(int85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "tedesco (Germania)" + "'", str91, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 12 + "'", int93 == 12);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(property98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test5382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5382");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField6 = chronology3.millis();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTimeZone dateTimeZone8 = chronology3.getZone();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        java.lang.String str33 = dateTimeField31.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        int int39 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean42 = localDateTime38.equals((java.lang.Object) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int47 = localDateTime44.get(dateTimeFieldType46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime41.property(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType46.getRangeDurationType();
        int int50 = localDateTime26.get(dateTimeFieldType46);
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.getDefault(category51);
        boolean boolean53 = localDateTime26.equals((java.lang.Object) category51);
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category54, locale55);
        boolean boolean57 = locale55.hasExtensions();
        java.util.Locale.setDefault(category51, locale55);
        java.lang.String str59 = locale55.getScript();
        java.lang.String str60 = dateTimeField16.getAsShortText(273, locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(590000000L, chronology3, locale55, (java.lang.Integer) 27107208, 978);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "70" + "'", str33, "70");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category51.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category54.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "273" + "'", str60, "273");
    }

    @Test
    public void test5383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5383");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        boolean boolean21 = dateTimeField15.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((-592L));
        int int27 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = property24.addToCopy(593);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime29, 608, locale31);
        long long34 = dateTimeField15.roundHalfFloor(103L);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withDurationAdded(readableDuration41, 28);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime47 = property44.addToCopy(721);
        int int48 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.millisOfSecond();
        org.joda.time.DurationField durationField59 = chronology55.seconds();
        org.joda.time.DurationField durationField60 = chronology55.minutes();
        org.joda.time.DateTimeField dateTimeField61 = chronology55.era();
        org.joda.time.DateTimeField dateTimeField62 = chronology55.monthOfYear();
        org.joda.time.DurationField durationField63 = durationFieldType51.getField(chronology55);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(chronology66);
        java.lang.String str68 = chronology66.toString();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.weekOfWeekyear();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.lang.String str72 = dateTimeField69.getAsShortText((long) (byte) -1, locale71);
        java.util.Locale locale73 = locale71.stripExtensions();
        java.lang.String str74 = locale71.toLanguageTag();
        java.lang.String str75 = locale71.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(1615715942400354L, chronology55, locale71, (java.lang.Integer) 992, 405);
        java.util.Locale locale79 = dateTimeParserBucket78.getLocale();
        java.util.Locale locale80 = locale79.stripExtensions();
        java.lang.String str81 = dateTimeField15.getAsShortText(1586849600415L, locale80);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "608" + "'", str32, "608");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "weeks" + "'", str52, "weeks");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[UTC]" + "'", str68, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ko" + "'", str74, "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "20" + "'", str81, "20");
    }

    @Test
    public void test5384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5384");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(54);
        org.joda.time.DateTime.Property property27 = dateTime24.weekyear();
        org.joda.time.LocalTime localTime28 = dateTime24.toLocalTime();
        org.joda.time.DateTime dateTime30 = dateTime24.minus((long) 989);
        org.joda.time.DateTime dateTime32 = dateTime24.withMillisOfDay(27101706);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test5385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5385");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours((int) (byte) 0);
        boolean boolean8 = dateTime6.isEqual((long) (short) 100);
        int int9 = dateTime6.getWeekyear();
        org.joda.time.Chronology chronology10 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyear();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.getDefault(category14);
        java.util.Locale.setDefault(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((-37742111999221L), chronology10, locale16, (java.lang.Integer) 508);
        org.joda.time.DateTimeField dateTimeField20 = chronology10.era();
        boolean boolean21 = durationFieldType0.isSupported(chronology10);
        org.joda.time.DurationField durationField22 = chronology10.weekyears();
        long long25 = durationField22.subtract((-1640995199896L), (long) 26880911);
        long long27 = durationField22.getMillis(26775);
        long long30 = durationField22.subtract((long) 2435, 934);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "years" + "'", str1, "years");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-848281259318399896L) + "'", long25 == (-848281259318399896L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 844937389800000L + "'", long27 == 844937389800000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-29473718397565L) + "'", long30 == (-29473718397565L));
    }

    @Test
    public void test5386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5386");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = dateTime1.plusYears((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(676);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(569);
        int int12 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((java.lang.Object) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime9.minusMonths(926);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime9.plus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime9.minusDays(54);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.getDefault(category20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale37.getDisplayName();
        dateTimeParserBucket28.saveField(dateTimeFieldType35, "97", locale37);
        java.lang.String str40 = locale22.getDisplayCountry(locale37);
        java.lang.String str41 = locale37.getDisplayScript();
        java.lang.String str42 = locale37.getDisplayScript();
        java.lang.String str43 = locale21.getDisplayCountry(locale37);
        java.util.Calendar calendar44 = dateTime19.toCalendar(locale37);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 849 + "'", int5 == 849);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 27200849 + "'", int12 == 27200849);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str38, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "China" + "'", str40, "China");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "China" + "'", str43, "China");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-19376123199203,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1355,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=356,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=20,MILLISECOND=849,ZONE_OFFSET=52,DST_OFFSET=0]");
    }

    @Test
    public void test5387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5387");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusHours(857);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(26902088);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(400);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar38 = dateTime37.toGregorianCalendar();
        int int39 = dateTime37.getMillisOfSecond();
        org.joda.time.DateTime.Property property40 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime37.minusMinutes(25);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int48 = localDateTime44.get(dateTimeFieldType47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int55 = localDateTime52.get(dateTimeFieldType54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime44.property(dateTimeFieldType54);
        boolean boolean57 = dateTime42.isSupported(dateTimeFieldType54);
        dateTimeParserBucket16.saveField(dateTimeFieldType54, 6);
        int int60 = localDateTime10.indexOf(dateTimeFieldType54);
        org.joda.time.LocalDateTime.Property property61 = localDateTime10.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(gregorianCalendar38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 879 + "'", int39 == 879);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test5388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5388");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        java.lang.String str9 = property8.getName();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfDay();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(648);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds(569);
        org.joda.time.DateTime dateTime24 = dateTime20.plusDays(575);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        dateTimeParserBucket31.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket31.getZone();
        long long50 = dateTimeZone48.previousTransition((long) 593);
        org.joda.time.DateTime dateTime51 = dateTime24.withZone(dateTimeZone48);
        int int52 = property8.getDifference((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime53 = property8.getDateTime();
        org.joda.time.DateTime dateTime54 = property8.roundHalfEvenCopy();
        java.lang.String str55 = property8.getAsString();
        org.joda.time.Interval interval56 = property8.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 593L + "'", long50 == 593L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-49641120) + "'", int52 == (-49641120));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "27200" + "'", str55, "27200");
        org.junit.Assert.assertNotNull(interval56);
    }

    @Test
    public void test5389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5389");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(20);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.minuteOfDay();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test5390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5390");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket6.getChronology();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        java.lang.String str19 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        dateTimeParserBucket27.saveField(dateTimeFieldType31, "it", locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology17, locale33, (java.lang.Integer) 9, 538);
        java.lang.String str40 = nameProvider12.getShortName(locale33, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale41 = locale33.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology11, locale33, (java.lang.Integer) 26798222);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusHours(118);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.plusMinutes(165);
        long long60 = chronology11.set((org.joda.time.ReadablePartial) localDateTime58, (long) 272);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minus(readablePeriod65);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDateTime64.toDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = dateTime70.minusWeeks((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime70.getZone();
        long long76 = dateTimeZone73.convertLocalToUTC((-1510245229601L), false);
        org.joda.time.Chronology chronology77 = chronology11.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField78 = chronology11.centuries();
        org.joda.time.DateTimeField dateTimeField79 = chronology11.hourOfHalfday();
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31526099000L) + "'", long60 == (-31526099000L));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1510245229653L) + "'", long76 == (-1510245229653L));
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test5391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5391");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        java.util.Date date4 = dateTime1.toDate();
        org.joda.time.DateTime.Property property5 = dateTime1.dayOfMonth();
        java.lang.String str6 = property5.getAsString();
        int int7 = property5.getMaximumValue();
        int int8 = property5.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property5.addToCopy(139);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        dateTimeParserBucket17.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        java.lang.String str29 = dateTimeField27.getAsShortText((long) 28);
        dateTimeParserBucket17.saveField(dateTimeField27, 100);
        dateTimeParserBucket17.setOffset(19);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket17.getZone();
        boolean boolean35 = dateTimeZone11.equals((java.lang.Object) dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int int37 = localDateTime36.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:33:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "22" + "'", str6, "22");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 28 + "'", int7 == 28);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53 + "'", int37 == 53);
    }

    @Test
    public void test5392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5392");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        boolean boolean25 = dateTimeZone23.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        java.util.TimeZone timeZone27 = dateTimeZone23.toTimeZone();
        int int29 = timeZone27.getOffset((long) 7);
        java.util.TimeZone.setDefault(timeZone27);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId31 = timeZone27.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: +00:00:00.052");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test5393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5393");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, 0L, 603);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusWeeks((-593));
        long long24 = chronology9.set((org.joda.time.ReadablePartial) localDateTime22, (long) 685);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 52, chronology9);
        org.joda.time.DateTimeField dateTimeField26 = chronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName(100L);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        java.lang.String str44 = chronology42.toString();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.Chronology chronology48 = chronology42.withZone(dateTimeZone46);
        dateTimeParserBucket35.setZone(dateTimeZone46);
        long long51 = dateTimeZone27.getMillisKeepLocal(dateTimeZone46, (long) 1978);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        long long54 = chronology9.set((org.joda.time.ReadablePartial) localDateTime52, 908L);
        org.joda.time.DateTimeField dateTimeField55 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField56 = chronology9.secondOfMinute();
        java.util.Locale locale60 = new java.util.Locale("27013038", "-0001-12-22T20:48:40.952+00:00:00.052");
        java.lang.String str61 = dateTimeField56.getAsShortText(588, locale60);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 621475200035L + "'", long24 == 621475200035L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.052" + "'", str29, "+00:00:00.052");
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1978L + "'", long51 == 1978L);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645515201077L + "'", long54 == 1645515201077L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals(locale60.toString(), "27013038_-0001-12-22T20:48:40.952+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "588" + "'", str61, "588");
    }

    @Test
    public void test5394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5394");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        int int20 = dateTimeParserBucket5.getOffset();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 136);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 136);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket5.getZone();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime27.withSecondOfMinute(965);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 965 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test5395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5395");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        java.util.Date date5 = dateTime2.toDate();
        org.joda.time.DateTime.Property property6 = dateTime2.dayOfMonth();
        java.lang.String str7 = property6.getAsString();
        int int8 = property6.getMaximumValue();
        int int9 = property6.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property6.roundHalfCeilingCopy();
        int int11 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(563);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(92);
        org.joda.time.LocalDateTime localDateTime16 = dateTime13.toLocalDateTime();
        org.joda.time.Chronology chronology17 = dateTime13.getChronology();
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale18.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 683, chronology17, locale18, (java.lang.Integer) 744);
        dateTimeParserBucket24.setOffset((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:33:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 28 + "'", int8 == 28);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587" + "'", str20, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test5396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5396");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        int int6 = dateTime3.getMinuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime3.secondOfMinute();
        org.joda.time.DateTime.Property property8 = dateTime3.minuteOfHour();
        org.joda.time.DateTime.Property property9 = dateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear((-1));
        org.joda.time.DateTime dateTime15 = dateTime11.withMillisOfDay(0);
        int int16 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime15.withYear(139);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        int int20 = localDateTime19.getCenturyOfEra();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        dateTimeParserBucket26.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket26.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.lang.String str45 = dateTimeZone43.toString();
        java.lang.String str46 = dateTimeZone43.toString();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone43);
        long long50 = dateTimeZone43.convertLocalToUTC((long) 764, true);
        org.joda.time.DateTime dateTime51 = localDateTime19.toDateTime(dateTimeZone43);
        boolean boolean52 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime3.plusSeconds(678);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime57 = dateTime3.withPeriodAdded(readablePeriod55, 81);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 453 + "'", int6 == 453);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.052" + "'", str45, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.052" + "'", str46, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 712L + "'", long50 == 712L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test5397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5397");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property14 = dateTime9.centuryOfEra();
        int int15 = dateTime9.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime9.plus(readablePeriod16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(readableDuration18, 49);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology22, locale23, (java.lang.Integer) 227);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) '#', 837);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours((int) (byte) 0);
        java.util.Date date41 = dateTime38.toDate();
        org.joda.time.DateTime.Property property42 = dateTime38.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        boolean boolean44 = dateTime30.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekyear((-1));
        org.joda.time.DateTime.Property property50 = dateTime49.millisOfSecond();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Calendar calendar53 = dateTime49.toCalendar(locale51);
        java.lang.String str54 = locale51.getScript();
        dateTimeParserBucket28.saveField(dateTimeFieldType43, "Property[minuteOfDay]", locale51);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType43.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType43.getRangeDurationType();
        boolean boolean58 = dateTime17.isSupported(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime67.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.plusMillis(603);
        int int84 = localDateTime83.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime83.plusSeconds(170);
        boolean boolean87 = localDateTime76.isAfter((org.joda.time.ReadablePartial) localDateTime86);
        boolean boolean88 = localDateTime63.isEqual((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime63.plusMinutes(92);
        org.joda.time.ReadableDuration readableDuration91 = null;
        org.joda.time.LocalDateTime localDateTime92 = localDateTime63.minus(readableDuration91);
        org.joda.time.ReadableInstant readableInstant93 = null;
        org.joda.time.DateTime dateTime94 = localDateTime63.toDateTime(readableInstant93);
        org.joda.time.Chronology chronology95 = localDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField96 = dateTimeFieldType43.getField(chronology95);
        int int97 = dateTimeField96.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:33:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u671d\u9c9c\u6587" + "'", str25, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ko" + "'", str26, "ko");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Feb 22 07:33:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62194148798739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=25,DAY_OF_YEAR=56,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=21,MILLISECOND=313,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 31 + "'", int97 == 31);
    }

    @Test
    public void test5398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5398");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime3.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime.Property property13 = dateTime9.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.monthOfYear();
        long long30 = dateTimeField28.roundHalfCeiling((long) 180);
        int int31 = dateTime14.get(dateTimeField28);
        long long34 = dateTimeField28.getDifferenceAsLong(2001082L, (long) 27019877);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test5399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5399");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMillis(603);
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds(170);
        boolean boolean28 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        boolean boolean29 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime4.plusMinutes(92);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusHours(49);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfEra();
        int int39 = localDateTime37.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfDay(0);
        boolean boolean42 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        int int43 = localDateTime37.getWeekyear();
        java.lang.String str44 = localDateTime37.toString();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime37.plusYears(947999);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        java.util.Locale.Builder builder50 = builder48.setLanguageTag("coreano");
        java.util.Locale.Builder builder51 = builder50.clear();
        java.util.Locale.Builder builder53 = builder51.setRegion("100");
        java.util.Locale.Builder builder56 = builder53.setExtension('x', "");
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology59, locale60, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField64 = null;
        dateTimeParserBucket63.saveField(dateTimeField64, (int) (short) 0);
        java.util.Locale locale67 = dateTimeParserBucket63.getLocale();
        java.util.Locale.setDefault(category57, locale67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property74 = dateTime71.centuryOfEra();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = property74.getAsText(locale75);
        java.lang.String str78 = locale69.getDisplayName(locale75);
        java.lang.String str79 = locale75.getISO3Language();
        java.util.Locale.setDefault(category57, locale75);
        java.util.Locale locale81 = java.util.Locale.getDefault(category57);
        java.lang.String str82 = locale81.getDisplayName();
        java.util.Locale.Builder builder83 = builder56.setLocale(locale81);
        boolean boolean84 = localDateTime46.equals((java.lang.Object) builder56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder87 = builder56.setUnicodeLocaleKeyword("2022-02-22T07:27:48.118", "2022-02-22T07:31:22.717+00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T07:27:48.118 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1969-12-29T23:00:00.052" + "'", str44, "1969-12-29T23:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale67);
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "it" + "'", str76, "it");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "20" + "'", str77, "20");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "coreano" + "'", str78, "coreano");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ita" + "'", str79, "ita");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "italiano" + "'", str82, "italiano");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test5400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5400");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        java.lang.String str9 = property8.getName();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfDay();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(648);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds(569);
        org.joda.time.DateTime dateTime24 = dateTime20.plusDays(575);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        dateTimeParserBucket31.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket31.getZone();
        long long50 = dateTimeZone48.previousTransition((long) 593);
        org.joda.time.DateTime dateTime51 = dateTime24.withZone(dateTimeZone48);
        int int52 = property8.getDifference((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime53 = property8.getDateTime();
        org.joda.time.DateTime dateTime54 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime56 = property8.setCopy(635);
        int int57 = dateTime56.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar62 = dateTime61.toGregorianCalendar();
        int int63 = dateTime61.getMillisOfSecond();
        org.joda.time.DateTime.Property property64 = dateTime61.minuteOfHour();
        org.joda.time.DateTime dateTime66 = dateTime61.withDayOfMonth(19);
        int int67 = dateTime61.getMinuteOfDay();
        int int68 = dateTime61.getEra();
        org.joda.time.DateTime dateTime70 = dateTime61.withCenturyOfEra(647);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime73 = dateTime61.withDurationAdded(readableDuration71, 126);
        int int74 = dateTime61.getCenturyOfEra();
        int int75 = dateTime61.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime77.toMutableDateTime();
        org.joda.time.DateTime dateTime83 = dateTime77.withDurationAdded((long) '#', 837);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone84);
        org.joda.time.DateTime dateTime87 = dateTime85.plusHours((int) (byte) 0);
        java.util.Date date88 = dateTime85.toDate();
        org.joda.time.DateTime.Property property89 = dateTime85.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property89.getFieldType();
        boolean boolean91 = dateTime77.isSupported(dateTimeFieldType90);
        java.lang.String str92 = dateTimeFieldType90.toString();
        boolean boolean93 = dateTime61.isSupported(dateTimeFieldType90);
        boolean boolean94 = dateTime56.isSupported(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 593L + "'", long50 == 593L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-49641120) + "'", int52 == (-49641120));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 12 + "'", int57 == 12);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(gregorianCalendar62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 597 + "'", int63 == 597);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 453 + "'", int67 == 453);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20 + "'", int74 == 20);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2020 + "'", int75 == 2020);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(date88);
// flaky:         org.junit.Assert.assertEquals(date88.toString(), "Tue Feb 22 07:33:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "dayOfMonth" + "'", str92, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test5401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5401");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(7);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plus(readableDuration27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime30.plusMonths(19);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.DateTime dateTime41 = dateTime37.withMillis((long) 26751);
        org.joda.time.DateTime dateTime42 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusHours((int) (byte) 0);
        boolean boolean48 = dateTime46.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime46.toMutableDateTime(dateTimeZone49);
        java.lang.String str52 = dateTimeZone49.toString();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMillis(603);
        int int56 = localDateTime55.getYear();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.withWeekyear((-1));
        org.joda.time.DateTime.Property property61 = dateTime58.yearOfCentury();
        org.joda.time.DateTime dateTime63 = dateTime58.minusMinutes(26751806);
        org.joda.time.DateTime dateTime65 = dateTime58.withSecondOfMinute(57);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int67 = dateTime58.get(dateTimeFieldType66);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType66.getDurationType();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime55.withField(dateTimeFieldType66, 274);
        int int71 = dateTime41.get(dateTimeFieldType66);
        org.joda.time.DateTime.Property property72 = dateTime41.millisOfDay();
        org.joda.time.DateTime dateTime73 = property72.roundCeilingCopy();
        org.joda.time.DateTime dateTime75 = property72.setCopy("26757750");
        org.joda.time.DateTime dateTime77 = dateTime75.plusSeconds(202);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:33:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.052" + "'", str52, "+00:00:00.052");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 735 + "'", int67 == 735);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 803 + "'", int71 == 803);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test5402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5402");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        dateTimeParserBucket6.saveField(dateTimeFieldType10, "it", locale12);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        java.lang.Integer int23 = dateTimeParserBucket19.getOffsetInteger();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekOfWeekyear();
        boolean boolean26 = dateTimeFieldType10.isSupported(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.weekyears();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyearOfCentury();
        java.lang.String str34 = dateTimeField32.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfEvenCopy();
        int int40 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime39.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime45 = property43.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) '#');
        int[] intArray49 = chronology24.get((org.joda.time.ReadablePartial) localDateTime47, 163296000435L);
        org.joda.time.Chronology chronology50 = chronology24.withUTC();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(1646033548529L, chronology50, locale52, (java.lang.Integer) 92);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "70" + "'", str34, "70");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1975, 3, 6, 435]");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test5403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5403");
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology4, locale5, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField9 = null;
        dateTimeParserBucket8.saveField(dateTimeField9, (int) (short) 0);
        java.lang.Integer int12 = dateTimeParserBucket8.getOffsetInteger();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket8.getChronology();
        org.joda.time.tz.NameProvider nameProvider14 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology19);
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfWeek();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology25, locale26, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField30 = null;
        dateTimeParserBucket29.saveField(dateTimeField30, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        dateTimeParserBucket29.saveField(dateTimeFieldType33, "it", locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology19, locale35, (java.lang.Integer) 9, 538);
        java.lang.String str42 = nameProvider14.getShortName(locale35, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale43 = locale35.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology13, locale35, (java.lang.Integer) 26798222);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusHours(118);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.plusMinutes(165);
        long long62 = chronology13.set((org.joda.time.ReadablePartial) localDateTime60, (long) 272);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 41, chronology13);
        org.joda.time.DateTimeField dateTimeField65 = chronology13.monthOfYear();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(2920778861679L, chronology13);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(nameProvider14);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-31526099000L) + "'", long62 == (-31526099000L));
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test5404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5404");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        boolean boolean21 = dateTimeField15.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((-592L));
        int int27 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = property24.addToCopy(593);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime29, 608, locale31);
        long long34 = dateTimeField15.roundHalfFloor(103L);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withDurationAdded(readableDuration41, 28);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime47 = property44.addToCopy(721);
        int int48 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withYear(26831200);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.withCenturyOfEra(310);
        java.lang.String str53 = localDateTime52.toString();
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "608" + "'", str32, "608");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "31023-12-18T07:33:21.785" + "'", str53, "31023-12-18T07:33:21.785");
    }

    @Test
    public void test5405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5405");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime3.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime.Property property13 = dateTime9.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology16, locale17, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField21 = null;
        dateTimeParserBucket20.saveField(dateTimeField21, (int) (short) 0);
        java.lang.Integer int24 = dateTimeParserBucket20.getOffsetInteger();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.monthOfYear();
        long long30 = dateTimeField28.roundHalfCeiling((long) 180);
        int int31 = dateTime14.get(dateTimeField28);
        org.joda.time.DurationField durationField32 = dateTimeField28.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test5406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5406");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((-592L));
        int int5 = property2.getMinimumValue();
        java.lang.String str6 = property2.getAsString();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(20);
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(26751557);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(9);
        boolean boolean35 = property2.equals((java.lang.Object) dateTime32);
        org.joda.time.DateTime.Property property36 = dateTime32.hourOfDay();
        org.joda.time.Chronology chronology37 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.secondOfDay();
        long long47 = dateTimeField45.roundFloor((long) 591);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology50, locale51, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField55 = null;
        dateTimeParserBucket54.saveField(dateTimeField55, (int) (short) 0);
        dateTimeParserBucket54.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        java.lang.String str66 = dateTimeField64.getAsShortText((long) 28);
        dateTimeParserBucket54.saveField(dateTimeField64, 100);
        java.util.Locale locale69 = dateTimeParserBucket54.getLocale();
        java.lang.String str70 = dateTimeField45.getAsShortText(68, locale69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = dateTimeField38.getAsShortText(readablePartial39, locale69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(locale69);
// flaky:         org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "68" + "'", str70, "68");
    }

    @Test
    public void test5407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5407");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(734);
        int int6 = localDateTime3.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test5408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5408");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours(28);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy((long) 569);
        org.joda.time.LocalDateTime localDateTime7 = property4.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(534);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 534 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test5409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5409");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getMillisOfSecond();
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property20 = dateTime17.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = property20.getAsText(locale21);
        java.lang.String str24 = locale15.getDisplayName(locale21);
        int int25 = property14.getMaximumTextLength(locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        int int27 = strSet26.size();
        boolean boolean28 = dateTimeParserBucket5.restoreState((java.lang.Object) int27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime30.plusMonths(19);
        org.joda.time.DateTime dateTime39 = dateTime30.plusHours(100);
        org.joda.time.DateTime.Property property40 = dateTime30.dayOfYear();
        int int41 = property40.getMaximumValueOverall();
        boolean boolean42 = dateTimeParserBucket5.restoreState((java.lang.Object) property40);
        org.joda.time.DateTime dateTime43 = property40.roundFloorCopy();
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths(207);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime43.minus(readablePeriod46);
        org.joda.time.DateTime dateTime48 = dateTime47.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "20" + "'", str23, "20");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "coreano" + "'", str24, "coreano");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:33:22 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test5410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5410");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(41153);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond(563);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology13);
        java.lang.String str15 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology13);
        boolean boolean20 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Chronology chronology21 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours((int) (byte) 0);
        boolean boolean29 = dateTime27.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        boolean boolean34 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime27.minus(readablePeriod35);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        java.lang.Integer int46 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.lang.String str52 = locale51.getDisplayName();
        dateTimeParserBucket42.saveField(dateTimeFieldType49, "97", locale51);
        java.util.Calendar calendar54 = dateTime27.toCalendar(locale51);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.minusHours(49);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime64 = property61.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusHours((int) (byte) 0);
        java.util.Date date69 = dateTime66.toDate();
        org.joda.time.DateTime.Property property70 = dateTime66.dayOfMonth();
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = property70.getAsShortText(locale71);
        int int73 = property61.getMaximumShortTextLength(locale71);
        java.lang.String str74 = locale71.getDisplayVariant();
        java.lang.String str75 = locale51.getDisplayVariant(locale71);
        int int76 = property22.getMaximumShortTextLength(locale71);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str52, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645515202008,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=22,MILLISECOND=60,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(date69);
// flaky:         org.junit.Assert.assertEquals(date69.toString(), "Tue Feb 22 07:33:22 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "22" + "'", str72, "22");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test5411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5411");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket6.getChronology();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        java.lang.String str19 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        dateTimeParserBucket27.saveField(dateTimeFieldType31, "it", locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology17, locale33, (java.lang.Integer) 9, 538);
        java.lang.String str40 = nameProvider12.getShortName(locale33, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale41 = locale33.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology11, locale33, (java.lang.Integer) 26798222);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusHours(118);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.plusMinutes(165);
        long long60 = chronology11.set((org.joda.time.ReadablePartial) localDateTime58, (long) 272);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHours(445);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 288, dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withWeekyear(2035);
        long long70 = chronology11.set((org.joda.time.ReadablePartial) localDateTime66, (long) 696);
        // The following exception was thrown during execution in test generation
        try {
            long long78 = chronology11.getDateTimeMillis(242, 26962, 353, (-47282929), 77, (-52), 11744);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -47282929 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31526099000L) + "'", long60 == (-31526099000L));
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1647117202073L + "'", long70 == 1647117202073L);
    }

    @Test
    public void test5412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5412");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour((int) (short) 10);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded(readableDuration14, (int) (byte) 0);
        boolean boolean17 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime5.era();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField25 = null;
        dateTimeParserBucket24.saveField(dateTimeField25, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readableDuration32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime35 = property34.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property34.getFieldType();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property52 = dateTime49.centuryOfEra();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = property52.getAsText(locale53);
        java.lang.String str56 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDateTime46, (-1), locale53);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = localDateTime46.toString("445", locale58);
        dateTimeParserBucket24.saveField(dateTimeFieldType36, "52", locale58);
        java.util.Calendar calendar61 = dateTime5.toCalendar(locale58);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.fromCalendarFields(calendar61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minus(readableDuration63);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime69 = property67.addToCopy((-592L));
        int int70 = property67.getMinimumValue();
        java.lang.String str71 = property67.toString();
        org.joda.time.LocalDateTime localDateTime73 = property67.addToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withCenturyOfEra(632);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.millisOfDay();
        int int77 = localDateTime64.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "it" + "'", str54, "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "20" + "'", str55, "20");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1" + "'", str56, "-1");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "445" + "'", str59, "445");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=-62194335997907,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=33,SECOND=22,MILLISECOND=145,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Property[yearOfCentury]" + "'", str71, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test5413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5413");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, 853);
        org.joda.time.DateTime dateTime16 = dateTime11.withMillisOfDay(57);
        org.joda.time.Instant instant17 = dateTime11.toInstant();
        int int18 = dateTime11.getMinuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology20, locale21, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.clockhourOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology25);
        java.util.Date date30 = dateTime29.toDate();
        boolean boolean31 = dateTime29.isEqualNow();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 453 + "'", int18 == 453);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 12 07:33:22 GMT+00:00 2035");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test5414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5414");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        dateTimeParserBucket13.saveField(dateTimeFieldType17, "it", locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology3, locale19, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField30 = chronology26.millis();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology26.getZone();
        long long33 = dateTimeZone31.convertUTCToLocal((long) 558);
        dateTimeParserBucket23.setZone(dateTimeZone31);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfDay();
        org.joda.time.DurationField durationField37 = chronology35.years();
        long long40 = durationField37.getValueAsLong((long) 26865, (-62118328665762L));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 558L + "'", long33 == 558L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test5415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5415");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime dateTime31 = dateTime27.plusHours((int) (byte) 100);
        boolean boolean33 = dateTime31.isBefore((long) ' ');
        org.joda.time.DateTime.Property property34 = dateTime31.weekOfWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime31.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withPeriodAdded(readablePeriod37, 593);
        org.joda.time.DateTime dateTime41 = dateTime36.plusDays(837);
        org.joda.time.DateTime dateTime42 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime.Property property43 = localDateTime24.yearOfCentury();
        long long44 = property43.remainder();
        org.joda.time.LocalDateTime localDateTime46 = property43.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime47 = property43.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withYearOfEra(10);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withDurationAdded(readableDuration54, 28);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.era();
        boolean boolean65 = localDateTime63.isSupported(dateTimeFieldType64);
        int int66 = localDateTime58.get(dateTimeFieldType64);
        boolean boolean67 = localDateTime56.isEqual((org.joda.time.ReadablePartial) localDateTime58);
        int int68 = localDateTime58.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime58.plusSeconds(989);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime72);
        int int74 = localDateTime72.getDayOfMonth();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3600052L + "'", long44 == 3600052L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test5416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5416");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        dateTimeParserBucket5.setOffset(19);
        java.lang.Object obj22 = dateTimeParserBucket5.saveState();
        java.util.Locale locale23 = dateTimeParserBucket5.getLocale();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear((-1));
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DurationField durationField36 = chronology32.seconds();
        org.joda.time.DurationField durationField37 = chronology32.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.era();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.monthOfYear();
        int int40 = dateTime29.get(dateTimeField39);
        long long43 = dateTimeField39.addWrapField((long) 80, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property48 = dateTime45.centuryOfEra();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = property48.getAsText(locale49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        boolean boolean57 = dateTime55.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime55.toMutableDateTime(dateTimeZone58);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = dateTimeZone58.getName((long) (byte) 1, locale62);
        java.lang.String str64 = locale62.getScript();
        java.lang.String str65 = property48.getAsShortText(locale62);
        java.lang.String str66 = locale62.getDisplayScript();
        int int67 = dateTimeField39.getMaximumTextLength(locale62);
        java.lang.String str68 = locale62.getDisplayVariant();
        java.lang.String str69 = locale23.getDisplayScript(locale62);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 80L + "'", long43 == 80L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "20" + "'", str51, "20");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.052" + "'", str63, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "20" + "'", str65, "20");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test5417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5417");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        long long24 = dateTimeZone19.convertUTCToLocal((long) 441);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay(26807106);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = property28.addToCopy(8L);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 493L + "'", long24 == 493L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test5418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5418");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear(2022);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property29 = dateTime26.centuryOfEra();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = property29.getAsText(locale30);
        java.lang.String str33 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime23, (-1), locale30);
        java.util.Locale.setDefault(locale30);
        java.lang.String str35 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale30);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime14.plusMinutes(20);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfCeilingCopy();
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        org.joda.time.LocalDateTime localDateTime42 = property38.setCopy("1", locale41);
        org.joda.time.LocalDateTime localDateTime43 = property38.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology56, locale57, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField61 = null;
        dateTimeParserBucket60.saveField(dateTimeField61, (int) (short) 0);
        java.lang.Integer int64 = dateTimeParserBucket60.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket60.setZone(dateTimeZone65);
        dateTimeParserBucket51.setZone(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone68 = dateTimeParserBucket51.getZone();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone68);
        java.util.Locale.Category category71 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale72 = java.util.Locale.getDefault(category71);
        java.util.Locale locale73 = java.util.Locale.getDefault(category71);
        java.lang.String str74 = dateTimeZone68.getShortName((long) 593, locale73);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 272, dateTimeZone68);
        boolean boolean76 = localDateTime43.isAfter((org.joda.time.ReadablePartial) localDateTime75);
        int int77 = localDateTime43.getMinuteOfHour();
        java.lang.String str78 = localDateTime43.toString();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime43.withDurationAdded(readableDuration79, 680);
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "20" + "'", str32, "20");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "999" + "'", str35, "999");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + category71 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category71.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.052" + "'", str74, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 20 + "'", int77 == 20);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-01-01T00:20:00.999" + "'", str78, "2022-01-01T00:20:00.999");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test5419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5419");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DateTime dateTime39 = property34.addToCopy(902);
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds(31);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(889);
        int int44 = dateTime43.getMonthOfYear();
        org.joda.time.DateTime dateTime46 = dateTime43.plusDays(800);
        java.lang.String str47 = dateTime46.toString();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[secondOfDay]" + "'", str37, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2024-06-08T08:47:53.636+00:00:00.052" + "'", str47, "2024-06-08T08:47:53.636+00:00:00.052");
    }

    @Test
    public void test5420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5420");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.joda.time.DurationField durationField9 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusHours((int) (byte) 0);
        boolean boolean16 = dateTime14.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime14.toMutableDateTime(dateTimeZone17);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = dateTimeZone17.getName((long) (byte) 1, locale21);
        org.joda.time.Chronology chronology23 = chronology4.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology4.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 26751806, chronology4);
        org.joda.time.DateTimeField dateTimeField26 = chronology4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusHours((int) (byte) 0);
        boolean boolean32 = dateTime30.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = dateTime30.toString(dateTimeFormatter33);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale36.getDisplayName();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("20");
        java.lang.String str40 = locale36.getDisplayVariant(locale39);
        java.lang.String str41 = dateTime30.toString("1969", locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 947, chronology4, locale36, (java.lang.Integer) 32052);
        org.joda.time.DurationField durationField44 = chronology4.seconds();
        long long47 = durationField44.add((long) 708, (long) (-604799));
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.052" + "'", str22, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T07:33:22.715+00:00:00.052" + "'", str34, "2022-02-22T07:33:22.715+00:00:00.052");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tedesco (Germania)" + "'", str37, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969" + "'", str41, "1969");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-604798292L) + "'", long47 == (-604798292L));
    }

    @Test
    public void test5421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5421");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy(28);
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((-592L));
        org.joda.time.LocalDateTime localDateTime25 = property22.withMaximumValue();
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        dateTimeParserBucket32.saveField(dateTimeFieldType36, "it", locale38);
        java.lang.String str40 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, locale38);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet41.spliterator();
        boolean boolean44 = strSet41.equals((java.lang.Object) 41153);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar49 = dateTime48.toGregorianCalendar();
        int int50 = dateTime48.getMillisOfSecond();
        org.joda.time.DateTime.Property property51 = dateTime48.minuteOfHour();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property57 = dateTime54.centuryOfEra();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = property57.getAsText(locale58);
        java.lang.String str61 = locale52.getDisplayName(locale58);
        int int62 = property51.getMaximumTextLength(locale58);
        java.util.Set<java.lang.String> strSet63 = locale58.getUnicodeLocaleAttributes();
        int int64 = strSet63.size();
        int int65 = strSet63.size();
        java.lang.Object[] objArray66 = strSet63.toArray();
        boolean boolean67 = strSet63.isEmpty();
        boolean boolean68 = strSet41.addAll((java.util.Collection<java.lang.String>) strSet63);
        org.joda.time.tz.Provider provider69 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone71 = provider69.getZone("445");
        java.util.Set<java.lang.String> strSet72 = provider69.getAvailableIDs();
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology74, locale75, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology79 = dateTimeParserBucket78.getChronology();
        java.util.Locale locale80 = dateTimeParserBucket78.getLocale();
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleKeys();
        java.lang.Object[] objArray82 = strSet81.toArray();
        boolean boolean83 = strSet72.containsAll((java.util.Collection<java.lang.String>) strSet81);
        boolean boolean84 = strSet81.isEmpty();
        boolean boolean85 = strSet63.removeAll((java.util.Collection<java.lang.String>) strSet81);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "24" + "'", str40, "24");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(gregorianCalendar49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 905 + "'", int50 == 905);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "it" + "'", str59, "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "20" + "'", str60, "20");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "coreano" + "'", str61, "coreano");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(provider69);
        org.junit.Assert.assertNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test5422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5422");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        long long7 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        int int13 = dateTime11.getMillisOfSecond();
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property20 = dateTime17.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = property20.getAsText(locale21);
        java.lang.String str24 = locale15.getDisplayName(locale21);
        int int25 = property14.getMaximumTextLength(locale21);
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        int int27 = strSet26.size();
        boolean boolean28 = dateTimeParserBucket5.restoreState((java.lang.Object) int27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours((int) (byte) 0);
        java.util.Date date33 = dateTime30.toDate();
        org.joda.time.DateTime.Property property34 = dateTime30.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime37 = dateTime30.plusMonths(19);
        org.joda.time.DateTime dateTime39 = dateTime30.plusHours(100);
        org.joda.time.DateTime.Property property40 = dateTime30.dayOfYear();
        int int41 = property40.getMaximumValueOverall();
        boolean boolean42 = dateTimeParserBucket5.restoreState((java.lang.Object) property40);
        org.joda.time.DateTime dateTime43 = property40.roundFloorCopy();
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded(604800000L, 950);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateTime.Property property49 = dateTime48.year();
        org.joda.time.LocalDateTime localDateTime50 = dateTime48.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime48.minus(readableDuration51);
        int int53 = dateTime52.getSecondOfMinute();
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology55, locale56, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology61, locale62, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField66 = null;
        dateTimeParserBucket65.saveField(dateTimeField66, (int) (short) 0);
        java.lang.Integer int69 = dateTimeParserBucket65.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket65.setZone(dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime73.withWeekyear((-1));
        org.joda.time.DateTime dateTime77 = dateTime73.plusHours((int) (byte) 100);
        boolean boolean79 = dateTime77.isBefore((long) ' ');
        int int80 = dateTimeZone70.getOffset((org.joda.time.ReadableInstant) dateTime77);
        dateTimeParserBucket59.setZone(dateTimeZone70);
        java.lang.String str82 = dateTimeZone70.toString();
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime52.toMutableDateTime(dateTimeZone70);
        org.joda.time.DateTime dateTime84 = dateTime46.withZoneRetainFields(dateTimeZone70);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.DateTime dateTime86 = dateTime84.minus(readableDuration85);
        int int87 = dateTime84.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 33 + "'", int13 == 33);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "20" + "'", str23, "20");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "coreano" + "'", str24, "coreano");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:33:23 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 23 + "'", int53 == 23);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.052" + "'", str82, "+00:00:00.052");
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
    }

    @Test
    public void test5423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5423");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        dateTimeParserBucket6.setZone(dateTimeZone17);
        java.lang.String str29 = dateTimeZone17.toString();
        java.util.Locale locale33 = new java.util.Locale("java.io.IOException: ISOChronology[UTC]", "Property[secondOfDay]");
        java.lang.String str34 = dateTimeZone17.getName((long) 662, locale33);
        java.lang.String str35 = locale0.getDisplayScript(locale33);
        java.lang.String str37 = locale33.getExtension('a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.052" + "'", str29, "+00:00:00.052");
        org.junit.Assert.assertEquals(locale33.toString(), "java.io.ioexception: isochronology[utc]_PROPERTY[SECONDOFDAY]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.052" + "'", str34, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test5424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5424");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property24 = dateTime21.centuryOfEra();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = property24.getAsText(locale25);
        java.lang.String str28 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime18, (-1), locale25);
        java.util.Locale.setDefault(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology3, locale25, (java.lang.Integer) 170, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property37 = dateTime34.centuryOfEra();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = property37.getAsText(locale38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours((int) (byte) 0);
        boolean boolean46 = dateTime44.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime44.toMutableDateTime(dateTimeZone47);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = dateTimeZone47.getName((long) (byte) 1, locale51);
        java.lang.String str53 = locale51.getScript();
        java.lang.String str54 = property37.getAsShortText(locale51);
        int int55 = property37.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property37.getFieldType();
        java.lang.String str57 = dateTimeFieldType56.toString();
        java.lang.String str58 = dateTimeFieldType56.toString();
        dateTimeParserBucket32.saveField(dateTimeFieldType56, 0);
        java.lang.Object obj61 = dateTimeParserBucket32.saveState();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "20" + "'", str27, "20");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1" + "'", str28, "-1");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "it" + "'", str39, "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "20" + "'", str40, "20");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.052" + "'", str52, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "20" + "'", str54, "20");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "centuryOfEra" + "'", str57, "centuryOfEra");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "centuryOfEra" + "'", str58, "centuryOfEra");
        org.junit.Assert.assertNotNull(obj61);
    }

    @Test
    public void test5425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5425");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        boolean boolean2 = timeZone0.observesDaylightTime();
        int int3 = timeZone0.getRawOffset();
        timeZone0.setID("778");
        java.lang.String str6 = timeZone0.getID();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        java.lang.String str19 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyearOfCentury();
        java.lang.String str31 = dateTimeField29.getAsShortText(10L);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = dateTimeField29.getAsText(0L, locale33);
        java.lang.String str35 = dateTimeField23.getAsText(0, locale33);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        int int37 = dateTimeField23.getMaximumShortTextLength(locale36);
        java.lang.String str39 = locale36.getExtension('u');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((-62118328893994L), chronology10, locale36, (java.lang.Integer) 589);
        java.lang.String str42 = timeZone0.getDisplayName(locale36);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "778" + "'", str6, "778");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "70" + "'", str31, "70");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "70" + "'", str34, "70");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GMT+00:00" + "'", str42, "GMT+00:00");
    }

    @Test
    public void test5426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5426");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime2.plusHours((int) (byte) 100);
        boolean boolean8 = dateTime6.isBefore((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.plus(readablePeriod9);
        org.joda.time.DateTime dateTime12 = dateTime6.plusYears(26751557);
        int int13 = dateTime12.getMillisOfSecond();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar20 = dateTime19.toGregorianCalendar();
        int int21 = dateTime19.getMillisOfSecond();
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfHour();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property28 = dateTime25.centuryOfEra();
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = property28.getAsText(locale29);
        java.lang.String str32 = locale23.getDisplayName(locale29);
        int int33 = property22.getMaximumTextLength(locale29);
        java.util.Set<java.lang.String> strSet34 = locale29.getUnicodeLocaleAttributes();
        boolean boolean35 = strSet15.removeAll((java.util.Collection<java.lang.String>) strSet34);
        java.lang.String[] strArray46 = new java.lang.String[] { "Property[millisOfSecond]", "hi!", "445", "hourOfDay", "778", "ita", "89", "2035", "gio", "2022-02-22T07:25:47.829+00:00:00.052" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusHours((int) (byte) 0);
        java.util.Date date53 = dateTime50.toDate();
        boolean boolean54 = strSet47.equals((java.lang.Object) dateTime50);
        boolean boolean55 = strSet15.containsAll((java.util.Collection<java.lang.String>) strSet47);
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.lang.String str57 = locale56.getDisplayName();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleAttributes();
        boolean boolean59 = strSet15.removeAll((java.util.Collection<java.lang.String>) strSet58);
        java.util.Set<java.lang.String> strSet60 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray61 = strSet60.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator62 = strSet60.spliterator();
        java.util.stream.Stream<java.lang.String> strStream63 = strSet60.stream();
        boolean boolean64 = strSet15.containsAll((java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale locale66 = builder65.build();
        boolean boolean67 = strSet15.equals((java.lang.Object) locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 26757541, chronology14, locale66, (java.lang.Integer) 3600052);
        int int70 = dateTimeParserBucket69.getOffset();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.plusHours((int) (byte) 0);
        java.util.Date date75 = dateTime72.toDate();
        org.joda.time.DateTime.Property property76 = dateTime72.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.era();
        org.joda.time.LocalDateTime localDateTime81 = property80.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime86 = property84.addToCopy((-592L));
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int88 = localDateTime86.get(dateTimeFieldType87);
        int int89 = localDateTime81.get(dateTimeFieldType87);
        java.lang.String str90 = dateTimeFieldType87.getName();
        org.joda.time.DateTime.Property property91 = dateTime72.property(dateTimeFieldType87);
        dateTimeParserBucket69.saveField(dateTimeFieldType87, 571);
        java.util.Locale locale94 = dateTimeParserBucket69.getLocale();
        java.lang.String str95 = locale94.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 206 + "'", int13 == 206);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 206 + "'", int21 == 206);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "it" + "'", str30, "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "20" + "'", str31, "20");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "coreano" + "'", str32, "coreano");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Feb 22 07:33:23 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tedesco (Germania)" + "'", str57, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(objArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertNotNull(strStream63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(date75);
// flaky:         org.junit.Assert.assertEquals(date75.toString(), "Tue Feb 22 07:33:23 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hourOfDay" + "'", str90, "hourOfDay");
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test5427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5427");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket6.getZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((-1));
        org.joda.time.DateTime dateTime31 = dateTime27.plusHours((int) (byte) 100);
        boolean boolean33 = dateTime31.isBefore((long) ' ');
        org.joda.time.DateTime.Property property34 = dateTime31.weekOfWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime31.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withPeriodAdded(readablePeriod37, 593);
        org.joda.time.DateTime dateTime41 = dateTime36.plusDays(837);
        org.joda.time.DateTime dateTime42 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime.Property property43 = localDateTime24.yearOfCentury();
        long long44 = property43.remainder();
        org.joda.time.LocalDateTime localDateTime46 = property43.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime47 = property43.roundHalfEvenCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray48 = localDateTime47.getFields();
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3600052L + "'", long44 == 3600052L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldArray48);
    }

    @Test
    public void test5428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5428");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("-1");
        boolean boolean2 = dateTime1.isAfterNow();
        boolean boolean4 = dateTime1.isAfter(662L);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test5429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5429");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("100");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = localDateTime1.toString(dateTimeFormatter2);
        int int4 = localDateTime1.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = localDateTime1.toDateTime();
        int int6 = localDateTime1.getEra();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0100-01-01T00:00:00.000" + "'", str3, "0100-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test5430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5430");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(715);
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName(100L);
        long long32 = dateTimeZone28.previousTransition(1640244358816L);
        long long36 = dateTimeZone28.convertLocalToUTC((-26875994L), true, 2962800000L);
        org.joda.time.DateTime dateTime37 = dateTime26.toDateTime(dateTimeZone28);
        long long39 = dateTimeZone28.previousTransition((long) 857);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.052" + "'", str23, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.052" + "'", str30, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1640244358816L + "'", long32 == 1640244358816L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-26876046L) + "'", long36 == (-26876046L));
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 857L + "'", long39 == 857L);
    }

    @Test
    public void test5431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5431");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone19.isFixed();
        long long25 = dateTimeZone19.adjustOffset(1014721200000L, false);
        long long27 = dateTimeZone19.convertUTCToLocal(1014721200000L);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology29, locale30, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField34 = null;
        dateTimeParserBucket33.saveField(dateTimeField34, (int) (short) 0);
        java.lang.Integer int37 = dateTimeParserBucket33.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket33.setZone(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((-1));
        org.joda.time.DateTime dateTime45 = dateTime41.plusHours((int) (byte) 100);
        boolean boolean47 = dateTime45.isBefore((long) ' ');
        int int48 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime50 = dateTime45.minusYears(20);
        org.joda.time.DateTime.Property property51 = dateTime50.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours((int) (byte) 0);
        java.util.Date date56 = dateTime53.toDate();
        org.joda.time.DateTime.Property property57 = dateTime53.dayOfMonth();
        org.joda.time.DateTime.Property property58 = dateTime53.dayOfMonth();
        int int59 = property51.getDifference((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime61 = property51.addToCopy((-1510244619764L));
        org.joda.time.DurationField durationField62 = property51.getLeapDurationField();
        org.joda.time.DateTime dateTime64 = property51.addWrapFieldToCopy(856);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra(274);
        boolean boolean68 = dateTime64.equals((java.lang.Object) 685);
        int int69 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone19);
        int int72 = dateTimeZone19.getOffsetFromLocal(26940467L);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1014721200000L + "'", long25 == 1014721200000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1014721200052L + "'", long27 == 1014721200052L);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(date56);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Tue Feb 22 07:33:23 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-175220) + "'", int59 == (-175220));
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNull(durationField62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
    }

    @Test
    public void test5432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5432");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        dateTimeParserBucket6.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        java.lang.String str18 = dateTimeField16.getAsShortText((long) 28);
        dateTimeParserBucket6.saveField(dateTimeField16, 100);
        boolean boolean22 = dateTimeField16.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((-592L));
        int int28 = property25.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime30 = property25.addToCopy(593);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime30, 608, locale32);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        boolean boolean35 = dateTimeFieldType0.isSupported(chronology34);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        java.lang.Integer int55 = dateTimeParserBucket51.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket51.setZone(dateTimeZone56);
        dateTimeParserBucket42.setZone(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket42.getZone();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone59);
        boolean boolean61 = dateTimeZone59.isFixed();
        long long64 = dateTimeZone59.adjustOffset(2846437113600010L, false);
        java.lang.String str66 = dateTimeZone59.getShortName(783L);
        org.joda.time.Chronology chronology67 = chronology34.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField68 = chronology34.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "608" + "'", str33, "608");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2846437113600010L + "'", long64 == 2846437113600010L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.052" + "'", str66, "+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test5433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5433");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(715);
        org.joda.time.DateTime dateTime28 = dateTime24.minusHours(730);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology30, locale31, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField35 = null;
        dateTimeParserBucket34.saveField(dateTimeField35, (int) (short) 0);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology39, locale40, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket43.saveField(dateTimeField44, (int) (short) 0);
        java.lang.Integer int47 = dateTimeParserBucket43.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket43.setZone(dateTimeZone48);
        dateTimeParserBucket34.setZone(dateTimeZone48);
        boolean boolean51 = dateTimeZone48.isFixed();
        boolean boolean52 = dateTimeZone48.isFixed();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone48);
        int int54 = dateTime53.getYearOfEra();
        org.joda.time.DateTime dateTime56 = dateTime53.minusMinutes(356);
        org.joda.time.DateTime dateTime58 = dateTime53.withDayOfYear(36);
        org.joda.time.DateTime dateTime60 = dateTime53.plusHours((-36524));
        boolean boolean61 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime dateTime64 = dateTime24.minus(26948L);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.052" + "'", str23, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test5434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5434");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology3.minutes();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale14, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField18 = null;
        dateTimeParserBucket17.saveField(dateTimeField18, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        dateTimeParserBucket17.saveField(dateTimeFieldType21, "it", locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(673L, chronology3, locale23, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        int int29 = dateTimeParserBucket27.getOffset();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(239, 0);
        dateTimeParserBucket27.setZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
    }

    @Test
    public void test5435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5435");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTime.Property property8 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusMonths((int) ' ');
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        org.joda.time.DateTime dateTime14 = dateTime5.withFieldAdded(durationFieldType11, 16);
        org.joda.time.DateTime.Property property15 = dateTime5.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime dateTime21 = dateTime17.withMillisOfDay(0);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((-1));
        org.joda.time.DateTime dateTime40 = dateTime36.plusHours((int) (byte) 100);
        boolean boolean42 = dateTime40.isBefore((long) ' ');
        int int43 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime40);
        int int45 = dateTimeZone33.getStandardOffset((long) 43);
        org.joda.time.DateTime dateTime46 = dateTime21.withZoneRetainFields(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withPeriodAdded(readablePeriod47, (int) '4');
        boolean boolean50 = dateTime5.equals((java.lang.Object) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime49.plusHours(773);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime49.plus(readableDuration53);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weeks" + "'", str12, "weeks");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test5436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5436");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        int int9 = localDateTime8.size();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime8.toDateTime(readableInstant10);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.joda.time.DateTime dateTime14 = dateTime11.plusHours(51);
        org.joda.time.DateTime dateTime17 = dateTime11.withDurationAdded(2397228334015455L, 576);
        org.joda.time.DateTime dateTime19 = dateTime11.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime27.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime27.getZone();
        boolean boolean32 = dateTimeZone31.isFixed();
        int int34 = dateTimeZone31.getOffset((long) 'x');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        int int37 = dateTimeZone31.getOffsetFromLocal((long) 778);
        java.lang.String str38 = dateTimeZone31.toString();
        java.util.TimeZone timeZone39 = dateTimeZone31.toTimeZone();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.monthOfYear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withCenturyOfEra(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology54, locale55, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField59 = null;
        dateTimeParserBucket58.saveField(dateTimeField59, (int) (short) 0);
        dateTimeParserBucket58.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.secondOfMinute();
        java.lang.String str70 = dateTimeField68.getAsShortText((long) 28);
        dateTimeParserBucket58.saveField(dateTimeField68, 100);
        boolean boolean74 = dateTimeField68.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime79 = property77.addToCopy((-592L));
        int int80 = property77.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime82 = property77.addToCopy(593);
        java.util.Locale locale84 = null;
        java.lang.String str85 = dateTimeField68.getAsText((org.joda.time.ReadablePartial) localDateTime82, 608, locale84);
        org.joda.time.Chronology chronology86 = localDateTime82.getChronology();
        boolean boolean87 = dateTimeFieldType52.isSupported(chronology86);
        int int88 = localDateTime51.indexOf(dateTimeFieldType52);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime51.withYearOfEra(775);
        boolean boolean91 = dateTimeZone31.equals((java.lang.Object) localDateTime51);
        long long93 = dateTimeZone31.previousTransition((long) 640);
        boolean boolean94 = dateTime11.equals((java.lang.Object) long93);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0" + "'", str70, "0");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "608" + "'", str85, "608");
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 640L + "'", long93 == 640L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test5437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5437");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField6 = chronology2.millis();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        dateTimeParserBucket16.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket16.getZone();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone33);
        long long38 = dateTimeZone33.convertLocalToUTC(35999999L, false, 1L);
        org.joda.time.Chronology chronology39 = chronology2.withZone(dateTimeZone33);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology51, locale52, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField56 = null;
        dateTimeParserBucket55.saveField(dateTimeField56, (int) (short) 0);
        java.lang.Integer int59 = dateTimeParserBucket55.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket55.setZone(dateTimeZone60);
        dateTimeParserBucket46.setZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket46.getZone();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withCenturyOfEra(2022);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime64);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plus(readablePeriod69);
        int[] intArray72 = chronology2.get((org.joda.time.ReadablePartial) localDateTime70, 0L);
        org.joda.time.DateTimeField dateTimeField73 = chronology2.secondOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 35999999L + "'", long38 == 35999999L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test5438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5438");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear((int) (short) 100);
        int int23 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        int int24 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar29 = dateTime28.toGregorianCalendar();
        int int30 = dateTime28.getMillisOfSecond();
        org.joda.time.DateTime dateTime31 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (byte) 10);
        int int34 = dateTime31.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime37 = dateTime31.withFieldAdded(durationFieldType35, 817);
        boolean boolean38 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTime31);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 578 + "'", int30 == 578);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
    }

    @Test
    public void test5439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5439");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        java.lang.String str9 = property8.getName();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.joda.time.DateTime dateTime11 = property8.withMinimumValue();
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj12, chronology23);
        org.joda.time.DateTime.Property property28 = dateTime27.year();
        org.joda.time.DateTime.Property property29 = dateTime27.minuteOfHour();
        boolean boolean30 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime32 = dateTime11.minusYears(587);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test5440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5440");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours(28);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(26776413);
        int int6 = localDateTime3.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readableDuration14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyearOfCentury();
        java.lang.String str22 = dateTimeField20.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        int int28 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) '#');
        boolean boolean31 = localDateTime27.equals((java.lang.Object) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int36 = localDateTime33.get(dateTimeFieldType35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime30.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getRangeDurationType();
        int int39 = localDateTime15.get(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime15.minusDays(662);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime15.withYear(24);
        boolean boolean44 = localDateTime3.equals((java.lang.Object) 24);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "70" + "'", str22, "70");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test5441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5441");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withWeekyear((-1));
        org.joda.time.DateTime dateTime6 = dateTime2.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime12 = dateTime8.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.Chronology chronology14 = mutableDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 42, chronology14, locale16, (java.lang.Integer) 26865142, 26836);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test5442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5442");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = dateTime2.toGregorianCalendar();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        java.util.Date date13 = dateTime10.toDate();
        org.joda.time.DateTime.Property property14 = dateTime10.dayOfMonth();
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfMonth();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = property15.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property33 = dateTime30.centuryOfEra();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = property33.getAsText(locale34);
        java.lang.String str37 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime27, (-1), locale34);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = dateTimeField23.getAsShortText((int) (byte) 10, locale39);
        long long43 = dateTimeField23.roundHalfFloor((long) 122);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar49 = dateTime48.toGregorianCalendar();
        int int50 = dateTime48.getMillisOfSecond();
        org.joda.time.DateTime.Property property51 = dateTime48.minuteOfHour();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property57 = dateTime54.centuryOfEra();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = property57.getAsText(locale58);
        java.lang.String str61 = locale52.getDisplayName(locale58);
        int int62 = property51.getMaximumTextLength(locale58);
        java.util.Set<java.lang.String> strSet63 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str64 = dateTimeField23.getAsText((int) (short) 100, locale58);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = dateTimeField23.getAsText((long) 837, locale66);
        java.lang.String str68 = locale16.getDisplayScript(locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(952L, chronology4, locale66, (java.lang.Integer) 41172, 671);
        org.joda.time.DateTimeField dateTimeField72 = chronology4.secondOfMinute();
        boolean boolean73 = dateTimeField72.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:33:23 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it" + "'", str17, "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "22" + "'", str18, "22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "it" + "'", str35, "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "20" + "'", str36, "20");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1" + "'", str37, "-1");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10" + "'", str41, "10");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(gregorianCalendar49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 742 + "'", int50 == 742);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "it" + "'", str59, "it");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "20" + "'", str60, "20");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "coreano" + "'", str61, "coreano");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100" + "'", str64, "100");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test5443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5443");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((-1));
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (byte) 100);
        boolean boolean19 = dateTime17.isBefore((long) ' ');
        int int20 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        boolean boolean33 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property34 = dateTime26.secondOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTimeZone10.equals((java.lang.Object) property34);
        java.lang.String str37 = property34.toString();
        org.joda.time.DateTime dateTime39 = property34.addToCopy(902);
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds(31);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(889);
        org.joda.time.DateTime.Property property44 = dateTime41.weekyear();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[secondOfDay]" + "'", str37, "Property[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test5444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5444");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears(360);
        org.joda.time.DateTime dateTime9 = dateTime7.plusSeconds(990);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillis(1548L);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getRangeDurationType();
        boolean boolean19 = localDateTime14.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyearOfCentury();
        java.lang.String str26 = dateTimeField24.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfEvenCopy();
        int int32 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime31.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.Chronology chronology36 = chronology35.withUTC();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology36.getZone();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType17.getField(chronology36);
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType17.getRangeDurationType();
        int int41 = dateTime12.get(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "70" + "'", str26, "70");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 548 + "'", int41 == 548);
    }

    @Test
    public void test5445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5445");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.weekyear();
        boolean boolean7 = dateTimeField6.isLenient();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test5446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5446");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        dateTimeParserBucket6.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        java.lang.String str18 = dateTimeField16.getAsShortText((long) 28);
        dateTimeParserBucket6.saveField(dateTimeField16, 100);
        boolean boolean22 = dateTimeField16.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((-592L));
        int int28 = property25.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime30 = property25.addToCopy(593);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime30, 608, locale32);
        org.joda.time.Chronology chronology34 = localDateTime30.getChronology();
        boolean boolean35 = dateTimeFieldType0.isSupported(chronology34);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology38, locale39, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField43 = null;
        dateTimeParserBucket42.saveField(dateTimeField43, (int) (short) 0);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology47, locale48, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField52 = null;
        dateTimeParserBucket51.saveField(dateTimeField52, (int) (short) 0);
        java.lang.Integer int55 = dateTimeParserBucket51.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket51.setZone(dateTimeZone56);
        dateTimeParserBucket42.setZone(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket42.getZone();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone59);
        boolean boolean61 = dateTimeZone59.isFixed();
        long long64 = dateTimeZone59.adjustOffset(2846437113600010L, false);
        java.lang.String str66 = dateTimeZone59.getShortName(783L);
        org.joda.time.Chronology chronology67 = chronology34.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.millisOfSecond();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DurationField durationField70 = chronology67.years();
        org.joda.time.DurationFieldType durationFieldType71 = durationField70.getType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "608" + "'", str33, "608");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2846437113600010L + "'", long64 == 2846437113600010L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationFieldType71);
    }

    @Test
    public void test5447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5447");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        int int7 = dateTimeParserBucket5.getOffset();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYear((int) (short) 100);
        int int23 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        int int24 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar29 = dateTime28.toGregorianCalendar();
        int int30 = dateTime28.getMillisOfSecond();
        org.joda.time.DateTime dateTime31 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (byte) 10);
        int int34 = dateTime31.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime37 = dateTime31.withFieldAdded(durationFieldType35, 817);
        boolean boolean38 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTime31);
        int int39 = dateTime31.getYearOfEra();
        org.joda.time.DateTime dateTime41 = dateTime31.plus(0L);
        org.joda.time.DateTime.Property property42 = dateTime31.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 867 + "'", int30 == 867);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test5448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5448");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths((int) (byte) 100);
        int[] intArray6 = localDateTime5.getValues();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusDays(4);
        int int9 = localDateTime5.getYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        java.lang.String str16 = dateTimeField14.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfEvenCopy();
        int int22 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime21.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime21);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.Chronology chronology26 = chronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.era();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime5, chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.DurationField durationField30 = chronology26.halfdays();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology33);
        java.lang.String str35 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = dateTimeField36.getAsShortText((long) (byte) -1, locale38);
        java.util.Locale locale40 = locale38.stripExtensions();
        java.lang.String str41 = locale38.toLanguageTag();
        java.lang.String str42 = locale38.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(41410277L, chronology26, locale38);
        org.joda.time.DateTimeField dateTimeField44 = chronology26.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1978, 5, 1, 35]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1978 + "'", int9 == 1978);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "70" + "'", str16, "70");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ko" + "'", str41, "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test5449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5449");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy((-592L));
        int int5 = property2.getMinimumValue();
        java.lang.String str6 = property2.getAsString();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology8, locale9, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField13 = null;
        dateTimeParserBucket12.saveField(dateTimeField13, (int) (short) 0);
        java.lang.Integer int16 = dateTimeParserBucket12.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket12.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear((-1));
        org.joda.time.DateTime dateTime24 = dateTime20.plusHours((int) (byte) 100);
        boolean boolean26 = dateTime24.isBefore((long) ' ');
        int int27 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(20);
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(26751557);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(9);
        boolean boolean35 = property2.equals((java.lang.Object) dateTime32);
        org.joda.time.DateTime.Property property36 = dateTime32.hourOfDay();
        org.joda.time.DateTime dateTime37 = property36.getDateTime();
        org.joda.time.DateTime dateTime38 = property36.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "70" + "'", str6, "70");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test5450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5450");
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology6, locale7, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = null;
        dateTimeParserBucket10.saveField(dateTimeField11, (int) (short) 0);
        java.lang.Integer int14 = dateTimeParserBucket10.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket10.setZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekyear((-1));
        org.joda.time.DateTime dateTime22 = dateTime18.plusHours((int) (byte) 100);
        boolean boolean24 = dateTime22.isBefore((long) ' ');
        int int25 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime27 = dateTime22.minusYears(20);
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = property28.addToCopy((long) 575);
        org.joda.time.DateTime dateTime31 = property28.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime32 = property28.roundHalfCeilingCopy();
        java.lang.String str33 = property28.getAsString();
        org.joda.time.DateTime dateTime34 = property28.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(678, 0, 27190, (-4001), 323, dateTimeZone35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4001 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "11" + "'", str33, "11");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
    }

    @Test
    public void test5451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5451");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        org.joda.time.DateTime.Property property5 = dateTime2.year();
        org.joda.time.DateTime dateTime7 = dateTime2.minusSeconds(241);
        org.joda.time.DateTime dateTime9 = dateTime7.plusSeconds(2022);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusHours(49);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime20 = property17.addToCopy(39399L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours((int) (byte) 0);
        java.util.Date date25 = dateTime22.toDate();
        org.joda.time.DateTime.Property property26 = dateTime22.dayOfMonth();
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = property26.getAsShortText(locale27);
        int int29 = property17.getMaximumShortTextLength(locale27);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = locale30.getDisplayName();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale locale34 = locale30.stripExtensions();
        java.lang.String str35 = locale30.getISO3Language();
        java.lang.String str36 = locale27.getDisplayLanguage(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 472, chronology10, locale30);
        long long40 = dateTimeParserBucket37.computeMillis(false, "avr.");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 22 07:33:24 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "22" + "'", str28, "22");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str31, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "deu" + "'", str33, "deu");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "deu" + "'", str35, "deu");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 420L + "'", long40 == 420L);
    }

    @Test
    public void test5452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5452");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withWeekyear((-1));
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths(10);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        java.util.Date date36 = dateTime33.toDate();
        org.joda.time.DateTime.Property property37 = dateTime33.dayOfMonth();
        org.joda.time.DateTime.Property property38 = dateTime33.dayOfMonth();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = property38.getAsText(locale39);
        java.lang.String str42 = property31.getAsShortText(locale39);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property48 = dateTime45.centuryOfEra();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getLanguage();
        java.lang.String str51 = property48.getAsText(locale49);
        java.lang.String str52 = locale43.getDisplayName(locale49);
        java.lang.String str53 = locale39.getDisplayScript(locale43);
        java.lang.String str54 = dateTimeZone22.getShortName((long) 1970, locale39);
        java.lang.String str55 = locale39.getScript();
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology58, locale59, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField63 = null;
        dateTimeParserBucket62.saveField(dateTimeField63, (int) (short) 0);
        java.util.Locale locale66 = dateTimeParserBucket62.getLocale();
        java.util.Locale.setDefault(category56, locale66);
        java.lang.String str68 = locale39.getDisplayName(locale66);
        java.util.Set<java.lang.Character> charSet69 = locale39.getExtensionKeys();
        java.lang.String str70 = locale39.getISO3Language();
        java.lang.String str71 = locale39.getDisplayCountry();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Feb 22 07:33:24 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "453" + "'", str42, "453");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "20" + "'", str51, "20");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "coreano" + "'", str52, "coreano");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.052" + "'", str54, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "italiano" + "'", str68, "italiano");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ita" + "'", str70, "ita");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test5453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5453");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField10 = null;
        dateTimeParserBucket9.saveField(dateTimeField10, (int) (short) 0);
        java.lang.Integer int13 = dateTimeParserBucket9.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket9.setZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((-1));
        org.joda.time.DateTime dateTime21 = dateTime17.plusHours((int) (byte) 100);
        boolean boolean23 = dateTime21.isBefore((long) ' ');
        int int24 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime26 = dateTime21.minusYears(20);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours((int) (byte) 0);
        java.util.Date date32 = dateTime29.toDate();
        org.joda.time.DateTime.Property property33 = dateTime29.dayOfMonth();
        org.joda.time.DateTime.Property property34 = dateTime29.dayOfMonth();
        int int35 = property27.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime37 = property27.addToCopy(52L);
        org.joda.time.DateTime dateTime38 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.minus(readablePeriod41);
        org.joda.time.DateTime dateTime44 = dateTime42.withYearOfEra(358);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(75121275);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:33:24 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-175220) + "'", int35 == (-175220));
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test5454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5454");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = localDateTime3.toDateTime(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minus(readableDuration10);
        int int12 = localDateTime11.getMillisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology15, locale16, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField20 = null;
        dateTimeParserBucket19.saveField(dateTimeField20, (int) (short) 0);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        java.lang.Integer int32 = dateTimeParserBucket28.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket28.setZone(dateTimeZone33);
        dateTimeParserBucket19.setZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket19.getZone();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear((-1));
        org.joda.time.DateTime dateTime44 = dateTime40.plusHours((int) (byte) 100);
        boolean boolean46 = dateTime44.isBefore((long) ' ');
        org.joda.time.DateTime.Property property47 = dateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime49 = dateTime44.plusMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime52 = dateTime49.withPeriodAdded(readablePeriod50, 593);
        org.joda.time.DateTime dateTime54 = dateTime49.plusDays(837);
        org.joda.time.DateTime dateTime55 = localDateTime37.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime56 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test5455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5455");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket5.setZone(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType12, "97", locale14);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket5.getZone();
        int int19 = dateTimeParserBucket5.getOffset();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tedesco (Germania)" + "'", str15, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test5456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5456");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours((int) (byte) 0);
        boolean boolean28 = dateTime26.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime26.toMutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        int int33 = mutableDateTime31.get(dateTimeFieldType32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.secondOfMinute();
        org.joda.time.DurationField durationField39 = chronology36.millis();
        boolean boolean40 = dateTimeFieldType32.isSupported(chronology36);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.halfdayOfDay();
        dateTimeParserBucket5.saveField(dateTimeField42, 139);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) (-593));
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(457087L, dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(chronology59);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property66 = dateTime63.centuryOfEra();
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.lang.String str68 = locale67.getLanguage();
        java.lang.String str69 = property66.getAsText(locale67);
        java.lang.String str70 = dateTimeField56.getAsText((org.joda.time.ReadablePartial) localDateTime60, (-1), locale67);
        java.util.Locale locale72 = java.util.Locale.ITALIAN;
        java.lang.String str73 = locale72.getLanguage();
        java.lang.String str74 = dateTimeField56.getAsShortText((int) (byte) 10, locale72);
        java.lang.String str75 = locale72.getDisplayName();
        java.util.Set<java.lang.String> strSet76 = locale72.getUnicodeLocaleAttributes();
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = locale72.getDisplayName(locale77);
        java.lang.String str79 = dateTimeZone48.getShortName(947L, locale72);
        java.lang.String str81 = dateTimeZone48.getShortName(1419000L);
        dateTimeParserBucket5.setZone(dateTimeZone48);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 878);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "it" + "'", str68, "it");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "20" + "'", str69, "20");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "-1" + "'", str70, "-1");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "it" + "'", str73, "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "10" + "'", str74, "10");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "italiano" + "'", str75, "italiano");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "italiano" + "'", str78, "italiano");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.052" + "'", str79, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.052" + "'", str81, "+00:00:00.052");
    }

    @Test
    public void test5457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5457");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime6.toGregorianCalendar();
        org.joda.time.Chronology chronology8 = dateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        boolean boolean17 = dateTime15.isEqual((long) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = dateTime15.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology21, locale22, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = null;
        dateTimeParserBucket25.saveField(dateTimeField26, (int) (short) 0);
        java.lang.Integer int29 = dateTimeParserBucket25.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket25.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        boolean boolean39 = dateTime37.isBefore((long) ' ');
        int int40 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime37);
        long long42 = dateTimeZone30.nextTransition((long) (short) -1);
        boolean boolean43 = dateTime15.equals((java.lang.Object) dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        int[] intArray45 = localDateTime44.getValues();
        chronology8.validate((org.joda.time.ReadablePartial) localDateTime10, intArray45);
        org.joda.time.DateTimeField dateTimeField47 = chronology8.weekyear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.millisOfSecond();
        org.joda.time.DurationField durationField54 = dateTimeField53.getLeapDurationField();
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = dateTimeField53.getAsText(457087L, locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 575, chronology8, locale56, (java.lang.Integer) 26759);
        org.joda.time.DateTimeField dateTimeField61 = chronology8.era();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology8);
        boolean boolean63 = strSet3.equals((java.lang.Object) chronology8);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:33:24.507+00:00:00.052" + "'", str19, "2022-02-22T07:33:24.507+00:00:00.052");
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2022, 2, 22, 27204507]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNull(durationField54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "it" + "'", str57, "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "87" + "'", str58, "87");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test5458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5458");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        int int6 = dateTimeField4.getLeapAmount(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = dateTimeField4.getType();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy(241);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale locale17 = locale14.stripExtensions();
        java.lang.String str18 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime12, (int) (short) 100, locale17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology22.getZone();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.year();
        org.joda.time.DurationField durationField27 = durationFieldType19.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime12.withFieldAdded(durationFieldType19, 647);
        org.joda.time.Chronology chronology30 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.yearOfCentury();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology43, locale44, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = null;
        dateTimeParserBucket47.saveField(dateTimeField48, (int) (short) 0);
        java.lang.Integer int51 = dateTimeParserBucket47.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket47.setZone(dateTimeZone52);
        dateTimeParserBucket38.setZone(dateTimeZone52);
        java.util.TimeZone timeZone55 = dateTimeZone52.toTimeZone();
        long long57 = dateTimeZone52.convertUTCToLocal((long) 441);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusHours(465);
        int int61 = localDateTime60.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.plusMillis(130);
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("2000-02-22T07:28:11.219Z");
        java.lang.String str67 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime64, locale66);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u671d\u9c9c\u6587" + "'", str16, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100" + "'", str18, "100");
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 493L + "'", long57 == 493L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "22" + "'", str67, "22");
    }

    @Test
    public void test5459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5459");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        int[] intArray27 = localDateTime26.getValues();
        int[] intArray29 = dateTimeField18.addWrapField((org.joda.time.ReadablePartial) localDateTime23, 0, intArray27, (int) (short) 10);
        int int30 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime12, intArray27);
        int int31 = localDateTime12.size();
        org.joda.time.Chronology chronology32 = localDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale34.getDisplayLanguage();
        java.util.Locale locale39 = new java.util.Locale("", "22");
        java.lang.String str40 = locale34.getDisplayCountry(locale39);
        java.util.Locale.setDefault(locale39);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 385, chronology32, locale42);
        long long46 = dateTimeParserBucket44.computeMillis(true);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 1, 1, 52]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 1, 1, 52]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587" + "'", str36, "\u4e2d\u6587");
        org.junit.Assert.assertEquals(locale39.toString(), "_22");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "China" + "'", str40, "China");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "22" + "'", str43, "22");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 385L + "'", long46 == 385L);
    }

    @Test
    public void test5460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5460");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("70");
        org.joda.time.DateTime dateTime3 = dateTime1.minusMinutes(308);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis(170603);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test5461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5461");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology1, locale2, (java.lang.Integer) 227);
        dateTimeParserBucket7.setPivotYear((java.lang.Integer) 771);
        long long12 = dateTimeParserBucket7.computeMillis(true, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u671d\u9c9c\u6587" + "'", str4, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ko" + "'", str5, "ko");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-50L) + "'", long12 == (-50L));
    }

    @Test
    public void test5462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5462");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(804);
        org.joda.time.Chronology chronology9 = chronology3.withZone(dateTimeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone8.toTimeZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfSecond();
        org.joda.time.DurationField durationField20 = chronology16.seconds();
        org.joda.time.DurationField durationField21 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField24 = chronology16.minutes();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology26, locale27, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField31 = null;
        dateTimeParserBucket30.saveField(dateTimeField31, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        dateTimeParserBucket30.saveField(dateTimeFieldType34, "it", locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(673L, chronology16, locale36, (java.lang.Integer) 10, 453);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        java.lang.Integer int42 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(457087L, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withWeekyear((-1));
        org.joda.time.DateTime dateTime52 = dateTime48.plusHours((int) (byte) 100);
        int int53 = dateTime48.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str55 = dateTimeFieldType54.getName();
        int int56 = dateTime48.get(dateTimeFieldType54);
        int int57 = localDateTime46.get(dateTimeFieldType54);
        java.util.Locale locale59 = java.util.Locale.UK;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(chronology67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property74 = dateTime71.centuryOfEra();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getLanguage();
        java.lang.String str77 = property74.getAsText(locale75);
        java.lang.String str78 = dateTimeField64.getAsText((org.joda.time.ReadablePartial) localDateTime68, (-1), locale75);
        java.util.Set<java.lang.Character> charSet79 = locale75.getExtensionKeys();
        java.lang.String str80 = locale59.getDisplayLanguage(locale75);
        java.util.Set<java.lang.Character> charSet81 = locale75.getExtensionKeys();
        java.lang.String str82 = locale75.getVariant();
        java.lang.String str83 = locale75.getISO3Country();
        java.lang.String str84 = locale75.getDisplayScript();
        dateTimeParserBucket40.saveField(dateTimeFieldType54, "237", locale75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = timeZone10.getDisplayName(false, 26891014, locale75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26891014");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 53 + "'", int53 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "dayOfMonth" + "'", str55, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "it" + "'", str76, "it");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "20" + "'", str77, "20");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1" + "'", str78, "-1");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "inglese" + "'", str80, "inglese");
        org.junit.Assert.assertNotNull(charSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test5463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5463");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = property24.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYear(2022);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property44 = dateTime41.centuryOfEra();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = property44.getAsText(locale45);
        java.lang.String str48 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime38, (-1), locale45);
        java.util.Locale.setDefault(locale45);
        java.lang.String str50 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime29, locale45);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime29.plusMinutes(20);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfCeilingCopy();
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        org.joda.time.LocalDateTime localDateTime57 = property53.setCopy("1", locale56);
        org.joda.time.LocalDateTime localDateTime59 = property53.addToCopy((long) 863);
        int int60 = localDateTime59.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.dayOfWeek();
        java.util.Locale locale65 = new java.util.Locale("2022-02-22T07:26:02.913+00:00:00.052", "100", "2022-02-22T07:26:56.335+00:00:00.052");
        int int66 = property61.getMaximumTextLength(locale65);
        // The following exception was thrown during execution in test generation
        try {
            long long67 = dateTimeField12.set(26781995L, "62524763", locale65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62524763 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "it" + "'", str46, "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "20" + "'", str47, "20");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1" + "'", str48, "-1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "999" + "'", str50, "999");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals(locale65.toString(), "2022-02-22t07:26:02.913+00:00:00.052_100_2022-02-22T07:26:56.335+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
    }

    @Test
    public void test5464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5464");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.year();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, (-175220));
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        java.lang.String str21 = dateTimeField19.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfEvenCopy();
        int int27 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime26.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime26);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str33 = dateTimeFieldType32.getName();
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.property(dateTimeFieldType32);
        boolean boolean35 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property36 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField43 = chronology39.seconds();
        org.joda.time.DurationField durationField44 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.era();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology39.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime29, chronology39);
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(7279200007L, chronology39, locale49);
        long long52 = dateTimeParserBucket50.computeMillis(true);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "70" + "'", str21, "70");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hourOfDay" + "'", str33, "hourOfDay");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 7279200007L + "'", long52 == 7279200007L);
    }

    @Test
    public void test5465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5465");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology12, locale13, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, (int) (short) 0);
        java.lang.Integer int20 = dateTimeParserBucket16.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket16.setZone(dateTimeZone21);
        dateTimeParserBucket7.setZone(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket7.getZone();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone24);
        boolean boolean26 = dateTimeZone24.isFixed();
        long long29 = dateTimeZone24.adjustOffset(2846437113600010L, false);
        java.lang.String str31 = dateTimeZone24.getShortName(783L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((-1514764799755L), dateTimeZone24);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology34, locale35, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField39 = null;
        dateTimeParserBucket38.saveField(dateTimeField39, (int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology43, locale44, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = null;
        dateTimeParserBucket47.saveField(dateTimeField48, (int) (short) 0);
        java.lang.Integer int51 = dateTimeParserBucket47.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket47.setZone(dateTimeZone52);
        dateTimeParserBucket38.setZone(dateTimeZone52);
        java.util.TimeZone timeZone55 = dateTimeZone52.toTimeZone();
        long long57 = dateTimeZone52.convertUTCToLocal((long) 441);
        long long59 = dateTimeZone24.getMillisKeepLocal(dateTimeZone52, 635L);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime.Property property61 = dateTime60.millisOfSecond();
        org.joda.time.DateTime dateTime62 = property61.roundHalfCeilingCopy();
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2846437113600010L + "'", long29 == 2846437113600010L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.052" + "'", str31, "+00:00:00.052");
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 493L + "'", long57 == 493L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 635L + "'", long59 == 635L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test5466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5466");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26");
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.dayOfMonth();
        org.joda.time.DurationField durationField5 = chronology2.days();
        long long6 = durationField5.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = durationField5.getMillis(1648949167049L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1648949167049 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
    }

    @Test
    public void test5467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5467");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        boolean boolean21 = dateTimeField15.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((-592L));
        int int27 = property24.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = property24.addToCopy(593);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime29, 608, locale31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withCenturyOfEra(7);
        int int35 = localDateTime29.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int37 = localDateTime29.get(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.years();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.hourOfHalfday();
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "608" + "'", str32, "608");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 87 + "'", int37 == 87);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test5468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5468");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(715);
        org.joda.time.DateTime dateTime28 = dateTime24.minusHours(730);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime24.withDurationAdded(2056951784661L, 36000028);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 2056951784661 * 36000028");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.052" + "'", str23, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test5469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5469");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        dateTimeParserBucket5.saveField(dateTimeFieldType9, "it", locale11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.lang.Integer int22 = dateTimeParserBucket18.getOffsetInteger();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        boolean boolean25 = dateTimeFieldType9.isSupported(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.weekyears();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        java.lang.String str33 = dateTimeField31.getAsShortText(10L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        int int39 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime38.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = property42.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) '#');
        int[] intArray48 = chronology23.get((org.joda.time.ReadablePartial) localDateTime46, 163296000435L);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField50 = chronology23.monthOfYear();
        org.joda.time.ReadablePartial readablePartial51 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long53 = chronology23.set(readablePartial51, 41286615L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "70" + "'", str33, "70");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1975, 3, 6, 435]");
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test5470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5470");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        int int5 = dateTime1.getMillisOfSecond();
        org.joda.time.DateTime.Property property6 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime7 = property6.roundCeilingCopy();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        java.util.Locale locale15 = dateTimeParserBucket13.getLocale();
        boolean boolean16 = property6.equals((java.lang.Object) locale15);
        org.joda.time.DateTime dateTime17 = property6.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField18 = property6.getField();
        org.joda.time.DateTime dateTime20 = property6.setCopy("447");
        int int21 = dateTime20.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44722 + "'", int21 == 44722);
    }

    @Test
    public void test5471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5471");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        java.lang.Integer int19 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket15.setZone(dateTimeZone20);
        dateTimeParserBucket6.setZone(dateTimeZone20);
        java.lang.String str24 = dateTimeZone20.getNameKey((long) 25);
        long long26 = dateTimeZone20.previousTransition((long) 292278993);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        int int29 = dateTimeZone20.getOffsetFromLocal((-62167962726697L));
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(500L, dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDateTime30.getFieldType(64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 64");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 292278993L + "'", long26 == 292278993L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test5472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5472");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        int int7 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfDay();
        java.lang.String str9 = property8.getName();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((-1));
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfDay();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes(648);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds(569);
        org.joda.time.DateTime dateTime24 = dateTime20.plusDays(575);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology27, locale28, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, (int) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale37, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField41 = null;
        dateTimeParserBucket40.saveField(dateTimeField41, (int) (short) 0);
        java.lang.Integer int44 = dateTimeParserBucket40.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket40.setZone(dateTimeZone45);
        dateTimeParserBucket31.setZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket31.getZone();
        long long50 = dateTimeZone48.previousTransition((long) 593);
        org.joda.time.DateTime dateTime51 = dateTime24.withZone(dateTimeZone48);
        int int52 = property8.getDifference((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime53 = property8.getDateTime();
        int int54 = property8.getMaximumValueOverall();
        org.joda.time.DateTime dateTime56 = property8.addToCopy(0);
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfWeek();
        org.joda.time.DateTime dateTime59 = dateTime56.minusHours((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight60 = dateTime56.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 593L + "'", long50 == 593L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-49641120) + "'", int52 == (-49641120));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 86399 + "'", int54 == 86399);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight60);
    }

    @Test
    public void test5473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5473");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale7.getDisplayName();
        boolean boolean9 = locale7.hasExtensions();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale15, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField19 = null;
        dateTimeParserBucket18.saveField(dateTimeField19, (int) (short) 0);
        java.util.Locale locale22 = dateTimeParserBucket18.getLocale();
        java.util.Locale.setDefault(category12, locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property29 = dateTime26.centuryOfEra();
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = property29.getAsText(locale30);
        java.lang.String str33 = locale24.getDisplayName(locale30);
        java.lang.String str34 = locale30.getISO3Language();
        java.util.Locale.setDefault(category12, locale30);
        java.util.Set<java.lang.String> strSet36 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale30.getLanguage();
        java.lang.String str38 = locale30.toLanguageTag();
        java.util.Locale.setDefault(category0, locale30);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "it" + "'", str3, "it");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tedesco (Germania)" + "'", str8, "tedesco (Germania)");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "20" + "'", str32, "20");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "coreano" + "'", str33, "coreano");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ita" + "'", str34, "ita");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it" + "'", str37, "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
    }

    @Test
    public void test5474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5474");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int7 = dateTimeParserBucket5.getOffsetInteger();
        java.util.Locale locale8 = dateTimeParserBucket5.getLocale();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((-1));
        org.joda.time.DateTime dateTime26 = dateTime22.plusHours((int) (byte) 100);
        boolean boolean28 = dateTime26.isBefore((long) ' ');
        int int29 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime26);
        long long31 = dateTimeZone19.nextTransition((long) (short) -1);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.util.Locale locale33 = dateTimeParserBucket5.getLocale();
        java.lang.Integer int34 = dateTimeParserBucket5.getOffsetInteger();
        java.lang.Integer int35 = dateTimeParserBucket5.getOffsetInteger();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(int35);
    }

    @Test
    public void test5475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5475");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property24 = dateTime21.centuryOfEra();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = property24.getAsText(locale25);
        java.lang.String str28 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime18, (-1), locale25);
        java.util.Locale.setDefault(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 359, chronology3, locale25, (java.lang.Integer) 170, (int) (byte) 10);
        org.joda.time.DurationField durationField33 = chronology3.centuries();
        org.joda.time.DateTimeField dateTimeField34 = chronology3.monthOfYear();
        org.joda.time.DurationField durationField35 = chronology3.seconds();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "20" + "'", str27, "20");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1" + "'", str28, "-1");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test5476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5476");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket6.setZone(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale15.getDisplayName();
        dateTimeParserBucket6.saveField(dateTimeFieldType13, "97", locale15);
        java.lang.String str18 = locale0.getDisplayCountry(locale15);
        java.lang.String str19 = locale0.getVariant();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        int int26 = dateTimeField24.get((long) 779);
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.getDefault(category28);
        java.util.Locale locale30 = locale29.stripExtensions();
        java.lang.String str31 = dateTimeField24.getAsShortText(6406471180800673L, locale30);
        java.lang.String str32 = locale0.getDisplayCountry(locale30);
        java.lang.String str33 = locale30.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str16, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "China" + "'", str18, "China");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 24 + "'", int26 == 24);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "24" + "'", str31, "24");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u56fd" + "'", str32, "\u4e2d\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u6587" + "'", str33, "\u4e2d\u6587");
    }

    @Test
    public void test5477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5477");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury((int) '#');
        org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) 2022, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        boolean boolean12 = dateTimeZone11.isFixed();
        int int14 = dateTimeZone11.getOffset((long) 'x');
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readableDuration18);
        boolean boolean20 = dateTimeZone11.isLocalDateTimeGap(localDateTime19);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        dateTimeParserBucket26.setZone(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isFixed();
        boolean boolean44 = dateTimeZone40.isFixed();
        long long46 = dateTimeZone40.convertUTCToLocal((-1L));
        long long48 = dateTimeZone11.getMillisKeepLocal(dateTimeZone40, 3600000L);
        long long50 = dateTimeZone11.previousTransition((long) 490);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusMonths((int) (byte) 100);
        int[] intArray56 = localDateTime55.getValues();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusDays(4);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.minus(readableDuration59);
        int int61 = localDateTime55.getWeekOfWeekyear();
        org.joda.time.DateTimeField[] dateTimeFieldArray62 = localDateTime55.getFields();
        boolean boolean63 = dateTimeZone11.isLocalDateTimeGap(localDateTime55);
        java.lang.String str65 = dateTimeZone11.getShortName(608971L);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology68 = localDateTime67.getChronology();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = property69.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.minuteOfHour();
        int int74 = localDateTime70.getWeekyear();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.plusSeconds(1970);
        java.lang.String str77 = localDateTime70.toString();
        boolean boolean78 = dateTimeZone11.isLocalDateTimeGap(localDateTime70);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 51L + "'", long46 == 51L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3599948L + "'", long48 == 3599948L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 490L + "'", long50 == 490L);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1978, 5, 1, 87]");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 18 + "'", int61 == 18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01T00:00:00.999" + "'", str77, "1970-01-01T00:00:00.999");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test5478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5478");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfMinute();
        java.lang.String str17 = dateTimeField15.getAsShortText((long) 28);
        dateTimeParserBucket5.saveField(dateTimeField15, 100);
        dateTimeParserBucket5.setOffset(19);
        java.lang.Object obj22 = dateTimeParserBucket5.saveState();
        java.util.Locale locale26 = new java.util.Locale("\u671d\u9c9c\u6587", "", "100");
        java.util.Locale.setDefault(locale26);
        java.util.Set<java.lang.Character> charSet28 = locale26.getExtensionKeys();
        boolean boolean29 = dateTimeParserBucket5.restoreState((java.lang.Object) locale26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        java.lang.String str33 = dateTimeZone30.getNameKey(52L);
        long long37 = dateTimeZone30.convertLocalToUTC((long) 227, false, 1014721200000L);
        java.lang.String str38 = dateTimeZone30.getID();
        dateTimeParserBucket5.setZone(dateTimeZone30);
        int int41 = dateTimeZone30.getOffset((long) 181);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime43 = dateTime42.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(locale26.toString(), "\u671d\u9c9c\u6587__100");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 175L + "'", long37 == 175L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.052" + "'", str38, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test5479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5479");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField9 = chronology6.years();
        long long12 = durationField9.add((long) 892, 41156781L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1298782562457600892L + "'", long12 == 1298782562457600892L);
    }

    @Test
    public void test5480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5480");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusHours((int) (byte) 0);
        boolean boolean6 = dateTime4.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) 'a');
        boolean boolean11 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime();
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        java.lang.String str14 = chronology13.toString();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfHour();
        org.joda.time.DurationField durationField18 = durationFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology24, locale25, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField29 = null;
        dateTimeParserBucket28.saveField(dateTimeField29, (int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        java.lang.Integer int41 = dateTimeParserBucket37.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket37.setZone(dateTimeZone42);
        dateTimeParserBucket28.setZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket28.getZone();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone45);
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.util.Locale locale50 = java.util.Locale.getDefault(category48);
        java.lang.String str51 = dateTimeZone45.getShortName((long) 593, locale50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 272, dateTimeZone45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) chronology13, dateTimeZone45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.052]" + "'", str14, "ISOChronology[+00:00:00.052]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "\u671d\u9c9c\u6587__100");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "\u671d\u9c9c\u6587__100");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.052" + "'", str51, "+00:00:00.052");
    }

    @Test
    public void test5481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5481");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusSeconds((int) (byte) 1);
        int int9 = localDateTime8.size();
        java.lang.String str10 = localDateTime8.toString();
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        int int15 = dateTime13.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime13.minusYears(538);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = dateTime19.isBefore(readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime19.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime19.minusMillis(57);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology28, locale29, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField33 = null;
        dateTimeParserBucket32.saveField(dateTimeField33, (int) (short) 0);
        dateTimeParserBucket32.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.secondOfMinute();
        java.lang.String str44 = dateTimeField42.getAsShortText((long) 28);
        dateTimeParserBucket32.saveField(dateTimeField42, 100);
        dateTimeParserBucket32.setOffset(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket32.saveField(dateTimeFieldType49, 950);
        org.joda.time.DateTime.Property property52 = dateTime19.property(dateTimeFieldType49);
        boolean boolean53 = dateTime13.isSupported(dateTimeFieldType49);
        int int54 = localDateTime8.get(dateTimeFieldType49);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType49.getRangeDurationType();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:01.052" + "'", str10, "1970-01-01T00:00:01.052");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 27205 + "'", int15 == 27205);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNull(durationFieldType55);
    }

    @Test
    public void test5482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5482");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths(10);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMinutes(648);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(569);
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((-1));
        org.joda.time.DateTime dateTime19 = dateTime17.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology22, locale23, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField27 = null;
        dateTimeParserBucket26.saveField(dateTimeField27, (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology31, locale32, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField36 = null;
        dateTimeParserBucket35.saveField(dateTimeField36, (int) (short) 0);
        java.lang.Integer int39 = dateTimeParserBucket35.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket35.setZone(dateTimeZone40);
        dateTimeParserBucket26.setZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket26.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.lang.String str45 = dateTimeZone43.toString();
        java.lang.String str46 = dateTimeZone43.toString();
        long long48 = dateTimeZone20.getMillisKeepLocal(dateTimeZone43, (long) 23);
        org.joda.time.DateTime dateTime49 = dateTime13.toDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime13.getZone();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.withYearOfCentury((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int58 = dateTime56.get(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int63 = localDateTime60.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology66 = localDateTime65.getChronology();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime68 = property67.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.era();
        boolean boolean70 = localDateTime68.isSupported(dateTimeFieldType69);
        boolean boolean71 = localDateTime60.isSupported(dateTimeFieldType69);
        int int72 = dateTime56.get(dateTimeFieldType69);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType69.getDurationType();
        org.joda.time.Chronology chronology74 = null;
        boolean boolean75 = dateTimeFieldType69.isSupported(chronology74);
        int int76 = dateTime13.get(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.052" + "'", str45, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.052" + "'", str46, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 23L + "'", long48 == 23L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 453 + "'", int58 == 453);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test5483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5483");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField5 = chronology2.millis();
        java.lang.String str6 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        int int10 = dateTimeField8.getMaximumValue((long) 87);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours(28);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology19.seconds();
        org.joda.time.DurationField durationField24 = chronology19.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.era();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology19.clockhourOfDay();
        org.joda.time.DurationField durationField28 = dateTimeField27.getLeapDurationField();
        java.lang.String str30 = dateTimeField27.getAsShortText((long) 1);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology33, locale34, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField38 = null;
        dateTimeParserBucket37.saveField(dateTimeField38, (int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology42, locale43, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = null;
        dateTimeParserBucket46.saveField(dateTimeField47, (int) (short) 0);
        java.lang.Integer int50 = dateTimeParserBucket46.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket46.setZone(dateTimeZone51);
        dateTimeParserBucket37.setZone(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket37.getZone();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(3600000L, dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra(7);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology61);
        java.lang.String str63 = chronology61.toString();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.weekyear();
        org.joda.time.DateTimeField dateTimeField67 = chronology61.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.weekyearOfCentury();
        java.lang.String str75 = dateTimeField73.getAsShortText(10L);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str78 = dateTimeField73.getAsText(0L, locale77);
        java.lang.String str79 = dateTimeField67.getAsText(0, locale77);
        java.util.Locale locale80 = java.util.Locale.KOREA;
        int int81 = dateTimeField67.getMaximumShortTextLength(locale80);
        java.lang.String str83 = locale80.getUnicodeLocaleType("22");
        java.lang.String str84 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime57, 26748437, locale80);
        java.util.Locale locale86 = java.util.Locale.forLanguageTag("20");
        java.util.Locale locale87 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean88 = locale87.hasExtensions();
        java.lang.String str89 = locale86.getDisplayLanguage(locale87);
        java.lang.String str90 = locale80.getDisplayVariant(locale86);
        boolean boolean91 = locale86.hasExtensions();
        java.lang.String str92 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime12, 754, locale86);
        java.lang.String str93 = locale86.getDisplayVariant();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2922789 + "'", int10 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "24" + "'", str30, "24");
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ISOChronology[UTC]" + "'", str63, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "70" + "'", str75, "70");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "70" + "'", str78, "70");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 7 + "'", int81 == 7);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "26748437" + "'", str84, "26748437");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "754" + "'", str92, "754");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test5484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5484");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        java.util.Locale locale11 = dateTimeParserBucket7.getLocale();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusHours((int) (byte) 0);
        boolean boolean17 = dateTime15.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        int int22 = mutableDateTime20.get(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.DurationField durationField28 = chronology25.millis();
        boolean boolean29 = dateTimeFieldType21.isSupported(chronology25);
        dateTimeParserBucket7.saveField(dateTimeFieldType21, 0);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.months();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((-604818947L), chronology32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 426, chronology32);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "\u671d\u9c9c\u6587__100");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test5485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5485");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("445");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology5, locale6, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology10 = dateTimeParserBucket9.getChronology();
        java.util.Locale locale11 = dateTimeParserBucket9.getLocale();
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.Object[] objArray13 = strSet12.toArray();
        boolean boolean14 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusHours((int) (byte) 0);
        boolean boolean20 = dateTime18.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int) 'a');
        boolean boolean25 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime24.minusMillis((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        java.lang.String str34 = property32.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property32.getFieldType();
        int int36 = dateTime28.get(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property41 = dateTime38.centuryOfEra();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = property41.getAsText(locale42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours((int) (byte) 0);
        boolean boolean50 = dateTime48.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime48.toMutableDateTime(dateTimeZone51);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = dateTimeZone51.getName((long) (byte) 1, locale55);
        java.lang.String str57 = locale55.getScript();
        java.lang.String str58 = property41.getAsShortText(locale55);
        int int59 = property41.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property41.getFieldType();
        boolean boolean61 = dateTime28.isSupported(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType60.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withWeekyear((-1));
        org.joda.time.DateTime dateTime68 = dateTime64.plusHours((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.plus(readableDuration69);
        org.joda.time.DateTime dateTime72 = dateTime70.plusMonths((int) (short) 1);
        org.joda.time.DateTime dateTime74 = dateTime70.withYearOfCentury((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime74.toMutableDateTime();
        org.joda.time.Chronology chronology76 = mutableDateTime75.getChronology();
        org.joda.time.DurationField durationField77 = durationFieldType62.getField(chronology76);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(chronology76);
        java.util.Locale locale81 = new java.util.Locale("millis", "2035-02-22T07:25:52.174Z");
        java.util.Calendar calendar82 = dateTime78.toCalendar(locale81);
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleKeys();
        boolean boolean84 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet83);
        boolean boolean86 = strSet3.add("tedesco (Germania)");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "\u671d\u9c9c\u6587__100");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[millisOfSecond]" + "'", str34, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "it" + "'", str43, "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "20" + "'", str44, "20");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.052" + "'", str56, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "20" + "'", str58, "20");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertEquals(locale81.toString(), "millis_2035-02-22T07:25:52.174Z");
        org.junit.Assert.assertNotNull(calendar82);
// flaky:         org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=1645515205958,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=26,MILLISECOND=10,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test5486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5486");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket6.getChronology();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        java.lang.String str19 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        dateTimeParserBucket27.saveField(dateTimeFieldType31, "it", locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology17, locale33, (java.lang.Integer) 9, 538);
        java.lang.String str40 = nameProvider12.getShortName(locale33, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale41 = locale33.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology11, locale33, (java.lang.Integer) 26798222);
        org.joda.time.DateTimeField dateTimeField44 = chronology11.minuteOfDay();
        int int45 = dateTimeField44.getMinimumValue();
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test5487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5487");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray1 = strSet0.toArray();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology3, locale4, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField8 = null;
        dateTimeParserBucket7.saveField(dateTimeField8, (int) (short) 0);
        dateTimeParserBucket7.setOffset((java.lang.Integer) 2);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfMinute();
        java.lang.String str19 = dateTimeField17.getAsShortText((long) 28);
        dateTimeParserBucket7.saveField(dateTimeField17, 100);
        boolean boolean23 = dateTimeField17.isLeap((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy((-592L));
        int int29 = property26.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime31 = property26.addToCopy(593);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime31, 608, locale33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withCenturyOfEra(663);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minusMillis(52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime38.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = null; // flaky: strSet0.toArray(dateTimeFieldTypeArray39);
        java.util.Spliterator<java.lang.String> strSpliterator41 = strSet0.spliterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(objArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "608" + "'", str34, "608");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
// flaky:         org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(strSpliterator41);
    }

    @Test
    public void test5488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5488");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.Chronology chronology6 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.era();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = chronology6.get(readablePeriod10, (long) 27176604);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test5489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5489");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-1));
        org.joda.time.DateTime dateTime5 = dateTime1.plusHours((int) (byte) 100);
        boolean boolean7 = dateTime5.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours((int) (byte) 0);
        java.util.Date date12 = dateTime9.toDate();
        boolean boolean13 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property14 = dateTime9.centuryOfEra();
        int int15 = dateTime9.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime9.plus(readablePeriod16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(readableDuration18, 49);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology22, locale23, (java.lang.Integer) 227);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) '#', 837);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours((int) (byte) 0);
        java.util.Date date41 = dateTime38.toDate();
        org.joda.time.DateTime.Property property42 = dateTime38.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        boolean boolean44 = dateTime30.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekyear((-1));
        org.joda.time.DateTime.Property property50 = dateTime49.millisOfSecond();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Calendar calendar53 = dateTime49.toCalendar(locale51);
        java.lang.String str54 = locale51.getScript();
        dateTimeParserBucket28.saveField(dateTimeFieldType43, "Property[minuteOfDay]", locale51);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType43.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType43.getRangeDurationType();
        boolean boolean58 = dateTime17.isSupported(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusMillis(603);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime67.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withYearOfEra(676);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.plusMillis(603);
        int int84 = localDateTime83.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime83.plusSeconds(170);
        boolean boolean87 = localDateTime76.isAfter((org.joda.time.ReadablePartial) localDateTime86);
        boolean boolean88 = localDateTime63.isEqual((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime63.plusMinutes(92);
        org.joda.time.ReadableDuration readableDuration91 = null;
        org.joda.time.LocalDateTime localDateTime92 = localDateTime63.minus(readableDuration91);
        org.joda.time.ReadableInstant readableInstant93 = null;
        org.joda.time.DateTime dateTime94 = localDateTime63.toDateTime(readableInstant93);
        org.joda.time.Chronology chronology95 = localDateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField96 = dateTimeFieldType43.getField(chronology95);
        org.joda.time.DateTimeField dateTimeField97 = chronology95.year();
        org.joda.time.DurationField durationField98 = dateTimeField97.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:33:26 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u671d\u9c9c\u6587" + "'", str25, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ko" + "'", str26, "ko");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Feb 22 07:33:26 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=-62194148793773,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.052,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=25,DAY_OF_YEAR=56,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=26,MILLISECOND=279,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(durationField98);
    }

    @Test
    public void test5490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5490");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.secondOfDay();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology3);
        org.joda.time.DurationField durationField10 = chronology3.weeks();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale13.getLanguage();
        java.util.Set<java.lang.Character> charSet15 = locale13.getExtensionKeys();
        java.util.Locale.setDefault(category11, locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(1645487999948L, chronology3, locale13, (java.lang.Integer) 407, 195);
        java.util.Locale locale20 = dateTimeParserBucket19.getLocale();
        long long23 = dateTimeParserBucket19.computeMillis(false, "2022-02-22T07:33:11.913+00:00:00.052");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645487999948L + "'", long23 == 1645487999948L);
    }

    @Test
    public void test5491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5491");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours((int) (byte) 0);
        boolean boolean5 = dateTime3.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) 'a');
        boolean boolean10 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(392);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour((int) (short) 10);
        int int28 = dateTime27.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime27.withDurationAdded(readableDuration29, (int) (byte) 0);
        org.joda.time.DateTime dateTime32 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours((int) (byte) 0);
        boolean boolean40 = dateTime38.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime38.toMutableDateTime(dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        int int45 = mutableDateTime43.get(dateTimeFieldType44);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfMinute();
        org.joda.time.DurationField durationField51 = chronology48.millis();
        boolean boolean52 = dateTimeFieldType44.isSupported(chronology48);
        org.joda.time.DurationField durationField53 = chronology48.centuries();
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.lang.String str55 = locale54.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 999, chronology48, locale54);
        java.lang.String str57 = locale54.getISO3Country();
        java.lang.String str58 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, 517, locale54);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime62 = property61.roundHalfEvenCopy();
        int int63 = localDateTime62.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.ReadableInstant readableInstant66 = null;
        int int67 = dateTimeZone65.getOffset(readableInstant66);
        java.util.Locale locale69 = java.util.Locale.UK;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now(chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(chronology77);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone80);
        org.joda.time.DateTime dateTime83 = dateTime81.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property84 = dateTime81.centuryOfEra();
        java.util.Locale locale85 = java.util.Locale.ITALIAN;
        java.lang.String str86 = locale85.getLanguage();
        java.lang.String str87 = property84.getAsText(locale85);
        java.lang.String str88 = dateTimeField74.getAsText((org.joda.time.ReadablePartial) localDateTime78, (-1), locale85);
        java.util.Set<java.lang.Character> charSet89 = locale85.getExtensionKeys();
        java.lang.String str90 = locale69.getDisplayLanguage(locale85);
        java.lang.String str91 = dateTimeZone65.getName((long) 245, locale69);
        java.lang.String str92 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime62, 678, locale69);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime62.minusHours(734);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime94.withMillisOfDay(1419);
        org.joda.time.Chronology chronology97 = localDateTime94.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "it" + "'", str55, "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "517" + "'", str58, "517");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "it" + "'", str86, "it");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "20" + "'", str87, "20");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "-1" + "'", str88, "-1");
        org.junit.Assert.assertNotNull(charSet89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "inglese" + "'", str90, "inglese");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:00.052" + "'", str91, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "678" + "'", str92, "678");
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    public void test5492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5492");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getMillisOfSecond();
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfHour();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property13 = dateTime10.centuryOfEra();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = property13.getAsText(locale14);
        java.lang.String str17 = locale8.getDisplayName(locale14);
        int int18 = property7.getMaximumTextLength(locale14);
        java.util.Set<java.lang.String> strSet19 = locale14.getUnicodeLocaleAttributes();
        boolean boolean20 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet19);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        int int27 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTime.Property property28 = dateTime25.minuteOfHour();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property34 = dateTime31.centuryOfEra();
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale35.getLanguage();
        java.lang.String str37 = property34.getAsText(locale35);
        java.lang.String str38 = locale29.getDisplayName(locale35);
        int int39 = property28.getMaximumTextLength(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleAttributes();
        boolean boolean41 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet40);
        strSet40.clear();
        boolean boolean43 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet40);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology45, locale46, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, (int) (short) 0);
        java.lang.Integer int53 = dateTimeParserBucket49.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket49.setZone(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withWeekyear((-1));
        org.joda.time.DateTime dateTime61 = dateTime57.plusHours((int) (byte) 100);
        boolean boolean63 = dateTime61.isBefore((long) ' ');
        int int64 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime66 = dateTime61.minusYears(20);
        org.joda.time.DateTime.Property property67 = dateTime66.hourOfDay();
        org.joda.time.DateTime dateTime68 = property67.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property69 = dateTime68.millisOfSecond();
        org.joda.time.DateTime dateTime71 = dateTime68.plusHours(840);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean73 = dateTime71.isSupported(dateTimeFieldType72);
        org.joda.time.DateTime.Property property74 = dateTime71.year();
        boolean boolean75 = strSet40.contains((java.lang.Object) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone77 = dateTimeZone76.toTimeZone();
        java.lang.String str78 = dateTimeZone76.toString();
        java.lang.String str80 = dateTimeZone76.getName(100L);
        boolean boolean81 = strSet40.remove((java.lang.Object) 100L);
        java.util.Iterator<java.lang.String> strItor82 = strSet40.iterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 637 + "'", int6 == 637);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "20" + "'", str16, "20");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "coreano" + "'", str17, "coreano");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 638 + "'", int27 == 638);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "it" + "'", str36, "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "20" + "'", str37, "20");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "coreano" + "'", str38, "coreano");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.052" + "'", str78, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:00.052" + "'", str80, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strItor82);
    }

    @Test
    public void test5493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5493");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        java.lang.Integer int9 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test5494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5494");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(38);
        int int9 = property6.getMinimumValueOverall();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology11, locale12, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = null;
        dateTimeParserBucket15.saveField(dateTimeField16, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        dateTimeParserBucket15.saveField(dateTimeFieldType19, "it", locale21);
        int int23 = dateTimeParserBucket15.getOffset();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(59);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology34 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property41 = dateTime38.centuryOfEra();
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = property41.getAsText(locale42);
        java.lang.String str45 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime35, (-1), locale42);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = dateTimeField31.getAsShortText((int) (byte) 10, locale47);
        long long51 = dateTimeField31.roundHalfFloor((long) 122);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar57 = dateTime56.toGregorianCalendar();
        int int58 = dateTime56.getMillisOfSecond();
        org.joda.time.DateTime.Property property59 = dateTime56.minuteOfHour();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property65 = dateTime62.centuryOfEra();
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str68 = property65.getAsText(locale66);
        java.lang.String str69 = locale60.getDisplayName(locale66);
        int int70 = property59.getMaximumTextLength(locale66);
        java.util.Set<java.lang.String> strSet71 = locale66.getUnicodeLocaleAttributes();
        java.lang.String str72 = dateTimeField31.getAsText((int) (short) 100, locale66);
        java.lang.String str73 = dateTimeZone25.getName((long) 647, locale66);
        dateTimeParserBucket15.setZone(dateTimeZone25);
        dateTimeParserBucket15.setOffset(392);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.lang.String str80 = locale79.getLanguage();
        dateTimeParserBucket15.saveField(dateTimeFieldType77, "753", locale79);
        int int82 = property6.getMaximumShortTextLength(locale79);
        org.joda.time.LocalDateTime localDateTime84 = property6.addWrapFieldToCopy(0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "it" + "'", str43, "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "20" + "'", str44, "20");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "it" + "'", str48, "it");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "10" + "'", str49, "10");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(gregorianCalendar57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 820 + "'", int58 == 820);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it" + "'", str67, "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "20" + "'", str68, "20");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "coreano" + "'", str69, "coreano");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "100" + "'", str72, "100");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.059" + "'", str73, "+00:00:00.059");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ko" + "'", str80, "ko");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertNotNull(localDateTime84);
    }

    @Test
    public void test5495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5495");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfEra(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfSecond((int) ' ');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        dateTimeParserBucket14.saveField(dateTimeFieldType18, "it", locale20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.property(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime8.withMillisOfDay(990);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withCenturyOfEra((int) '#');
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int39 = localDateTime35.get(dateTimeFieldType38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology42);
        java.lang.String str44 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.weekOfWeekyear();
        boolean boolean46 = dateTimeFieldType38.isSupported(chronology42);
        org.joda.time.LocalDateTime.Property property47 = localDateTime29.property(dateTimeFieldType38);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType38.getRangeDurationType();
        java.lang.String str49 = durationFieldType48.toString();
        boolean boolean50 = localDateTime8.isSupported(durationFieldType48);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "weekyears" + "'", str49, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test5496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5496");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology1, locale2, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField6 = null;
        dateTimeParserBucket5.saveField(dateTimeField6, (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology10, locale11, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField15 = null;
        dateTimeParserBucket14.saveField(dateTimeField15, (int) (short) 0);
        java.lang.Integer int18 = dateTimeParserBucket14.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket14.setZone(dateTimeZone19);
        dateTimeParserBucket5.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.getName((long) 'u');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(715);
        org.joda.time.DateTime dateTime28 = dateTime24.minusHours(730);
        org.joda.time.DateTime.Property property29 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime30 = property29.roundFloorCopy();
        org.joda.time.DateTime dateTime31 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours((int) (byte) 0);
        boolean boolean37 = dateTime35.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime35.toMutableDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime35.minus((long) 26748437);
        org.joda.time.DateTime dateTime44 = dateTime35.plus((long) 86399);
        org.joda.time.DateTime dateTime46 = dateTime35.plusMonths(516);
        boolean boolean47 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.parse("70");
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(308);
        boolean boolean52 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = dateTime31.withTimeAtStartOfDay();
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.052" + "'", str23, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test5497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5497");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime2.centuryOfEra();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = property5.getAsText(locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours((int) (byte) 0);
        boolean boolean14 = dateTime12.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime12.toMutableDateTime(dateTimeZone15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeZone15.getName((long) (byte) 1, locale19);
        java.lang.String str21 = locale19.getScript();
        java.lang.String str22 = property5.getAsShortText(locale19);
        java.lang.String str23 = locale19.getDisplayScript();
        java.lang.String str26 = nameProvider0.getName(locale19, "\u671d\u9c9c\u6587", "+00:00:00.052");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale32 = new java.util.Locale("1970-01-01T00:00:00.052", "", "2022-02-22T07:26:02.913+00:00:00.052");
        java.lang.String str35 = nameProvider0.getName(locale32, "DEU", "2022-02-22T07:27:30.244+00:00:00.052");
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours((int) (byte) 0);
        boolean boolean41 = dateTime39.isEqual((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime39.toMutableDateTime(dateTimeZone42);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = dateTimeZone42.getName((long) (byte) 1, locale46);
        java.lang.String str48 = locale46.getScript();
        java.lang.String str51 = nameProvider0.getName(locale46, "0010-02-22T07:26:36.388", "+00:00:00.070");
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology53, locale54, (java.lang.Integer) (-1), (int) (byte) -1);
        long long59 = dateTimeParserBucket57.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusWeeks((int) 'a');
        java.util.GregorianCalendar gregorianCalendar64 = dateTime63.toGregorianCalendar();
        int int65 = dateTime63.getMillisOfSecond();
        org.joda.time.DateTime.Property property66 = dateTime63.minuteOfHour();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property72 = dateTime69.centuryOfEra();
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.lang.String str74 = locale73.getLanguage();
        java.lang.String str75 = property72.getAsText(locale73);
        java.lang.String str76 = locale67.getDisplayName(locale73);
        int int77 = property66.getMaximumTextLength(locale73);
        java.util.Set<java.lang.String> strSet78 = locale73.getUnicodeLocaleAttributes();
        int int79 = strSet78.size();
        boolean boolean80 = dateTimeParserBucket57.restoreState((java.lang.Object) int79);
        java.lang.Object obj81 = dateTimeParserBucket57.saveState();
        java.util.Locale locale82 = dateTimeParserBucket57.getLocale();
        java.lang.String str83 = locale82.getDisplayCountry();
        java.util.Set<java.lang.String> strSet84 = locale82.getUnicodeLocaleAttributes();
        java.lang.String str87 = nameProvider0.getName(locale82, "+435:00", "");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it" + "'", str7, "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20" + "'", str8, "20");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.052" + "'", str20, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20" + "'", str22, "20");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals(locale32.toString(), "1970-01-01t00:00:00.052__2022-02-22T07:26:02.913+00:00:00.052");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.052" + "'", str47, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-52L) + "'", long59 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(gregorianCalendar64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 986 + "'", int65 == 986);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "it" + "'", str74, "it");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "20" + "'", str75, "20");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "coreano" + "'", str76, "coreano");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(locale82);
// flaky:         org.junit.Assert.assertEquals(locale82.toString(), "it");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test5498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5498");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(chronology3);
        java.lang.String str5 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology9, locale10, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField14 = null;
        dateTimeParserBucket13.saveField(dateTimeField14, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        dateTimeParserBucket13.saveField(dateTimeFieldType17, "it", locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology3, locale19, (java.lang.Integer) 9, 538);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField30 = chronology26.millis();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology26.getZone();
        long long33 = dateTimeZone31.convertUTCToLocal((long) 558);
        dateTimeParserBucket23.setZone(dateTimeZone31);
        java.util.Locale locale35 = dateTimeParserBucket23.getLocale();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 558L + "'", long33 == 558L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test5499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5499");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology2, locale3, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, (int) (short) 0);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket6.getChronology();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        java.lang.String str19 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology23, locale24, (java.lang.Integer) (-1), (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField28 = null;
        dateTimeParserBucket27.saveField(dateTimeField28, (int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        dateTimeParserBucket27.saveField(dateTimeFieldType31, "it", locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 241, chronology17, locale33, (java.lang.Integer) 9, 538);
        java.lang.String str40 = nameProvider12.getShortName(locale33, "millisOfSecond", "2022-02-22T07:25:56.854+00:00:00.052");
        java.util.Locale locale41 = locale33.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 26810000, chronology11, locale33, (java.lang.Integer) 26798222);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusHours(118);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.plusMinutes(165);
        long long60 = chronology11.set((org.joda.time.ReadablePartial) localDateTime58, (long) 272);
        org.joda.time.DateTimeField dateTimeField61 = chronology11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.withWeekyear((-1));
        org.joda.time.DateTime dateTime68 = dateTime66.plusMonths(10);
        org.joda.time.DateTime.Property property69 = dateTime68.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.plusHours((int) (byte) 0);
        java.util.Date date74 = dateTime71.toDate();
        org.joda.time.DateTime.Property property75 = dateTime71.dayOfMonth();
        org.joda.time.DateTime.Property property76 = dateTime71.dayOfMonth();
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.lang.String str78 = locale77.getLanguage();
        java.lang.String str79 = property76.getAsText(locale77);
        java.lang.String str80 = property69.getAsShortText(locale77);
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime83 = org.joda.time.DateTime.now(dateTimeZone82);
        org.joda.time.DateTime dateTime85 = dateTime83.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property86 = dateTime83.centuryOfEra();
        java.util.Locale locale87 = java.util.Locale.ITALIAN;
        java.lang.String str88 = locale87.getLanguage();
        java.lang.String str89 = property86.getAsText(locale87);
        java.lang.String str90 = locale81.getDisplayName(locale87);
        java.lang.String str91 = locale77.getDisplayScript(locale81);
        java.util.Locale locale92 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str93 = locale92.getLanguage();
        java.lang.String str94 = locale77.getDisplayCountry(locale92);
        boolean boolean95 = locale92.hasExtensions();
        java.lang.String str96 = dateTimeField61.getAsText(1679270400000L, locale92);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31526099000L) + "'", long60 == (-31526099000L));
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(date74);
// flaky:         org.junit.Assert.assertEquals(date74.toString(), "Tue Feb 22 07:33:27 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "it" + "'", str78, "it");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "22" + "'", str79, "22");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "453" + "'", str80, "453");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "it");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "it" + "'", str88, "it");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "20" + "'", str89, "20");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "coreano" + "'", str90, "coreano");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "zh" + "'", str93, "zh");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2023" + "'", str96, "2023");
    }

    @Test
    public void test5500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5500");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("70");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusYears(4);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusHours(840);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear((-1));
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DurationField durationField21 = chronology17.seconds();
        org.joda.time.DurationField durationField22 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.monthOfYear();
        int int25 = dateTime14.get(dateTimeField24);
        org.joda.time.DateTime dateTime27 = dateTime14.plusYears(2022);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime30 = dateTime14.withDurationAdded(readableDuration28, 555);
        org.joda.time.DateTime.Property property31 = dateTime14.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear((-1));
        org.joda.time.DateTime dateTime37 = dateTime33.plusHours((int) (byte) 100);
        boolean boolean39 = dateTime37.isBefore((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours((int) (byte) 0);
        java.util.Date date44 = dateTime41.toDate();
        boolean boolean45 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime37.getZone();
        int int47 = property31.getDifference((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime48 = property31.getDateTime();
        org.joda.time.DateTime.Property property49 = dateTime48.monthOfYear();
        org.joda.time.DateTime dateTime50 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Feb 22 07:33:27 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1063564080) + "'", int47 == (-1063564080));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
    }
}
